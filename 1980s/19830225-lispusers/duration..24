(FILECREATED "24-DEC-82 23:13:08" {PHYLUM}<LISPUSERS>DURATION.;25 19144  

      changes to:  (FNS \DURATIONTRAN TIMEREXPIRED? \CLISPKEYWORDPROCESS)
		   (VARS DURATIONCOMS)
		   (PROPS (CLOCK 10MACRO)
			  (IDATE 10MACRO))
		   (MACROS \MACRO.EVAL NNLITATOM)

      previous date: "30-NOV-82 00:35:59" {PHYLUM}<LISPUSERS>DURATION.;23)


(* Copyright (c) 1982 by Xerox Corporation)

(PRETTYCOMPRINT DURATIONCOMS)

(RPAQQ DURATIONCOMS ((* time-limited evaluation stuff)
		     (DECLARE: EVAL@COMPILE DONTCOPY (MACROS \MACRO.MX \MACRO.EVAL NNLITATOM)
			       (MACROS CLOCK IDATE))
		     (MACROS SETUPTIMER SETUPTIMER.DATE)
		     (FNS SETUPTIMER SETUPTIMER.DATE TIMEREXPIRED?)
		     (MACROS \RCLOCK0)
		     (FNS \RCLOCK0 \SETUPTIMERmacrofn)
		     (INITVARS (\TIMEREXPIRED.BOX (SETUPTIMER 0))
			       (\RCLK.ticsperms (SELECTQ (SYSTEMTYPE)
							 (D (SELECTQ (MACHINETYPE)
								     (DANDELION 35)
								     1680))
							 1))
			       (\RCLK.ticspersecond (SELECTQ (SYSTEMTYPE)
							     (D (SELECTQ (MACHINETYPE)
									 (DANDELION 34746)
									 1680000))
							     1000)))
		     (GLOBALVARS \TIMEREXPIRED.BOX \RCLK.ticsperms \RCLK.ticspersecond)
		     (VARS DURATIONCLISPWORDS)
		     (FNS \DURATIONTRAN \CLISPKEYWORDPROCESS)
		     (PROP CLISPWORD * (APPLY (QUOTE APPEND)
					      DURATIONCLISPWORDS))
		     (ALISTS * (LIST (CONS (QUOTE PRETTYEQUIVLST)
					   (APPLY (QUOTE APPEND)
						  DURATIONCLISPWORDS))))
		     (P (SELECTQ (SYSTEMTYPE)
				 (D (MOVD? (QUOTE CLOCK0)
					   (QUOTE \CLOCK0)))
				 NIL))))



(* time-limited evaluation stuff)

(DECLARE: EVAL@COMPILE DONTCOPY 
(DECLARE: EVAL@COMPILE 

(PUTPROPS \MACRO.MX MACRO (Z
  (PROG ((X (EXPANDMACRO (CAR Z)
			 T)))
        (COND
	  ((EQ X (CAR Z))
	    (ERROR "No macro property -- \MACRO.MX" X))
	  (T (RETURN X))))))

(PUTPROPS \MACRO.EVAL MACRO (Z
  (PROG ((X (EXPANDMACRO (CAR Z)
			 T)))
        (COND
	  ((EQ X (CAR Z))
	    (ERROR "No macro property -- \MACRO.EVAL" X))
	  (T (RETURN (EVAL X)))))))

(PUTPROPS NNLITATOM MACRO (OPENLAMBDA (X)
  (AND X (LITATOM X))))

(PUTPROPS NNLITATOM DMACRO (OPENLAMBDA (X)
  (AND X (LITATOM X))))
)

(DECLARE: EVAL@COMPILE 

(PUTPROPS CLOCK 10MACRO (X
  (SELECTQ (CAR X)
	   (0 (QUOTE (LOC (ASSEMBLE NIL
				    (JSYS 14Q)))))
	   (3 (QUOTE (LOC (ASSEMBLE NIL
				    (MOVE 1 , GCTIM)))))
	   (QUOTE IGNOREMACRO))))

(PUTPROPS IDATE 10MACRO (X
  (COND
    ((NULL (CAR X))
      (QUOTE (LOC (ASSEMBLE NIL
			    (JSYS 227Q)))))
    (T (QUOTE IGNOREMACRO)))))
)
)
(DECLARE: EVAL@COMPILE 

(PUTPROPS SETUPTIMER MACRO (X
  (\SETUPTIMERmacrofn X)))

(PUTPROPS SETUPTIMER.DATE MACRO ((DTS BOX)
  (SETUPTIMER (IDIFFERENCE (IDATE DTS)
			   (IDATE))
	      BOX
	      (QUOTE SECS))))
)
(DEFINEQ

(SETUPTIMER
  (LAMBDA (INTERVAL \FIXPbox? timerUnits intervalUnits)      (* JonL "30-NOV-82 00:33")
    (PROG NIL
          (SELECTQ (SYSTEMTYPE)
		   (D (if (NULL \FIXPbox?)
			  then (SETQ \FIXPbox? (NCREATE (QUOTE FIXP)))
			elseif (NEQ \FIXP (NTYPX \FIXPbox?))
			  then (LISPERROR "ILLEGAL ARG" \FIXPbox?)))
		   NIL)
          (SELECTQ (U-CASE timerUnits)
		   ((TICS RCLK TICKS)
		     (SELECTQ (SYSTEMTYPE)
			      (D (\RCLOCK0 \FIXPbox?))
			      (SETQ \FIXPbox? (CLOCK 0)))
		     (SELECTQ intervalUnits
			      ((NIL TICS RCLK TICKS)
				NIL)
			      ((MS MILLISECS MILLISECONDS)
				(SETQ INTERVAL (ITIMES \RCLK.ticsperms INTERVAL)))
			      ((SECS SECONDS)
				(SETQ INTERVAL (ITIMES \RCLK.ticspersecond INTERVAL)))
			      (GO IERROR)))
		   ((NIL MS MILS MILLISECS MILLISECONDS)
		     (SELECTQ (SYSTEMTYPE)
			      (D (\CLOCK0 \FIXPbox?))
			      (SETQ \FIXPbox? (CLOCK 0)))
		     (SELECTQ intervalUnits
			      ((NIL MS MILLISECS MILLISECONDS)
				NIL)
			      ((TICS RCLK TICKS)
				(SETQ INTERVAL (IQUOTIENT INTERVAL \RCLK.ticsperms)))
			      ((SECS SECONDS)
				(SETQ INTERVAL (ITIMES 1000 INTERVAL)))
			      (GO IERROR)))
		   ((SECS SECONDS)
		     (SELECTQ (SYSTEMTYPE)
			      (D (\DAYTIME0 \FIXPbox?))
			      (SETQ \FIXPbox? (IQUOTIENT (CLOCK 0)
							 1000)))
		     (SELECTQ intervalUnits
			      ((NIL SECS SECONDS)
				NIL)
			      ((MS MILLISECS MILLISECONDS)
				(SETQ INTERVAL (IQUOTIENT INTERVAL 1000)))
			      ((TICS RCLK TICKS)
				(SETQ INTERVAL (IQUOTIENT INTERVAL \RCLK.ticspersecond)))
			      (GO IERROR)))
		   (GO TERROR))
          (RETURN (SELECTQ (SYSTEMTYPE)
			   (D (\BOXIPLUS \FIXPbox? INTERVAL))
			   (IPLUS \FIXPbox? INTERVAL)))
      TERROR
          (SETERRORN 14 timerUnits)
          (ERRORX)
      IERROR
          (SETERRORN 14 intervalUnits)
          (ERRORX))))

(SETUPTIMER.DATE
  (LAMBDA (DTS \FIXPbox?)                                    (* JonL "15-NOV-82 17:13")
    (\MACRO.MX (SETUPTIMER.DATE DTS \FIXPbox?))))

(TIMEREXPIRED?
  (LAMBDA (TIMER ClockValue.or.timerUnits)                   (* JonL "24-DEC-82 22:41")
    (SELECTQ (SYSTEMTYPE)
	     (D                                              (* Assumes that "time" counters are 32-bit 
							     (cell sized))
		(UNINTERRUPTABLY
                    (IGEQ (\BOXIDIFFERENCE (if (NULL ClockValue.or.timerUnits)
					       then (\CLOCK0 \TIMEREXPIRED.BOX)
					     elseif (EQ ClockValue.or.timerUnits (QUOTE TICS))
					       then (\RCLOCK0 \TIMEREXPIRED.BOX)
					     elseif (FIXP ClockValue.or.timerUnits)
					       then (\MOVETOBOX ClockValue.or.timerUnits 
								\TIMEREXPIRED.BOX)
						    \TIMEREXPIRED.BOX
					     else (SELECTQ ClockValue.or.timerUnits
							   ((MS MILS MILLISECS MILLISECONDS)
							     (\CLOCK0 \TIMEREXPIRED.BOX))
							   ((SECS SECONDS)
							     (\DAYTIME0 \TIMEREXPIRED.BOX))
							   ((TICS RCLK TICKS)
							     (\RCLOCK0 \TIMEREXPIRED.BOX))
							   (\ILLEGAL.ARG ClockValue.or.timerUnits)))
					   TIMER)
			  0)))
	     (if (FMEMB ClockValue.or.timerUnits (QUOTE (NIL MS MILS MILLISECS MILLISECONDS TICS 
							     TICKS)))
		 then                                        (* Do it this way so that Interlisp-10 compiler can 
							     optimize out the boxing.)
		      (IGREATERP (IDIFFERENCE (CLOCK 0)
					      TIMER)
				 0)
	       elseif (FIXP ClockValue.or.timerUnits)
		 then (IGREATERP (IDIFFERENCE ClockValue.or.timerUnits TIMER)
				 0)
	       elseif (OR (EQ ClockValue.or.timerUnits (QUOTE SECONDS))
			  (EQ ClockValue.or.timerUnits (QUOTE SECS)))
		 then (IGREATERP (IDIFFERENCE (IQUOTIENT (CLOCK 0)
							 1000)
					      TIMER)
				 0)
	       else (SETERRORN 27 ClockValue.or.timerUnits)
		    (ERRORX)))))
)
(DECLARE: EVAL@COMPILE 

(PUTPROPS \RCLOCK0 DMACRO ((BOX)
  (\RCLK (\DTEST BOX (QUOTE FIXP)))))
)
(DEFINEQ

(\RCLOCK0
  (LAMBDA (BOX)                                              (* JonL "21-NOV-82 16:38")
    (SELECTQ (SYSTEMTYPE)
	     (D (\MACRO.MX (\RCLOCK0 BOX)))
	     (SHOULDNT))))

(\SETUPTIMERmacrofn
  (LAMBDA (X outputTimeUnits intputTimeUnits)               (* JonL "29-NOV-82 20:40")

          (* This function wants to be compiled since it produces the value of \FIXP as seen in the compile environment, 
	  rather than a GVAR fetch of \FIXP in the runtime environment (unfortunately, \FIXP may not exist in the vanilla 
	  environment.))


    (PROG ((INTERVAL (CAR X))
	   (BOX (CADR X))
	   (outputTimeUnits (CADDR X))
	   (intputTimeUnits (CADDDR X))
	   CLOCKer)
          (if (OR (NOT (CONSTANTEXPRESSIONP outputTimeUnits))
		  (NOT (CONSTANTEXPRESSIONP intputTimeUnits)))
	      then (RETURN (QUOTE IGNOREMACRO)))
          (SETQ outputTimeUnits (SELECTQ (U-CASE (EVAL outputTimeUnits))
					 ((NIL MS MILS MILLISECS MILLISECONDS)
					   (QUOTE MILS))
					 ((TICS RCLK TICKS)
					   (QUOTE TICS))
					 ((SECS SECONDS)
					   (QUOTE SECS))
					 (PROGN (SETERRORN 27 outputTimeUnits)
						(ERRORX))))
          (SETQ intputTimeUnits (SELECTQ (U-CASE (EVAL intputTimeUnits))
					 (NIL outputTimeUnits)
					 ((MS MILS MILLISECS MILLISECONDS)
					   (QUOTE MILS))
					 ((TICS RCLK TICKS)
					   (QUOTE TICS))
					 ((SECS SECONDS)
					   (QUOTE SECS))
					 (PROGN (SETERRORN 27 intputTimeUnits)
						(ERRORX))))
          (SELECTQ outputTimeUnits
		   ((MILS)
		     (SETQ CLOCKer (SELECTQ (SYSTEMTYPE)
					    (D (QUOTE \CLOCK0))
					    (QUOTE (CLOCK 0))))
		     (SELECTQ intputTimeUnits
			      (MILS NIL)
			      (TICS (SETQ INTERVAL (BQUOTE (IQUOTIENT , INTERVAL \RCLK.ticsperms))))
			      (SECS (SETQ INTERVAL (BQUOTE (ITIMES , INTERVAL 1000))))
			      (SHOULDNT)))
		   ((TICS)
		     (SETQ CLOCKer (SELECTQ (SYSTEMTYPE)
					    (D (QUOTE \RCLOCK0))
					    (QUOTE (CLOCK 0))))
		     (SELECTQ intputTimeUnits
			      (TICS NIL)
			      (MILS (SETQ INTERVAL (BQUOTE (ITIMES , INTERVAL \RCLK.ticsperms))))
			      (SECS (SETQ INTERVAL (BQUOTE (ITIMES , INTERVAL \RCLK.ticspersecond))))
			      (SHOULDNT)))
		   ((SECS)
		     (SETQ CLOCKer (SELECTQ (SYSTEMTYPE)
					    (D (QUOTE \DAYTIME0))
					    (QUOTE (IQUOTIENT (CLOCK 0)
							      1000))))
		     (SELECTQ intputTimeUnits
			      (SECS NIL)
			      (MILS (SETQ INTERVAL (BQUOTE (IQUOTIENT , INTERVAL 1000))))
			      (TICS (SETQ INTERVAL (BQUOTE (IQUOTIENT , INTERVAL \RCLK.ticspersecond))
				      ))
			      (SHOULDNT)))
		   (SHOULDNT))
          (RETURN (SELECTQ (SYSTEMTYPE)
			   (D (if (NULL BOX)
				  then (BQUOTE (\BOXIPLUS (, CLOCKer (NCREATE (QUOTE FIXP)))
							  , INTERVAL))
				elseif (LITATOM BOX)
				  then                      (* Someday, this test should be extended from LITATOM, 
							    to include LISPFORM.SIMPLIFY processing, and check for 
							    ARGSCOMMUTABLEP of BOX and INTERVAL)
				       (BQUOTE (\BOXIPLUS (, CLOCKer (if (EQ , \FIXP
									     (NTYPX , BOX))
									 then , BOX
								       else (NCREATE (QUOTE FIXP))))
							  , INTERVAL))
				else (BQUOTE ((LAMBDA (\Interval \Box)
						 (DECLARE (LOCALVARS \Interval \Box))
						 (\BOXIPLUS (, CLOCKer (if (EQ , \FIXP (NTYPX \Box))
									   then \Box
									 else (NCREATE (QUOTE FIXP))))
							    \Interval))
					       , INTERVAL , BOX))))
			   (LIST (QUOTE IPLUS)
				 INTERVAL CLOCKer))))))
)

(RPAQ? \TIMEREXPIRED.BOX (SETUPTIMER 0))

(RPAQ? \RCLK.ticsperms (SELECTQ (SYSTEMTYPE)
				(D (SELECTQ (MACHINETYPE)
					    (DANDELION 35)
					    1680))
				1))

(RPAQ? \RCLK.ticspersecond (SELECTQ (SYSTEMTYPE)
				    (D (SELECTQ (MACHINETYPE)
						(DANDELION 34746)
						1680000))
				    1000))
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS \TIMEREXPIRED.BOX \RCLK.ticsperms \RCLK.ticspersecond)
)

(RPAQQ DURATIONCLISPWORDS ((TIMERUNITS timerUnits TimerUnits timerunits)
			   (USINGBOX usingBox UsingBox usingbox)
			   (FORDURATION forDuration forduration ForDuration FORDURATIONOF 
					forDurationOf fordurationof ForDurationOf DURING during)
			   (RESOURCENAME resourceName ResourceName resourcename)
			   (UNTILDATE untilDate untildate UNTILDATETIME UntilDate untildatetime 
				      untilDateTime UntilDateTime)))
(DEFINEQ

(\DURATIONTRAN
  (LAMBDA (FORM)                                             (* JonL "24-DEC-82 23:11")
    (PROG ((BODY FORM)
	   (BOXNAME)
	   (EXPANSION)
	   (SETUPFORM (QUOTE (SETUPTIMER FORDURATION BOXNAME . TIMERUNITSLST)))
	   (EXPIREDFORM (QUOTE (TIMEREXPIRED? \DurationLimit . TIMERUNITSLST)))
	   USINGBOX FORDURATION RESOURCENAME UNTILDATE TIMERUNITS TIMERUNITSLST TEMP)
          (DECLARE (SPECVARS USINGBOX FORDURATION RESOURCENAME UNTILDATE)
		   (GLOBALVARS LCASEFLG))

          (* DURATIONCLISPWORDS is a list of lists, each one of which has the canonical word for some CLISPWORD as second 
	  element. First element is the all-caps version, so that SPECVARS communication can take place.)


          (\MACRO.EVAL (BQUOTE (SETQ BODY , (for L in DURATIONCLISPWORDS as Z
					       by (BQUOTE (\CLISPKEYWORDPROCESS , Z (QUOTE , L)))
					       first (SETQ Z (QUOTE BODY)) do NIL
					       finally (RETURN Z)))))
          (if (NOT (LITATOM RESOURCENAME))
	      then (SETERRORN 14 FORM)
		   (ERRORX)
	    elseif (EQ RESOURCENAME T)
	      then (SETQ RESOURCENAME (QUOTE \ForDurationOfBox)))
          (if (AND USINGBOX RESOURCENAME)
	      then (ERROR "Both 'usingBox' and 'resourceName' specified" FORM))
          (if (NULL TIMERUNITS)
	      then                                           (* Standard case)
		   NIL
	    elseif UNTILDATE
	      then (ERROR "Can't specify timerUnits for 'untilDate'" FORM)
	    elseif (if (CONSTANTEXPRESSIONP TIMERUNITS)
		       then (SETQ TEMP (U-CASE (EVAL TIMERUNITS)))
			    (if (FMEMB TEMP (QUOTE (MS MILS MILLISECS MILLISECONDS)))
				then                         (* Standard case)
				     (SETQ TIMERUNITS)
				     T
			      elseif (FMEMB TEMP (QUOTE (TICS TICKS SECS SECONDS)))
				then T
			      else (ERROR "Wrong timerUnits specified" FORM))
		     else (ERROR "Non-constant timerUnits not yet implemented" FORM))
	      then (SETQ TIMERUNITSLST (LIST TIMERUNITS)))
          (if (AND (NULL FORDURATION)
		   (NULL UNTILDATE))
	      then (ERROR "No duration interval" FORM)
	    elseif (AND FORDURATION UNTILDATE)
	      then (ERROR "Both 'untilDate' and 'forDuration' specified" FORM))
          (if UNTILDATE
	      then (SETQ FORDURATION UNTILDATE)              (* Make the "interval" be the thing supplied for the 
							     "date")
		   (SETQ SETUPFORM (QUOTE (SETUPTIMER.DATE FORDURATION BOXNAME)))
		   (SETQ TIMERUNITSLST (QUOTE ((QUOTE SECS)))))
          (if (AND (PROG1 RESOURCENAME                       (* Comment PPLossage))
		   (NOT (MEMBER (GETDEF RESOURCENAME (QUOTE GLOBALRESOURCES)
					NIL
					(QUOTE NOERROR))
				(QUOTE ((NCREATE (QUOTE FIXP))
					 (IPLUS 1000000))))))
	      then (PUTDEF RESOURCENAME (QUOTE GLOBALRESOURCES)
			   (SELECTQ (SYSTEMTYPE)
				    (D (QUOTE (NCREATE (QUOTE FIXP))))
				    ((TOPS20 TENEX)
				      (IPLUS 1000000))
				    (SETQ RESOURCENAME))))
          (SETQ EXPANSION (BQUOTE ((LAMBDA (\DurationLimit)
				      (DECLARE (LOCALVARS \DurationLimit))
				      (until , EXPIREDFORM . BODY))
				    , SETUPFORM)))
          (SETQ BOXNAME (OR RESOURCENAME USINGBOX))
          (if RESOURCENAME
	      then (SETQ EXPANSION (LIST (QUOTE GLOBALRESOURCE)
					 RESOURCENAME EXPANSION)))
          (CLISPTRAN (PROG1 FORM                             (* Comment PPLossage))
		     (SUBPAIR (QUOTE (BODY FORDURATION BOXNAME TIMERUNITSLST))
			      (LIST BODY FORDURATION BOXNAME TIMERUNITSLST)
			      EXPANSION))
          (if LCASEFLG
	      then (MAP FORM (FUNCTION (LAMBDA (X)
			    (if (AND (NNLITATOM (CAR X))
				     (SETQ EXPANSION (GETPROP (CAR X)
							      (QUOTE CLISPWORD)))
				     (LISTP EXPANSION)
				     (NNLITATOM (SETQ EXPANSION (CDR EXPANSION)))
				     (NEQ EXPANSION (CAR X)))
				then (/RPLACA X EXPANSION)))))))))

(\CLISPKEYWORDPROCESS
  (LAMBDA (FORM WORDLST)                                     (* JonL "24-DEC-82 22:46")

          (* Looks for the first "keyword" in the list FORM which is mentioned in the WORDLST -- and if one is found, the 
	  the first keyword in WORDLST is presumed to be the name of a variable to be set to the keyword's value.
	  Returns the original list with the keyword pair non-destructively spliced out.)


    (if (NULL FORM)
	then NIL
      elseif (FMEMB (CAR FORM)
		    WORDLST)
	then (SET (CAR WORDLST)
		  (CADR FORM))
	     (CDDR FORM)
      elseif (NLISTP FORM)
	then FORM
      else (PROG (TMP)
	         (RETURN (if (find X in WORDLST suchthat (SETQ TMP (FMEMB X FORM)))
			     then (SET (CAR WORDLST)
				       (CADR TMP))
				  (NCONC (LDIFF FORM TMP)
					 (CDDR TMP))
			   else FORM))))))
)

(PUTPROPS TIMERUNITS CLISPWORD 
  (\DURATIONTRAN . timerUnits))

(PUTPROPS timerUnits CLISPWORD 
  (\DURATIONTRAN . timerUnits))

(PUTPROPS TimerUnits CLISPWORD 
  (\DURATIONTRAN . timerUnits))

(PUTPROPS timerunits CLISPWORD 
  (\DURATIONTRAN . timerUnits))

(PUTPROPS USINGBOX CLISPWORD 
  (\DURATIONTRAN . usingBox))

(PUTPROPS usingBox CLISPWORD 
  (\DURATIONTRAN . usingBox))

(PUTPROPS UsingBox CLISPWORD 
  (\DURATIONTRAN . usingBox))

(PUTPROPS usingbox CLISPWORD 
  (\DURATIONTRAN . usingBox))

(PUTPROPS FORDURATION CLISPWORD 
  (\DURATIONTRAN . forDuration))

(PUTPROPS forDuration CLISPWORD 
  (\DURATIONTRAN . forDuration))

(PUTPROPS forduration CLISPWORD 
  (\DURATIONTRAN . forDuration))

(PUTPROPS ForDuration CLISPWORD 
  (\DURATIONTRAN . forDuration))

(PUTPROPS FORDURATIONOF CLISPWORD 
  (\DURATIONTRAN . forDurationOf))

(PUTPROPS forDurationOf CLISPWORD 
  (\DURATIONTRAN . forDurationOf))

(PUTPROPS fordurationof CLISPWORD 
  (\DURATIONTRAN . forDurationOf))

(PUTPROPS ForDurationOf CLISPWORD 
  (\DURATIONTRAN . forDurationOf))

(PUTPROPS DURING CLISPWORD 
  (\DURATIONTRAN . during))

(PUTPROPS during CLISPWORD 
  (\DURATIONTRAN . during))

(PUTPROPS RESOURCENAME CLISPWORD 
  (\DURATIONTRAN . resourceName))

(PUTPROPS resourceName CLISPWORD 
  (\DURATIONTRAN . resourceName))

(PUTPROPS ResourceName CLISPWORD 
  (\DURATIONTRAN . resourceName))

(PUTPROPS resourcename CLISPWORD 
  (\DURATIONTRAN . resourceName))

(PUTPROPS UNTILDATE CLISPWORD 
  (\DURATIONTRAN . untildate))

(PUTPROPS untilDate CLISPWORD 
  (\DURATIONTRAN . untilDate))

(PUTPROPS untildate CLISPWORD 
  (\DURATIONTRAN . untildate))

(PUTPROPS UNTILDATETIME CLISPWORD 
  (\DURATIONTRAN . untildatetime))

(PUTPROPS UntilDate CLISPWORD 
  (\DURATIONTRAN . untilDate))

(PUTPROPS untildatetime CLISPWORD 
  (\DURATIONTRAN . untildatetime))

(PUTPROPS untilDateTime CLISPWORD 
  (\DURATIONTRAN . untilDateTime))

(PUTPROPS UntilDateTime CLISPWORD 
  (\DURATIONTRAN . untilDateTime))

(ADDTOVAR PRETTYEQUIVLST (TIMERUNITS . for)
			 (timerUnits . for)
			 (TimerUnits . for)
			 (timerunits . for)
			 (USINGBOX . for)
			 (usingBox . for)
			 (UsingBox . for)
			 (usingbox . for)
			 (FORDURATION . for)
			 (forDuration . for)
			 (forduration . for)
			 (ForDuration . for)
			 (FORDURATIONOF . for)
			 (forDurationOf . for)
			 (fordurationof . for)
			 (ForDurationOf . for)
			 (DURING . for)
			 (during . for)
			 (RESOURCENAME . for)
			 (resourceName . for)
			 (ResourceName . for)
			 (resourcename . for)
			 (UNTILDATE . for)
			 (untilDate . for)
			 (untildate . for)
			 (UNTILDATETIME . for)
			 (UntilDate . for)
			 (untildatetime . for)
			 (untilDateTime . for)
			 (UntilDateTime . for))
(SELECTQ (SYSTEMTYPE)
	 (D (MOVD? (QUOTE CLOCK0)
		   (QUOTE \CLOCK0)))
	 NIL)
(DECLARE: DONTCOPY (PUTPROPS DURATION COPYRIGHT ("Xerox Corporation" 1982)))
(DECLARE: DONTCOPY
  (FILEMAP (NIL (2780 6651 (SETUPTIMER 2790 . 4664) (SETUPTIMER.DATE 4666 . 4832) (TIMEREXPIRED? 4834 . 
6649)) (6756 10291 (\RCLOCK0 6766 . 6958) (\SETUPTIMERmacrofn 6960 . 10289)) (11153 16071 (
\DURATIONTRAN 11163 . 15171) (\CLISPKEYWORDPROCESS 15173 . 16069)))))
STOP
