(FILECREATED "24-OCT-82 00:08:08" /lisp/ddyer/lisp/init/SCREENOP.;5 55404  

      changes to:  (VARS SCREENOPCOMS SCREENOPFILEPKGCOMS SCREENOPFNS SCREENOPVARS SCREENOPEDITHIST 
			 SCREENOPMACROS SCREENOPRECORDS SCREENOPS)
		   (RECORDS SCREENDRIVER)
		   (FILEPKGCOMS SCREENDRIVERS)
		   (SCREENDRIVERS CreateD2Driver)
		   (FNS CreateD2Driver)

      previous date: "28-SEP-82 15:17:21" /lisp/ddyer/lisp/init/SCREENOP.;4)


(PRETTYCOMPRINT SCREENOPCOMS)

(RPAQQ SCREENOPCOMS ((FILEPKGCOMS * SCREENOPFILEPKGCOMS)
		     (FNS * SCREENOPFNS)
		     (VARS * SCREENOPVARS)
		     (ADDVARS (CURRENTDRIVER)
			      (SYSTEMTERMTYPES)
			      (SYSTEMSCREENDRIVERS)
			      (AFTERSYSOUTFORMS (SETQ DISPLAYTERMP (DISPLAYTERMP)))
			      (DISPLAYTERMPFORMS (PREPAREDELETENEXT)))
		     (GLOBALVARS CURRENTSCREEN DISPLAYTERM DISPON)
		     [P (PROG ((I 1))
			      (SETQ DISPLAYTERM (COPYTERMTABLE (QUOTE ORIG)))
			      (RPTQ 31 (ECHOCONTROL I (QUOTE REAL)
						    DISPLAYTERM)
				    (SETQ I (ADD1 I]
		     (EDITHIST * SCREENOPEDITHIST)
		     (EXPORT (MACROS * SCREENOPMACROS)
			     (DECLARE: EVAL@COMPILE DONTCOPY (FNS COMPILESCREENOP))
			     (RECORDS * SCREENOPRECORDS))
		     (SCREENDRIVERS * SCREENOPS)
		     [VARS (\SPEEDBLOCK (CREATE SGTTYB))
			   (HPENHANCECHAR (QUOTE B))
			   (RUBOUTS (PACKC (QUOTE (127 127 127 127 127]
		     (P (DISPLAYTERMP))))

(RPAQQ SCREENOPFILEPKGCOMS (SCREENDRIVERS))
(PUTDEF (QUOTE SCREENDRIVERS) (QUOTE FILEPKGCOMS) [QUOTE
						    ((COM
						       MACRO
						       [X (FNS . X)
							  (PROP SCREENDRIVERS . X)
							  (P (MAPCAR (QUOTE X)
								     (FUNCTION (LAMBDA
										 (A)
										 (AND (GETD A)
										      (APPLY* A]
						       CONTENTS CHECKIFSCREENDRIVER)
						     (TYPE DESCRIPTION "Screen Drivers" GETDEF
							   [LAMBDA (A)
								   (AND (GETPROP A (QUOTE 
										    SCREENDRIVERS))
									(GETDEF A (QUOTE FNS)
										0
										(QUOTE ("NO DEF"]
							   PUTDEF
							   [LAMBDA (A B C)
								   (PUTDEF A (QUOTE FNS)
									   C)
								   (PUTPROP A (QUOTE SCREENDRIVERS)
									    T]
							   EDITDEF
							   [LAMBDA (A)
								   (EDITDEF A (QUOTE FNS]
							   DELDEF
							   (LAMBDA (A)
								   (DELDEF A (QUOTE FNS])

(RPAQQ SCREENOPFNS (BUILDDRIVER CHECKIFSCREENDRIVER COMPILESCREENOP CSPEED DELAYFOR DISPLAYTERMP 
				DISPLAYTERMTYPE GETSCREENOPHANDLER GETSCREENOPINFO PARSECHARSEQUENCE 
				PARSECURSORPOS PARSETERMCAP PREPAREDELETENEXT SCREENOP 
				SCREENOPCOMPILED SEGMENTSTRING SETSCREENOPINFO \SCREENPUT))
(DEFINEQ

(BUILDDRIVER
  [LAMBDA (TERMCAP)                                         (* DD: "26-JUL-82 12:09")
                                                            (* this builds a driver from termcap information, 
							    defining a function that the user will be invited to 
							    save)
    (PROG ((ORIG (OR TERMCAP (SELECTQ (SYSTEMTYPE)
				      (VAX (GETENV (QUOTE TERMCAP)))
				      NIL)))
	   PARSED INFO TYPE)
          (OR ORIG (RETURN NIL))
          (SETQ PARSED (PARSETERMCAP TERMCAP))              (* select a name from the list known)
          (SETQ TYPE (OR [CAR (EVAL (CADR (FASSOC (QUOTE TYPE)
						  PARSED]
			 (MKATOM)))
          (SETQ INFO (BQUOTE ((TERMCAP , ORIG)
			       ,@ PARSED)))
          [PUTDEF (SETQ TYPE (PACK* (QUOTE Create)
				    TYPE
				    (QUOTE Driver)))
		  (QUOTE SCREENDRIVER)
		  (BQUOTE (LAMBDA NIL                       (* this driver generated automatically from termcap 
							    information)
				  (CREATE SCREENDRIVER ,@[RESETVAR CURRENTSCREEN PROTOTYPEDRIVER
					    (for SPEC ENTRY in (QUOTE ((TYPELIST TYPE)
									(XSIZE co 80)
									(YSIZE li 24)
									(CLEAR cl)
									(CLEARLINE ce)
									(CLEARREST cd)
									(INSERT im)
									(INSERTLINE al)
									(DELETE dc)
									(DELETELINE dl)
									(SETHIGHLIGHT so NIL)
									(CLEARHIGHLIGHT se NIL)
									(SETLOCK ml NIL)
									(CLEARLOCK mu NIL)
									(SETCURSOR cm)
									(OVERSTRIKEP os NIL)))
					       when [PROGN (SETQ ENTRY (FASSOC (CADR SPEC)
									       PARSED))
							   (COND
							     ((NULL ENTRY)
							       (SETQ ENTRY (CDDR SPEC)))
							     ((NULL (CDR ENTRY))
							       (SETQ ENTRY (CONS T)))
							     (T (SETQ ENTRY (CDR ENTRY]
					       collect (BQUOTE (SETQ , (CAR SPEC)
								     (FUNCTION
								       ,
								       (SUBST ENTRY (QUOTE PROGRAM)
									      (SCREENOP (QUOTE 
										       GETHANDLER)
											(CAR SPEC]
					  \INFOALIST _(QUOTE , INFO]
          (MARKASCHANGED TYPE (QUOTE SCREENDRIVERS)
			 T)
          (UNMARKASCHANGED TYPE (QUOTE FNS))
          (RETURN (EVAL (CONS TYPE])

(CHECKIFSCREENDRIVER
  [LAMBDA (COM NAME TYPE)                                   (* DD: "20-SEP-82 13:14")
    (PROG [(NAMEIT (AND (OR (EQ TYPE (CAR COM))
			    (EQ TYPE (QUOTE FNS)))
			(COND
			  ((EQ (CADR COM)
			       (QUOTE *))
			    (GETATOMVAL (CADDR COM)))
			  (T (CDR COM]                      (* NAMEIT is the recognised list.
							    Now MATCH the list NAME against in the canonical way and
							    return the result)
          (RETURN (COND
		    ((EQ NAME T)
		      (NEQ NAMEIT NIL))
		    ((LISTP NAME)
		      (INTERSECTION NAME NAMEIT))
		    ((NULL NAME)
		      NAMEIT)
		    ((FMEMB NAME NAMEIT)
		      T])

(COMPILESCREENOP
  [LAMBDA (X)                                               (* DD: "18-JUL-82 14:12")

          (* this does the work of compiling a SCREENOP into a more effecient form, with the function lookup already done.
	  It assumes that changes to the SCREENDRIVER record will be backward compatable)


    (PROG (FIELDNAMES (OP (CAR X))
		      (ARG1 (CADR X)))
          (RETURN (COND
		    [(EQ (CAR (LISTP OP))
			 (QUOTE QUOTE))
		      (COND
			([NOT (FMEMB (CADR OP)
				     (SETQ FIELDNAMES (RECORDFIELDNAMES (QUOTE SCREENDRIVER]
			  (COMPERRM (LIST (CADAR X)
					  "IS NOT A DEFINED SCREENOP"))
			  (QUOTE IGNOREMACRO))
			((AND (EQ (CADR OP)
				  (QUOTE GETHANDLER))
			      (EQ (CAR (LISTP ARG1))
				  (QUOTE QUOTE))
			      (FMEMB (CADR ARG1)
				     FIELDNAMES))
			  (LIST (QUOTE FFETCH)
				(LIST (QUOTE SCREENDRIVER)
				      (CADR ARG1))
				(QUOTE CURRENTSCREEN)))
			(T (NCONC (LIST (QUOTE SCREENOPCOMPILED)
					(KWOTE (CADR OP))
					(LIST (QUOTE FFETCH)
					      (LIST (QUOTE SCREENDRIVER)
						    (CADR OP))
					      (QUOTE CURRENTSCREEN)))
				  (CDR X]
		    (T (QUOTE IGNOREMACRO])

(CSPEED
  [LAMBDA NIL                                               (* DD: "17-Sep-82 12:01")
    (SELECTQ (SYSTEMTYPE)
	     [(TOPS20 TENEX)
	       (PROG ((SP (LOGAND (JSYS 63 64 23 0 3)												     |
				  262143)))												     |
		     (DECLARE (LOCALVARS SP))												     |
		     (RETURN (COND												     |
			       ((ZEROP SP)												     |
				 2400)												     |
			       (T SP]												     |
	     (VAX (OR (fetch (SGTTYB OUTPUTSPEED) of \SPEEDBLOCK)
		      2400))
	     (QUOTE 9600])

(DELAYFOR
  [LAMBDA (N PROPORTIONAL)                                  (* DD: "18-JUL-82 19:50")
                                                            (* pad for N milliseconds, assuming 10 bits per 
							    character so 9600 baud is 960 chars/second)
    (SCREENOP (QUOTE PAD)
	      (IQUOTIENT (ITIMES N (CSPEED))
			 9600])

(DISPLAYTERMP
  [LAMBDA (DIRECTEDTYPE)                                    (* DD: "23-JUL-82 21:11")
                                                            (* determines the type of the terminal and setq up the 
							    current screen driver if one can be found or 
							    manufactured)
    (SETQ DISPLAYTERMTYPE (DISPLAYTERMTYPE DIRECTEDTYPE))
    (bind TRIED NEWDRIVER do [COND
			       [(SETQ TRIED (for X in SYSTEMSCREENDRIVERS WHEN (NEQ X PROTOTYPEDRIVER)
					       do (SETQ CURRENTSCREEN X)
						  (COND
						    ((EQMEMB DISPLAYTERMTYPE (SCREENOP (QUOTE 
											 TYPELIST)))
						      (for X in DISPLAYTERMPFORMS
							 do (EVAL X))
						      (RETURN DISPLAYTERMTYPE)))
					       finally (RETURN (SETQ DISPON (SETQ CURRENTSCREEN NIL]
			       (T (COND
				    (NEWDRIVER (SETQ TRIED T))
				    ((SETQ NEWDRIVER (BUILDDRIVER))
				      (PRIN1 "..Built a screen driver from TERMCAP info")
				      (TERPRI))
				    (T (SETQ TRIED T]
       repeatuntil TRIED finally                            (* set screen size if possible)
				 (AND (BOUNDP (QUOTE \#DISPLAYLINES))
				      (FIXP \#DISPLAYLINES)
				      (NEQ 0 \#DISPLAYLINES)
				      (SCREENOP (QUOTE YSIZE))
				      (SETQ \#DISPLAYLINES (IDIFFERENCE (SCREENOP (QUOTE YSIZE))
									2)))
				 [AND (SCREENOP (QUOTE XSIZE))
				      (LINELENGTH (SETQ TTYLINELENGTH (SCREENOP (QUOTE XSIZE]
				 (RETURN DISPLAYTERMTYPE])

(DISPLAYTERMTYPE
  [LAMBDA (DIRECTEDTYPE)                                    (* DD: "18-JUL-82 14:56")

          (* * Returns the terminal type number. Uses the jsys GTTYP.)


    (PROG [(TYPE (OR DIRECTEDTYPE (SELECTQ (SYSTEMTYPE)
					   ((TOPS20 TENEX)
					     (JSYS 195 262143 NIL NIL 2))
					   (VAX (0Syscall 32 1 \SPEEDBLOCK)
                                                            (* record speed etc for later)
						(MKATOM (GETENV "TERM")))
					   NIL]
          (SETQ TYPE (OR (CDR (FASSOC TYPE SYSTEMTERMTYPES))
			 TYPE))
          [COND
	    ((LISTP TYPE)
	      (SETQ TYPE (EVAL TYPE]
          (RETURN TYPE])

(GETSCREENOPHANDLER
  [LAMBDA (ACTION)                                          (* DD: "17-JUL-82 18:57")
    (AND CURRENTSCREEN (RECORDACCESS ACTION CURRENTSCREEN (CONSTANT (RECLOOK (QUOTE SCREENDRIVER)))
				     (QUOTE FETCH])

(GETSCREENOPINFO
  [LAMBDA (DATUM)                                           (* DD: "17-JUL-82 17:00")
    (FASSOC DATUM (SCREENOP (QUOTE GETHANDLER)
			    (QUOTE \INFOALIST])

(PARSECHARSEQUENCE
  [LAMBDA (X)                                               (* DD: "24-JUL-82 14:54")
                                                            (* this parses character sequences used by TERMCAP 
							    entries, which covers everything except cursor 
							    positioning, which requeres more elaborate processing 
							    aftewards)
    (bind CHAR (X _(MKSTRING X))
	  DELAY first [bind I_1 while (FIXP (NTHCHAR X I)) do (add I 1)
			 finally [COND
				   ((NEQ I 1)
				     (SETQ DELAY (SUBATOM X 1 (SUB1 I)))
				     (SETQ X (SUBSTRING X I -1]
				 (COND
				   ((NULL DELAY))
				   ((EQ (NTHCHAR X 1)
					(QUOTE *))
				     (SETQ DELAY (BQUOTE (DELAYFOR , DELAY T)))
				     (GNC X))
				   (T (SETQ DELAY (BQUOTE (DELAYFOR , DELAY]
       while (AND (STRINGP X)
		  (SETQ CHAR (GNC X)))
       collect (SELECTQ CHAR
			[\ (SELECTQ (SETQ CHAR (GNC X))
				    ((\ ^)
				      (CHCON1 CHAR))
				    (E (CHARCODE ESCAPE))
				    (n (CHARCODE LF))
				    (r (CHARCODE CR))
				    (t (CHARCODE TAB))
				    (b (CHARCODE ^H))
				    (f (CHARCODE ^L))
				    (COND
				      ((FIXP CHAR)
					[while (FIXP (NTHCHAR X 1)) do (SETQ CHAR
									 (IPLUS (GNC X)
										(ITIMES CHAR 8]
					CHAR)
				      (T (ERROR "ILLEGAL \ SEQUENCE IN STRING, STARTING AT " X]
			(^ (LOGAND (GNCCODE X)
				   31))
			(CHCON1 CHAR))
       finally [SETQ $$VAL (LIST (LIST (QUOTE \SCREENPUT)
				       (MKSTRING (PACKC $$VAL]
	       (COND
		 (DELAY (NCONC1 $$VAL DELAY])

(PARSECURSORPOS
  [LAMBDA (STR)                                             (* DD: "20-SEP-82 13:16")
                                                            (* parse a cursor positioning TERMCAP string, producing 
							    a program)
    (bind (X _(MKSTRING STR))
	  EMITFLG
	  [ORDINATE _(APPEND (QUOTE (Y X]
	  WIDTH_0
	  OUTPUTCHRS CHR PROGRAM while (SETQ CHR (GNC X))
       do (SELECTQ CHR
		   (%% (SELECTQ (SETQ CHR (GNC X))
				(d (SETQ WIDTH 0)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(2 (SETQ WIDTH 2)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(3 (SETQ WIDTH 3)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(%. (SETQ EMITFLG (QUOTE \SCREENPUT)))
				(+ [RPLACA ORDINATE (BQUOTE (IPLUS , (GNCCODE X)
								   ,
								   (CAR ORDINATE]
				   (SETQ EMITFLG (QUOTE \SCREENPUT)))
				[> (RPLACA ORDINATE (BQUOTE (COND ((IGREATERP , (CAR ORDINATE)
									      ,
									      (GNCCODE X))
								    (IPLUS , (GNCCODE X)
									   ,
									   (CAR ORDINATE)))
								  (T (CAR ORDINATE]
				(r (SETQ ORDINATE (DREVERSE ORDINATE)))
				[i (RPLACA ORDINATE (BQUOTE (ADD1 , (CAR ORDINATE]
				(%% (push OUTPUTCHRS (CHCON1 CHR)))
				[n [RPLACA ORDINATE (BQUOTE (LOGXOR 96 , (CAR ORDINATE]
				   (RPLACA (CDR ORDINATE)
					   (BQUOTE (LOGXOR 96 , (CADR ORDINATE]
				[B (RPLACA ORDINATE (BQUOTE (IPLUS (IREMAINDER , (CAR ORDINATE)
									       10)
								   (ITIMES 16 (IQUOTIENT
									     ,
									     (CAR ORDINATE)
									     10]
				(ERROR "UNSOPPORTED CURSOR CODE" CHR)))
		   (push OUTPUTCHRS (CHCON1 CHR)))
	  (COND
	    (EMITFLG (COND
		       (OUTPUTCHRS [push PROGRAM (BQUOTE (\SCREENPUT , (MKSTRING (PACKC (DREVERSE
											  OUTPUTCHRS]
				   (SETQ OUTPUTCHRS)))
		     (SELECTQ EMITFLG
			      [PRINTNUM (push PROGRAM (COND
						[(EQ WIDTH 0)
						  (BQUOTE (PRIN3 , (CAR ORDINATE]
						(T (BQUOTE (PRINTNUM (QUOTE (FIX , WIDTH))
								     ,
								     (CAR ORDINATE]
			      [\SCREENPUT (push PROGRAM (BQUOTE (\SCREENPUT , (CAR ORDINATE]
			      (SHOULDNT))
		     (SETQ ORDINATE (CDR ORDINATE))
		     (SETQ EMITFLG)))
       finally [AND OUTPUTCHRS (COND
		      (OUTPUTCHRS [push PROGRAM (BQUOTE (\SCREENPUT , (MKSTRING (PACKC (DREVERSE
											 OUTPUTCHRS]
				  (SETQ OUTPUTCHRS]
	       (RETURN (DREVERSE PROGRAM])

(PARSETERMCAP
  [LAMBDA (TCAP)                                            (* DD: "20-JUL-82 01:50")
    (OR TCAP (SETQ TCAP (GETENV "TERMCAP")))
    (PROG ((FORMS (SEGMENTSTRING TCAP (QUOTE :)))
	   TYPE VARS CPOS)
          (DECLARE (SPECVARS ESCAPE))
          (SETQ TYPE (SEGMENTSTRING (CAR FORMS)
				    "|"))
          (OR TCAP (MEMBER (GETENV "TERM")
			   FORMS)
	      (push FORMS (GETENV "TERM")))
          [SETQ TYPE (UNION TYPE (for X in TYPE collect (DISPLAYTERMTYPE (MKATOM X]
          [SETQ TYPE (BQUOTE (TYPE (QUOTE , TYPE]
          [SETQ VARS (for X in (CDR FORMS) collect (CONS (SUBATOM X 1 2)
							 (SELECTQ (NTHCHAR X 3)
								  (NIL NIL)
								  (# (CONS (SUBATOM X 4 -1)))
								  (= (PARSECHARSEQUENCE (SUBSTRING
											  X 4 -1)))
								  (SHOULDNT]
          [COND
	    ((SETQ CPOS (FASSOC (QUOTE cm)
				VARS))
	      (RPLACD CPOS (BQUOTE (,@ (PARSECURSORPOS (CADR (CADR CPOS)))
				       ,@
				       (CDDR CPOS]          (* compute the best string for delete-last)
          [PROG (BACKSPACE CLEARNEXT)
	        [SETQ BACKSPACE (COND
		    ((FASSOC (QUOTE bs)
			     VARS)
		      (CHARCODE (BS)))
		    [(SETQ BACKSPACE (FASSOC (QUOTE bc)
					     VARS))
		      (CHCON (CADR (CADR BACKSPACE]
		    (T (CHARCODE (BS]
	        [SETQ CLEARNEXT (COND
		    ((NOT (FASSOC (QUOTE os)
				  VARS))
		      (APPEND (CHARCODE (SPACE))
			      BACKSPACE))
		    [(SETQ CLEARNEXT (for X Y in (QUOTE (dc ce cd)) thereis (SETQ Y (FASSOC X VARS))
					finally (RETURN Y)))
		      (CHCON (CADR (CADR CLEARNEXT]
		    (T (CHARCODE (SPACE]
	        (SETQ BACKSPACE (APPEND BACKSPACE CLEARNEXT))
	        (push VARS (BQUOTE (DELETENEXT , (PACKC BACKSPACE]
          (RETURN (CONS TYPE VARS])

(PREPAREDELETENEXT
  [LAMBDA NIL                                               (* DD: "17-Sep-82 12:04")
                                                            (* Set the DELETECONTROL up to correspond to the 
							    deletenext info, if present)
    (PROG [(N (SCREENOP (QUOTE OTHERINFO)
			(QUOTE DELETENEXT]
          (COND
	    ((SETQ N (CADR N))
	      (for X in (CHCON N) collect [COND
					    ((EQ (SELECTQ (SYSTEMTYPE)												     |
							  ((TOPS20 TENEX)												     |
							    (AND (ILESSP X (CHARCODE SPACE))												     |
								 (ECHOCONTROL X)))												     |
							  (ECHOCHAR X))												     |
						 (QUOTE REAL)))
					    ((EQ X 127)     (* SUPDUP TERMINAL?)
					      (SETQ X (LOGOR X 128]
					  (SELECTQ (SYSTEMTYPE)												     |
						   [(TOPS20 TENEX)												     |
						     (AND (ILESSP X (CHARCODE SPACE))												     |
							  (ECHOCONTROL X (QUOTE REAL]												     |
						   (ECHOCHAR X (QUOTE REAL)))												     |
					  X
		 finally (DELETECONTROL (QUOTE 1STCHDEL)
					(SETQ X (PACKC $$VAL)))
			 (DELETECONTROL (QUOTE NTHCHDEL)
					X])

(SCREENOP
  [LAMBDA (ACTION ARG1 ARG2 ARG3)                           (* DD: "20-SEP-82 12:36")
    (AND CURRENTSCREEN (RESETLST (RESETSAVE (SETTERMTABLE DISPLAYTERM))
				 (RESETSAVE (RADIX 10))
				 (PROG [(OPR (RECORDACCESS ACTION CURRENTSCREEN
							   (CONSTANT (RECLOOK (QUOTE SCREENDRIVER)))
							   (QUOTE FETCH]
				       (COND
					 (OPR (RETURN (APPLY* OPR ARG1 ARG2 ARG3)))
					 (T (ERROR "UNDEFINED SCREENOP - " ACTION])

(SCREENOPCOMPILED
  [LAMBDA (ACTION ARG0 ARG1 ARG2 ARG3)                      (* DD: "20-SEP-82 12:35")
    (RESETLST (RESETSAVE (SETTERMTABLE DISPLAYTERM))
	      (RESETSAVE (RADIX 10))
	      (COND
		(ARG0 (APPLY* ARG0 ARG1 ARG2 ARG3))
		(T (ERROR "UNDEFINED SCREENOP - " ACTION])

(SEGMENTSTRING
  [LAMBDA (STR PAT)                                         (* DD: "17-Sep-82 13:30")
                                                            (* segment STR wherever the substring PAT occurs, return
							    a list of substrings separated out)
    (bind POS_1
	  START VAL while (first (SETQ START POS) while (EQ START (SETQ POS (STRPOS PAT STR START)))
			     do (add START (NCHARS PAT)) finally (RETURN POS))
       when (SETQ VAL (SUBATOM STR START (SUB1 POS))) collect VAL
       finally (SETQ $$VAL (NCONC1 $$VAL (SUBATOM STR START -1])

(SETSCREENOPINFO
  [LAMBDA (DATUM VAL)                                       (* DD: "17-JUL-82 17:06")
    (PUTASSOC DATUM VAL (SCREENOP (QUOTE GETHANDLER)
				  (QUOTE \INFOALIST])

(\SCREENPUT
  [LAMBDA (CHR)                                             (* DD: "17-Sep-82 12:43")
                                                            (* send a character or a strig directly to the terminal,
							    with no interference or interpretation)
    (SELECTQ (SYSTEMTYPE)
	     [(TOPS20 TENEX)
	       (COND
		 ((FIXP CHR)                                (* pbout)
		   (JSYS 60 CHR))
		 [(STRINGP CHR)                             (* psout)
		   (for I from 1 to (NCHARS CHR) do (JSYS 60 (NTHCHARCODE CHR I]												     |
		 (T                                         (* psout)
		    (JSYS 62 (MKSTRING CHR]
	     [VAX (COND
		    ((FIXP CHR)
		      (0Dspbout 1 CHR))
		    ((STRINGP CHR)
		      (0Dspsout 1 CHR))
		    (T (0Dspsout 1 (MKSTRING CHR]
	     (COND
	       ((FIXP CHR)
		 (PRIN3 (FCHARACTER CHR)))
	       (T (PRIN3 CHR])
)

(RPAQQ SCREENOPVARS ((SYSTEMTERMTYPES (SELECTQ (SYSTEMTYPE)
					       [TENEX (QUOTE ((10 COND ((ILEQ (CSPEED)
									      2400)
								   (QUOTE HP2640))
								  (T (QUOTE HP)))
							      (14 . HZ)
							      (21 . ANNARBOR]
					       [TOPS20 (QUOTE ((6 COND ((ILEQ (CSPEED)
									      2400)
								   (QUOTE HP2640))
								  (T (QUOTE HP)))
							       (15 . HZ)
							       (21 . HZT)
							       (25 . HEATHKIT]
					       [VAX (QUOTE ((hp . HP)
							    (2621 . HP)
							    (2621k45 . HP)
							    (2640 . HP2640)
							    (h1520 . HZT)
							    (h1520e . HZ]
					       NIL))
		     (PROTOTYPEDRIVER (CreatePrototypeDriver))))

(RPAQ SYSTEMTERMTYPES (SELECTQ (SYSTEMTYPE)
			       [TENEX (QUOTE ((10 COND ((ILEQ (CSPEED)
							      2400)
						   (QUOTE HP2640))
						  (T (QUOTE HP)))
					      (14 . HZ)
					      (21 . ANNARBOR]
			       [TOPS20 (QUOTE ((6 COND ((ILEQ (CSPEED)
							      2400)
						   (QUOTE HP2640))
						  (T (QUOTE HP)))
					       (15 . HZ)
					       (21 . HZT)
					       (25 . HEATHKIT]
			       [VAX (QUOTE ((hp . HP)
					    (2621 . HP)
					    (2621k45 . HP)
					    (2640 . HP2640)
					    (h1520 . HZT)
					    (h1520e . HZ]
			       NIL))

(RPAQ PROTOTYPEDRIVER (CreatePrototypeDriver))

(ADDTOVAR CURRENTDRIVER )

(ADDTOVAR SYSTEMTERMTYPES )

(ADDTOVAR SYSTEMSCREENDRIVERS )

(ADDTOVAR AFTERSYSOUTFORMS (SETQ DISPLAYTERMP (DISPLAYTERMP)))

(ADDTOVAR DISPLAYTERMPFORMS (PREPAREDELETENEXT))
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS CURRENTSCREEN DISPLAYTERM DISPON)
)
[PROG ((I 1))
      (SETQ DISPLAYTERM (COPYTERMTABLE (QUOTE ORIG)))
      (RPTQ 31 (ECHOCONTROL I (QUOTE REAL)
			    DISPLAYTERM)
	    (SETQ I (ADD1 I]

(RPAQQ SCREENOPEDITHIST (SCREENDRIVER))
(DECLARE: DONTCOPY 

(ADDTOVAR EDITHISTALIST (SCREENDRIVER (("18-JUL-82 15:08:52" . "19-FEB-82 16:25:07")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;16 . 
					 /lisp/ddyer/lisp/init/SCREENDRIVER.;6)
				       (SGTTYB BUILDDRIVER SETSCREENOPINFO GETSCREENOPINFO 
					       GETSCREENOPHANDLER PARSECURSORPOS DELAYFOR \SCREENPUT 
					       PARSETERMCAP PARSECHARSEQUENCE SEGMENTSTRING 
					       CreateSupdupDriver CreateZenithDriver CreateAAdriver 
					       CSPEED SCREENOPCOMS SCREENOPS SCREENOPFNS 
					       SCREENOPRECORDS SCREENOPVARS SCREENOPEDITHIST 
					       SCREENOPMACROS SCREENOP COMPILESCREENOP 
					       SCREENOPCOMPILED SCREENDRIVERMACROS SCREENDRIVER 
					       SCREENDRIVERS CreateHZTdriver CreateHZdriver 
					       CreateHPdriver CreateHP2640Driver 
					       CreatePrototypeDriver SCREENDRIVERVARS DISPLAYTERMTYPE 
					       DISPLAYTERMP SCREENDRIVERCOMS SCREENDRIVEREDITHIST)
				       (all around improvements, but most notably added the 
					    capability to build a driver from TERMCAP info))
				      (("19-JUL-82 16:53:32" . "18-JUL-82 21:35:50")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;18 . 
					 /lisp/ddyer/lisp/init/SCREENOP.;17)
				       (PARSECURSORPOS DELAYFOR PARSECHARSEQUENCE)
				       (fixed some bugs in termcap parsing functions when delays were 
					      specified and when PRINTNUM was used to print screen 
					      coordinates))
				      (("20-JUL-82 00:03:39" . "19-JUL-82 18:37:56")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;23 . 
					 /lisp/ddyer/lisp/init/SCREENOP.;19)
				       (CreatePrototypeDriver SCREENOPFILEPKGCOMS SCREENDRIVERS 
							      DISPLAYTERMP CreateSDDriver BUILDDRIVER 
							      SCREENOPS SCREENOPFNS SCREENOPVARS 
							      SCREENOPCOMS))
				      ("20-JUL-82 01:42:33" DD: /lisp/ddyer/lisp/init/SCREENOP.;24
							    (PARSETERMCAP CreateSDDriver))
				      ("20-JUL-82 01:50:51" DD: /lisp/ddyer/lisp/init/SCREENOP.;25
							    (PARSETERMCAP))
				      ("20-JUL-82 16:18:43" DD: /lisp/ddyer/lisp/init/SCREENOP.;26
							    (SCREENDRIVERS DISPLAYTERMP))
				      ("23-JUL-82 21:38:35" DD: /lisp/ddyer/lisp/init/SCREENOP.;28
							    (CreateSDDriver SCREENOPCOMS DISPLAYTERMP 
									    PREPAREDELETENEXT))
				      ("24-JUL-82 14:56:34" DD: /lisp/ddyer/lisp/init/SCREENOP.;29
							    (PARSECHARSEQUENCE CreateV2Driver))
				      ("26-JUL-82 12:11:34" DD: /lisp/ddyer/lisp/init/SCREENOP.;30
							    (BUILDDRIVER Create2621k45Driver 
									 SCREENOPS))
				      ("26-JUL-82 20:38:17" DD: /lisp/ddyer/lisp/init/SCREENOP.;31
							    (SCREENOPFILEPKGCOMS SCREENOPCOMS 
										 SCREENDRIVERS))
				      ("27-JUL-82 23:34:50" ddyer /lisp/ddyer/lisp/init/SCREENOP.;2
							    (SCREENOPCOMS SCREENOPFILEPKGCOMS 
									  SCREENOPFNS SCREENOPVARS 
									  SCREENDRIVERS BUILDDRIVER))
				      ("30-JUL-82 13:37:59" DD: /lisp/ddyer/lisp/init/SCREENOP.;3
							    (SCREENDRIVERS))
				      ("30-JUL-82 17:21:51" DD: /lisp/ddyer/lisp/init/SCREENOP.;4
							    (SCREENDRIVERS))
				      (" 9-Aug-82 08:45:23" DD: <DDYER>SCREENOP..15
							    (SCREENOPCOMS SCREENOPFILEPKGCOMS 
									  SCREENOPFNS SCREENOPVARS 
									  SCREENOPEDITHIST 
									  SCREENOPMACROS 
									  SCREENOPRECORDS SGTTYB 
									  SCREENDRIVERS))
				      ("17-Sep-82 12:04:56" DD: <DDYER>SCREENOP..17
							    ((FNS PREPAREDELETENEXT CSPEED)))
				      ("17-Sep-82 12:47:40" DD: <DDYER>SCREENOP..18 ((FNS \SCREENPUT))
							    )
				      ("18-Sep-82 12:28:55" DD: <DDYER>SCREENOP..21 ((RECORDS 
										     SCREENDRIVER)))
				      ("20-SEP-82 12:37:40" DD: /lisp/ddyer/lisp/init/SCREENOP.;2
							    ((FNS PARSECURSORPOS SCREENOPCOMPILED 
								  SCREENOP)))
				      ("20-SEP-82 13:17:25" DD: /lisp/ddyer/lisp/init/SCREENOP.;3
							    ((FILEPKGCOMS SCREENDRIVERS)
							     (FNS Create2621k45Driver 
								  CHECKIFSCREENDRIVER PARSECURSORPOS))
							    )
				      ("28-SEP-82 15:17:36" DD: /lisp/ddyer/lisp/init/SCREENOP.;4
							    ((RECORDS SCREENDRIVER)))
				      ("24-OCT-82 00:08:22" DD: /lisp/ddyer/lisp/init/SCREENOP.;5
							    ((VARS SCREENOPCOMS SCREENOPFILEPKGCOMS 
								   SCREENOPFNS SCREENOPVARS 
								   SCREENOPEDITHIST SCREENOPMACROS 
								   SCREENOPRECORDS SCREENOPS)
							     (RECORDS SCREENDRIVER)
							     (FILEPKGCOMS SCREENDRIVERS)
							     (SCREENDRIVERS CreateD2Driver)
							     (FNS CreateD2Driver))
							    (tweaked to accept ill-formed string type 
								     specifiers, where there is no = 
								     before theparameter))))
)

(* FOLLOWING DEFINITIONS EXPORTED)



(RPAQQ SCREENOPMACROS (SCREENOP))
(DECLARE: EVAL@COMPILE 

(PUTPROPS SCREENOP MACRO (X (COMPILESCREENOP X)))
)
(DECLARE: EVAL@COMPILE DONTCOPY 
(DEFINEQ

(COMPILESCREENOP
  [LAMBDA (X)                                               (* DD: "18-JUL-82 14:12")

          (* this does the work of compiling a SCREENOP into a more effecient form, with the function lookup already done.
	  It assumes that changes to the SCREENDRIVER record will be backward compatable)


    (PROG (FIELDNAMES (OP (CAR X))
		      (ARG1 (CADR X)))
          (RETURN (COND
		    [(EQ (CAR (LISTP OP))
			 (QUOTE QUOTE))
		      (COND
			([NOT (FMEMB (CADR OP)
				     (SETQ FIELDNAMES (RECORDFIELDNAMES (QUOTE SCREENDRIVER]
			  (COMPERRM (LIST (CADAR X)
					  "IS NOT A DEFINED SCREENOP"))
			  (QUOTE IGNOREMACRO))
			((AND (EQ (CADR OP)
				  (QUOTE GETHANDLER))
			      (EQ (CAR (LISTP ARG1))
				  (QUOTE QUOTE))
			      (FMEMB (CADR ARG1)
				     FIELDNAMES))
			  (LIST (QUOTE FFETCH)
				(LIST (QUOTE SCREENDRIVER)
				      (CADR ARG1))
				(QUOTE CURRENTSCREEN)))
			(T (NCONC (LIST (QUOTE SCREENOPCOMPILED)
					(KWOTE (CADR OP))
					(LIST (QUOTE FFETCH)
					      (LIST (QUOTE SCREENDRIVER)
						    (CADR OP))
					      (QUOTE CURRENTSCREEN)))
				  (CDR X]
		    (T (QUOTE IGNOREMACRO])
)
)

(RPAQQ SCREENOPRECORDS (SCREENDRIVER SGTTYB))
[DECLARE: EVAL@COMPILE 

(ARRAYBLOCK SCREENDRIVER (TYPELIST XSIZE YSIZE CLEAR CLEARLINE CLEARREST INSERT INSERTLINE DELETE 
				   DELETELINE SETHIGHLIGHT CLEARHIGHLIGHT SETLOCK CLEARLOCK SETCURSOR 
				   READCURSOR OVERSTRIKEP OTHERINFO OTHERFUNCTIONS \INFOALIST 
				   GETHANDLER SETINFO PAD PRINT)
	    (CREATE (PROG ((TMP DATUM))
		          (DECLARE (LOCALVARS TMP))
		          (push SYSTEMSCREENDRIVERS TMP)
		          (replace (SCREENDRIVER GETHANDLER)
				   TMP
				   (FUNCTION GETSCREENOPHANDLER))
		          (RETURN TMP)))
	    OVERSTRIKEP _(FUNCTION NILL)
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETHIGHLIGHT _(FUNCTION NILL)
	    CLEARHIGHLIGHT _(FUNCTION NILL)
	    OTHERINFO _(FUNCTION GETSCREENOPINFO)
	    OTHERFUNCTIONS _(FUNCTION NILL)
	    SETINFO _(FUNCTION SETSCREENOPINFO)
	    \INFOALIST _(CONS (CONS (QUOTE CREATED)
				    (DATE)))
	    PAD _[FUNCTION (LAMBDA (N)
		(RPTQ N (\SCREENPUT 0]
	    PRINT _(FUNCTION \SCREENPUT))

(ARRAYBLOCK SGTTYB ((ISPEED BITS 8)
		    (OSPEED BITS 8)
		    (ERASE BITS 8)
		    (KILL BITS 8)
		    (FLAGS BITS 16))
		   [ACCESSFNS ((OUTPUTSPEED (SELECTQ (FETCH (SGTTYB OSPEED) OF DATUM)
						     (1 50)
						     (2 75)
						     (3 110)
						     (4 134)
						     (5 150)
						     (6 200)
						     (7 300)
						     (8 600)
						     (9 1200)
						     (10 1800)
						     (11 2400)
						     (12 4800)
						     (13 9600)
						     NIL])
]


(* END EXPORTED DEFINITIONS)


(RPAQQ SCREENOPS (Create2621k45Driver CreateAAdriver CreateD2Driver CreateHZTdriver CreateHZdriver 
				      CreateV2Driver CreateZenithDriver CreateHP2640Driver 
				      CreatePrototypeDriver CreateSDDriver))
(DEFINEQ

(Create2621k45Driver
  [LAMBDA NIL                                               (* DD: "20-SEP-82 12:41")
                                                            (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		(QUOTE (2621k45 h3 HP hp2621k45 k45]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "HJ"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "K")
		(DELAYFOR 8])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "J")
		(DELAYFOR 8])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT "Q"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "L")
		      (DELAYFOR 38]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "P")
		      (DELAYFOR 2]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "M"]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT "&dD"])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT "&d@"])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		(\SCREENPUT "l"])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		(\SCREENPUT "m"])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "&a")
		(PRIN3 X)
		(\SCREENPUT "c")
		(PRIN3 Y)
		(\SCREENPUT "Y")
		(DELAYFOR 2])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"h3|2621k45|hp2621k45|k45:kb=^H:ku=\EA:kd=\EB:kl=\ED:kr=\EC:kh=\Eh:ks=\E&s1A:ke=\E&s0A:pc=\200:is=@:bt=2\Ei:cm=2\E&a%%r%%dc%%dY:dc=2\EP:ip=2:kn#8:k1=\Ep\r:k2=\Eq\r:k3=\Er\r:k4=\Es\r:k5=\Et\r:k6=\Eu\r:k7=\Ev\r:k8=\Ew\r:ta=2^I:if=/usr/lib/tabset/std:al=38\EL:am:bs:cd=8\EJ:ce=8\EK:ch=8\E&a%%dC:cl=\EH\EJ:co#80:cv=\E&a%%dY:da:db:dl=\EM:ei=\ER:im=\EQ:li#24:mi:ml=\El:mu=\Em:nd=\EC:pt:se=\E&d@:so=\E&dD:us=\E&dD:ue=\E&d@:up=\EA:xs"
					 )
				 (TYPE (QUOTE (2621k45 h3 HP hp2621k45 k45)))
				 (DELETENEXT %% %)
				 (kb (\SCREENPUT ""))
				 (ku (\SCREENPUT "A"))
				 (kd (\SCREENPUT "B"))
				 (kl (\SCREENPUT "D"))
				 (kr (\SCREENPUT "C"))
				 (kh (\SCREENPUT "h"))
				 (ks (\SCREENPUT "&s1A"))
				 (ke (\SCREENPUT "&s0A"))
				 (pc (\SCREENPUT ""))
				 (is (\SCREENPUT "@"))
				 (bt (\SCREENPUT "i")
				     (DELAYFOR 2))
				 (cm (\SCREENPUT "&a")
				     (PRIN3 X)
				     (\SCREENPUT "c")
				     (PRIN3 Y)
				     (\SCREENPUT "Y")
				     (DELAYFOR 2))
				 (dc (\SCREENPUT "P")
				     (DELAYFOR 2))
				 (ip (\SCREENPUT NIL)
				     (DELAYFOR 2))
				 (kn 8)
				 (k1 (\SCREENPUT "p
"))
				 (k2 (\SCREENPUT "q
"))
				 (k3 (\SCREENPUT "r
"))
				 (k4 (\SCREENPUT "s
"))
				 (k5 (\SCREENPUT "t
"))
				 (k6 (\SCREENPUT "u
"))
				 (k7 (\SCREENPUT "v
"))
				 (k8 (\SCREENPUT "w
"))
				 (ta (\SCREENPUT "	")
				     (DELAYFOR 2))
				 (if (\SCREENPUT "/usr/lib/tabset/std"))
				 (al (\SCREENPUT "L")
				     (DELAYFOR 38))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "J")
				     (DELAYFOR 8))
				 (ce (\SCREENPUT "K")
				     (DELAYFOR 8))
				 (ch (\SCREENPUT "&a%%dC")
				     (DELAYFOR 8))
				 (cl (\SCREENPUT "HJ"))
				 (co 80)
				 (cv (\SCREENPUT "&a%%dY"))
				 (da)
				 (db)
				 (dl (\SCREENPUT "M"))
				 (ei (\SCREENPUT "R"))
				 (im (\SCREENPUT "Q"))
				 (li 24)
				 (mi)
				 (ml (\SCREENPUT "l"))
				 (mu (\SCREENPUT "m"))
				 (nd (\SCREENPUT "C"))
				 (pt)
				 (se (\SCREENPUT "&d@"))
				 (so (\SCREENPUT "&dD"))
				 (us (\SCREENPUT "&dD"))
				 (ue (\SCREENPUT "&d@"))
				 (up (\SCREENPUT "A"))
				 (xs])

(CreateAAdriver
  [LAMBDA NIL                                               (* DD: "15-JUL-82 21:22")
    (DECLARE (GLOBALVARS HPENHANCECHAR))
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (ANNARBOR]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 40])
	    CLEAR _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[H%[J]
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE %[K]
	    CLEARREST _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[J]
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE ))
		      (PRIN3 (QUOTE M]
	    SETHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[7m]
	    CLEARHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[0m]
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE %[))
		(PRIN3 (ADD1 Y))
		(PRIN3 (QUOTE ;))
		(PRIN3 (ADD1 X))
		(PRIN3 (QUOTE H]
	    READCURSOR _ NIL])

(CreateD2Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		(QUOTE (D2 dm2500 datamedia2500 2500]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT ""])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT ""])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "
")
		      (DELAYFOR 15]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "")
		      (DELAYFOR 10 T]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "")
		      (DELAYFOR 10 T]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT ""])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT ""])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "")
		(\SCREENPUT (LOGXOR 96 X))
		(\SCREENPUT (LOGXOR 96 Y]
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"D2|dm2500|datamedia2500|2500:al=15^P\n^X^]^X^]:bs:ce=^W:cl=^^^^\177:cm=^L%%r%%n%%.%%.:co#80:dc=10*\b:dl=10*^P^Z^X^]:dm=^P:ed=^X^]:ei=10\377\377^X^]:ho=^B:ic10*^\:im=^P:li#24:nc:nd=^\:pc=\377:so=^N:se=^X^]:up=^Z"
					 )
				 (TYPE (QUOTE (D2 dm2500 datamedia2500 2500)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "
")
				     (DELAYFOR 15))
				 (bs)
				 (ce (\SCREENPUT ""))
				 (cl (\SCREENPUT ""))
				 (cm (\SCREENPUT "")
				     (\SCREENPUT (LOGXOR 96 X))
				     (\SCREENPUT (LOGXOR 96 Y)))
				 (co 80)
				 (dc (\SCREENPUT "")
				     (DELAYFOR 10 T))
				 (dl (\SCREENPUT "")
				     (DELAYFOR 10 T))
				 (dm (\SCREENPUT ""))
				 (ed (\SCREENPUT ""))
				 (ei (\SCREENPUT "")
				     (DELAYFOR 10))
				 (ho (\SCREENPUT ""))
				 (ic)
				 (im (\SCREENPUT ""))
				 (li 24)
				 (nc)
				 (nd (\SCREENPUT ""))
				 (pc (\SCREENPUT ""))
				 (so (\SCREENPUT ""))
				 (se (\SCREENPUT ""))
				 (up (\SCREENPUT ""])

(CreateHZTdriver
  [LAMBDA NIL                                               (* DD: "15-JUL-82 23:21")
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (HZT]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 24])
	    CLEAR _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ~]
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(PRIN3 (QUOTE ~]
	    CLEARREST _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ~]
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(PRIN3 (QUOTE ~]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE ~))
		(\SCREENPUT 31])
	    CLEARHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ~]
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE ~))
		[PRIN3 (CHARACTER (COND
				    ((IGREATERP X 31)
				      X)
				    (T (IPLUS X 96]
		(PRIN3 (CHARACTER (COND
				    ((IGREATERP Y 31)
				      Y)
				    (T (IPLUS Y 96]
	    READCURSOR _ NIL])

(CreateHZdriver
  [LAMBDA NIL                                               (* DD: "15-JUL-82 23:40")
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (HZ]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 24])
	    CLEAR _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ]
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(PRIN3 (QUOTE ]
	    CLEARREST _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ]
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(PRIN3 (QUOTE ]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE ))
		(\SCREENPUT 31])
	    CLEARHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE ]
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE ))
		[PRIN3 (CHARACTER (COND
				    ((IGREATERP X 31)
				      X)
				    (T (IPLUS X 96]
		(PRIN3 (CHARACTER (COND
				    ((IGREATERP Y 31)
				      Y)
				    (T (IPLUS Y 96]
	    READCURSOR _ NIL])

(CreateV2Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		(QUOTE (V2 vi200 visual]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "v"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "x")
		(DELAYFOR 8 T])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "y"])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT "i"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "L")
		      (DELAYFOR 4 T]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "O")
		      (DELAYFOR 8 T]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "M")
		      (DELAYFOR 8 T]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		NIL])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		NIL])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "Y")
		(\SCREENPUT (IPLUS 32 Y))
		(\SCREENPUT (IPLUS 32 X]
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"V2|vi200|visual:al=4*\EL:am:bs:cd=\Ey:ce=8*\Ex:cl=\Ev:cm=\EY%%+\040%%+\040:co#80:dc=8*\EO:dl=8*\EM:ho=\EH:is=\E3\Eb\Ej\E\\\El\EG\Ed\Ek:ks=\E=:ke=\E>:im=\Ei:ei=\Ej:ic=\Ei\040\b\Ej:k0=\E?p:k1=\E?q:k2=\E?r:k3=\E?s:k4=\E?t:k5=\E?u:k6=\E?v:k7=\E?w:k8=\E?x:k9=\E?y:kl=\ED:kr=\EC:ku=\EA:kd=\EB:kh=\EH:li#24:nd=\EC:pt:sr=\EI:up=\EA:vs=\Ed:ve=\Ec"
					 )
				 (TYPE (QUOTE (V2 vi200 visual)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "L")
				     (DELAYFOR 4 T))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "y"))
				 (ce (\SCREENPUT "x")
				     (DELAYFOR 8 T))
				 (cl (\SCREENPUT "v"))
				 (cm (\SCREENPUT "Y")
				     (\SCREENPUT (IPLUS 32 Y))
				     (\SCREENPUT (IPLUS 32 X)))
				 (co 80)
				 (dc (\SCREENPUT "O")
				     (DELAYFOR 8 T))
				 (dl (\SCREENPUT "M")
				     (DELAYFOR 8 T))
				 (ho (\SCREENPUT "H"))
				 (is (\SCREENPUT "3bj\lGdk"))
				 (ks (\SCREENPUT "="))
				 (ke (\SCREENPUT ">"))
				 (im (\SCREENPUT "i"))
				 (ei (\SCREENPUT "j"))
				 (ic (\SCREENPUT "i j"))
				 (k0 (\SCREENPUT "?p"))
				 (k1 (\SCREENPUT "?q"))
				 (k2 (\SCREENPUT "?r"))
				 (k3 (\SCREENPUT "?s"))
				 (k4 (\SCREENPUT "?t"))
				 (k5 (\SCREENPUT "?u"))
				 (k6 (\SCREENPUT "?v"))
				 (k7 (\SCREENPUT "?w"))
				 (k8 (\SCREENPUT "?x"))
				 (k9 (\SCREENPUT "?y"))
				 (kl (\SCREENPUT "D"))
				 (kr (\SCREENPUT "C"))
				 (ku (\SCREENPUT "A"))
				 (kd (\SCREENPUT "B"))
				 (kh (\SCREENPUT "H"))
				 (li 24)
				 (nd (\SCREENPUT "C"))
				 (pt)
				 (sr (\SCREENPUT "I"))
				 (up (\SCREENPUT "A"))
				 (vs (\SCREENPUT "d"))
				 (ve (\SCREENPUT "c"])

(CreateZenithDriver
  [LAMBDA NIL                                               (* DD: "17-APR-82 16:39")
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		(QUOTE (ZENITH Z19 HEATHKIT H19 h19 z19]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(PRIN3 "E"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the whole of the next N lines, leaving blank 
							    lines)
		(PRIN3 "K"])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(PRIN3 "J"])
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(PRIN3 "p"])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(PRIN3 "q"])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(PRIN3 "Y")
		(PRIN3 (FCHARACTER (IPLUS 32 Y)))
		(PRIN3 (FCHARACTER (IPLUS 32 X])

(CreateHP2640Driver
  [LAMBDA NIL                                               (* DD: "18-JUL-82 14:30")
    (DECLARE (GLOBALVARS RUBOUTS HPENCHANCECHAR))
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (HP2640]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 24])
	    CLEAR _(FUNCTION [LAMBDA NIL
		(SCREENOP (QUOTE CLEARLOCK))
		(PRIN3 (QUOTE HJ))
		(PRIN3 RUBOUTS])
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE K))
		      (PRIN3 RUBOUTS]
	    CLEARREST _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE J))
		(PRIN3 RUBOUTS])
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE ))
		      (PRIN3 (QUOTE M))
		      (PRIN3 RUBOUTS]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE &d))
		(PRIN3 HPENHANCECHAR])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE &d@))
		(PRIN3 RUBOUTS])
	    SETLOCK _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE l]
	    CLEARLOCK _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE m]
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE &a))
		(PRIN3 X)
		(PRIN3 (QUOTE c))
		(PRIN3 Y)
		(PRIN3 (QUOTE R]
	    READCURSOR _ NIL
	    PAD _(FUNCTION (LAMBDA (N)
		(RPTQ N (\SCREENPUT 127])

(CreatePrototypeDriver
  [LAMBDA NIL                                               (* DD: "19-JUL-82 23:38")

          (* this prototype driver is used by BUILDDRIVER as a template for defining new drivers, the atom PROGRAM is SUBST'd 
	  with the stuff from termcap info. The expressions are all (QUOTE --) deliberately so they will not be compiled, but 
	  for copies, one would want to use FUNCTION to cause them to be compiled)


    (create SCREENDRIVER
	    TYPELIST _[QUOTE (LAMBDA NIL                    (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for)) . PROGRAM]
	    XSIZE _(QUOTE [LAMBDA NIL                       (* return the width of the screen in characters)
 . PROGRAM])
	    YSIZE _(QUOTE [LAMBDA NIL                       (* return the number of lines on the screen.)
 . PROGRAM])
	    CLEAR _(QUOTE [LAMBDA NIL                       (* home, unlock, and clear the whole screen)
 . PROGRAM])
	    CLEARLINE _(QUOTE [LAMBDA NIL                   (* clear the rest of the current line) . 
				      PROGRAM])
	    CLEARREST _(QUOTE [LAMBDA NIL                   (* clear the rest of the current line) . 
				      PROGRAM])
	    INSERT _(QUOTE [LAMBDA NIL                      (* set insert mode) . PROGRAM])
	    INSERTLINE _[QUOTE (LAMBDA (N)                  (* insert a new line before the current line)
				       (RPTQ (OR N 1) . PROGRAM]
	    DELETE _[QUOTE (LAMBDA (N)                      (* delete N characters at the current cursor position)
				   (RPTQ (OR N 1) . PROGRAM]
	    DELETELINE _[QUOTE (LAMBDA (N)                  (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
				       (RPTQ (OR N 1) . PROGRAM]
	    SETHIGHLIGHT _(QUOTE [LAMBDA NIL                (* set some sort of highlight mode) . 
					 PROGRAM])
	    CLEARHIGHLIGHT _(QUOTE [LAMBDA NIL              (* clear the highlight mode) . PROGRAM])
	    SETLOCK _(QUOTE [LAMBDA NIL 

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)

 . PROGRAM])
	    CLEARLOCK _(QUOTE [LAMBDA NIL                   (* clear the memory lock. a nop is ok if set lock is not
							    supported) . PROGRAM])
	    SETCURSOR _(QUOTE [LAMBDA (X Y)                 (* position the cursor to X,Y)
				       . PROGRAM])
	    READCURSOR _(QUOTE [LAMBDA NIL                  (* read the current cursor position) . 
				       PROGRAM])
	    OVERSTRIKEP _(QUOTE [LAMBDA NIL                 (* return T if this terminal overstrikes rather than 
							    superceeds) . PROGRAM])
	    PAD _(QUOTE (LAMBDA (N)                         (* output N pad characters, called by DELAYFOR after 
							    computing the correct number)
				(RPTQ N . PROGRAM])

(CreateSDDriver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		(QUOTE (SD supdup]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		95])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		60])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT ""])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT ""]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT ""]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT ""])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT ""])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "")
		(\SCREENPUT Y)
		(\SCREENPUT X])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		T])
	    \INFOALIST _(QUOTE ((TERMCAP 

"SD|supdup:co#95:li#60:am:vb=\177\23:nd=\177\20:cl=\177\22:so=\177\31:se=\177\32:pt:ce=\177\05:ec=\177\06:cd=\177\04:bs:os:up=\177\15:cm=\177\21%%.%%.:al=\177\25\01:dl=\177\26\01:ns"
					 )
				 (TYPE (QUOTE (SD supdup)))
				 (DELETENEXT %%%)
				 (co 95)
				 (li 60)
				 (am)
				 (vb (\SCREENPUT ""))
				 (nd (\SCREENPUT ""))
				 (cl (\SCREENPUT ""))
				 (so (\SCREENPUT ""))
				 (se (\SCREENPUT ""))
				 (pt)
				 (ce (\SCREENPUT ""))
				 (ec (\SCREENPUT ""))
				 (cd (\SCREENPUT ""))
				 (bs)
				 (os)
				 (up (\SCREENPUT "
"))
				 (cm (\SCREENPUT "")
				     (\SCREENPUT Y)
				     (\SCREENPUT X))
				 (al (\SCREENPUT ""))
				 (dl (\SCREENPUT ""))
				 (ns])
)

(PUTPROPS Create2621k45Driver SCREENDRIVERS T)

(PUTPROPS CreateAAdriver SCREENDRIVERS T)

(PUTPROPS CreateD2Driver SCREENDRIVERS T)

(PUTPROPS CreateHZTdriver SCREENDRIVERS T)

(PUTPROPS CreateHZdriver SCREENDRIVERS T)

(PUTPROPS CreateV2Driver SCREENDRIVERS T)

(PUTPROPS CreateZenithDriver SCREENDRIVERS T)

(PUTPROPS CreateHP2640Driver SCREENDRIVERS T)

(PUTPROPS CreatePrototypeDriver SCREENDRIVERS T)

(PUTPROPS CreateSDDriver SCREENDRIVERS T)
[MAPCAR (QUOTE (Create2621k45Driver CreateAAdriver CreateD2Driver CreateHZTdriver CreateHZdriver 
				    CreateV2Driver CreateZenithDriver CreateHP2640Driver 
				    CreatePrototypeDriver CreateSDDriver))
	(FUNCTION (LAMBDA (A)
			  (AND (GETD A)
			       (APPLY* A]

(RPAQ \SPEEDBLOCK (CREATE SGTTYB))

(RPAQQ HPENHANCECHAR B)

(RPAQ RUBOUTS (PACKC (QUOTE (127 127 127 127 127))))
(DISPLAYTERMP)
(DECLARE: DONTCOPY
  (FILEMAP (NIL (2561 19468 (BUILDDRIVER 2571 . 4747) (CHECKIFSCREENDRIVER 4749 . 5407) (COMPILESCREENOP
 5409 . 6557) (CSPEED 6559 . 7106) (DELAYFOR 7108 . 7466) (DISPLAYTERMP 7468 . 8986) (DISPLAYTERMTYPE 
8988 . 9638) (GETSCREENOPHANDLER 9640 . 9877) (GETSCREENOPINFO 9879 . 10067) (PARSECHARSEQUENCE 10069
 . 11650) (PARSECURSORPOS 11652 . 14019) (PARSETERMCAP 14021 . 15831) (PREPAREDELETENEXT 15833 . 17005
) (SCREENOP 17007 . 17453) (SCREENOPCOMPILED 17455 . 17745) (SEGMENTSTRING 17747 . 18366) (
SETSCREENOPINFO 18368 . 18561) (\SCREENPUT 18563 . 19466)) (26090 27250 (COMPILESCREENOP 26100 . 27248
)) (29037 54479 (Create2621k45Driver 29047 . 34208) (CreateAAdriver 34210 . 35251) (CreateD2Driver 
35253 . 38870) (CreateHZTdriver 38872 . 39900) (CreateHZdriver 39902 . 40928) (CreateV2Driver 40930 . 
45354) (CreateZenithDriver 45356 . 47101) (CreateHP2640Driver 47103 . 48415) (CreatePrototypeDriver 
48417 . 51412) (CreateSDDriver 51414 . 54477)))))
STOP
