(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "RPC2")
(il:filecreated "19-Oct-88 18:16:35" il:|{HULK:PARC:XEROX}<VANMELLE>LISP>RPCOS.;8| 31706  

      il:|changes| il:|to:|  (il:vars il:rpcoscoms) (il:variables *os-rpc-methods*) (il:functions create-os-udp-stream os-exchange-udp-packets os-udp-initialize)

      il:|previous| il:|date:| "19-Oct-88 15:33:30" il:|{HULK:PARC:XEROX}<VANMELLE>LISP>RPCOS.;7|)


; Copyright (c) 1988 by Xerox Corporation.  All rights reserved.

(il:prettycomprint il:rpcoscoms)

(il:rpaqq il:rpcoscoms ((il:* il:|;;| "OS networking code") (il:props (il:rpcos il:makefile-environment il:filetype)) (eval-when (eval compile) (il:files il:rpcdecls) (il:files (il:loadcomp) il:llsubrs)) (il:coms (il:* il:\; "XDR data block") (il:records xdr-data-block) (il:variables *cells-per-xdr-data-block* *free-xdr-data-blocks* *max-xdr-data-blocks*) (il:functions allocate-xdr-data-block reclaim-xdr-data-block)) (il:variables *os-rpc-methods*) (il:functions create-os-udp-stream os-exchange-udp-packets os-resolve-host os-udp-initialize os-udp-close read-string-address) (il:functions os-udp-getbyte os-udp-putbyte os-udp-getrawbytes os-udp-putrawbytes os-udp-getcell os-udp-getunsigned os-udp-putcell os-udp-getoffset os-udp-skipbytes os-udp-zerobytes)))



(il:* il:|;;| "OS networking code")


(il:putprops il:rpcos il:makefile-environment (:readtable "XCL" :package "RPC2"))

(il:putprops il:rpcos il:filetype :compile-file)
(eval-when (eval compile)

(il:filesload il:rpcdecls)


(il:filesload (il:loadcomp) il:llsubrs)
)



(il:* il:\; "XDR data block")

(il:declare\: il:eval@compile

(il:datatype xdr-data-block ((xdr-public 500 il:word)))
)

(il:/declaredatatype (quote xdr-data-block) (quote (il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word il:word)) (quote ((xdr-data-block 0 (il:bits . 15)) (xdr-data-block 1 (il:bits . 15)) (xdr-data-block 2 (il:bits . 15)) (xdr-data-block 3 (il:bits . 15)) (xdr-data-block 4 (il:bits . 15)) (xdr-data-block 5 (il:bits . 15)) (xdr-data-block 6 (il:bits . 15)) (xdr-data-block 7 (il:bits . 15)) (xdr-data-block 8 (il:bits . 15)) (xdr-data-block 9 (il:bits . 15)) (xdr-data-block 10 (il:bits . 15)) (xdr-data-block 11 (il:bits . 15)) (xdr-data-block 12 (il:bits . 15)) (xdr-data-block 13 (il:bits . 15)) (xdr-data-block 14 (il:bits . 15)) (xdr-data-block 15 (il:bits . 15)) (xdr-data-block 16 (il:bits . 15)) (xdr-data-block 17 (il:bits . 15)) (xdr-data-block 18 (il:bits . 15)) (xdr-data-block 19 (il:bits . 15)) (xdr-data-block 20 (il:bits . 15)) (xdr-data-block 21 (il:bits . 15)) (xdr-data-block 22 (il:bits . 15)) (xdr-data-block 23 (il:bits . 15)) (xdr-data-block 24 (il:bits . 15)) (xdr-data-block 25 (il:bits . 15)) (xdr-data-block 26 (il:bits . 15)) (xdr-data-block 27 (il:bits . 15)) (xdr-data-block 28 (il:bits . 15)) (xdr-data-block 29 (il:bits . 15)) (xdr-data-block 30 (il:bits . 15)) (xdr-data-block 31 (il:bits . 15)) (xdr-data-block 32 (il:bits . 15)) (xdr-data-block 33 (il:bits . 15)) (xdr-data-block 34 (il:bits . 15)) (xdr-data-block 35 (il:bits . 15)) (xdr-data-block 36 (il:bits . 15)) (xdr-data-block 37 (il:bits . 15)) (xdr-data-block 38 (il:bits . 15)) (xdr-data-block 39 (il:bits . 15)) (xdr-data-block 40 (il:bits . 15)) (xdr-data-block 41 (il:bits . 15)) (xdr-data-block 42 (il:bits . 15)) (xdr-data-block 43 (il:bits . 15)) (xdr-data-block 44 (il:bits . 15)) (xdr-data-block 45 (il:bits . 15)) (xdr-data-block 46 (il:bits . 15)) (xdr-data-block 47 (il:bits . 15)) (xdr-data-block 48 (il:bits . 15)) (xdr-data-block 49 (il:bits . 15)) (xdr-data-block 50 (il:bits . 15)) (xdr-data-block 51 (il:bits . 15)) (xdr-data-block 52 (il:bits . 15)) (xdr-data-block 53 (il:bits . 15)) (xdr-data-block 54 (il:bits . 15)) (xdr-data-block 55 (il:bits . 15)) (xdr-data-block 56 (il:bits . 15)) (xdr-data-block 57 (il:bits . 15)) (xdr-data-block 58 (il:bits . 15)) (xdr-data-block 59 (il:bits . 15)) (xdr-data-block 60 (il:bits . 15)) (xdr-data-block 61 (il:bits . 15)) (xdr-data-block 62 (il:bits . 15)) (xdr-data-block 63 (il:bits . 15)) (xdr-data-block 64 (il:bits . 15)) (xdr-data-block 65 (il:bits . 15)) (xdr-data-block 66 (il:bits . 15)) (xdr-data-block 67 (il:bits . 15)) (xdr-data-block 68 (il:bits . 15)) (xdr-data-block 69 (il:bits . 15)) (xdr-data-block 70 (il:bits . 15)) (xdr-data-block 71 (il:bits . 15)) (xdr-data-block 72 (il:bits . 15)) (xdr-data-block 73 (il:bits . 15)) (xdr-data-block 74 (il:bits . 15)) (xdr-data-block 75 (il:bits . 15)) (xdr-data-block 76 (il:bits . 15)) (xdr-data-block 77 (il:bits . 15)) (xdr-data-block 78 (il:bits . 15)) (xdr-data-block 79 (il:bits . 15)) (xdr-data-block 80 (il:bits . 15)) (xdr-data-block 81 (il:bits . 15)) (xdr-data-block 82 (il:bits . 15)) (xdr-data-block 83 (il:bits . 15)) (xdr-data-block 84 (il:bits . 15)) (xdr-data-block 85 (il:bits . 15)) (xdr-data-block 86 (il:bits . 15)) (xdr-data-block 87 (il:bits . 15)) (xdr-data-block 88 (il:bits . 15)) (xdr-data-block 89 (il:bits . 15)) (xdr-data-block 90 (il:bits . 15)) (xdr-data-block 91 (il:bits . 15)) (xdr-data-block 92 (il:bits . 15)) (xdr-data-block 93 (il:bits . 15)) (xdr-data-block 94 (il:bits . 15)) (xdr-data-block 95 (il:bits . 15)) (xdr-data-block 96 (il:bits . 15)) (xdr-data-block 97 (il:bits . 15)) (xdr-data-block 98 (il:bits . 15)) (xdr-data-block 99 (il:bits . 15)) (xdr-data-block 100 (il:bits . 15)) (xdr-data-block 101 (il:bits . 15)) (xdr-data-block 102 (il:bits . 15)) (xdr-data-block 103 (il:bits . 15)) (xdr-data-block 104 (il:bits . 15)) (xdr-data-block 105 (il:bits . 15)) (xdr-data-block 106 (il:bits . 15)) (xdr-data-block 107 (il:bits . 15)) (xdr-data-block 108 (il:bits . 15)) (xdr-data-block 109 (il:bits . 15)) (xdr-data-block 110 (il:bits . 15)) (xdr-data-block 111 (il:bits . 15)) (xdr-data-block 112 (il:bits . 15)) (xdr-data-block 113 (il:bits . 15)) (xdr-data-block 114 (il:bits . 15)) (xdr-data-block 115 (il:bits . 15)) (xdr-data-block 116 (il:bits . 15)) (xdr-data-block 117 (il:bits . 15)) (xdr-data-block 118 (il:bits . 15)) (xdr-data-block 119 (il:bits . 15)) (xdr-data-block 120 (il:bits . 15)) (xdr-data-block 121 (il:bits . 15)) (xdr-data-block 122 (il:bits . 15)) (xdr-data-block 123 (il:bits . 15)) (xdr-data-block 124 (il:bits . 15)) (xdr-data-block 125 (il:bits . 15)) (xdr-data-block 126 (il:bits . 15)) (xdr-data-block 127 (il:bits . 15)) (xdr-data-block 128 (il:bits . 15)) (xdr-data-block 129 (il:bits . 15)) (xdr-data-block 130 (il:bits . 15)) (xdr-data-block 131 (il:bits . 15)) (xdr-data-block 132 (il:bits . 15)) (xdr-data-block 133 (il:bits . 15)) (xdr-data-block 134 (il:bits . 15)) (xdr-data-block 135 (il:bits . 15)) (xdr-data-block 136 (il:bits . 15)) (xdr-data-block 137 (il:bits . 15)) (xdr-data-block 138 (il:bits . 15)) (xdr-data-block 139 (il:bits . 15)) (xdr-data-block 140 (il:bits . 15)) (xdr-data-block 141 (il:bits . 15)) (xdr-data-block 142 (il:bits . 15)) (xdr-data-block 143 (il:bits . 15)) (xdr-data-block 144 (il:bits . 15)) (xdr-data-block 145 (il:bits . 15)) (xdr-data-block 146 (il:bits . 15)) (xdr-data-block 147 (il:bits . 15)) (xdr-data-block 148 (il:bits . 15)) (xdr-data-block 149 (il:bits . 15)) (xdr-data-block 150 (il:bits . 15)) (xdr-data-block 151 (il:bits . 15)) (xdr-data-block 152 (il:bits . 15)) (xdr-data-block 153 (il:bits . 15)) (xdr-data-block 154 (il:bits . 15)) (xdr-data-block 155 (il:bits . 15)) (xdr-data-block 156 (il:bits . 15)) (xdr-data-block 157 (il:bits . 15)) (xdr-data-block 158 (il:bits . 15)) (xdr-data-block 159 (il:bits . 15)) (xdr-data-block 160 (il:bits . 15)) (xdr-data-block 161 (il:bits . 15)) (xdr-data-block 162 (il:bits . 15)) (xdr-data-block 163 (il:bits . 15)) (xdr-data-block 164 (il:bits . 15)) (xdr-data-block 165 (il:bits . 15)) (xdr-data-block 166 (il:bits . 15)) (xdr-data-block 167 (il:bits . 15)) (xdr-data-block 168 (il:bits . 15)) (xdr-data-block 169 (il:bits . 15)) (xdr-data-block 170 (il:bits . 15)) (xdr-data-block 171 (il:bits . 15)) (xdr-data-block 172 (il:bits . 15)) (xdr-data-block 173 (il:bits . 15)) (xdr-data-block 174 (il:bits . 15)) (xdr-data-block 175 (il:bits . 15)) (xdr-data-block 176 (il:bits . 15)) (xdr-data-block 177 (il:bits . 15)) (xdr-data-block 178 (il:bits . 15)) (xdr-data-block 179 (il:bits . 15)) (xdr-data-block 180 (il:bits . 15)) (xdr-data-block 181 (il:bits . 15)) (xdr-data-block 182 (il:bits . 15)) (xdr-data-block 183 (il:bits . 15)) (xdr-data-block 184 (il:bits . 15)) (xdr-data-block 185 (il:bits . 15)) (xdr-data-block 186 (il:bits . 15)) (xdr-data-block 187 (il:bits . 15)) (xdr-data-block 188 (il:bits . 15)) (xdr-data-block 189 (il:bits . 15)) (xdr-data-block 190 (il:bits . 15)) (xdr-data-block 191 (il:bits . 15)) (xdr-data-block 192 (il:bits . 15)) (xdr-data-block 193 (il:bits . 15)) (xdr-data-block 194 (il:bits . 15)) (xdr-data-block 195 (il:bits . 15)) (xdr-data-block 196 (il:bits . 15)) (xdr-data-block 197 (il:bits . 15)) (xdr-data-block 198 (il:bits . 15)) (xdr-data-block 199 (il:bits . 15)) (xdr-data-block 200 (il:bits . 15)) (xdr-data-block 201 (il:bits . 15)) (xdr-data-block 202 (il:bits . 15)) (xdr-data-block 203 (il:bits . 15)) (xdr-data-block 204 (il:bits . 15)) (xdr-data-block 205 (il:bits . 15)) (xdr-data-block 206 (il:bits . 15)) (xdr-data-block 207 (il:bits . 15)) (xdr-data-block 208 (il:bits . 15)) (xdr-data-block 209 (il:bits . 15)) (xdr-data-block 210 (il:bits . 15)) (xdr-data-block 211 (il:bits . 15)) (xdr-data-block 212 (il:bits . 15)) (xdr-data-block 213 (il:bits . 15)) (xdr-data-block 214 (il:bits . 15)) (xdr-data-block 215 (il:bits . 15)) (xdr-data-block 216 (il:bits . 15)) (xdr-data-block 217 (il:bits . 15)) (xdr-data-block 218 (il:bits . 15)) (xdr-data-block 219 (il:bits . 15)) (xdr-data-block 220 (il:bits . 15)) (xdr-data-block 221 (il:bits . 15)) (xdr-data-block 222 (il:bits . 15)) (xdr-data-block 223 (il:bits . 15)) (xdr-data-block 224 (il:bits . 15)) (xdr-data-block 225 (il:bits . 15)) (xdr-data-block 226 (il:bits . 15)) (xdr-data-block 227 (il:bits . 15)) (xdr-data-block 228 (il:bits . 15)) (xdr-data-block 229 (il:bits . 15)) (xdr-data-block 230 (il:bits . 15)) (xdr-data-block 231 (il:bits . 15)) (xdr-data-block 232 (il:bits . 15)) (xdr-data-block 233 (il:bits . 15)) (xdr-data-block 234 (il:bits . 15)) (xdr-data-block 235 (il:bits . 15)) (xdr-data-block 236 (il:bits . 15)) (xdr-data-block 237 (il:bits . 15)) (xdr-data-block 238 (il:bits . 15)) (xdr-data-block 239 (il:bits . 15)) (xdr-data-block 240 (il:bits . 15)) (xdr-data-block 241 (il:bits . 15)) (xdr-data-block 242 (il:bits . 15)) (xdr-data-block 243 (il:bits . 15)) (xdr-data-block 244 (il:bits . 15)) (xdr-data-block 245 (il:bits . 15)) (xdr-data-block 246 (il:bits . 15)) (xdr-data-block 247 (il:bits . 15)) (xdr-data-block 248 (il:bits . 15)) (xdr-data-block 249 (il:bits . 15)) (xdr-data-block 250 (il:bits . 15)) (xdr-data-block 251 (il:bits . 15)) (xdr-data-block 252 (il:bits . 15)) (xdr-data-block 253 (il:bits . 15)) (xdr-data-block 254 (il:bits . 15)) (xdr-data-block 255 (il:bits . 15)) (xdr-data-block 256 (il:bits . 15)) (xdr-data-block 257 (il:bits . 15)) (xdr-data-block 258 (il:bits . 15)) (xdr-data-block 259 (il:bits . 15)) (xdr-data-block 260 (il:bits . 15)) (xdr-data-block 261 (il:bits . 15)) (xdr-data-block 262 (il:bits . 15)) (xdr-data-block 263 (il:bits . 15)) (xdr-data-block 264 (il:bits . 15)) (xdr-data-block 265 (il:bits . 15)) (xdr-data-block 266 (il:bits . 15)) (xdr-data-block 267 (il:bits . 15)) (xdr-data-block 268 (il:bits . 15)) (xdr-data-block 269 (il:bits . 15)) (xdr-data-block 270 (il:bits . 15)) (xdr-data-block 271 (il:bits . 15)) (xdr-data-block 272 (il:bits . 15)) (xdr-data-block 273 (il:bits . 15)) (xdr-data-block 274 (il:bits . 15)) (xdr-data-block 275 (il:bits . 15)) (xdr-data-block 276 (il:bits . 15)) (xdr-data-block 277 (il:bits . 15)) (xdr-data-block 278 (il:bits . 15)) (xdr-data-block 279 (il:bits . 15)) (xdr-data-block 280 (il:bits . 15)) (xdr-data-block 281 (il:bits . 15)) (xdr-data-block 282 (il:bits . 15)) (xdr-data-block 283 (il:bits . 15)) (xdr-data-block 284 (il:bits . 15)) (xdr-data-block 285 (il:bits . 15)) (xdr-data-block 286 (il:bits . 15)) (xdr-data-block 287 (il:bits . 15)) (xdr-data-block 288 (il:bits . 15)) (xdr-data-block 289 (il:bits . 15)) (xdr-data-block 290 (il:bits . 15)) (xdr-data-block 291 (il:bits . 15)) (xdr-data-block 292 (il:bits . 15)) (xdr-data-block 293 (il:bits . 15)) (xdr-data-block 294 (il:bits . 15)) (xdr-data-block 295 (il:bits . 15)) (xdr-data-block 296 (il:bits . 15)) (xdr-data-block 297 (il:bits . 15)) (xdr-data-block 298 (il:bits . 15)) (xdr-data-block 299 (il:bits . 15)) (xdr-data-block 300 (il:bits . 15)) (xdr-data-block 301 (il:bits . 15)) (xdr-data-block 302 (il:bits . 15)) (xdr-data-block 303 (il:bits . 15)) (xdr-data-block 304 (il:bits . 15)) (xdr-data-block 305 (il:bits . 15)) (xdr-data-block 306 (il:bits . 15)) (xdr-data-block 307 (il:bits . 15)) (xdr-data-block 308 (il:bits . 15)) (xdr-data-block 309 (il:bits . 15)) (xdr-data-block 310 (il:bits . 15)) (xdr-data-block 311 (il:bits . 15)) (xdr-data-block 312 (il:bits . 15)) (xdr-data-block 313 (il:bits . 15)) (xdr-data-block 314 (il:bits . 15)) (xdr-data-block 315 (il:bits . 15)) (xdr-data-block 316 (il:bits . 15)) (xdr-data-block 317 (il:bits . 15)) (xdr-data-block 318 (il:bits . 15)) (xdr-data-block 319 (il:bits . 15)) (xdr-data-block 320 (il:bits . 15)) (xdr-data-block 321 (il:bits . 15)) (xdr-data-block 322 (il:bits . 15)) (xdr-data-block 323 (il:bits . 15)) (xdr-data-block 324 (il:bits . 15)) (xdr-data-block 325 (il:bits . 15)) (xdr-data-block 326 (il:bits . 15)) (xdr-data-block 327 (il:bits . 15)) (xdr-data-block 328 (il:bits . 15)) (xdr-data-block 329 (il:bits . 15)) (xdr-data-block 330 (il:bits . 15)) (xdr-data-block 331 (il:bits . 15)) (xdr-data-block 332 (il:bits . 15)) (xdr-data-block 333 (il:bits . 15)) (xdr-data-block 334 (il:bits . 15)) (xdr-data-block 335 (il:bits . 15)) (xdr-data-block 336 (il:bits . 15)) (xdr-data-block 337 (il:bits . 15)) (xdr-data-block 338 (il:bits . 15)) (xdr-data-block 339 (il:bits . 15)) (xdr-data-block 340 (il:bits . 15)) (xdr-data-block 341 (il:bits . 15)) (xdr-data-block 342 (il:bits . 15)) (xdr-data-block 343 (il:bits . 15)) (xdr-data-block 344 (il:bits . 15)) (xdr-data-block 345 (il:bits . 15)) (xdr-data-block 346 (il:bits . 15)) (xdr-data-block 347 (il:bits . 15)) (xdr-data-block 348 (il:bits . 15)) (xdr-data-block 349 (il:bits . 15)) (xdr-data-block 350 (il:bits . 15)) (xdr-data-block 351 (il:bits . 15)) (xdr-data-block 352 (il:bits . 15)) (xdr-data-block 353 (il:bits . 15)) (xdr-data-block 354 (il:bits . 15)) (xdr-data-block 355 (il:bits . 15)) (xdr-data-block 356 (il:bits . 15)) (xdr-data-block 357 (il:bits . 15)) (xdr-data-block 358 (il:bits . 15)) (xdr-data-block 359 (il:bits . 15)) (xdr-data-block 360 (il:bits . 15)) (xdr-data-block 361 (il:bits . 15)) (xdr-data-block 362 (il:bits . 15)) (xdr-data-block 363 (il:bits . 15)) (xdr-data-block 364 (il:bits . 15)) (xdr-data-block 365 (il:bits . 15)) (xdr-data-block 366 (il:bits . 15)) (xdr-data-block 367 (il:bits . 15)) (xdr-data-block 368 (il:bits . 15)) (xdr-data-block 369 (il:bits . 15)) (xdr-data-block 370 (il:bits . 15)) (xdr-data-block 371 (il:bits . 15)) (xdr-data-block 372 (il:bits . 15)) (xdr-data-block 373 (il:bits . 15)) (xdr-data-block 374 (il:bits . 15)) (xdr-data-block 375 (il:bits . 15)) (xdr-data-block 376 (il:bits . 15)) (xdr-data-block 377 (il:bits . 15)) (xdr-data-block 378 (il:bits . 15)) (xdr-data-block 379 (il:bits . 15)) (xdr-data-block 380 (il:bits . 15)) (xdr-data-block 381 (il:bits . 15)) (xdr-data-block 382 (il:bits . 15)) (xdr-data-block 383 (il:bits . 15)) (xdr-data-block 384 (il:bits . 15)) (xdr-data-block 385 (il:bits . 15)) (xdr-data-block 386 (il:bits . 15)) (xdr-data-block 387 (il:bits . 15)) (xdr-data-block 388 (il:bits . 15)) (xdr-data-block 389 (il:bits . 15)) (xdr-data-block 390 (il:bits . 15)) (xdr-data-block 391 (il:bits . 15)) (xdr-data-block 392 (il:bits . 15)) (xdr-data-block 393 (il:bits . 15)) (xdr-data-block 394 (il:bits . 15)) (xdr-data-block 395 (il:bits . 15)) (xdr-data-block 396 (il:bits . 15)) (xdr-data-block 397 (il:bits . 15)) (xdr-data-block 398 (il:bits . 15)) (xdr-data-block 399 (il:bits . 15)) (xdr-data-block 400 (il:bits . 15)) (xdr-data-block 401 (il:bits . 15)) (xdr-data-block 402 (il:bits . 15)) (xdr-data-block 403 (il:bits . 15)) (xdr-data-block 404 (il:bits . 15)) (xdr-data-block 405 (il:bits . 15)) (xdr-data-block 406 (il:bits . 15)) (xdr-data-block 407 (il:bits . 15)) (xdr-data-block 408 (il:bits . 15)) (xdr-data-block 409 (il:bits . 15)) (xdr-data-block 410 (il:bits . 15)) (xdr-data-block 411 (il:bits . 15)) (xdr-data-block 412 (il:bits . 15)) (xdr-data-block 413 (il:bits . 15)) (xdr-data-block 414 (il:bits . 15)) (xdr-data-block 415 (il:bits . 15)) (xdr-data-block 416 (il:bits . 15)) (xdr-data-block 417 (il:bits . 15)) (xdr-data-block 418 (il:bits . 15)) (xdr-data-block 419 (il:bits . 15)) (xdr-data-block 420 (il:bits . 15)) (xdr-data-block 421 (il:bits . 15)) (xdr-data-block 422 (il:bits . 15)) (xdr-data-block 423 (il:bits . 15)) (xdr-data-block 424 (il:bits . 15)) (xdr-data-block 425 (il:bits . 15)) (xdr-data-block 426 (il:bits . 15)) (xdr-data-block 427 (il:bits . 15)) (xdr-data-block 428 (il:bits . 15)) (xdr-data-block 429 (il:bits . 15)) (xdr-data-block 430 (il:bits . 15)) (xdr-data-block 431 (il:bits . 15)) (xdr-data-block 432 (il:bits . 15)) (xdr-data-block 433 (il:bits . 15)) (xdr-data-block 434 (il:bits . 15)) (xdr-data-block 435 (il:bits . 15)) (xdr-data-block 436 (il:bits . 15)) (xdr-data-block 437 (il:bits . 15)) (xdr-data-block 438 (il:bits . 15)) (xdr-data-block 439 (il:bits . 15)) (xdr-data-block 440 (il:bits . 15)) (xdr-data-block 441 (il:bits . 15)) (xdr-data-block 442 (il:bits . 15)) (xdr-data-block 443 (il:bits . 15)) (xdr-data-block 444 (il:bits . 15)) (xdr-data-block 445 (il:bits . 15)) (xdr-data-block 446 (il:bits . 15)) (xdr-data-block 447 (il:bits . 15)) (xdr-data-block 448 (il:bits . 15)) (xdr-data-block 449 (il:bits . 15)) (xdr-data-block 450 (il:bits . 15)) (xdr-data-block 451 (il:bits . 15)) (xdr-data-block 452 (il:bits . 15)) (xdr-data-block 453 (il:bits . 15)) (xdr-data-block 454 (il:bits . 15)) (xdr-data-block 455 (il:bits . 15)) (xdr-data-block 456 (il:bits . 15)) (xdr-data-block 457 (il:bits . 15)) (xdr-data-block 458 (il:bits . 15)) (xdr-data-block 459 (il:bits . 15)) (xdr-data-block 460 (il:bits . 15)) (xdr-data-block 461 (il:bits . 15)) (xdr-data-block 462 (il:bits . 15)) (xdr-data-block 463 (il:bits . 15)) (xdr-data-block 464 (il:bits . 15)) (xdr-data-block 465 (il:bits . 15)) (xdr-data-block 466 (il:bits . 15)) (xdr-data-block 467 (il:bits . 15)) (xdr-data-block 468 (il:bits . 15)) (xdr-data-block 469 (il:bits . 15)) (xdr-data-block 470 (il:bits . 15)) (xdr-data-block 471 (il:bits . 15)) (xdr-data-block 472 (il:bits . 15)) (xdr-data-block 473 (il:bits . 15)) (xdr-data-block 474 (il:bits . 15)) (xdr-data-block 475 (il:bits . 15)) (xdr-data-block 476 (il:bits . 15)) (xdr-data-block 477 (il:bits . 15)) (xdr-data-block 478 (il:bits . 15)) (xdr-data-block 479 (il:bits . 15)) (xdr-data-block 480 (il:bits . 15)) (xdr-data-block 481 (il:bits . 15)) (xdr-data-block 482 (il:bits . 15)) (xdr-data-block 483 (il:bits . 15)) (xdr-data-block 484 (il:bits . 15)) (xdr-data-block 485 (il:bits . 15)) (xdr-data-block 486 (il:bits . 15)) (xdr-data-block 487 (il:bits . 15)) (xdr-data-block 488 (il:bits . 15)) (xdr-data-block 489 (il:bits . 15)) (xdr-data-block 490 (il:bits . 15)) (xdr-data-block 491 (il:bits . 15)) (xdr-data-block 492 (il:bits . 15)) (xdr-data-block 493 (il:bits . 15)) (xdr-data-block 494 (il:bits . 15)) (xdr-data-block 495 (il:bits . 15)) (xdr-data-block 496 (il:bits . 15)) (xdr-data-block 497 (il:bits . 15)) (xdr-data-block 498 (il:bits . 15)) (xdr-data-block 499 (il:bits . 15)))) (quote 500))

(defconstant *cells-per-xdr-data-block* 250 "Number of 32 bit cells in a data block.")

(defglobalparameter *free-xdr-data-blocks* nil "A list of free xdr data blocks.")

(defglobalparameter *max-xdr-data-blocks* 5 "The maximum size of the data block cache.")

(defun allocate-xdr-data-block nil "If an xdr data block is available then return it, otherwise create one." (or (pop *free-xdr-data-blocks*) (il:|create| xdr-data-block)))

(defun reclaim-xdr-data-block (xdr-data-block) (when (< (length *free-xdr-data-blocks*) *max-xdr-data-blocks*) (push xdr-data-block *free-xdr-data-blocks*)) t)

(defglobalparameter *os-rpc-methods* (il:* il:|;;| "These quotes should really be #', but in Xerox Lisp the former is significantly nicer on some machines, and the result is the same.") (make-rpc-methods :protocol (quote os-udp) :getbyte (quote os-udp-getbyte) :getcell (quote os-udp-getcell) :getunsigned (quote os-udp-getunsigned) :getrawbytes (quote os-udp-getrawbytes) :skipbytes (quote os-udp-skipbytes) :getoffset (quote os-udp-getoffset) :putbyte (quote os-udp-putbyte) :putcell (quote os-udp-putcell) :putrawbytes (quote os-udp-putrawbytes) :zerobytes (quote os-udp-zerobytes) :close (quote os-udp-close) :initialize (quote os-udp-initialize) :exchange (quote os-exchange-udp-packets)) "Operations vector for RPC streams using OS networking")

(defun create-os-udp-stream (&optional destaddr destsocket) (make-rpc-stream :protocol (quote udp) :methods *os-rpc-methods* :outstream (allocate-xdr-data-block) :instream (allocate-xdr-data-block) :inbyteptr 0 :outbyteptr 0 :destaddr (and destaddr (if (integerp destaddr) destaddr (setq destaddr (rpc-resolve-host destaddr)))) :destsocket (and destsocket (if (integerp destsocket) destsocket (rpc-find-socket destaddr (rpc-resolve-prog destsocket nil (quote udp)) (quote udp))))))

(defun os-exchange-udp-packets (rpcstream errorflg xid) (let ((timeout *msec-until-timeout*) (timeout-count 0)) (loop (cond ((il:subrcall il:rpc-call (rpc-stream-destaddr rpcstream) (rpc-stream-destsocket rpcstream) (il:\\dtest (rpc-stream-outstream rpcstream) (quote xdr-data-block)) (il:\\dtest (rpc-stream-instream rpcstream) (quote xdr-data-block)) (or timeout 60000) *msec-between-tries* (rpc-stream-outbyteptr rpcstream)) (setf (rpc-stream-inbyteptr rpcstream) 0) (when (and (numberp *debug*) (> *debug* 5)) (break "A reply is in (rpc-stream-instream *rpc-stream*)")) (unless (= (getunsigned rpcstream) xid) (error "RPC Reply ID does not match sent ID.")) (return t)) (timeout (il:* il:\; "timed out") (let ((result (rpc-handle-timeout rpcstream (incf timeout-count) errorflg))) (unless (eq result :continue) (return result))))))))

(defun os-resolve-host (destination) (il:* il:|;;;| " Convert an address from it's string representation into a number.") (or (read-string-address destination) destination))

(defun os-udp-initialize (stream destaddr destsocket) (when destaddr (setf (rpc-stream-destaddr stream) (if (integerp destaddr) destaddr (rpc-resolve-host destaddr)))) (when destsocket (setf (rpc-stream-destsocket stream) (if (integerp destsocket) destsocket (rpc-find-socket (rpc-stream-destaddr stream) (rpc-resolve-prog destsocket nil (quote udp)) (quote udp))))) (setf (rpc-stream-outbyteptr stream) 0) (setf (rpc-stream-inbyteptr stream) 0))

(defun os-udp-close (rpcstream) (reclaim-xdr-data-block (rpc-stream-outstream rpcstream)) (reclaim-xdr-data-block (rpc-stream-instream rpcstream)))

(defun read-string-address (string-or-atom) (il:* il:|;;| "This is a copy of \\IP.READ.STRING.ADDRESS from TCPLLIP, so's we don't have to load that file.") (il:|for| il:char il:|instring| (il:mkstring string-or-atom) il:|bind| (il:result il:_ (il:ncreate (quote il:fixp))) (il:index il:_ 0) byte il:|do| (il:|if| (> il:index 3) il:|then| (il:* il:\; "Got 3 parts and there's still more to go, must be bad") (return nil) il:|elseif| (eq il:char (il:charcode il:\.)) il:|then| (il:|if| byte il:|then| (il:\\putbasebyte il:result il:index byte)) (il:setq byte nil) (il:|add| il:index 1) il:|elseif| (and (il:setq il:char (digit-char-p (int-char il:char))) (< (il:setq byte (+ (il:|if| byte il:|then| (il:times byte 10) il:|else| 0) il:char)) 256)) il:|then| (il:* il:\; "Accumulated decimal digit, and we haven't overflowed a byte yet") il:|else| (il:* il:\; "Malformed") (return nil)) il:|finally| (il:|if| byte il:|then| (il:\\putbasebyte il:result il:index byte) (il:|add| il:index 1)) (return (and (eq il:index 4) il:result))))

(defun os-udp-getbyte (rpcstream) "Get a byte from the instream of the rpcstream and increment the offset." (let ((offset (rpc-stream-inbyteptr rpcstream))) (prog1 (il:\\getbasebyte (il:locf (il:|fetch| xdr-public il:|of| (il:\\dtest (rpc-stream-instream rpcstream) (quote xdr-data-block)))) offset) (setf (rpc-stream-inbyteptr rpcstream) (1+ offset)))))

(defun os-udp-putbyte (rpcstream byte) "Put a byte of data at the next position in the rpcstream and increment the offset." (let ((offset (rpc-stream-outbyteptr rpcstream))) (il:\\putbasebyte (il:locf (il:|fetch| xdr-public il:|of| (il:\\dtest (rpc-stream-outstream rpcstream) (quote xdr-data-block)))) offset byte) (setf (rpc-stream-outbyteptr rpcstream) (1+ offset))))

(defun os-udp-getrawbytes (rpcstream base offset nbytes) "Get nbytes bytes from the rpcstream and increment the input pointer." (let ((xdr-data-block (il:\\dtest (rpc-stream-instream rpcstream) (quote xdr-data-block))) (inptr (rpc-stream-inbyteptr rpcstream))) (il:\\movebytes (il:locf (il:|fetch| (xdr-data-block xdr-public) il:|of| xdr-data-block)) inptr base offset nbytes) (setf (rpc-stream-inbyteptr rpcstream) (+ inptr nbytes)) base))

(defun os-udp-putrawbytes (rpcstream base offset nbytes) "Write NBYTES bytes into the outstream of rpcstream and increment the output pointer." (let ((xdr-data-block (il:\\dtest (rpc-stream-outstream rpcstream) (quote xdr-data-block))) (outptr (rpc-stream-outbyteptr rpcstream))) (il:\\movebytes base offset (il:locf (il:|fetch| (xdr-data-block xdr-public) il:|of| xdr-data-block)) outptr nbytes) (setf (rpc-stream-outbyteptr rpcstream) (+ outptr nbytes))))

(defun os-udp-getcell (rpcstream) "Get a cell from the rpcstream and increment the offset." (let ((byteoffset (rpc-stream-inbyteptr rpcstream))) (cond ((and (>= byteoffset 0) (< byteoffset (unfold *cells-per-xdr-data-block* *bytes-per-cell*))) (setf (rpc-stream-inbyteptr rpcstream) (+ byteoffset *bytes-per-cell*)) (getbase-integer (il:locf (il:|fetch| (xdr-data-block xdr-public) il:|of| (il:\\dtest (rpc-stream-instream rpcstream) (quote xdr-data-block)))) byteoffset)) (t (error "Attempt to fetch cell outside of buffer.")))))

(defun os-udp-getunsigned (rpcstream) (let ((byteoffset (rpc-stream-inbyteptr rpcstream))) (cond ((and (>= byteoffset 0) (< byteoffset (unfold *cells-per-xdr-data-block* *bytes-per-cell*))) (setf (rpc-stream-inbyteptr rpcstream) (+ byteoffset *bytes-per-cell*)) (getbase-unsigned (il:locf (il:|fetch| (xdr-data-block xdr-public) il:|of| (il:\\dtest (rpc-stream-instream rpcstream) (quote xdr-data-block)))) byteoffset)) (t (error "Attempt to fetch cell outside of buffer.")))))

(defun os-udp-putcell (rpcstream value) (let ((byteoffset (rpc-stream-outbyteptr rpcstream))) (putbase-integer (il:locf (il:|fetch| (xdr-data-block xdr-public) il:|of| (il:\\dtest (rpc-stream-outstream rpcstream) (quote xdr-data-block)))) byteoffset value) (setf (rpc-stream-outbyteptr rpcstream) (+ byteoffset 4))))

(defun os-udp-getoffset (rpcstream) (cons (rpc-stream-instream rpcstream) (rpc-stream-inbyteptr rpcstream)))

(defun os-udp-skipbytes (rpcstream nbytes) (incf (rpc-stream-inbyteptr rpcstream) nbytes))

(defun os-udp-zerobytes (rpcstream nbytes) (let ((offset (rpc-stream-outbyteptr rpcstream)) (base (il:locf (il:|fetch| xdr-public il:|of| (il:\\dtest (rpc-stream-outstream rpcstream) (quote xdr-data-block)))))) (dotimes (i nbytes) (il:\\putbasebyte base offset 0) (incf offset)) (setf (rpc-stream-outbyteptr rpcstream) offset)))
(il:putprops il:rpcos il:copyright ("Xerox Corporation" 1988))
(il:declare\: il:dontcopy
  (il:filemap (nil)))
il:stop
