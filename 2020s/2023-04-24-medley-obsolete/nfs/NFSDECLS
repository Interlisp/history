(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "NFS")
(il:filecreated "12-Oct-89 17:18:40" "{piglet/n}<piglet>nfs>sources>NFSDECLS;16" 13059  

      il:|changes| il:|to:|  (il:functions mount-name) (il:vars il:nfsdeclscoms)

      il:|previous| il:|date:| "12-Oct-89 17:16:57" "{piglet/n}<piglet>nfs>sources>NFSDECLS;15")


; Copyright (c) 1989 by Xerox Corporation.  All rights reserved.

(il:prettycomprint il:nfsdeclscoms)

(il:rpaqq il:nfsdeclscoms ((il:prop (il:makefile-environment il:filetype) il:nfsdecls) (il:variables bytesperpage logbytesperpage) (il:functions fix-this) (il:coms (il:* il:\; "Protocol constants.  At least the ADDVARS has to be here, lest NFSCOMS be unloadable due to missing package") (il:addvars (rpc2:*xdr-primitive-types* (rfd-list read-rfd-list . il:shouldnt) (input-buffer read-input-buffer . il:shouldnt))) (il:variables *fattr-size* *cookie-size*)) (il:coms (il:* il:\; "Macros") (il:functions nfs-rpc-call string-concat string-from-integer fattr-binaryp copy-pathname evalcase prompt-format get-meta-timestamp mount-name) (il:addvars (il:prettyequivlst (evalcase . case))) (il:* il:\; "Some common record accessors") (il:functions stream-device stream-epage stream-eoffset stream-info stream-validation)) (il:p (proclaim (quote (special il:defaultfiletype il:filing.enumeration.depth il:filelinelength il:\\stream.default.maxbuffers il:promptwindow *read-buffer*))) (proclaim (quote (global il:\\noimageops il:\\ip.default.configuration il:*maximum-packet-size* il:\\filedevices)))) (il:coms (il:* il:\; "NFS protocol enumeration values.  This lets us avoid converting to silly literals every time we read/write something") (il:variables *nfs-status-codes* *nfs-file-types* *nfs-mode-bits*) (il:p (il:* il:|;;| "Define a constant for each of those.  By putting these here in the decls file, I assume compiler will compile them all away") (il:* il:|;;| "Blecch.  I really should just do `(defconstant ,@trip) here, but I don't want the silly File Manager confused about where all those constants \"live\"") (il:apply (quote il:constants) (mapcan (function (lambda (trip) (cond ((first trip) (set (first trip) (second trip)) (list (list (first trip) (second trip))))))) (if (boundp (quote *nfs-status-codes*)) *nfs-status-codes* (let ((il:dfnflg t)) (il:* il:\; "Stupid File Manager PROP...") (eval (il:getdef (quote *nfs-status-codes*) (quote il:variables)))))))) (il:constants il:* (progn *nfs-file-types*)) (il:constants il:* (progn *nfs-mode-bits*))) (il:coms (il:* il:\; "More stuff to accelerate rpc calls.  A more thorough rpc compiler would save us some of this grief") (il:functions make-proc-vector) (il:variables *nfs-proc-indices* *mount-proc-indices*) (il:constants il:* (progn *nfs-proc-indices*)) (il:constants il:* (progn *mount-proc-indices*)) (il:p (proclaim (quote (global *mount-program* *mount-proc-vector* *nfs-program* *nfs-proc-vector*))))) (il:coms (il:* il:\; "Debugging stuff") (il:variables *nfsdevicefns*) (il:commands il:whonot))))

(il:putprops il:nfsdecls il:makefile-environment (:readtable "XCL" :package "NFS"))

(il:putprops il:nfsdecls il:filetype :compile-file)

(defconstant bytesperpage 512 "Number of bytes per 1100 memory page")

(defconstant logbytesperpage 9 "Bit shift of byte offset to get page offset")

(defmacro fix-this (&body code) (il:bquote (progn (il:\\\,@ code))))



(il:* il:\; 
"Protocol constants.  At least the ADDVARS has to be here, lest NFSCOMS be unloadable due to missing package"
)


(il:addtovar rpc2:*xdr-primitive-types* (rfd-list read-rfd-list . il:shouldnt) (input-buffer read-input-buffer . il:shouldnt))

(defconstant *fattr-size* 68 "Size of FATTR in bytes")

(defconstant *cookie-size* 4 "Size of ReadFromDirectory cookie in bytes")



(il:* il:\; "Macros")


(defmacro nfs-rpc-call (dinfo prog proc arglist) (il:bquote (let ((rpc2:*msec-until-timeout* *nfs-default-timeout*)) (rpc2:perform-rpc nil (il:\\\, prog) (il:\\\, prog) (il:\\\, proc) (or (deviceinfo-rpcstream (il:\\\, dinfo)) (setf (deviceinfo-rpcstream (il:\\\, dinfo)) (make-nfs-rpc-stream (deviceinfo-host (il:\\\, dinfo)) (deviceinfo-destaddr (il:\\\, dinfo))))) (il:\\\, arglist) (nfscredentials-credentials (dinfo-credentials (il:\\\, dinfo)))))))

(defmacro string-concat (&body args) (il:bquote (concatenate (quote string) (il:\\\,@ args))))

(defmacro string-from-integer (n) (il:bquote (write-to-string (il:\\\, n) :radix nil :base 10)))

(defmacro fattr-binaryp (fattr) (il:bquote (not (eql 0 (logand (fattr-mode (il:\\\, fattr)) *mode-binary-p*)))))

(defmacro copy-pathname (path) (il:bquote (il:ncreate (quote pathname) (il:\\\, path))))

(defmacro evalcase (keyform &rest clauses) (il:* il:|;;| "Version of CASE that uses the values of the keys instead of the keys themselves") (il:bquote (case (il:\\\, keyform) (il:\\\,@ (mapcar (function (lambda (c) (cons (cond ((listp (first c)) (mapcar (function eval) (first c))) ((eq (first c) (quote otherwise)) (quote otherwise)) (t (eval (first c)))) (rest c)))) clauses)))))

(defmacro prompt-format (&rest args) (il:bquote (format il:promptwindow (il:\\\,@ args))))

(defmacro get-meta-timestamp nil (il:* il:|;;| "Return a number that reflects \"now\" in seconds, for comparison purposes.  Portable way is get-universal-time") (quote (il:idate)))

(defmacro mount-name (unixpath) (il:* il:|;;| "Return a string to give to a mount/unmount call.  Really, this means turn the null string into \"/\"") (il:bquote (let ((path (il:\\\, unixpath))) (if (> (length path) 0) path "/"))))

(il:addtovar il:prettyequivlst (evalcase . case))



(il:* il:\; "Some common record accessors")


(defmacro stream-device (s) (il:bquote (il:fetch (stream il:device) il:of (il:\\\, s))))

(defmacro stream-epage (s) (il:bquote (il:fetch (stream il:epage) il:of (il:\\\, s))))

(defmacro stream-eoffset (s) (il:bquote (il:fetch (stream il:eoffset) il:of (il:\\\, s))))

(defmacro stream-info (stream) (il:bquote (il:fetch (stream il:f1) il:of (il:\\\, stream))))

(defmacro stream-validation (stream) (il:bquote (il:fetch (stream il:validation) il:of (il:\\\, stream))))

(proclaim (quote (special il:defaultfiletype il:filing.enumeration.depth il:filelinelength il:\\stream.default.maxbuffers il:promptwindow *read-buffer*)))

(proclaim (quote (global il:\\noimageops il:\\ip.default.configuration il:*maximum-packet-size* il:\\filedevices)))



(il:* il:\; 
"NFS protocol enumeration values.  This lets us avoid converting to silly literals every time we read/write something"
)


(defglobalparameter *nfs-status-codes* (quote ((nfs-ok 0 "Success") (nil 1 "Caller does not have ownership rights") (nfs-err-noent 2 "No such file or directory") (nil 5 "I/O Error") (nil 6 "No such device or address") (nfs-err-acces 13 "Permission denied") (nfs-err-exist 17 "File already exists") (nfs-err-crossdev 18 "Operation crosses device boundaries") (nil 19 "No such device") (nfs-err-notdir 20 "Not a directory") (nil 21 "Is a directory") (nil 22 "Invalid argument") (nil 27 "File too large") (nil 28 "No space left on device") (nil 30 "File system is read-only") (nil 63 "File name is too long") (nil 66 "Directory is not empty") (nfs-err-dquot 69 "Disk quota exceeded") (nfs-err-stale 70 "File handle is stale") (nil 71 "File system is not local to this server") (nil 99 "Write cache flushed"))) "Possible status replies from NFS protocol")

(defglobalparameter *nfs-file-types* (quote ((nfnon 0) (nfreg 1) (nfdir 2) (nfblk 3) (nfchr 4) (nflnk 5))) "Codes for the TYPE field of a fattr.")

(defglobalparameter *nfs-mode-bits* (quote ((*mode-directory* 16384) (*mode-regular* 32768) (*mode-set-gid* 1024) (*mode-inheritable* 2047) (il:* il:\; "Mask for the inheritable mode bits = #o3777 i.e., up thru set-gid") (*mode-protection* 4095) (il:* il:\; "Mask for the bits that indicate protection = #o7777") (*mode-binary* 64) (il:* il:\; "The bit we set to indicate binary = #o100 = owner execute") (*mode-binary-p* 3657) (il:* il:\; "Any of these imply binary.  #o7111 = Set-u, set-g, sticky plus executable bits") (*mode-not-binary* 438) (il:* il:\; "All but the executable bits"))))

(il:* il:|;;| "Define a constant for each of those.  By putting these here in the decls file, I assume compiler will compile them all away")

(il:* il:|;;| "Blecch.  I really should just do `(defconstant ,@trip) here, but I don't want the silly File Manager confused about where all those constants \"live\"")

(il:apply (quote il:constants) (mapcan (function (lambda (trip) (cond ((first trip) (set (first trip) (second trip)) (list (list (first trip) (second trip))))))) (if (boundp (quote *nfs-status-codes*)) *nfs-status-codes* (let ((il:dfnflg t)) (il:* il:\; "Stupid File Manager PROP...") (eval (il:getdef (quote *nfs-status-codes*) (quote il:variables)))))))
(il:declare\: il:eval@compile 

(il:rpaqq nfnon 0)

(il:rpaqq nfreg 1)

(il:rpaqq nfdir 2)

(il:rpaqq nfblk 3)

(il:rpaqq nfchr 4)

(il:rpaqq nflnk 5)


(il:constants (nfnon 0) (nfreg 1) (nfdir 2) (nfblk 3) (nfchr 4) (nflnk 5))
)
(il:declare\: il:eval@compile 

(il:rpaqq *mode-directory* 16384)

(il:rpaqq *mode-regular* 32768)

(il:rpaqq *mode-set-gid* 1024)

(il:rpaqq *mode-inheritable* 2047)

(il:rpaqq *mode-protection* 4095)

(il:rpaqq *mode-binary* 64)

(il:rpaqq *mode-binary-p* 3657)

(il:rpaqq *mode-not-binary* 438)


(il:constants (*mode-directory* 16384) (*mode-regular* 32768) (*mode-set-gid* 1024) (*mode-inheritable* 2047) (*mode-protection* 4095) (*mode-binary* 64) (*mode-binary-p* 3657) (*mode-not-binary* 438))
)



(il:* il:\; 
"More stuff to accelerate rpc calls.  A more thorough rpc compiler would save us some of this grief")


(defmacro make-proc-vector (progname vecname indices) (let ((indices (eval indices))) (il:bquote (progn (setq (il:\\\, vecname) (make-array (il:\\\, (length indices)))) (il:* il:\; "Now for each index, set that slot of vecname to be the actual procedure object") (il:\\\,@ (mapcar (function (lambda (indexpair) (il:* il:\; "INDEXPAIR = (*procname* index).  Strip the *'s off the first element to get the procedure name") (let ((const (symbol-name (first indexpair)))) (il:bquote (setf (aref (il:\\\, vecname) (il:\\\, (second indexpair))) (rpc2:find-rpc-procedure (il:\\\, progname) (quote (il:\\\, (intern (subseq const 1 (1- (length const)))))))))))) indices))))))

(defglobalparameter *nfs-proc-indices* (quote ((*get-file-attributes* 0) (*set-file-attributes* 1) (*lookup-file-name* 2) (*read-from-symbolic-link* 3) (*fast-read-from-file* 4) (*null-read-from-file* 5) (*fast-write-to-file* 6) (*create-file* 7) (*remove-file* 8) (*rename-file* 9) (*create-link-to-file* 10) (*create-symbolic-link* 11) (*create-directory* 12) (*remove-directory* 13) (*read-from-directory* 14))) "Procedures I want to access quickly with arbitrarily assigned indices")

(defglobalparameter *mount-proc-indices* (quote ((*add-mount-entry* 0) (*remove-mount-entry* 1) (*return-export-list* 2))) "Procedures I want to access quickly with arbitrarily assigned indices")
(il:declare\: il:eval@compile 

(il:rpaqq *get-file-attributes* 0)

(il:rpaqq *set-file-attributes* 1)

(il:rpaqq *lookup-file-name* 2)

(il:rpaqq *read-from-symbolic-link* 3)

(il:rpaqq *fast-read-from-file* 4)

(il:rpaqq *null-read-from-file* 5)

(il:rpaqq *fast-write-to-file* 6)

(il:rpaqq *create-file* 7)

(il:rpaqq *remove-file* 8)

(il:rpaqq *rename-file* 9)

(il:rpaqq *create-link-to-file* 10)

(il:rpaqq *create-symbolic-link* 11)

(il:rpaqq *create-directory* 12)

(il:rpaqq *remove-directory* 13)

(il:rpaqq *read-from-directory* 14)


(il:constants (*get-file-attributes* 0) (*set-file-attributes* 1) (*lookup-file-name* 2) (*read-from-symbolic-link* 3) (*fast-read-from-file* 4) (*null-read-from-file* 5) (*fast-write-to-file* 6) (*create-file* 7) (*remove-file* 8) (*rename-file* 9) (*create-link-to-file* 10) (*create-symbolic-link* 11) (*create-directory* 12) (*remove-directory* 13) (*read-from-directory* 14))
)
(il:declare\: il:eval@compile 

(il:rpaqq *add-mount-entry* 0)

(il:rpaqq *remove-mount-entry* 1)

(il:rpaqq *return-export-list* 2)


(il:constants (*add-mount-entry* 0) (*remove-mount-entry* 1) (*return-export-list* 2))
)

(proclaim (quote (global *mount-program* *mount-proc-vector* *nfs-program* *nfs-proc-vector*)))



(il:* il:\; "Debugging stuff")


(defglobalparameter *nfsdevicefns* (quote (clear-server-cache nfs-breakconnection nfs-closefile nfs-deletefile nfs-directorynamep nfs-eventfn nfs-fileinfofn nfs-generatefiles nfs-getfileinfo nfs-getfilename nfs-hostnamep nfs-nextfilefn nfs-openfile nfs-openp nfs-readpages nfs-renamefile nfs-unregisterfile nfs-writepages print-deviceinfo print-dirinfo print-fileinfo print-nfspath reset-nfs-cache-vars reset-nfscredentials-cache)) "Functions called from 'literals' or otherwise undetected by Masterscope--for development.")

(defcommand il:whonot nil (set-difference (il:\. il:who il:in (il:filecomslst (quote il:nfsdevice) (quote il:functions)) il:is not il:called) *nfsdevicefns*))
(il:putprops il:nfsdecls il:copyright ("Xerox Corporation" 1989))
(il:declare\: il:dontcopy
  (il:filemap (nil)))
il:stop
