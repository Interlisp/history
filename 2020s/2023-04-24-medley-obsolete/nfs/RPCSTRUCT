(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "RPC2")
(il:filecreated "21-Jun-89 17:56:08" il:|{NB:PARC:XEROX}<NFS>SOURCES>RPCSTRUCT.;3| 8883   

      il:|changes| il:|to:|  (il:functions rpc-error-reply-report)

      il:|previous| il:|date:| "20-Mar-89 15:51:49" il:{piglet/n}<piglet>nfs>sources>rpcstruct\;2)


; Copyright (c) 1987, 1988, 1989 by Stanford University and Xerox Corporation.  All rights reserved.

(il:prettycomprint il:rpcstructcoms)

(il:rpaqq il:rpcstructcoms ((il:props (il:rpcstruct il:makefile-environment il:filetype)) (eval-when (eval compile) (il:files il:rpcdecls) (il:p (il:* il:\; "For RPC-STREAM-PRINT-FUNCTION") (load-tcp-exports))) (il:functions rpc-stream-print-function) (il:structures rpc-stream rpc-methods rpc-program rpc-procedure authentication) (il:functions rpc-error-reply-report) (il:p (export (quote (rpc-error rpc-connection-error rpc-timeout rpc-error-reply rpc-no-socket xdr-error rpc-stream rpc-program rpc-procedure authentication rpc-stream-monitorlock rpc-stream-private)))) (il:structures rpc-error rpc-connection-error rpc-timeout rpc-error-reply rpc-no-socket xdr-error)))

(il:putprops il:rpcstruct il:makefile-environment (:readtable "XCL" :package "RPC2"))

(il:putprops il:rpcstruct il:filetype :compile-file)
(eval-when (eval compile)

(il:filesload il:rpcdecls)


(il:* il:\; "For RPC-STREAM-PRINT-FUNCTION")

(load-tcp-exports)
)

(defun rpc-stream-print-function (obj stream depth) (let ((destaddr (rpc-stream-destaddr obj)) (destsocket (rpc-stream-destsocket obj))) (format stream "#<RPC ~A conn~@[ to ~A~@[#~A~]~]>" (rpc-stream-protocol obj) (if (integerp destaddr) (ipaddress-to-string destaddr) destaddr) (if (typep destsocket (quote rpc-program)) (rpc-program-name destsocket) destsocket))))

(defstruct (rpc-stream (:print-function rpc-stream-print-function)) "Holds info and functions for encoding, decoding and executing remote procedure calls" protocol (il:* il:\; "UDP, TCP, STRING, etc.") ipsocket (il:* il:\; "Local IP Socket") destaddr (il:* il:\; "Address of the destination.") destsocket (il:* il:\; "destination socket, or remote program whose socket should be looked up") instream (il:* il:\; "Incoming (Reply) Stream or Packet") inbyteptr (il:* il:\; "Byte Pointer to current position in incoming data. For UDP it is the byte pointer in the UDP packet. For TCP it is decremented, saying how many bytes left in this RM record before another RM header must be read.") outstream (il:* il:\; "UDP outgoing packet, or outgoing stream used by TCP and STRING.") outbyteptr (il:* il:\; "Byte Pointer to current position in UDP packet or outgoing buffer used to build RM record for TCP. See page 10 of \"Remote Procedure Call Protocol Specification\" for details of the RM 'Record Marking Standard'.") outstring (il:* il:\; "Buffer used by TCP to build RM record before sending") methods (il:* il:\; "Vector of operations") credentials (il:* il:\; "the credentials, if any, the caller gave us") credentials-cache (il:* il:\; "possible short credentials the server has given us") timeout-handler (il:* il:\; "what to do on timeouts") error-handler (il:* il:\; "what to do returned errors (this may not be the right place for these two)") socket-cache (il:* il:\; "Cached version of destsocket") private (il:* il:\; "Can be used by user as desired") monitorlock (il:* il:\; "Monitor which is locked during PERFORM-RPC."))

(defstruct (rpc-methods (:print-function (lambda (obj stream depth) (format stream "#<~A rpc methods>" (rpc-methods-protocol obj))))) "Vector of operations for a kind of rpc stream." protocol (il:* il:\; "UDP, TCP etc") (il:* il:|;;| "Input methods") getbyte (il:* il:\; "Function to read byte of incoming data") skipbytes (il:* il:\; "(stream #bytes) => skips number of bytes of incoming data") getcell (il:* il:\; "Function to get 32 bit two's complement integer of incoming data.") getunsigned (il:* il:\; "Function to get 32 bit unsigned integer from incoming data.") getoffset (il:* il:\; "Get current offset into incoming data (for string-pointer kludge)") getrawbytes (il:* il:\; "(stream base offset #bytes) -- bulk read of incoming data") (il:* il:|;;| "Output methods") putbyte (il:* il:\; "Function to write byte of outgoing data") zerobytes (il:* il:\; "(stream #bytes) writes zeros to output.") putcell (il:* il:\; "Function to write 32 bit two's complement integer of outgoing data.") putrawbytes (il:* il:\; "(stream base offset #bytes) -- bulk write of incoming data") (il:* il:|;;| "Miscellaneous methods") close (il:* il:\; "Function to cleanup stream when closed") initialize (il:* il:\; "(stream &optional destaddr destsocket) Sets up stream for beginning of call") exchange (il:* il:\; "(stream errorflg xid) performs the actual RPC exchange") openp (il:* il:\; "(stream) => true if still open"))

(defstruct (rpc-program (:print-function (lambda (pgm stream depth) (format stream "#<RPC Program ~S, #~D v~D>" (rpc-program-name pgm) (rpc-program-number pgm) (rpc-program-version pgm))))) "Structure describing a Sun RPC Protocol Remote Program." (number 0 :type integer) (il:* il:\; "RPC Program Number") (version 0 :type integer) (il:* il:\; "RPC Version Number") name (il:* il:\; "String or Symbol. This name is used only by this program and has no significance to the remote program. The name is assumed to uniquely specify an RPC structure. ") protocol (il:* il:\; "A symbol. Either RPC::UDP or RPC::TCP.") constants (il:* il:\; "List of (<constant> <def>) pairs.") types (il:* il:\; "List of (<typename> <typedef>) pairs") inherits (il:* il:\; "List of names of RPC names whose types and constants are inherited by this RPC.") procedures (il:* il:\; "List of RPC-PROCEDURE structures defining the procedures for this remote program."))

(defstruct (rpc-procedure (:print-function (lambda (p stream depth) (format stream "#<RPC Procedure ~S, #~D>" (rpc-procedure-name p) (rpc-procedure-procnum p))))) "Strcture defining a single procedure of a SUN RPC Protcol remote program.
 " name (il:* il:\; "The procedure name. A string or symbol.") (procnum 0 :type integer) (il:* il:\; "The procedure number. An integer.") argtypes (il:* il:\; "List of argument types. May be typenames or typedefs. NIL for no arguments.") resulttypes (il:* il:\; "Same as ARGTYPES except for returned values."))

(defstruct authentication "Sun RPC Version 2 Authentication Record" type (il:* il:\; "0 = NULL") (il:* il:\; "1 = Unix") (il:* il:\; "2 = Short") string (il:* il:\; "") (il:* il:\; "Encoding of any fields of that type authentication. String is a Common Lisp string rather than an XDR-STRING."))

(defun rpc-error-reply-report (condition stream) (il:* il:|;;| "Condition reporter for RPC-ERROR-REPLY.  CONDITION has two slots, a TYPE and type-specific ARGS.") (let ((type (rpc-error-reply-type condition)) (args (rpc-error-reply-args condition))) (case type (program-unavailable (destructuring-bind (pgm . more) args (format stream "RPC Program ~@[~A ~]Unavailable~@[ ~A~]" (and (rpc-program-p pgm) (rpc-program-name pgm)) more))) (program-mismatch (format stream "RPC Program Version Mismatch: High: ~A Low: ~A" (first args) (second args))) (procedure-unavailable (format stream "RPC Procedure Unavailable")) (garbage-arguments (format stream "RPC Garbage Arguments")) (system-error (format stream "RPC System Error during call")) (rpc-version-mismatch (format stream "RPC Version Mismatch: High: ~A Low: ~A" (first args) (second args))) (authentication (format stream "Authentication Error: ~A" (first args))) (not-a-reply (format stream "RPC reply packet not of type reply: ~D" (first args))) (illegal-reply-type (format stream "Unknown RPC reply code: ~D" (first args))) (otherwise (format stream "RPC Error: ~A~@[ ~A~]" type args)))))

(export (quote (rpc-error rpc-connection-error rpc-timeout rpc-error-reply rpc-no-socket xdr-error rpc-stream rpc-program rpc-procedure authentication rpc-stream-monitorlock rpc-stream-private)))

(define-condition rpc-error (error))

(define-condition rpc-connection-error (rpc-error))

(define-condition rpc-timeout (rpc-connection-error) nil (:report "Timeout of RPC call"))

(define-condition rpc-error-reply (rpc-error) (type args) (:report rpc-error-reply-report))

(define-condition rpc-no-socket (rpc-connection-error) (program address) (:report (lambda (condition stream) (let ((prg (rpc-no-socket-program condition))) (format stream "Host ~A does not supply service ~A over ~A" (il:\\ip.address.to.string (rpc-no-socket-address condition)) (rpc-program-name prg) (rpc-program-protocol prg))))))

(define-condition xdr-error (rpc-connection-error) (format-string format-args) (:report (lambda (c stream) (apply (function format) stream (xdr-error-format-string c) (xdr-error-format-args c)))))
(il:putprops il:rpcstruct il:copyright ("Stanford University and Xerox Corporation" 1987 1988 1989))
(il:declare\: il:dontcopy
  (il:filemap (nil)))
il:stop
