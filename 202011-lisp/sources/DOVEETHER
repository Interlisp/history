(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")
(FILECREATED "16-May-90 16:02:49" {DSK}<usr>local>lde>lispcore>sources>DOVEETHER.;2 20988  

      changes to%:  (VARS DOVEETHERCOMS)

      previous date%: "17-Dec-86 18:51:25" {DSK}<usr>local>lde>lispcore>sources>DOVEETHER.;1)


(* ; "
Copyright (c) 1985, 1986, 1990 by Venue & Xerox Corporation.  All rights reserved.
")

(PRETTYCOMPRINT DOVEETHERCOMS)

(RPAQQ DOVEETHERCOMS
       [(FNS \DoveEther.ByteSwapIOCB \DoveEther.DeQueue \DoveEther.EnQueue \DoveEther.GetPacketStatus
             \DoveEther.Init \DoveEther.Initiate \DoveEther.MakeSureOff \DoveEther.QueueInput 
             \DoveEther.QueueOutput \DoveEther.TurnOn)
        (INITVARS (\DoveEther.FCBPointer))
        (GLOBALVARS \DoveEther.FCBPointer)
        (DECLARE%: EVAL@COMPILE DONTCOPY (FILES (SOURCE)
                                                10MBDECLS DOVEDECLS DOVEETHERDECLS LLNSDECLS))
        (DECLARE%: DONTEVAL@LOAD DOCOPY (P (\DoveEther.Init])
(DEFINEQ

(\DoveEther.ByteSwapIOCB
  [LAMBDA (IOCB)                                             (* ejs%: "11-Sep-85 22:46")

(* ;;; "There are various IOCB fields which must be fed to Opie in byte-swapped form.  This function swaps them")

    (replace (Dove.EtherIOCB i586Status) of IOCB with (\DoveIO.ByteSwap (fetch (Dove.EtherIOCB 
                                                                                      i586Status)
                                                                           of IOCB)))
    (SELECTC (fetch (Dove.EtherIOCB IOCBType) of IOCB)
        ((LIST DoveEther.inputIOCBType DoveEther.outputIOCBType) 
             (replace (Dove.EtherIOIOCB length) of IOCB with (\DoveIO.ByteSwap (fetch (
                                                                                     Dove.EtherIOIOCB
                                                                                       length)
                                                                                  of IOCB)))
             (replace (Dove.EtherIOIOCB count) of IOCB with (\DoveIO.ByteSwap (fetch (
                                                                                     Dove.EtherIOIOCB
                                                                                      count)
                                                                                 of IOCB))))
        (DoveEther.commandIOCBType 
             (SELECTC (fetch (Dove.EtherIOCB Action) of IOCB)
                 (DoveEther.actionTimeDomainRfl 
                      (\PUTBASE (fetch (Dove.EtherCommandIOCB select) of IOCB)
                             0
                             (\DoveIO.ByteSwap (\GETBASE (fetch (Dove.EtherCommandIOCB select)
                                                            of IOCB)
                                                      0))))
                 (DoveEther.actionMulticastAddr 
                      (\PUTBASE (fetch (Dove.EtherCommandIOCB select) of IOCB)
                             0
                             (\DoveIO.ByteSwap (\GETBASE (fetch (Dove.EtherCommandIOCB select)
                                                            of IOCB)
                                                      0))))
                 (PROGN NIL)))
        ((LIST DoveEther.resetIOCBType DoveEther.startRUIOCBType) 
             NIL)
        (ERROR "Unknown ethernet IOCB type for ByteSwapIOCB" (fetch (Dove.EtherIOCB IOCBType)
                                                                of IOCB])

(\DoveEther.DeQueue
  [LAMBDA (QueuePtr IOCB)                                    (* ejs%: "14-Nov-85 20:40")
    (LET ((Chase (fetch (Dove.QueueBlock LispQueueHead) of QueuePtr)))
         (COND
            (Chase                                           (* ; "There's something in the queue")
                   (COND
                      [(EQ Chase IOCB)                       (* ; 
                                               "Optimal: the wanted IOCB is at the head of the queue")
                       (MESASETQ (fetch (Dove.QueueBlock QueueHead) of QueuePtr)
                              (fetch (Dove.EtherIOCB next) of IOCB)
                              Dove.OpieAddress)
                       (COND
                          ((EQ (fetch (Dove.QueueBlock LispQueueTail) of QueuePtr)
                               IOCB)                         (* ; 
                                                     "It's also at the tail;  the queue is now empty")
                           (replace (Dove.QueueBlock LispQueueTail) of QueuePtr with NIL]
                      (T                                     (* ; 
                                                             "The IOCB is in the middle of the queue")
                         (while Chase do (COND
                                            ((EQ (fetch (Dove.EtherIOCB nextIOCB) of Chase)
                                                 IOCB)       (* ; "Found it")
                                             (MESASETQ (fetch (Dove.EtherIOCB next) of Chase)
                                                    (fetch (Dove.EtherIOCB next) of IOCB)
                                                    Dove.OpieAddress)
                                             (COND
                                                ((EQ (fetch (Dove.QueueBlock LispQueueTail)
                                                        of QueuePtr)
                                                     IOCB)   (* ; 
                      "The wanted IOCB was at the tail of the queue and not at the head of the queue")
                                                 (replace (Dove.QueueBlock LispQueueTail)
                                                    of QueuePtr with Chase)))
                                             (RETURN))
                                            (T (SETQ Chase (fetch (Dove.EtherIOCB nextIOCB)
                                                              of Chase])

(\DoveEther.EnQueue
  [LAMBDA (QueuePtr IOCB)                                    (* edited%: "31-Dec-00 16:00")

(* ;;; "Enqueues IOCB on IOP Queueblock at QueuePtr")

    (COND
       ((NULL (fetch (Dove.QueueBlock LispQueueHead) of QueuePtr))
        (replace (Dove.QueueBlock LispQueueHead) of QueuePtr with IOCB))
       (T (replace (Dove.EtherIOCB nextIOCB) of (fetch (Dove.QueueBlock LispQueueTail) of QueuePtr)
             with IOCB)))
    (replace (Dove.EtherIOCB nextIOCB) of IOCB with NIL)
    (\DoveIO.LockMem \DoveIO.OVERWRITEIFNIL (\DoveIO.IORegionOffset (fetch (Dove.QueueBlock QueueNext
                                                                                  ) of QueuePtr))
           (\DoveIO.ByteSwap (\LOLOC IOCB))
           (fetch (Dove.EtherFCB etherLockMask) of \DoveEther.FCBPointer))
    (replace (Dove.QueueBlock LispQueueTail) of QueuePtr with IOCB])

(\DoveEther.GetPacketStatus
  [LAMBDA (IOCB)                                             (* ejs%: "12-Sep-85 20:08")
    (LET ((IOCBType (fetch (Dove.EtherIOCB IOCBType) of IOCB)))
         (COND
            ((NOT (fetch (Dove.EtherIOCB done) of IOCB))
             \ES.PENDING)
            (T [COND
                  ((NOT (fetch (Dove.EtherIOCB isDequeued) of IOCB))
                                                             (* ; 
                                                         "Dequeue the packet and byte swap it for us")
                   (UNINTERRUPTABLY
                       (\DoveEther.DeQueue (COND
                                              ((EQ IOCBType DoveEther.inputIOCBType)
                                               (fetch (Dove.EtherFCB mesaInQueue) of 
                                                                                \DoveEther.FCBPointer
                                                      ))
                                              (T             (* ; 
                                           "Output and command IOCBs go on the mesaOutQueue, I think")
                                                 (fetch (Dove.EtherFCB mesaOutQueue) of 
                                                                                \DoveEther.FCBPointer
                                                        )))
                              IOCB)
                       (\DoveEther.ByteSwapIOCB IOCB)
                       (replace (Dove.EtherIOCB isDequeued) of IOCB with T))]
               (SELECTC IOCBType
                   (DoveEther.inputIOCBType 
                        (COND
                           ((fetch (Dove.EtherIOCB okay) of IOCB)
                            (bind (PTR _ (fetch (Dove.EtherIOIOCB bufferAddress) of IOCB))
                               for I from (FOLDHI (fetch (Dove.EtherIOIOCB length) of IOCB)
                                                 BYTESPERWORD) to 0 by (IMINUS WORDSPERPAGE)
                               do (\PUTBASE PTR I (\GETBASE PTR I)))
                            \ES.GOOD.PACKET)
                           ((fetch (Dove.Etheri586Status ovrnErr) of (LOCF (fetch (Dove.EtherIOCB
                                                                                   i586Status)
                                                                              of IOCB)))
                            \ES.OVERRUN)
                           ((fetch (Dove.Etheri586Status crcErr) of (LOCF (fetch (Dove.EtherIOCB
                                                                                  i586Status)
                                                                             of IOCB)))
                            \ES.BAD.CRC)
                           ((fetch (Dove.Etheri586Status alnErr) of (LOCF (fetch (Dove.EtherIOCB
                                                                                  i586Status)
                                                                             of IOCB)))
                            \ES.BAD.ALIGNMENT)
                           ((fetch (Dove.EtherIOCB frameTooLong) of IOCB)
                            \ES.PACKET.TOO.LONG)
                           (T \ES.OTHER.ERROR)))
                   (DoveEther.outputIOCBType 
                        (COND
                           ((fetch (Dove.EtherIOCB okay) of IOCB)
                            \ES.GOOD.PACKET)
                           ((fetch (Dove.EtherIOCB frameTooLong) of IOCB)
                            \ES.PACKET.TOO.LONG)
                           ((fetch (Dove.Etheri586Status underrun) of (LOCF (fetch (Dove.EtherIOCB
                                                                                    i586Status)
                                                                               of IOCB)))
                            \ES.UNDERRUN)
                           ((fetch (Dove.Etheri586Status tooManyCollisions)
                               of (LOCF (fetch (Dove.EtherIOCB i586Status) of IOCB)))
                            \ES.TOO.MANY.COLLISIONS)
                           (T \ES.OTHER.ERROR)))
                   (COND
                      ((fetch (Dove.EtherIOCB okay) of IOCB)
                       \ES.GOOD.PACKET)
                      (T \ES.OTHER.ERROR])

(\DoveEther.Init
  [LAMBDA NIL                                                (* ejs%: "16-Sep-85 12:57")
    (MAPC '(\DoveEther.FCBPointer) (FUNCTION \LOCKVAR])

(\DoveEther.Initiate
  [LAMBDA (IOCB)                                             (* ejs%: "12-Sep-85 20:08")

(* ;;; "Queues a command-like IOCB on the ethernet output queue")
          
          (* ;; "Fill in the IOCB")

    (PROGN (\CLEARWORDS (fetch (Dove.EtherIOCB ClientCondition) of IOCB)
                  \DoveEther.ClientConditionSize)
           (replace (Dove.EtherIOCB nextIOCB) of IOCB with NIL)
           (replace (Dove.EtherIOCB Status) of IOCB with 0))
          
          (* ;; "Byte Swap for Opie")

    (\DoveEther.ByteSwapIOCB IOCB)
          
          (* ;; "Put it on queue for output")

    (\DoveEther.EnQueue (fetch (Dove.EtherFCB mesaOutQueue) of \DoveEther.FCBPointer)
           IOCB)
          
          (* ;; "Tell the IOP there's something there")

    (\DoveIO.NotifyIOP (fetch (Dove.EtherFCB etherOutWorkMask) of \DoveEther.FCBPointer])

(\DoveEther.MakeSureOff
  [LAMBDA (oldMesaOutQueueLoc)                               (* ejs%: "30-Oct-85 18:54")

(* ;;; "This fn makes sure the ethernet is OFF")

    (replace (Dove.EtherFCB mesaClientStateRequest) of \DoveEther.FCBPointer with 
                                                                                \DoveEther.RequestOFF
           )
    (\DoveIO.NotifyIOP (fetch (Dove.EtherFCB etherInWorkMask) of \DoveEther.FCBPointer))
    (\DoveIO.NotifyIOP (fetch (Dove.EtherFCB etherOutWorkMask) of \DoveEther.FCBPointer))
    (until (EQ (fetch (Dove.EtherFCB mesaOutClientState) of \DoveEther.FCBPointer)
               \DoveEther.RequestOFF))
    (COND
       (oldMesaOutQueueLoc (MESASETQ oldMesaOutQueueLoc (fetch (Dove.EtherFCB mesaOutQueue)
                                                           of \DoveEther.FCBPointer)
                                  Dove.QueueBlock)
              (MESASETQ (\ADDBASE oldMesaOutQueueLoc (MESASIZE Dove.QueueBlock))
                     (fetch (Dove.EtherFCB mesaInQueue) of \DoveEther.FCBPointer)
                     Dove.QueueBlock])

(\DoveEther.QueueInput
  [LAMBDA (IOCB BUF LEN)                                     (* ejs%: "12-Sep-85 20:08")

(* ;;; "Queues a packet NIL associated IOCB on the input queue")
          
          (* ;; "Fill in the IOCB")

    (PROGN (\CLEARWORDS (fetch (Dove.EtherIOCB ClientCondition) of IOCB)
                  \DoveEther.ClientConditionSize)
           (replace (Dove.EtherIOIOCB bufferAddress) of IOCB with BUF)
           (replace (Dove.EtherIOIOCB length) of IOCB with (UNFOLD LEN BYTESPERWORD))
           (replace (Dove.EtherIOCB nextIOCB) of IOCB with NIL)
           (replace (Dove.EtherIOCB Status) of IOCB with 0)
           (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.inputIOCBType))
          
          (* ;; "Byte swap for Opie")

    (\DoveEther.ByteSwapIOCB IOCB)
          
          (* ;; "Put it on queue for output")

    (\DoveEther.EnQueue (fetch (Dove.EtherFCB mesaInQueue) of \DoveEther.FCBPointer)
           IOCB)
          
          (* ;; "Tell the IOP there's something there")

    (\DoveIO.NotifyIOP (fetch (Dove.EtherFCB etherInWorkMask) of \DoveEther.FCBPointer])

(\DoveEther.QueueOutput
  [LAMBDA (IOCB BUF LEN)                                     (* ejs%: "12-Sep-85 20:08")

(* ;;; "Queues a packet NIL associated IOCB on the output queue")
          
          (* ;; "Must mark it referenced")

    (\GETBASE BUF 0)
    (COND
       ((IGREATERP LEN WORDSPERPAGE)
        (\GETBASE BUF WORDSPERPAGE)))
          
          (* ;; "Fill in the IOCB")

    (PROGN (\CLEARWORDS (fetch (Dove.EtherIOCB ClientCondition) of IOCB)
                  \DoveEther.ClientConditionSize)
           (replace (Dove.EtherIOIOCB length) of IOCB with (UNFOLD LEN BYTESPERWORD))
           (replace (Dove.EtherIOIOCB bufferAddress) of IOCB with BUF)
           (replace (Dove.EtherIOCB nextIOCB) of IOCB with NIL)
           (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.outputIOCBType)
           (replace (Dove.EtherIOCB Status) of IOCB with 0))
          
          (* ;; "Byte Swap for Opie")

    (\DoveEther.ByteSwapIOCB IOCB)
          
          (* ;; "Put it on queue for output")

    (\DoveEther.EnQueue (fetch (Dove.EtherFCB mesaOutQueue) of \DoveEther.FCBPointer)
           IOCB)
          
          (* ;; "Tell the IOP there's something there")

    (\DoveIO.NotifyIOP (fetch (Dove.EtherFCB etherOutWorkMask) of \DoveEther.FCBPointer])

(\DoveEther.TurnOn
  [LAMBDA (NSHostNumber oldMesaOutQueueLoc)                  (* ejs%: "30-Oct-85 18:57")

(* ;;; "Turns on Daybreak ether driver")

    (SETQ \DoveEther.FCBPointer (\DoveIO.GetHandlerIORegionPtr DoveIO.ethernetHandler))
    (\DoveEther.MakeSureOff)
    [COND
       (oldMesaOutQueueLoc (MESASETQ (fetch (Dove.EtherFCB mesaOutQueue) of \DoveEther.FCBPointer)
                                  oldMesaOutQueueLoc Dove.QueueBlock)
              (MESASETQ (fetch (Dove.EtherFCB mesaInQueue) of \DoveEther.FCBPointer)
                     (\ADDBASE oldMesaOutQueueLoc (MESASIZE Dove.QueueBlock))
                     Dove.QueueBlock))
       (T (\CLEARWORDS (fetch (Dove.EtherFCB mesaOutQueue) of \DoveEther.FCBPointer)
                 (MESASIZE Dove.QueueBlock))
          (\CLEARWORDS (fetch (Dove.EtherFCB mesaInQueue) of \DoveEther.FCBPointer)
                 (MESASIZE Dove.QueueBlock]
    (replace (Dove.EtherFCB mesaClientStateRequest) of \DoveEther.FCBPointer with 
                                                                                 \DoveEther.RequestON
           )
          
          (* ;; "Entirely too horrible kludge! We need a segment 0 storage allocator in this system!")

    (LET ((IOCB (\ADDBASE \IOPAGE 64)))
         (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.resetIOCBType)
         (COND
            ((\DoveEther.DoOutput IOCB)
             (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.commandIOCBType)
             (replace (Dove.EtherIOCB Action) of IOCB with DoveEther.actionConfigure)
             (LET ((Conf (fetch (Dove.EtherCommandIOCB select) of IOCB)))
                  (\CLEARBYTES (fetch (Dove.EtherCommandIOCB select) of IOCB)
                         0
                         (UNFOLD (IDIFFERENCE (MESASIZE Dove.EtherCommandIOCB)
                                        (MESASIZE Dove.EtherIOCB))
                                BYTESPERWORD))
                  (with Dove.EtherConfigure Conf (SETQ ByteCount 9)
                        (SETQ FifoLimit 11)
                        (SETQ SaveBadFrames NIL)
                        (SETQ PreambleLength 2)
                        (SETQ AddrTypeLoc 1)
                        (SETQ AddrLength 6)
                        (SETQ InterframeSpacing 96)
                        (SETQ RetryNumber 15)
                        (SETQ SlotTimeHigh 2)
                        (SETQ PromiscuousMode (AND (LISTP NSHostNumber)
                                                   (EQUAL NSHostNumber BROADCASTNSHOSTNUMBER)))
                        (SETQ MinFrameLength 64))
                  (COND
                     ((\DoveEther.DoOutput IOCB)
                      (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.commandIOCBType)
                      (replace (Dove.EtherIOCB Action) of IOCB with DoveEther.actionIndividualAddr)
                      (COND
                         ((OR (NULL NSHostNumber)
                              (EQ NSHostNumber T))
                          (\BLT (fetch (Dove.EtherCommandIOCB select) of IOCB)
                                (LOCF (fetch (IFPAGE NSHost0) of \InterfacePage))
                                \#WDS.NSHOSTNUMBER))
                         (T (\STORENSHOSTNUMBER (fetch (Dove.EtherCommandIOCB select) of IOCB)
                                   NSHostNumber)))
                      (COND
                         ((\DoveEther.DoOutput IOCB)
                          (replace (Dove.EtherIOCB IOCBType) of IOCB with DoveEther.startRUIOCBType)
                          (\DoveEther.DoOutput IOCB])
)

(RPAQ? \DoveEther.FCBPointer )
(DECLARE%: DOEVAL@COMPILE DONTCOPY

(GLOBALVARS \DoveEther.FCBPointer)
)
(DECLARE%: EVAL@COMPILE DONTCOPY 

(FILESLOAD (SOURCE)
       10MBDECLS DOVEDECLS DOVEETHERDECLS LLNSDECLS)
)
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(\DoveEther.Init)
)
(PUTPROPS DOVEETHER COPYRIGHT ("Venue & Xerox Corporation" 1985 1986 1990))
(DECLARE%: DONTCOPY
  (FILEMAP (NIL (1003 20612 (\DoveEther.ByteSwapIOCB 1013 . 3676) (\DoveEther.DeQueue 3678 . 6303) (
\DoveEther.EnQueue 6305 . 7289) (\DoveEther.GetPacketStatus 7291 . 11856) (\DoveEther.Init 11858 . 
12031) (\DoveEther.Initiate 12033 . 12997) (\DoveEther.MakeSureOff 12999 . 14173) (
\DoveEther.QueueInput 14175 . 15415) (\DoveEther.QueueOutput 15417 . 16827) (\DoveEther.TurnOn 16829
 . 20610)))))
STOP
