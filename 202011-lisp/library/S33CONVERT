(DEFINE-FILE-INFO PACKAGE "S33" READTABLE "XCL")
(il:filecreated "27-Mar-90 14:39:26" "{piglet/n}<piglet>vanmelle>lisp>s33>S33CONVERT;3" 10876  

      il:|changes| il:|to:|  (il:functions make-converter handle-convert-button convert)

      il:|previous| il:|date:| "27-Mar-90 11:44:20" "{piglet/n}<piglet>vanmelle>lisp>s33>S33CONVERT;2"
)


; Copyright (c) 1989, 1990 by Xerox Corporation.  All rights reserved.

(il:prettycomprint il:s33convertcoms)

(il:rpaqq il:s33convertcoms ((il:* il:|;;| "Format conversion of user files via System 33") (il:p (export (quote (convert convert-to-file *converter-icon*)))) (il:functions convert convert-to-file make-converter right-justify-label convert-menu-limitchars handle-convert-button) (il:variables *converter-icon*) (il:prop (il:filetype il:makefile-environment) il:s33convert)))



(il:* il:|;;| "Format conversion of user files via System 33")


(export (quote (convert convert-to-file *converter-icon*)))

(defun convert (file &optional toformats fromformat presentation-fn window) (il:* il:|;;| "convert file to a format we can view") (unless presentation-fn (setq presentation-fn (quote show-presentation))) (let* ((il:*upper-case-file-names* nil) (tmploc (locate "newfileloc" nil))) (il:* il:|;;| "For now, we have to copy file to ansel to let the server at it.") (when (integerp (car tmploc)) (browser-prompt window "Can't get a tmp file location because ~A" (cadr tmploc)) (return-from convert (cadr tmploc))) (setq tmploc (car (id-loc-file-loc (car tmploc)))) (let* ((tmpfile (file-name-from-location tmploc)) (copied (copy-exact-file file tmpfile :output))) (il:* il:|;;| "Now that we've copied it, the rest of this looks like retrieve") (unwind-protect (let ((presentations (locate "convert" (list (file-location-file-name tmploc) (or fromformat (il:unpackfilename.string file (quote il:extension))) (file-location-file-server tmploc)) :formats (cond ((null toformats) *good-document-formats*) ((consp toformats) toformats) (t (list toformats))) :result-types *retrieve-result-types*)) descr) (cond ((not presentations) (il:* il:\; "Shouldn't happen") (browser-prompt window "System 33 Convert returned no file!")) ((integerp (car presentations)) (il:* il:\; "Error case") (browser-prompt window "System 33 Convert failed because ~A" (cadr presentations)) (cadr presentations)) (t (il:* il:\; "Success") (setq descr (make-description :props (list :title file))) (il:* il:\; "Pseudo-description for whoever wants the file name") (with-collection (dolist (p presentations) (let* ((pre (car (id-loc-file-loc p))) (file (file-name-from-location pre)) (format (file-location-file-format pre)) (result (funcall presentation-fn file format descr window))) (when result (collect result)))))))) (il:* il:|;;| "Cleanup afterwards: delete temp file") (when copied (il:delfile tmpfile))))))

(defun convert-to-file (file &optional toformats fromformat) (il:* il:|;;| "Convert FILE to requested format.  Returns a list of file names, which the caller must copy to an appropriate place in a timely manner.") (convert file toformats fromformat (function identity)))

(defun make-converter (&optional position) (il:* il:|;;| "Create a system 33 file converter.") (query-server-options) (let* ((plainfont (get-plain-font)) (boldfont (get-plain-font t)) (boldheight (il:fontprop boldfont (quote il:height))) (heightdifference (- boldheight (il:fontprop plainfont (quote il:height)))) (bmbottom (ash (- (+ boldheight 4) (il:bitmapheight *menu-choice-bitmap*)) -1)) (bmwidth (+ 2 (il:bitmapwidth *menu-choice-bitmap*))) (labelwidth (il:stringwidth "Destination Format" boldfont)) (w (il:freemenu (il:bquote ((il:props il:columnspace 14 il:font (il:\\\, boldfont)) ((il:\\\, (right-justify-label "Display!" labelwidth boldfont (il:bquote (il:selectedfn handle-convert-button il:id :display il:message "Display the source file in the requested destination format.")))) (il:label "Convert to File!" il:left 50 il:maxwidth (il:\\\, (* (il:charwidth (il:charcode x) plainfont) 40)) il:selectedfn handle-convert-button il:message "Convert the source file to the requested destination format
and write it to the destination file/directory.")) ((il:props il:columnspace 4) (il:\\\, (right-justify-label "Source File" labelwidth boldfont (quote (type il:editstart il:links (il:edit source-text) il:message "Specifies the file to be converted." il:id source)))) (il:label (il:\\\, *begin-typing-bitmap*) type il:editstart il:links (il:edit source-text) il:bottom (il:\\\, bmbottom)) (il:label "" type il:edit il:id source-text il:font (il:\\\, plainfont) il:bottom (il:\\\, heightdifference) il:limitchars convert-menu-limitchars)) ((il:props il:columnspace 4) (il:\\\, (right-justify-label "Source Format" labelwidth boldfont (quote (type il:editstart il:message "Specifies the format of the source file.
If omitted, defaults to source file extension." il:links (il:edit 2))))) (il:label (il:\\\, *menu-choice-bitmap*) type il:display il:id 1 il:downfn query-select-value il:bottom (il:\\\, bmbottom) values (il:\\\, (append *format-values* (quote ("*other*"))))) (il:label "" type il:edit il:id 2 il:font (il:\\\, plainfont) il:bottom (il:\\\, (+ 2 heightdifference)) il:limitchars convert-menu-limitchars)) ((il:props il:columnspace 4) (il:label "Destination Format" type il:editstart il:links (il:edit 4) il:message "Specifies the format in which to view the file.
If omitted, defaults to format(s) Lisp can handle.") (il:label (il:\\\, *menu-choice-bitmap*) type il:display il:id 3 il:downfn query-select-value il:bottom (il:\\\, bmbottom) values (il:\\\, *format-values*)) (il:label "" type il:edit il:id 4 il:font (il:\\\, plainfont) il:bottom (il:\\\, (+ 2 heightdifference)) il:limitchars convert-menu-limitchars)) ((il:props il:columnspace 4) (il:\\\, (right-justify-label "Destination File/Dir" labelwidth boldfont (quote (type il:editstart il:links (il:edit dest-text) il:message "Specifies where to write the output of the conversion.
Can be a full file name, or just a directory (defaults to source)." il:id source)))) (il:label (il:\\\, *begin-typing-bitmap*) type il:editstart il:links (il:edit dest-text) il:bottom (il:\\\, bmbottom)) (il:label "" type il:edit il:id dest-text il:font (il:\\\, plainfont) il:bottom (il:\\\, heightdifference) il:limitchars convert-menu-limitchars)))) "System 33 Converter") (il:* il:|;;| "The HEIGHTDIFFERENCE hacking is to get the baselines of the bold and plain fonts to line up (odd that they don't already).  BMBOTTOM is so that *MENU-CHOICE-BITMAP* will be centered.")) (freg (il:windowprop w (quote il:region)))) (il:movew w (or position (il:getboxposition (record-fetch region width freg) (+ (record-fetch region height freg) (* (il:fontprop *browser-prompt-font* (quote il:height)) *browser-prompt-lines*))))) (il:openw w) (il:windowprop w (quote il:fm.dontreshape) t) (il:* il:\; "Don't let reshape disturb our nice formatting") (il:windowprop w (quote il:fm.promptwindow) (il:getpromptwindow w *browser-prompt-lines* plainfont)) (il:windowprop w (quote il:iconfn) (function (lambda (window oldicon position) (or oldicon (il:iconw *converter-icon* nil position))))) w))

(defun right-justify-label (text fieldwidth boldfont otherprops) (il:* il:|;;| "Make a freemenu item labeled \"text\" where the label is right-justified in a space of fieldwidth wide.  Otherprops is plist of rest of item") (il:bquote (il:label (il:\\\, text) il:left (il:\\\, (- fieldwidth (il:stringwidth text boldfont))) (il:\\\,@ otherprops))))

(defun convert-menu-limitchars (item window char) (il:* il:|;;| "Called when a character is typed at a pattern field.  Returns T if char is legal.") (il:* il:|;;| "CHAR is an Interlisp Char, ie., usually a symbol!!!") (case char ((il:\
 il:Â) (il:* il:\; "Go to next item") (il:fm.skipnext window) nil) (otherwise t)))

(defun handle-convert-button (item window buttons) (il:* il:|;;| "Called when the Display! or Convert-to-File! button is pressed.") (browser-prompt-clear window) (let* ((source-file (get-fmitem-label (quote source-text) window)) (source-format (get-fmitem-label 2 window)) (dest-format (get-fmitem-label 4 window)) (display-only (eq (il:fm.itemprop item (quote il:id)) :display)) dest-file spec args heading error progress-region) (unless display-only (setq dest-file (get-fmitem-label (quote dest-text) window))) (unless (> (length source-file) 0) (browser-prompt window "No source file is specified") (return-from handle-convert-button)) (unless (> (length source-format) 0) (il:* il:\; "Default format to source file extension") (setq source-format (il:unpackfilename.string source-file (quote il:extension))) (il:fm.changelabel (il:fm.getitem 2 nil window) source-format window)) (convert source-file (and (> (length dest-format) 0) (list dest-format)) source-format (if display-only (function show-presentation) (function (lambda (file format descr window) (il:* il:|;;| "Store this to file specified in menu") (let* ((format-name (major-format format)) (name (cond ((null dest-file) (il:* il:\; "default to source file name with format as extension") (il:packfilename.string (quote il:extension) format-name (quote il:version) nil (quote il:body) source-file)) (t (case (char dest-file (1- (length dest-file))) ((#\> #\/) (il:* il:\; "It's a dir") (il:packfilename.string (quote il:extension) format-name (quote il:directory) (il:\\add.connected.dir dest-file) (quote il:version) nil (quote il:body) source-file)) (t (il:* il:\; "Presume it's a file") dest-file)))))) (multiple-value-bind (result condition) (ignore-errors (copy-exact-file file name :input)) (if condition (browser-prompt window "~%Couldn't write ~A because ~A" name condition) (browser-prompt window "~%Wrote ~A" result))))))) window)))

(defvar *converter-icon* (quote #*(80 40)OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CLGOL@@@@@@@@@@@CON@CLD@B@@@@@@@@@@@B@A@CLD@A@@@@@@@@@@@B@@HCLD@@H@@@@@@@@@@B@@DCLDCHD@@@ALAL@@@B@HBCLDDLD@@@CFCF@@@BALBCLDFLD@@@@F@F@@@BALBCLD@LD@B@@F@F@@HBALBCLDAHDCO@ALAL@OLBALBCLDA@DAOH@F@F@GNB@HBCLDC@DCO@@C@C@OLB@HBCLD@@D@B@FCFC@@HB@@BCLDC@D@@@FFFF@@@B@HBCLDC@D@@@CLCL@@@BALBCLD@@D@@@@@@@@@@B@HBCLD@@D@@@@@@@@@@B@@BCLD@@D@@@@@@@@@@B@@BCLGOOL@@@@@@@@@@COONCL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@CL@@@@@@@@@@@@@@@@@@COOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO) "Icon for System 33 Converter tool")

(il:putprops il:s33convert il:filetype :compile-file)

(il:putprops il:s33convert il:makefile-environment (:package "S33" :readtable "XCL"))
(il:putprops il:s33convert il:copyright ("Xerox Corporation" 1989 1990))
(il:declare\: il:dontcopy
  (il:filemap (nil)))
il:stop
