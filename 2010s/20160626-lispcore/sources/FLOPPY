(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED " 4-Jan-93 18:45:49" {DSK}<python>lde>lispcore>sources>FLOPPY.;2 362267       previous date%: "16-May-90 17:50:46" {DSK}<python>lde>lispcore>sources>FLOPPY.;1)(* ; "Copyright (c) 1984, 1985, 1986, 1987, 1988, 1990, 1993 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT FLOPPYCOMS)(RPAQQ FLOPPYCOMS        [        (* ;; "FLOPPY disk driver")        (COMS               (* ;; "FACE")              (DECLARE%: EVAL@COMPILE DONTCOPY                     (CONSTANTS (C.NOP 0)                            (C.READSECTOR 1)                            (C.WRITESECTOR 2)                            (C.WRITEDELETEDSECTOR 3)                            (C.READID 4)                            (C.FORMATTRACK 5)                            (C.RECALIBRATE 6)                            (C.INITIALIZE 7)                            (C.ESCAPE 8)                            (SC.NOP 0)                            (SC.DISKCHANGECLEAR 1)                            (S.DOOROPENED 32768)                            (S.TWOSIDED 8192)                            (S.DISKID 4096)                            (S.ERROR 2048)                            (S.RECALIBRATEERROR 512)                            (S.DATALOST 256)                            (S.NOTREADY 128)                            (S.WRITEPROTECT 64)                            (S.DELETEDDATA 32)                            (S.RECORDNOTFOUND 16)                            (S.CRCERROR 8)                            (S.TRACK0 4)                            (S.INDEX 2)                            (S.BUSY 1)                            (R.OK 0)                            (R.BUSY S.BUSY)                            (R.CRCERROR (LOGOR S.ERROR S.CRCERROR))                            (R.DATALOST (LOGOR S.ERROR S.DATALOST))                            (R.DOOROPENED (LOGOR S.ERROR S.DOOROPENED))                            (R.DOORISOPEN (LOGOR S.ERROR S.DOOROPENED S.NOTREADY))                            (R.DOORISOPEN2 (LOGOR S.DOOROPENED S.NOTREADY))                            (R.NOTREADY (LOGOR S.ERROR S.NOTREADY))                            (R.RECALIBRATEERROR (LOGOR S.ERROR S.RECALIBRATEERROR))                            (R.RECORDNOTFOUND (LOGOR S.ERROR S.RECORDNOTFOUND))                            (R.WRITEPROTECT (LOGOR S.ERROR S.WRITEPROTECT))                            (R.READERRORMASK (LOGOR S.DOOROPENED S.ERROR S.RECALIBRATEERROR                                                     S.DATALOST S.NOTREADY S.RECORDNOTFOUND S.CRCERROR                                                    ))                            (R.WRITEERRORMASK (LOGOR R.READERRORMASK S.WRITEPROTECT))                            (R.INFOMASK (LOGOR S.TWOSIDED S.WRITEPROTECT S.TRACK0))                            (FLOPPYIOCB.SIZE 16)                            (B128 0)                            (B256 1)                            (B512 2)                            (B1024 3)                            (IBM 0)                            (TROY 1)                            (SINGLE 0)                            (DOUBLE 8)                            (NoBits 0)                            (IDLENGTH 3)                            (SEAL.PSECTOR9 49932)                            (VERSION.PSECTOR9 1)                            (LABELMAXLENGTH.PSECTOR9 40)                            (SEAL.PMPAGE 13003)                            (VERSION.PMPAGE 1)                            (SEAL.PFILELIST 45771)                            (VERSION.PFILELIST 1)                            (PMPAGEETYPE.FREE 0)                            (PMPAGEETYPE.FILE 1)                            (PMPAGEETYPE.PFILELIST 2)                            (PMPAGEETYPE.BADSECTORS 3)                            (SEAL.PLPAGE 43690)                            (VERSION.PLPAGE 1)                            (VERSION.DATA 2222)                            (NAMEMAXLENGTH.PLPAGE 100)                            (FILETYPE.FREE 0)                            (FILETYPE.FILE 2052)                            (FILETYPE.PFILELIST 2054)))              (INITRECORDS DISKADDRESS FLOPPYIOCB FLOPPYRESULT PSECTOR9 PMPAGE PLPAGE PFILELIST PFLE)              (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS DISKADDRESS FLOPPYIOCB FLOPPYRESULT PSECTOR9                                                      PMPAGE PLPAGE PFILELIST PFLE))              (FNS \FLOPPY.TRANSLATEFLOPPYRESULT \FLOPPY.SEVERE.ERROR \FLOPPY.TRANSLATEPMPAGEETYPE                    \FLOPPY.TRANSLATEFILETYPE \FLOPPY.MTL.FIXP \FLOPPY.LTM.FIXP \FLOPPY.MTL.IDATE                    \FLOPPY.LTM.IDATE))        (COMS                                                (* ; "`HEAD' *")              (DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (IBMS128 0)                                                      (IBMS256 1)                                                      (IBMS512 2)                                                      (IBMS1024 3)                                                      (IBMD128 4)                                                      (IBMD256 5)                                                      (IBMD512 6)                                                      (IBMD1024 7)))              (INITVARS (\FLOPPY.DEBUG NIL)                     (\FLOPPY.CYLINDERS 77)                     (\FLOPPY.TRACKSPERCYLINDER 2)                     (\FLOPPY.SECTORSPERTRACK 15)                     (\FLOPPYMPERRORS 0)                     (\FLOPPYMPERRORSFLG NIL)                     (\FLOPPY.MOUNTEDP.DOVETIME NIL)                     (\FLOPPY.MOUNTEDP.DOVEANSWER NIL))              (FNS \FLOPPY.TRANSLATESETUP \FLOPPY.SETUP.IOCB \FLOPPY.CHECK.FLOPPYIOCB \FLOPPY.DENSITY                   \FLOPPY.SECTORLENGTH \FLOPPY.ENCODEDSECTORLENGTH \FLOPPY.GAP3                    \FLOPPY.SECTORSPERTRACK \FLOPPY.RUN \FLOPPY.ERROR \FLOPPY.LOCK.BUFFER                    \FLOPPY.UNLOCK.BUFFER \FLOPPY.PREPAREFORCRASH \FLOPPY.COMMAND \FLOPPY.INITIALIZE                    \FLOPPY.NOP \FLOPPY.RECALIBRATE \FLOPPY.RECOVER \FLOPPY.TRANSFER                    \FLOPPY.READSECTOR \FLOPPY.WRITESECTOR \FLOPPY.FORMATTRACKS                    \FLOPPY.DISKCHANGECLEAR \FLOPPY.MOUNTEDP \FLOPPY.CAN.READP \FLOPPY.CAN.WRITEP                    \FLOPPY.WRITEABLEP \FLOPPY.TWOSIDEDP \FLOPPY.DUMP \FLOPPY.DEBUG))        (COMS                                                (* ; "`COMMON' *")              (INITVARS (\FLOPPYFDEV NIL)                     (\FLOPPYLOCK NIL)                     (\FLOPPY.SCRATCH.BUFFER NIL)                     (\FLOPPY.SCRATCH.BUFFER2 NIL)                     (\FLOPPY.SCRATCH.FLOPPYIOCB NIL)                     (\FLOPPY.IBMS128.FLOPPYIOCB NIL)                     (\FLOPPY.IBMD256.FLOPPYIOCB NIL)                     (\FLOPPY.IBMD512.FLOPPYIOCB NIL)                     (\FLOPPYIOCBADDR NIL)                     (\FLOPPYIOCB NIL)                     (\FLOPPYRESULT NIL))              (GLOBALRESOURCES \FLOPPY.SCRATCH.FLOPPYIOCB \FLOPPY.IBMS128.FLOPPYIOCB                      \FLOPPY.IBMD256.FLOPPYIOCB \FLOPPY.IBMD512.FLOPPYIOCB \FLOPPY.SCRATCH.BUFFER                      \FLOPPY.SCRATCH.BUFFER2)              (INITRECORDS FLOPPYSTREAM FILEGENOBJ GENFILESTATE)              (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS FLOPPYSTREAM FILEGENOBJ GENFILESTATE))              (FNS FLOPPY.RESTART FLOPPY.MODE \FLOPPY.SETUP.HARDWARE \FLOPPY.EVENTFN                    \FLOPPY.HOSTNAMEP \FLOPPY.ADDDEVICENAME \FLOPPY.ASSUREFILENAME \FLOPPY.OTHERINFO                    \FLOPPY.LEXASSOC \FLOPPY.LEXPUTASSOC \FLOPPY.LEXREMOVEASSOC \FLOPPY.CACHED.READ                    \FLOPPY.CACHED.WRITE \FLOPPY.OPEN \FLOPPY.CLOSE \FLOPPY.FLUSH                    \FLOPPY.UNCACHED.READ \FLOPPY.UNCACHED.WRITE \FLOPPY.EXISTSP \FLOPPY.BREAK                    \FLOPPY.MESSAGE \FLOPPY.BUFFER))        (COMS                                                (* ; "`PILOT' *")              (INITVARS (\PFLOPPYPSECTOR9 NIL)                     (\PFLOPPYPFILELIST NIL)                     (\PFLOPPYINFO NIL)                     (\PFLOPPYFDEV NIL))              (INITRECORDS PFALLOC PFINFO PFLOPPYFDEV)              (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS PFALLOC PFINFO PFLOPPYFDEV))              (FNS \PFLOPPY.INIT \PFLOPPY.OPEN \PFLOPPY.OPEN.PSECTOR9 \PFLOPPY.GET.PSECTOR9                    \PFLOPPY.OPEN.PFILELIST \PFLOPPY.DAMAGED \PFLOPPY.OPENFILE \PFLOPPY.OPENFILE1                    \PFLOPPY.OPENOLDFILE \PFLOPPY.OPENNEWFILE \PFLOPPY.ASSURESTREAM                    \PFLOPPY.GETFILEINFO \PFLOPPY.GETFILEINFO1 \PFLOPPY.SETFILEINFO \PFLOPPY.CLOSEFILE                   \PFLOPPY.CLOSEFILE1 \PFLOPPY.DELETEFILE \PFLOPPY.GENERATEFILES \PFLOPPY.NEXTFILEFN                   \PFLOPPY.FILEINFOFN \PFLOPPY.RENAMEFILE \PFLOPPY.STREAMS.AGAINST                    \PFLOPPY.STREAMS.USING \PFLOPPY.READPAGES \PFLOPPY.READPAGE \PFLOPPY.READPAGENO                    \PFLOPPY.WRITEPAGENO \PFLOPPY.PAGENOTODISKADDRESS \PFLOPPY.DISKADDRESSTOPAGENO                    \PFLOPPY.DIR.GET \PFLOPPY.DIR.PUT \PFLOPPY.DIR.REMOVE \PFLOPPY.DIR.VERSION                    \PFLOPPY.GETFILENAME \PFLOPPY.CREATE.PFILELIST \PFLOPPY.ADD.TO.PFILELIST                    \PFLOPPY.DELETE.FROM.PFILELIST \PFLOPPY.SAVE.PFILELIST \PFLOPPY.SAVE.PSECTOR9                    \PFLOPPY.WRITEPAGES \PFLOPPY.WRITEPAGE \PFLOPPY.TRUNCATEFILE \PFLOPPY.FORMAT                    \PFLOPPY.CONFIRM \PFLOPPY.GET.NAME \PFLOPPY.SET.NAME))        (COMS                                                (* ; "`ALLOCATE' *")              (DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (MINIMUM.ALLOCATION 5)                                                      (DEFAULT.ALLOCATION 50)))              (INITVARS (\FLOPPY.ALLOCATIONS.BITMAP NIL))              (FNS \PFLOPPY.ALLOCATE \PFLOPPY.ALLOCATE.LARGEST \PFLOPPY.TRUNCATE \PFLOPPY.DEALLOCATE                   \PFLOPPY.EXTEND \PFLOPPY.GAINSPACE \PFLOPPY.GAINSPACE.MERGE                    \PFLOPPY.ALLOCATE.WATCHDOG \PFLOPPY.FREE.PAGES \PFLOPPY.LENGTHS \PFLOPPY.STARTS                    \PFLOPPY.ICHECK \PFLOPPY.ALLOCATIONS))        (COMS                                                (* ; "`SERVICES' *")              (FNS FLOPPY.FREE.PAGES FLOPPY.FORMAT FLOPPY.NAME FLOPPY.GET.NAME FLOPPY.SET.NAME                    FLOPPY.CAN.READP FLOPPY.CAN.WRITEP FLOPPY.WAIT.FOR.FLOPPY))        (COMS                                                (* ; "`SYSOUT' *")              (INITVARS (\SFLOPPYINFO NIL)                     (\SFLOPPYFDEV NIL)                     (\HFLOPPY.MAXPAGES NIL)                     (\SFLOPPY.PAGENO NIL)                     (\SFLOPPY.FLOPPYNO NIL)                     (\SFLOPPY.PAGES NIL)                     (\SFLOPPY.HUGELENGTH NIL)                     (\SFLOPPY.HUGEPAGELENGTH NIL)                     (\SFLOPPY.IWRITEDATE NIL)                     (\SFLOPPY.FLOPPYNAME "Lisp Sysout ")                     (\SFLOPPY.FILENAME 'lisp.sysout)                     (\SFLOPPY.RECOG NIL)                     (\SFLOPPY.OTHERINFO NIL)                     (\SFLOPPY.SLOWFLG T)                     (\SFLOPPY.HACK.MODE NIL)                     (\SFLOPPY.HACK.STREAM NIL))              (FNS \SFLOPPY.INIT \SFLOPPY.GETFILEINFO \SFLOPPY.OPENHUGEFILE \SFLOPPY.WRITEPAGES                    \SFLOPPY.WRITEPAGE \SFLOPPY.READPAGES \SFLOPPY.READPAGE \SFLOPPY.CLOSEHUGEFILE                    \SFLOPPY.INPUTFLOPPY \SFLOPPY.OUTPUTFLOPPY \SFLOPPY.CLOSEFLOPPY \SFLOPPY.HACK))        (COMS                                                (* ; "`HUGE' *")              (INITVARS (\HFLOPPYINFO NIL)                     (\HFLOPPYFDEV NIL)                     (\HFLOPPY.MAXPAGES NIL)                     (\HFLOPPY.PAGENO NIL)                     (\HFLOPPY.FLOPPYNO NIL)                     (\HFLOPPY.HUGELENGTH NIL)                     (\HFLOPPY.HUGEPAGELENGTH NIL)                     (\HFLOPPY.IWRITEDATE NIL)                     (\HFLOPPY.FLOPPYNAME NIL)                     (\HFLOPPY.FILENAME NIL)                     (\HFLOPPY.RECOG NIL)                     (\HFLOPPY.OTHERINFO NIL)                     (\HFLOPPY.SLOWFLG T))              (FNS \HFLOPPY.INIT \HFLOPPY.GETFILEINFO \HFLOPPY.OPENHUGEFILE \HFLOPPY.WRITEPAGES                    \HFLOPPY.WRITEPAGE \HFLOPPY.READPAGES \HFLOPPY.READPAGE \HFLOPPY.CLOSEHUGEFILE                    \HFLOPPY.INPUTFLOPPY \HFLOPPY.OUTPUTFLOPPY \HFLOPPY.CLOSEFLOPPY))        (COMS                                                (* ; "`SCAVENGE' *")              (INITVARS (\FLOPPY.SCAVENGE.IDATE NIL))              (FNS FLOPPY.SCAVENGE \PFLOPPY.SCAVENGE \PFLOPPY.SCAVENGE.PMPAGES                    \PFLOPPY.SCAVENGE.PMPAGEA \PFLOPPY.SCAVENGE.PMPAGE.AFTER                    \PFLOPPY.SCAVENGE.PMPAGE.AFTER1 \PFLOPPY.SCAVENGE.PLPAGES                    \PFLOPPY.SCAVENGE.PSECTOR9 \PFLOPPY.SCAVENGE.PFILELIST))        (COMS                                                (* ; "`COPY' *")              (FNS FLOPPY.TO.FILE FLOPPY.FROM.FILE))        (COMS                                                (* ; "`COMPACT' *")              (FNS FLOPPY.COMPACT \PFLOPPY.COMPACT \PFLOPPY.COMPACT.PFALLOCS \PFLOPPY.COMPACT.PFALLOC                   \PFLOPPY.COMPACT.PSECTOR9 \PFLOPPY.COMPACT.PFILELIST))        (COMS                                                (* ; "`ARCHIVE' *")              (FNS FLOPPY.ARCHIVE FLOPPY.UNARCHIVE))        (GLOBALVARS \FLOPPY.DEBUG \FLOPPY.INSPECTW \FLOPPYFDEV \FLOPPYLOCK \FLOPPYIOCBADDR                \FLOPPYIOCB \FLOPPYRESULT \FLOPPY.MODE.BEFORE.EVENT \PFLOPPYPSECTOR9 \PFLOPPYPFILELIST               \PFLOPPYINFO \PFLOPPYFDEV \FLOPPY.ALLOCATIONS.BITMAP \SFLOPPYINFO \SFLOPPYFDEV                \HFLOPPY.MAXPAGES \SFLOPPY.PAGENO \SFLOPPY.FLOPPYNO \SFLOPPY.HUGELENGTH                \SFLOPPY.HUGEPAGELENGTH \SFLOPPY.IWRITEDATE \SFLOPPY.FILENAME \SFLOPPY.RECOG                \SFLOPPY.FLOPPYNAME \SFLOPPY.SLOWFLG \HFLOPPYINFO \HFLOPPYFDEV \HFLOPPY.MAXPAGES                \HFLOPPY.PAGENO \HFLOPPY.FLOPPYNO \HFLOPPY.HUGELENGTH \HFLOPPY.HUGEPAGELENGTH                \HFLOPPY.IWRITEDATE \HFLOPPY.RECOG \HFLOPPY.FILENAME \HFLOPPY.SLOWFLG                \FLOPPY.SCAVENGE.IDATE)        (DECLARE%: DONTEVAL@LOAD DOCOPY (P (FLOPPY.RESTART])(* ;; "FLOPPY disk driver")(* ;; "FACE")(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE (RPAQQ C.NOP 0)(RPAQQ C.READSECTOR 1)(RPAQQ C.WRITESECTOR 2)(RPAQQ C.WRITEDELETEDSECTOR 3)(RPAQQ C.READID 4)(RPAQQ C.FORMATTRACK 5)(RPAQQ C.RECALIBRATE 6)(RPAQQ C.INITIALIZE 7)(RPAQQ C.ESCAPE 8)(RPAQQ SC.NOP 0)(RPAQQ SC.DISKCHANGECLEAR 1)(RPAQQ S.DOOROPENED 32768)(RPAQQ S.TWOSIDED 8192)(RPAQQ S.DISKID 4096)(RPAQQ S.ERROR 2048)(RPAQQ S.RECALIBRATEERROR 512)(RPAQQ S.DATALOST 256)(RPAQQ S.NOTREADY 128)(RPAQQ S.WRITEPROTECT 64)(RPAQQ S.DELETEDDATA 32)(RPAQQ S.RECORDNOTFOUND 16)(RPAQQ S.CRCERROR 8)(RPAQQ S.TRACK0 4)(RPAQQ S.INDEX 2)(RPAQQ S.BUSY 1)(RPAQQ R.OK 0)(RPAQ R.BUSY S.BUSY)(RPAQ R.CRCERROR (LOGOR S.ERROR S.CRCERROR))(RPAQ R.DATALOST (LOGOR S.ERROR S.DATALOST))(RPAQ R.DOOROPENED (LOGOR S.ERROR S.DOOROPENED))(RPAQ R.DOORISOPEN (LOGOR S.ERROR S.DOOROPENED S.NOTREADY))(RPAQ R.DOORISOPEN2 (LOGOR S.DOOROPENED S.NOTREADY))(RPAQ R.NOTREADY (LOGOR S.ERROR S.NOTREADY))(RPAQ R.RECALIBRATEERROR (LOGOR S.ERROR S.RECALIBRATEERROR))(RPAQ R.RECORDNOTFOUND (LOGOR S.ERROR S.RECORDNOTFOUND))(RPAQ R.WRITEPROTECT (LOGOR S.ERROR S.WRITEPROTECT))(RPAQ R.READERRORMASK (LOGOR S.DOOROPENED S.ERROR S.RECALIBRATEERROR S.DATALOST S.NOTREADY                                  S.RECORDNOTFOUND S.CRCERROR))(RPAQ R.WRITEERRORMASK (LOGOR R.READERRORMASK S.WRITEPROTECT))(RPAQ R.INFOMASK (LOGOR S.TWOSIDED S.WRITEPROTECT S.TRACK0))(RPAQQ FLOPPYIOCB.SIZE 16)(RPAQQ B128 0)(RPAQQ B256 1)(RPAQQ B512 2)(RPAQQ B1024 3)(RPAQQ IBM 0)(RPAQQ TROY 1)(RPAQQ SINGLE 0)(RPAQQ DOUBLE 8)(RPAQQ NoBits 0)(RPAQQ IDLENGTH 3)(RPAQQ SEAL.PSECTOR9 49932)(RPAQQ VERSION.PSECTOR9 1)(RPAQQ LABELMAXLENGTH.PSECTOR9 40)(RPAQQ SEAL.PMPAGE 13003)(RPAQQ VERSION.PMPAGE 1)(RPAQQ SEAL.PFILELIST 45771)(RPAQQ VERSION.PFILELIST 1)(RPAQQ PMPAGEETYPE.FREE 0)(RPAQQ PMPAGEETYPE.FILE 1)(RPAQQ PMPAGEETYPE.PFILELIST 2)(RPAQQ PMPAGEETYPE.BADSECTORS 3)(RPAQQ SEAL.PLPAGE 43690)(RPAQQ VERSION.PLPAGE 1)(RPAQQ VERSION.DATA 2222)(RPAQQ NAMEMAXLENGTH.PLPAGE 100)(RPAQQ FILETYPE.FREE 0)(RPAQQ FILETYPE.FILE 2052)(RPAQQ FILETYPE.PFILELIST 2054)(CONSTANTS (C.NOP 0)       (C.READSECTOR 1)       (C.WRITESECTOR 2)       (C.WRITEDELETEDSECTOR 3)       (C.READID 4)       (C.FORMATTRACK 5)       (C.RECALIBRATE 6)       (C.INITIALIZE 7)       (C.ESCAPE 8)       (SC.NOP 0)       (SC.DISKCHANGECLEAR 1)       (S.DOOROPENED 32768)       (S.TWOSIDED 8192)       (S.DISKID 4096)       (S.ERROR 2048)       (S.RECALIBRATEERROR 512)       (S.DATALOST 256)       (S.NOTREADY 128)       (S.WRITEPROTECT 64)       (S.DELETEDDATA 32)       (S.RECORDNOTFOUND 16)       (S.CRCERROR 8)       (S.TRACK0 4)       (S.INDEX 2)       (S.BUSY 1)       (R.OK 0)       (R.BUSY S.BUSY)       (R.CRCERROR (LOGOR S.ERROR S.CRCERROR))       (R.DATALOST (LOGOR S.ERROR S.DATALOST))       (R.DOOROPENED (LOGOR S.ERROR S.DOOROPENED))       (R.DOORISOPEN (LOGOR S.ERROR S.DOOROPENED S.NOTREADY))       (R.DOORISOPEN2 (LOGOR S.DOOROPENED S.NOTREADY))       (R.NOTREADY (LOGOR S.ERROR S.NOTREADY))       (R.RECALIBRATEERROR (LOGOR S.ERROR S.RECALIBRATEERROR))       (R.RECORDNOTFOUND (LOGOR S.ERROR S.RECORDNOTFOUND))       (R.WRITEPROTECT (LOGOR S.ERROR S.WRITEPROTECT))       (R.READERRORMASK (LOGOR S.DOOROPENED S.ERROR S.RECALIBRATEERROR S.DATALOST S.NOTREADY                                S.RECORDNOTFOUND S.CRCERROR))       (R.WRITEERRORMASK (LOGOR R.READERRORMASK S.WRITEPROTECT))       (R.INFOMASK (LOGOR S.TWOSIDED S.WRITEPROTECT S.TRACK0))       (FLOPPYIOCB.SIZE 16)       (B128 0)       (B256 1)       (B512 2)       (B1024 3)       (IBM 0)       (TROY 1)       (SINGLE 0)       (DOUBLE 8)       (NoBits 0)       (IDLENGTH 3)       (SEAL.PSECTOR9 49932)       (VERSION.PSECTOR9 1)       (LABELMAXLENGTH.PSECTOR9 40)       (SEAL.PMPAGE 13003)       (VERSION.PMPAGE 1)       (SEAL.PFILELIST 45771)       (VERSION.PFILELIST 1)       (PMPAGEETYPE.FREE 0)       (PMPAGEETYPE.FILE 1)       (PMPAGEETYPE.PFILELIST 2)       (PMPAGEETYPE.BADSECTORS 3)       (SEAL.PLPAGE 43690)       (VERSION.PLPAGE 1)       (VERSION.DATA 2222)       (NAMEMAXLENGTH.PLPAGE 100)       (FILETYPE.FREE 0)       (FILETYPE.FILE 2052)       (FILETYPE.PFILELIST 2054))))(/DECLAREDATATYPE 'FLOPPYIOCB '(WORD WORD WORD WORD (BITS 12)                                     (BITS 4)                                     FIXP WORD WORD FLAG (BITS 15)                                     WORD                                     (BITS 8)                                     (BITS 8)                                     (BITS 8)                                     (BITS 8)                                     WORD WORD WORD)       '((FLOPPYIOCB 0 (BITS . 15))         (FLOPPYIOCB 1 (BITS . 15))         (FLOPPYIOCB 2 (BITS . 15))         (FLOPPYIOCB 3 (BITS . 15))         (FLOPPYIOCB 4 (BITS . 11))         (FLOPPYIOCB 4 (BITS . 195))         (FLOPPYIOCB 5 FIXP)         (FLOPPYIOCB 7 (BITS . 15))         (FLOPPYIOCB 8 (BITS . 15))         (FLOPPYIOCB 9 (FLAGBITS . 0))         (FLOPPYIOCB 9 (BITS . 30))         (FLOPPYIOCB 10 (BITS . 15))         (FLOPPYIOCB 11 (BITS . 7))         (FLOPPYIOCB 11 (BITS . 135))         (FLOPPYIOCB 12 (BITS . 7))         (FLOPPYIOCB 12 (BITS . 135))         (FLOPPYIOCB 13 (BITS . 15))         (FLOPPYIOCB 14 (BITS . 15))         (FLOPPYIOCB 15 (BITS . 15)))       '16)(/DECLAREDATATYPE 'PSECTOR9       '(WORD WORD WORD WORD WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD WORD WORD WORD WORD WORD               WORD SWAPPEDFIXP FLAG (BITS 15)              WORD BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE               BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE               BYTE BYTE BYTE BYTE BYTE BYTE BYTE WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD)       '((PSECTOR9 0 (BITS . 15))         (PSECTOR9 1 (BITS . 15))         (PSECTOR9 2 (BITS . 15))         (PSECTOR9 3 (BITS . 15))         (PSECTOR9 4 (BITS . 15))         (PSECTOR9 5 (BITS . 15))         (PSECTOR9 6 SWAPPEDFIXP)         (PSECTOR9 8 (BITS . 15))         (PSECTOR9 9 SWAPPEDFIXP)         (PSECTOR9 11 (BITS . 15))         (PSECTOR9 12 (BITS . 15))         (PSECTOR9 13 (BITS . 15))         (PSECTOR9 14 (BITS . 15))         (PSECTOR9 15 (BITS . 15))         (PSECTOR9 16 (BITS . 15))         (PSECTOR9 17 (BITS . 15))         (PSECTOR9 18 SWAPPEDFIXP)         (PSECTOR9 20 (FLAGBITS . 0))         (PSECTOR9 20 (BITS . 30))         (PSECTOR9 21 (BITS . 15))         (PSECTOR9 22 (BITS . 7))         (PSECTOR9 22 (BITS . 135))         (PSECTOR9 23 (BITS . 7))         (PSECTOR9 23 (BITS . 135))         (PSECTOR9 24 (BITS . 7))         (PSECTOR9 24 (BITS . 135))         (PSECTOR9 25 (BITS . 7))         (PSECTOR9 25 (BITS . 135))         (PSECTOR9 26 (BITS . 7))         (PSECTOR9 26 (BITS . 135))         (PSECTOR9 27 (BITS . 7))         (PSECTOR9 27 (BITS . 135))         (PSECTOR9 28 (BITS . 7))         (PSECTOR9 28 (BITS . 135))         (PSECTOR9 29 (BITS . 7))         (PSECTOR9 29 (BITS . 135))         (PSECTOR9 30 (BITS . 7))         (PSECTOR9 30 (BITS . 135))         (PSECTOR9 31 (BITS . 7))         (PSECTOR9 31 (BITS . 135))         (PSECTOR9 32 (BITS . 7))         (PSECTOR9 32 (BITS . 135))         (PSECTOR9 33 (BITS . 7))         (PSECTOR9 33 (BITS . 135))         (PSECTOR9 34 (BITS . 7))         (PSECTOR9 34 (BITS . 135))         (PSECTOR9 35 (BITS . 7))         (PSECTOR9 35 (BITS . 135))         (PSECTOR9 36 (BITS . 7))         (PSECTOR9 36 (BITS . 135))         (PSECTOR9 37 (BITS . 7))         (PSECTOR9 37 (BITS . 135))         (PSECTOR9 38 (BITS . 7))         (PSECTOR9 38 (BITS . 135))         (PSECTOR9 39 (BITS . 7))         (PSECTOR9 39 (BITS . 135))         (PSECTOR9 40 (BITS . 7))         (PSECTOR9 40 (BITS . 135))         (PSECTOR9 41 (BITS . 7))         (PSECTOR9 41 (BITS . 135))         (PSECTOR9 42 (BITS . 15))         (PSECTOR9 43 (BITS . 15))         (PSECTOR9 44 (BITS . 15))         (PSECTOR9 45 (BITS . 15))         (PSECTOR9 46 (BITS . 15))         (PSECTOR9 47 (BITS . 15))         (PSECTOR9 48 (BITS . 15))         (PSECTOR9 49 (BITS . 15))         (PSECTOR9 50 (BITS . 15))         (PSECTOR9 51 (BITS . 15))         (PSECTOR9 52 (BITS . 15))         (PSECTOR9 53 (BITS . 15))         (PSECTOR9 54 (BITS . 15))         (PSECTOR9 55 (BITS . 15))         (PSECTOR9 56 (BITS . 15))         (PSECTOR9 57 (BITS . 15))         (PSECTOR9 58 (BITS . 15))         (PSECTOR9 59 (BITS . 15))         (PSECTOR9 60 (BITS . 15))         (PSECTOR9 61 (BITS . 15))         (PSECTOR9 62 (BITS . 15))         (PSECTOR9 63 (BITS . 15)))       '64)(/DECLAREDATATYPE 'PMPAGE       '(WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD)       '((PMPAGE 0 (BITS . 15))         (PMPAGE 1 (BITS . 15))         (PMPAGE 2 SWAPPEDFIXP)         (PMPAGE 4 (BITS . 15))         (PMPAGE 5 SWAPPEDFIXP)         (PMPAGE 7 (BITS . 15))         (PMPAGE 8 (BITS . 15))         (PMPAGE 9 (BITS . 15))         (PMPAGE 10 (BITS . 15))         (PMPAGE 11 (BITS . 15))         (PMPAGE 12 (BITS . 15))         (PMPAGE 13 (BITS . 15))         (PMPAGE 14 (BITS . 15))         (PMPAGE 15 (BITS . 15))         (PMPAGE 16 (BITS . 15))         (PMPAGE 17 (BITS . 15))         (PMPAGE 18 (BITS . 15))         (PMPAGE 19 (BITS . 15))         (PMPAGE 20 (BITS . 15))         (PMPAGE 21 (BITS . 15))         (PMPAGE 22 (BITS . 15))         (PMPAGE 23 (BITS . 15))         (PMPAGE 24 (BITS . 15))         (PMPAGE 25 (BITS . 15))         (PMPAGE 26 (BITS . 15))         (PMPAGE 27 (BITS . 15))         (PMPAGE 28 (BITS . 15))         (PMPAGE 29 (BITS . 15))         (PMPAGE 30 (BITS . 15))         (PMPAGE 31 (BITS . 15))         (PMPAGE 32 (BITS . 15))         (PMPAGE 33 (BITS . 15))         (PMPAGE 34 (BITS . 15))         (PMPAGE 35 (BITS . 15))         (PMPAGE 36 (BITS . 15))         (PMPAGE 37 (BITS . 15))         (PMPAGE 38 (BITS . 15))         (PMPAGE 39 (BITS . 15))         (PMPAGE 40 (BITS . 15))         (PMPAGE 41 (BITS . 15))         (PMPAGE 42 (BITS . 15))         (PMPAGE 43 (BITS . 15))         (PMPAGE 44 (BITS . 15))         (PMPAGE 45 (BITS . 15))         (PMPAGE 46 (BITS . 15))         (PMPAGE 47 (BITS . 15))         (PMPAGE 48 (BITS . 15))         (PMPAGE 49 (BITS . 15))         (PMPAGE 50 (BITS . 15))         (PMPAGE 51 (BITS . 15))         (PMPAGE 52 (BITS . 15))         (PMPAGE 53 (BITS . 15))         (PMPAGE 54 (BITS . 15))         (PMPAGE 55 (BITS . 15))         (PMPAGE 56 (BITS . 15))         (PMPAGE 57 (BITS . 15))         (PMPAGE 58 (BITS . 15))         (PMPAGE 59 (BITS . 15))         (PMPAGE 60 (BITS . 15))         (PMPAGE 61 (BITS . 15))         (PMPAGE 62 (BITS . 15))         (PMPAGE 63 (BITS . 15))         (PMPAGE 64 (BITS . 15))         (PMPAGE 65 (BITS . 15))         (PMPAGE 66 (BITS . 15))         (PMPAGE 67 (BITS . 15))         (PMPAGE 68 (BITS . 15))         (PMPAGE 69 (BITS . 15))         (PMPAGE 70 (BITS . 15))         (PMPAGE 71 (BITS . 15))         (PMPAGE 72 (BITS . 15))         (PMPAGE 73 (BITS . 15))         (PMPAGE 74 (BITS . 15))         (PMPAGE 75 (BITS . 15))         (PMPAGE 76 (BITS . 15))         (PMPAGE 77 (BITS . 15))         (PMPAGE 78 (BITS . 15))         (PMPAGE 79 (BITS . 15))         (PMPAGE 80 (BITS . 15))         (PMPAGE 81 (BITS . 15))         (PMPAGE 82 (BITS . 15))         (PMPAGE 83 (BITS . 15))         (PMPAGE 84 (BITS . 15))         (PMPAGE 85 (BITS . 15))         (PMPAGE 86 (BITS . 15))         (PMPAGE 87 (BITS . 15))         (PMPAGE 88 (BITS . 15))         (PMPAGE 89 (BITS . 15))         (PMPAGE 90 (BITS . 15))         (PMPAGE 91 (BITS . 15))         (PMPAGE 92 (BITS . 15))         (PMPAGE 93 (BITS . 15))         (PMPAGE 94 (BITS . 15))         (PMPAGE 95 (BITS . 15))         (PMPAGE 96 (BITS . 15))         (PMPAGE 97 (BITS . 15))         (PMPAGE 98 (BITS . 15))         (PMPAGE 99 (BITS . 15))         (PMPAGE 100 (BITS . 15))         (PMPAGE 101 (BITS . 15))         (PMPAGE 102 (BITS . 15))         (PMPAGE 103 (BITS . 15))         (PMPAGE 104 (BITS . 15))         (PMPAGE 105 (BITS . 15))         (PMPAGE 106 (BITS . 15))         (PMPAGE 107 (BITS . 15))         (PMPAGE 108 (BITS . 15))         (PMPAGE 109 (BITS . 15))         (PMPAGE 110 (BITS . 15))         (PMPAGE 111 (BITS . 15))         (PMPAGE 112 (BITS . 15))         (PMPAGE 113 (BITS . 15))         (PMPAGE 114 (BITS . 15))         (PMPAGE 115 (BITS . 15))         (PMPAGE 116 (BITS . 15))         (PMPAGE 117 (BITS . 15))         (PMPAGE 118 (BITS . 15))         (PMPAGE 119 (BITS . 15))         (PMPAGE 120 (BITS . 15))         (PMPAGE 121 (BITS . 15))         (PMPAGE 122 (BITS . 15))         (PMPAGE 123 (BITS . 15))         (PMPAGE 124 (BITS . 15))         (PMPAGE 125 (BITS . 15))         (PMPAGE 126 (BITS . 15))         (PMPAGE 127 (BITS . 15))         (PMPAGE 128 (BITS . 15))         (PMPAGE 129 SWAPPEDFIXP)         (PMPAGE 131 (BITS . 15))         (PMPAGE 132 SWAPPEDFIXP)         (PMPAGE 134 (BITS . 15))         (PMPAGE 135 (BITS . 15))         (PMPAGE 136 (BITS . 15))         (PMPAGE 137 (BITS . 15))         (PMPAGE 138 (BITS . 15))         (PMPAGE 139 (BITS . 15))         (PMPAGE 140 (BITS . 15))         (PMPAGE 141 (BITS . 15))         (PMPAGE 142 (BITS . 15))         (PMPAGE 143 (BITS . 15))         (PMPAGE 144 (BITS . 15))         (PMPAGE 145 (BITS . 15))         (PMPAGE 146 (BITS . 15))         (PMPAGE 147 (BITS . 15))         (PMPAGE 148 (BITS . 15))         (PMPAGE 149 (BITS . 15))         (PMPAGE 150 (BITS . 15))         (PMPAGE 151 (BITS . 15))         (PMPAGE 152 (BITS . 15))         (PMPAGE 153 (BITS . 15))         (PMPAGE 154 (BITS . 15))         (PMPAGE 155 (BITS . 15))         (PMPAGE 156 (BITS . 15))         (PMPAGE 157 (BITS . 15))         (PMPAGE 158 (BITS . 15))         (PMPAGE 159 (BITS . 15))         (PMPAGE 160 (BITS . 15))         (PMPAGE 161 (BITS . 15))         (PMPAGE 162 (BITS . 15))         (PMPAGE 163 (BITS . 15))         (PMPAGE 164 (BITS . 15))         (PMPAGE 165 (BITS . 15))         (PMPAGE 166 (BITS . 15))         (PMPAGE 167 (BITS . 15))         (PMPAGE 168 (BITS . 15))         (PMPAGE 169 (BITS . 15))         (PMPAGE 170 (BITS . 15))         (PMPAGE 171 (BITS . 15))         (PMPAGE 172 (BITS . 15))         (PMPAGE 173 (BITS . 15))         (PMPAGE 174 (BITS . 15))         (PMPAGE 175 (BITS . 15))         (PMPAGE 176 (BITS . 15))         (PMPAGE 177 (BITS . 15))         (PMPAGE 178 (BITS . 15))         (PMPAGE 179 (BITS . 15))         (PMPAGE 180 (BITS . 15))         (PMPAGE 181 (BITS . 15))         (PMPAGE 182 (BITS . 15))         (PMPAGE 183 (BITS . 15))         (PMPAGE 184 (BITS . 15))         (PMPAGE 185 (BITS . 15))         (PMPAGE 186 (BITS . 15))         (PMPAGE 187 (BITS . 15))         (PMPAGE 188 (BITS . 15))         (PMPAGE 189 (BITS . 15))         (PMPAGE 190 (BITS . 15))         (PMPAGE 191 (BITS . 15))         (PMPAGE 192 (BITS . 15))         (PMPAGE 193 (BITS . 15))         (PMPAGE 194 (BITS . 15))         (PMPAGE 195 (BITS . 15))         (PMPAGE 196 (BITS . 15))         (PMPAGE 197 (BITS . 15))         (PMPAGE 198 (BITS . 15))         (PMPAGE 199 (BITS . 15))         (PMPAGE 200 (BITS . 15))         (PMPAGE 201 (BITS . 15))         (PMPAGE 202 (BITS . 15))         (PMPAGE 203 (BITS . 15))         (PMPAGE 204 (BITS . 15))         (PMPAGE 205 (BITS . 15))         (PMPAGE 206 (BITS . 15))         (PMPAGE 207 (BITS . 15))         (PMPAGE 208 (BITS . 15))         (PMPAGE 209 (BITS . 15))         (PMPAGE 210 (BITS . 15))         (PMPAGE 211 (BITS . 15))         (PMPAGE 212 (BITS . 15))         (PMPAGE 213 (BITS . 15))         (PMPAGE 214 (BITS . 15))         (PMPAGE 215 (BITS . 15))         (PMPAGE 216 (BITS . 15))         (PMPAGE 217 (BITS . 15))         (PMPAGE 218 (BITS . 15))         (PMPAGE 219 (BITS . 15))         (PMPAGE 220 (BITS . 15))         (PMPAGE 221 (BITS . 15))         (PMPAGE 222 (BITS . 15))         (PMPAGE 223 (BITS . 15))         (PMPAGE 224 (BITS . 15))         (PMPAGE 225 (BITS . 15))         (PMPAGE 226 (BITS . 15))         (PMPAGE 227 (BITS . 15))         (PMPAGE 228 (BITS . 15))         (PMPAGE 229 (BITS . 15))         (PMPAGE 230 (BITS . 15))         (PMPAGE 231 (BITS . 15))         (PMPAGE 232 (BITS . 15))         (PMPAGE 233 (BITS . 15))         (PMPAGE 234 (BITS . 15))         (PMPAGE 235 (BITS . 15))         (PMPAGE 236 (BITS . 15))         (PMPAGE 237 (BITS . 15))         (PMPAGE 238 (BITS . 15))         (PMPAGE 239 (BITS . 15))         (PMPAGE 240 (BITS . 15))         (PMPAGE 241 (BITS . 15))         (PMPAGE 242 (BITS . 15))         (PMPAGE 243 (BITS . 15))         (PMPAGE 244 (BITS . 15))         (PMPAGE 245 (BITS . 15))         (PMPAGE 246 (BITS . 15))         (PMPAGE 247 (BITS . 15))         (PMPAGE 248 (BITS . 15))         (PMPAGE 249 (BITS . 15))         (PMPAGE 250 (BITS . 15))         (PMPAGE 251 (BITS . 15))         (PMPAGE 252 (BITS . 15))         (PMPAGE 253 (BITS . 15))         (PMPAGE 254 (BITS . 15))         (PMPAGE 255 (BITS . 15)))       '256)(/DECLAREDATATYPE 'PLPAGE       '(WORD WORD WORD SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP WORD              WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD)       '((PLPAGE 0 (BITS . 15))         (PLPAGE 1 (BITS . 15))         (PLPAGE 2 (BITS . 15))         (PLPAGE 3 SWAPPEDFIXP)         (PLPAGE 5 SWAPPEDFIXP)         (PLPAGE 7 SWAPPEDFIXP)         (PLPAGE 9 SWAPPEDFIXP)         (PLPAGE 11 SWAPPEDFIXP)         (PLPAGE 13 SWAPPEDFIXP)         (PLPAGE 15 (BITS . 15))         (PLPAGE 16 (BITS . 15))         (PLPAGE 17 (BITS . 15))         (PLPAGE 18 (BITS . 15))         (PLPAGE 19 (BITS . 15))         (PLPAGE 20 (BITS . 15))         (PLPAGE 21 (BITS . 15))         (PLPAGE 22 (BITS . 15))         (PLPAGE 23 (BITS . 15))         (PLPAGE 24 (BITS . 15))         (PLPAGE 25 (BITS . 15))         (PLPAGE 26 (BITS . 15))         (PLPAGE 27 (BITS . 15))         (PLPAGE 28 (BITS . 15))         (PLPAGE 29 (BITS . 15))         (PLPAGE 30 (BITS . 15))         (PLPAGE 31 (BITS . 15))         (PLPAGE 32 (BITS . 15))         (PLPAGE 33 (BITS . 15))         (PLPAGE 34 (BITS . 15))         (PLPAGE 35 (BITS . 15))         (PLPAGE 36 (BITS . 15))         (PLPAGE 37 (BITS . 15))         (PLPAGE 38 (BITS . 15))         (PLPAGE 39 (BITS . 15))         (PLPAGE 40 (BITS . 15))         (PLPAGE 41 (BITS . 15))         (PLPAGE 42 (BITS . 15))         (PLPAGE 43 (BITS . 15))         (PLPAGE 44 (BITS . 15))         (PLPAGE 45 (BITS . 15))         (PLPAGE 46 (BITS . 15))         (PLPAGE 47 (BITS . 15))         (PLPAGE 48 (BITS . 15))         (PLPAGE 49 (BITS . 15))         (PLPAGE 50 (BITS . 15))         (PLPAGE 51 (BITS . 15))         (PLPAGE 52 (BITS . 15))         (PLPAGE 53 (BITS . 15))         (PLPAGE 54 (BITS . 15))         (PLPAGE 55 (BITS . 15))         (PLPAGE 56 (BITS . 15))         (PLPAGE 57 (BITS . 15))         (PLPAGE 58 (BITS . 15))         (PLPAGE 59 (BITS . 15))         (PLPAGE 60 (BITS . 15))         (PLPAGE 61 (BITS . 15))         (PLPAGE 62 (BITS . 15))         (PLPAGE 63 (BITS . 15))         (PLPAGE 64 (BITS . 15))         (PLPAGE 65 (BITS . 15))         (PLPAGE 66 (BITS . 15))         (PLPAGE 67 (BITS . 15))         (PLPAGE 68 (BITS . 15))         (PLPAGE 69 (BITS . 15))         (PLPAGE 70 (BITS . 15))         (PLPAGE 71 (BITS . 15))         (PLPAGE 72 (BITS . 15))         (PLPAGE 73 (BITS . 15))         (PLPAGE 74 (BITS . 15))         (PLPAGE 75 (BITS . 15))         (PLPAGE 76 (BITS . 15))         (PLPAGE 77 (BITS . 15))         (PLPAGE 78 (BITS . 15))         (PLPAGE 79 (BITS . 15))         (PLPAGE 80 (BITS . 15))         (PLPAGE 81 (BITS . 15))         (PLPAGE 82 (BITS . 15))         (PLPAGE 83 (BITS . 15))         (PLPAGE 84 (BITS . 15))         (PLPAGE 85 (BITS . 15))         (PLPAGE 86 (BITS . 15))         (PLPAGE 87 (BITS . 15))         (PLPAGE 88 (BITS . 15))         (PLPAGE 89 (BITS . 15))         (PLPAGE 90 (BITS . 15))         (PLPAGE 91 (BITS . 15))         (PLPAGE 92 (BITS . 15))         (PLPAGE 93 (BITS . 15))         (PLPAGE 94 (BITS . 15))         (PLPAGE 95 (BITS . 15))         (PLPAGE 96 (BITS . 15))         (PLPAGE 97 (BITS . 15))         (PLPAGE 98 (BITS . 15))         (PLPAGE 99 (BITS . 15))         (PLPAGE 100 (BITS . 15))         (PLPAGE 101 (BITS . 15))         (PLPAGE 102 (BITS . 15))         (PLPAGE 103 (BITS . 15))         (PLPAGE 104 (BITS . 15))         (PLPAGE 105 (BITS . 15))         (PLPAGE 106 (BITS . 15))         (PLPAGE 107 (BITS . 15))         (PLPAGE 108 (BITS . 15))         (PLPAGE 109 (BITS . 15))         (PLPAGE 110 (BITS . 15))         (PLPAGE 111 (BITS . 15))         (PLPAGE 112 (BITS . 15))         (PLPAGE 113 (BITS . 15))         (PLPAGE 114 (BITS . 15))         (PLPAGE 115 (BITS . 15))         (PLPAGE 116 (BITS . 15))         (PLPAGE 117 (BITS . 15))         (PLPAGE 118 (BITS . 15))         (PLPAGE 119 (BITS . 15))         (PLPAGE 120 (BITS . 15))         (PLPAGE 121 (BITS . 15))         (PLPAGE 122 (BITS . 15))         (PLPAGE 123 (BITS . 15))         (PLPAGE 124 (BITS . 15))         (PLPAGE 125 (BITS . 15))         (PLPAGE 126 (BITS . 15))         (PLPAGE 127 (BITS . 15))         (PLPAGE 128 (BITS . 15))         (PLPAGE 129 (BITS . 15))         (PLPAGE 130 (BITS . 15))         (PLPAGE 131 (BITS . 15))         (PLPAGE 132 (BITS . 15))         (PLPAGE 133 (BITS . 15))         (PLPAGE 134 (BITS . 15))         (PLPAGE 135 (BITS . 15))         (PLPAGE 136 (BITS . 15))         (PLPAGE 137 (BITS . 15))         (PLPAGE 138 (BITS . 15))         (PLPAGE 139 (BITS . 15))         (PLPAGE 140 (BITS . 15))         (PLPAGE 141 (BITS . 15))         (PLPAGE 142 (BITS . 15))         (PLPAGE 143 (BITS . 15))         (PLPAGE 144 (BITS . 15))         (PLPAGE 145 (BITS . 15))         (PLPAGE 146 (BITS . 15))         (PLPAGE 147 (BITS . 15))         (PLPAGE 148 (BITS . 15))         (PLPAGE 149 (BITS . 15))         (PLPAGE 150 (BITS . 15))         (PLPAGE 151 (BITS . 15))         (PLPAGE 152 (BITS . 15))         (PLPAGE 153 (BITS . 15))         (PLPAGE 154 (BITS . 15))         (PLPAGE 155 (BITS . 15))         (PLPAGE 156 (BITS . 15))         (PLPAGE 157 (BITS . 15))         (PLPAGE 158 (BITS . 15))         (PLPAGE 159 (BITS . 15))         (PLPAGE 160 (BITS . 15))         (PLPAGE 161 (BITS . 15))         (PLPAGE 162 (BITS . 15))         (PLPAGE 163 (BITS . 15))         (PLPAGE 164 (BITS . 15))         (PLPAGE 165 (BITS . 15))         (PLPAGE 166 (BITS . 15))         (PLPAGE 167 (BITS . 15))         (PLPAGE 168 (BITS . 15))         (PLPAGE 169 (BITS . 15))         (PLPAGE 170 (BITS . 15))         (PLPAGE 171 (BITS . 15))         (PLPAGE 172 (BITS . 15))         (PLPAGE 173 (BITS . 15))         (PLPAGE 174 (BITS . 15))         (PLPAGE 175 (BITS . 15))         (PLPAGE 176 (BITS . 15))         (PLPAGE 177 (BITS . 15))         (PLPAGE 178 (BITS . 15))         (PLPAGE 179 (BITS . 15))         (PLPAGE 180 (BITS . 15))         (PLPAGE 181 (BITS . 15))         (PLPAGE 182 (BITS . 15))         (PLPAGE 183 (BITS . 15))         (PLPAGE 184 (BITS . 15))         (PLPAGE 185 (BITS . 15))         (PLPAGE 186 (BITS . 15))         (PLPAGE 187 (BITS . 15))         (PLPAGE 188 (BITS . 15))         (PLPAGE 189 (BITS . 15))         (PLPAGE 190 (BITS . 15))         (PLPAGE 191 (BITS . 15))         (PLPAGE 192 (BITS . 15))         (PLPAGE 193 (BITS . 15))         (PLPAGE 194 (BITS . 15))         (PLPAGE 195 (BITS . 15))         (PLPAGE 196 (BITS . 15))         (PLPAGE 197 (BITS . 15))         (PLPAGE 198 (BITS . 15))         (PLPAGE 199 (BITS . 15))         (PLPAGE 200 (BITS . 15))         (PLPAGE 201 (BITS . 15))         (PLPAGE 202 (BITS . 15))         (PLPAGE 203 (BITS . 15))         (PLPAGE 204 (BITS . 15))         (PLPAGE 205 (BITS . 15))         (PLPAGE 206 (BITS . 15))         (PLPAGE 207 (BITS . 15))         (PLPAGE 208 (BITS . 15))         (PLPAGE 209 (BITS . 15))         (PLPAGE 210 (BITS . 15))         (PLPAGE 211 (BITS . 15))         (PLPAGE 212 (BITS . 15))         (PLPAGE 213 (BITS . 15))         (PLPAGE 214 (BITS . 15))         (PLPAGE 215 (BITS . 15))         (PLPAGE 216 (BITS . 15))         (PLPAGE 217 (BITS . 15))         (PLPAGE 218 (BITS . 15))         (PLPAGE 219 (BITS . 15))         (PLPAGE 220 (BITS . 15))         (PLPAGE 221 (BITS . 15))         (PLPAGE 222 (BITS . 15))         (PLPAGE 223 (BITS . 15))         (PLPAGE 224 (BITS . 15))         (PLPAGE 225 (BITS . 15))         (PLPAGE 226 (BITS . 15))         (PLPAGE 227 (BITS . 15))         (PLPAGE 228 (BITS . 15))         (PLPAGE 229 (BITS . 15))         (PLPAGE 230 (BITS . 15))         (PLPAGE 231 (BITS . 15))         (PLPAGE 232 (BITS . 15))         (PLPAGE 233 (BITS . 15))         (PLPAGE 234 (BITS . 15))         (PLPAGE 235 (BITS . 15))         (PLPAGE 236 (BITS . 15))         (PLPAGE 237 (BITS . 15))         (PLPAGE 238 (BITS . 15))         (PLPAGE 239 (BITS . 15))         (PLPAGE 240 (BITS . 15))         (PLPAGE 241 (BITS . 15))         (PLPAGE 242 (BITS . 15))         (PLPAGE 243 (BITS . 15))         (PLPAGE 244 (BITS . 15))         (PLPAGE 245 (BITS . 15))         (PLPAGE 246 (BITS . 15))         (PLPAGE 247 (BITS . 15))         (PLPAGE 248 (BITS . 15))         (PLPAGE 249 (BITS . 15))         (PLPAGE 250 (BITS . 15))         (PLPAGE 251 (BITS . 15))         (PLPAGE 252 (BITS . 15))         (PLPAGE 253 (BITS . 15))         (PLPAGE 254 (BITS . 15)))       '256)(/DECLAREDATATYPE 'PFLE '(SWAPPEDFIXP WORD WORD WORD)       '((PFLE 0 SWAPPEDFIXP)         (PFLE 2 (BITS . 15))         (PFLE 3 (BITS . 15))         (PFLE 4 (BITS . 15)))       '6)(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(ACCESSFNS DISKADDRESS ((CYLINDER (LRSH DATUM 16))                            (HEAD (LRSH (LOGAND DATUM 65535)                                        8))                            (SECTOR (LOGAND DATUM 255)))                           (CREATE (IPLUS (LLSH CYLINDER 16)                                              (LLSH HEAD 8)                                              SECTOR)))(DATATYPE FLOPPYIOCB           ((\BUFFERLOLOC WORD)           (\BUFFERHILOC WORD)           (NIL WORD)           (SECTORLENGTHDIV2 WORD)           (TROYORIBM BITS 12)           (DENSITY BITS 4)           (DISKADDRESS FIXP)           (SECTORCOUNT WORD)           (FLOPPYRESULT WORD)           (SAMEPAGE FLAG)           (COMMAND BITS 15)           (SUBCOMMAND WORD)           (SECTORLENGTHDIV4 BITS 8)           (ENCODEDSECTORLENGTH BITS 8)           (SECTORSPERTRACK BITS 8)           (GAP3 BITS 8)           (NIL 3 WORD))          (CREATE (PROGN (\FLOPPY.SETUP.IOCB DATUM IBMD512)                             (replace (FLOPPYIOCB DISKADDRESS) of DATUM                                with (CREATE DISKADDRESS                                                CYLINDER _ 0                                                HEAD _ 0                                                SECTOR _ 1))                             DATUM))          [ACCESSFNS (($COMMAND (SELECT (fetch (FLOPPYIOCB COMMAND) of DATUM)                                       (C.NOP 'NOP)                                       (C.READSECTOR 'READSECTOR)                                       (C.WRITESECTOR 'WRITESECTOR)                                       (C.WRITEDELETEDSECTOR 'WRITEDELETEDSECTOR)                                       (C.READID 'READID)                                       (C.FORMATTRACK 'FORMATTRACK)                                       (C.RECALIBRATE 'RECALIBRATE)                                       (C.INITIALIZE 'INITIALIZE)                                       (C.ESCAPE 'ESCAPE)                                       '?))                      ($SUBCOMMAND (SELECT (fetch (FLOPPYIOCB SUBCOMMAND) of DATUM)                                          (SC.NOP 'NOP)                                          (SC.DISKCHANGECLEAR 'DISKCHANGECLEAR)                                          '?))                      ($FLOPPYRESULT (\FLOPPY.TRANSLATEFLOPPYRESULT (fetch (FLOPPYIOCB                                                                                       FLOPPYRESULT)                                                                       of DATUM)))                      ($TROYORIBM (SELECT (fetch (FLOPPYIOCB TROYORIBM) of DATUM)                                         (IBM 'IBM)                                         (TROY 'TROY)                                         '?))                      ($DENSITY (SELECT (fetch (FLOPPYIOCB DENSITY) of DATUM)                                       (SINGLE 'SINGLE)                                       (DOUBLE 'DOUBLE)                                       '?))                      ($ENCODEDSECTORLENGTH (SELECT (fetch (FLOPPYIOCB ENCODEDSECTORLENGTH)                                                       of DATUM)                                                   (B128 128)                                                   (B256 256)                                                   (B512 512)                                                   (B1024 1024)                                                   '?))                      [BUFFER (\VAG2 (fetch (FLOPPYIOCB \BUFFERHILOC) of DATUM)                                     (fetch (FLOPPYIOCB \BUFFERLOLOC) of DATUM))                             (PROGN (replace (FLOPPYIOCB \BUFFERLOLOC) of DATUM                                       with (\LOLOC NEWVALUE))                                    (replace (FLOPPYIOCB \BUFFERHILOC) of DATUM                                       with (\HILOC NEWVALUE]                      (CYLINDER (fetch (DISKADDRESS CYLINDER) of (fetch (FLOPPYIOCB                                                                                     DISKADDRESS)                                                                            of DATUM)))                      (HEAD (fetch (DISKADDRESS HEAD) of (fetch (FLOPPYIOCB DISKADDRESS)                                                                    of DATUM)))                      (SECTOR (fetch (DISKADDRESS SECTOR) of (fetch (FLOPPYIOCB                                                                                        DISKADDRESS)                                                                        of DATUM])(BLOCKRECORD FLOPPYRESULT ((DOOROPENED FLAG)                               (MPERROR FLAG)                               (TWOSIDED FLAG)                               (DISKID FLAG)                               (ERROR FLAG)                               (NIL FLAG)                               (RECALIBRATEERROR FLAG)                               (DATALOST FLAG)                               (NOTREADY FLAG)                               (WRITEPROTECT FLAG)                               (DELETEDDATA FLAG)                               (RECORDNOTFOUND FLAG)                               (CRCERROR FLAG)                               (TRACK0 FLAG)                               (NIL FLAG)                               (BUSY FLAG))                              (BLOCKRECORD FLOPPYRESULT ((WORD WORD)))                              [ACCESSFNS ([$DISKID (COND                                                      ((fetch (FLOPPYRESULT DISKID) of DATUM)                                                       'SA850)                                                      (T 'SA800]                                          [MPCODE (COND                                                     ((NOT (fetch (FLOPPYRESULT MPERROR)                                                              of DATUM))                                                      0)                                                     (T (LOGXOR (fetch (FLOPPYRESULT WORD)                                                                   of DATUM)                                                               (LLSH 1 14]                                          (MPMESSAGE (SELECTQ (fetch (FLOPPYRESULT MPCODE)                                                                 of DATUM)                                                         (0 NIL)                                                         (580 "Domino NoValidCommand Error")                                                         (581 "Domino UnImplFloppyCmd Error")                                                         (582 "Domino InvalidEscapeCmd Error")                                                         (583 "Domino CommandTrack Error")                                                         (584 "Domino TrackToBig Error")                                                         (585 "Domino BadDmaChannel Error")                                                         (586 "Domino NoDmaEndCount1 Error")                                                         (587 "Domino NoDmaEndCount2 Error")                                                         (597 "Domino Error In NOOP Patch")                                                         (598 "Domino Error in Reset Patch")                                                         (CONCAT "Domino Error " (fetch                                                                                  (FLOPPYRESULT                                                                                   MPCODE)                                                                                    of DATUM])(DATATYPE PSECTOR9 ((SEAL WORD)                        (VERSION WORD)                        (CYLINDERS WORD)                        (TRACKSPERCYLINDER WORD)                        (SECTORSPERTRACK WORD)                        (PFILELISTSTART WORD)                        (PFILELISTFILEID SWAPPEDFIXP)                        (PFILELISTLENGTH WORD)                        (ROOTFILEID SWAPPEDFIXP)                        (NIL WORD)                        (PILOTMICROCODE WORD)                        (DIAGNOSTICMICROCODE WORD)                        (GERM WORD)                        (PILOTBOOTFILE WORD)                        (FIRSTALTERNATESECTOR WORD)                        (COUNTBADSECTORS WORD)                        (NEXTUNUSEDFILEID SWAPPEDFIXP)                        (CHANGING FLAG)                        (NIL BITS 15)                        (\LABELLENGTH WORD)                        (\LABEL 40 BYTE)                        (NIL 22 WORD))                       SEAL _ SEAL.PSECTOR9 VERSION _ VERSION.PSECTOR9 CYLINDERS _ \FLOPPY.CYLINDERS                       TRACKSPERCYLINDER _ \FLOPPY.TRACKSPERCYLINDER SECTORSPERTRACK _                        \FLOPPY.SECTORSPERTRACK                       [ACCESSFNS ((INTACT (AND (IEQP (fetch (PSECTOR9 SEAL) of DATUM)                                                      SEAL.PSECTOR9)                                                (ILEQ (fetch (PSECTOR9 \LABELLENGTH) of                                                                                         DATUM)                                                      106)))                                   [$LABEL [MKATOM (CREATE STRINGP                                                          BASE _ (fetch (PSECTOR9 \LABELBASE)                                                                    of DATUM)                                                          LENGTH _ (IMIN LABELMAXLENGTH.PSECTOR9                                                                         (fetch (PSECTOR9                                                                                          \LABELLENGTH                                                                                           )                                                                            of DATUM]                                          (LET ((VALUE (MKSTRING NEWVALUE)))                                               (* ;;                                              "NOTE: Can't do SETQ NEWVALUE with record package.")                                               (COND                                                  ((IGREATERP (NCHARS VALUE)                                                          LABELMAXLENGTH.PSECTOR9)                                                   (CL:CERROR "Use %"~A%" as the label"                                                           "~*%"~A%" is too long for a floppy label."                                                          (SUBSTRING VALUE 1 LABELMAXLENGTH.PSECTOR9)                                                          VALUE)))                                               (replace (PSECTOR9 \LABELLENGTH) of DATUM                                                  with (IMIN LABELMAXLENGTH.PSECTOR9 (NCHARS                                                                                          VALUE)))                                               (RPLSTRING (CREATE STRINGP                                                                 BASE _ (fetch (PSECTOR9                                                                                           \LABELBASE)                                                                           of DATUM)                                                                 LENGTH _ (fetch (PSECTOR9                                                                                          \LABELLENGTH                                                                                            )                                                                             of DATUM))                                                      1                                                      (SUBSTRING VALUE 1 (fetch (PSECTOR9                                                                                          \LABELLENGTH                                                                                           )                                                                            of DATUM]                                   (\LABELBASE (\ADDBASE DATUM 22])(DATATYPE PMPAGE (                      (* ;; "MARKER PAGE for a pilot file")                      (SEAL WORD)                      (VERSION WORD)                         (* ; "Previous marker page entry ")                      (PLENGTH SWAPPEDFIXP)                      (PTYPE WORD)                      (PFILEID SWAPPEDFIXP)                      (PFILETYPE WORD)                      (NIL 121 WORD)                         (* ; "Next marker page entry ")                      (NLENGTH SWAPPEDFIXP)                      (NTYPE WORD)                      (NFILEID SWAPPEDFIXP)                      (NFILETYPE WORD)                       (* ;                                                            "Numeric file type (? jds 10/27/87)")                      (NIL 121 WORD))                     SEAL _ SEAL.PMPAGE VERSION _ VERSION.PMPAGE                     [ACCESSFNS ((INTACT (IEQP (fetch (PMPAGE SEAL) of DATUM)                                               SEAL.PMPAGE))                                 ($PTYPE (\FLOPPY.TRANSLATEPMPAGEETYPE (fetch (PMPAGE PTYPE)                                                                          of DATUM)))                                 ($PFILETYPE (\FLOPPY.TRANSLATEFILETYPE (fetch (PMPAGE PFILETYPE)                                                                           of DATUM)))                                 ($NTYPE (\FLOPPY.TRANSLATEPMPAGEETYPE (fetch (PMPAGE NTYPE)                                                                          of DATUM)))                                 ($NFILETYPE (\FLOPPY.TRANSLATEFILETYPE (fetch (PMPAGE NFILETYPE)                                                                           of DATUM])(DATATYPE PLPAGE           ((SEAL WORD)           (VERSION WORD)           (MESATYPE WORD)                                   (* Offset 6 *)           (\CREATIONDATE SWAPPEDFIXP)           (\WRITEDATE SWAPPEDFIXP)           (PAGELENGTH SWAPPEDFIXP)           (HUGEPAGESTART SWAPPEDFIXP)           (HUGEPAGELENGTH SWAPPEDFIXP)           (HUGELENGTH SWAPPEDFIXP)           (\NAMELENGTH WORD)           (NAMEMAXLENGTH WORD)                              (* Offset 17 *)           (\NAME 50 WORD)                                   (* Offset 67 *)           (UFO1 WORD)           (UFO2 WORD)           (DATAVERSION WORD)           (\TYPE WORD)           (NIL 183 WORD)           (\BYTESIZE WORD))          SEAL _ SEAL.PLPAGE VERSION _ VERSION.PLPAGE MESATYPE _ 65535 NAMEMAXLENGTH _           NAMEMAXLENGTH.PLPAGE UFO1 _ 2 UFO2 _ 187 DATAVERSION _ VERSION.DATA \TYPE _ 1          [ACCESSFNS ((INTACT (AND (IEQP (fetch (PLPAGE SEAL) of DATUM)                                         SEAL.PLPAGE)                                   (ILEQ (fetch (PLPAGE \NAMELENGTH) of DATUM)                                         NAMEMAXLENGTH.PLPAGE)))                      [$NAME [MKATOM (CREATE STRINGP                                            BASE _ (fetch (PLPAGE \NAMEBASE) of DATUM)                                            LENGTH _ (IMIN 100 (fetch (PLPAGE \NAMELENGTH)                                                                  of DATUM]                             (PROG (VALUE)                   (* NOTE%: Can't do SETQ NEWVALUE                                                            with record package.                                                           *)                                   (SETQ VALUE (MKSTRING NEWVALUE))                                   (replace (PLPAGE \NAMELENGTH) of DATUM                                      with (IMIN NAMEMAXLENGTH.PLPAGE (NCHARS VALUE)))                                   (RPLSTRING (CREATE STRINGP                                                     BASE _ (fetch (PLPAGE \NAMEBASE)                                                               of DATUM)                                                     LENGTH _ (fetch (PLPAGE \NAMELENGTH)                                                                 of DATUM))                                          1                                          (SUBSTRING VALUE 1 (fetch (PLPAGE \NAMELENGTH)                                                                of DATUM]                      (\NAMEBASE (\ADDBASE DATUM 17))                      (CREATIONDATE (GDATE (fetch (PLPAGE ICREATIONDATE) of DATUM))                             (replace (PLPAGE ICREATIONDATE) of DATUM with (IDATE                                                                                              NEWVALUE                                                                                              )))                      (ICREATIONDATE (\FLOPPY.MTL.IDATE (fetch (PLPAGE \CREATIONDATE)                                                           of DATUM))                             (replace (PLPAGE \CREATIONDATE) of DATUM with (                                                                                    \FLOPPY.LTM.IDATE                                                                                        NEWVALUE)))                      (WRITEDATE (GDATE (fetch (PLPAGE IWRITEDATE) of DATUM))                             (replace (PLPAGE IWRITEDATE) of DATUM with (IDATE NEWVALUE))                             )                      (IWRITEDATE (\FLOPPY.MTL.IDATE (fetch (PLPAGE \WRITEDATE) of DATUM))                             (replace (PLPAGE \WRITEDATE) of DATUM with (                                                                                    \FLOPPY.LTM.IDATE                                                                                     NEWVALUE)))                      [LENGTH [COND                                 ((ILESSP (IPLUS (fetch (PLPAGE HUGEPAGESTART) of DATUM)                                                 (fetch (PLPAGE PAGELENGTH) of DATUM))                                         (fetch (PLPAGE HUGEPAGELENGTH) of DATUM))                                  (ITIMES 512 (fetch (PLPAGE PAGELENGTH) of DATUM)))                                 (T (IDIFFERENCE (fetch (PLPAGE HUGELENGTH) of DATUM)                                           (ITIMES 512 (fetch (PLPAGE HUGEPAGESTART) of                                                                                         DATUM]                             (PROGN                          (* Works for ordinairy                                                           (not huge) files. *)                                    (replace (PLPAGE PAGELENGTH) of DATUM                                       with (IQUOTIENT (IPLUS NEWVALUE 511)                                                       512))                                    (replace (PLPAGE HUGELENGTH) of DATUM with NEWVALUE)                                    (replace (PLPAGE HUGEPAGELENGTH) of DATUM                                       with (fetch (PLPAGE PAGELENGTH) of DATUM]                      [TYPE (SELECT (fetch (PLPAGE \TYPE) of DATUM)                                   (1 'TEXT)                                   (2 'BINARY)                                   'TEXT)                            (SELECTQ (COND                                        ((LISTP NEWVALUE)                                         (CAR NEWVALUE))                                        (T NEWVALUE))                                (TEXT (replace (PLPAGE \TYPE) of DATUM with 1))                                (PROGN                       (* Everything else BINARY.                                                           *)                                       (replace (PLPAGE \TYPE) of DATUM with 2]                      (\VALUE DATUM (\BLT DATUM NEWVALUE 256])(BLOCKRECORD PFILELIST ((SEAL WORD)                            (VERSION WORD)                            (NENTRIES WORD)                            (MAXENTRIES WORD))                           [ACCESSFNS ((INTACT (IEQP (fetch (PFILELIST SEAL) of DATUM)                                                     SEAL.PFILELIST))                                       (NPAGES (FOLDHI (IPLUS 4 (ITIMES 5 (fetch (PFILELIST                                                                                      MAXENTRIES)                                                                             of DATUM)))                                                      256))                                       (\FIRSTPFLE (\ADDBASE DATUM 4])(DATATYPE PFLE ((FILEID SWAPPEDFIXP)                    (TYPE WORD)                    (START WORD)                    (LENGTH WORD))                   [ACCESSFNS (($TYPE (\FLOPPY.TRANSLATEFILETYPE (fetch (PFLE TYPE) of DATUM)                                             ))                               (\VALUE DATUM (\BLT DATUM NEWVALUE 5]))(/DECLAREDATATYPE 'FLOPPYIOCB '(WORD WORD WORD WORD (BITS 12)                                     (BITS 4)                                     FIXP WORD WORD FLAG (BITS 15)                                     WORD                                     (BITS 8)                                     (BITS 8)                                     (BITS 8)                                     (BITS 8)                                     WORD WORD WORD)       '((FLOPPYIOCB 0 (BITS . 15))         (FLOPPYIOCB 1 (BITS . 15))         (FLOPPYIOCB 2 (BITS . 15))         (FLOPPYIOCB 3 (BITS . 15))         (FLOPPYIOCB 4 (BITS . 11))         (FLOPPYIOCB 4 (BITS . 195))         (FLOPPYIOCB 5 FIXP)         (FLOPPYIOCB 7 (BITS . 15))         (FLOPPYIOCB 8 (BITS . 15))         (FLOPPYIOCB 9 (FLAGBITS . 0))         (FLOPPYIOCB 9 (BITS . 30))         (FLOPPYIOCB 10 (BITS . 15))         (FLOPPYIOCB 11 (BITS . 7))         (FLOPPYIOCB 11 (BITS . 135))         (FLOPPYIOCB 12 (BITS . 7))         (FLOPPYIOCB 12 (BITS . 135))         (FLOPPYIOCB 13 (BITS . 15))         (FLOPPYIOCB 14 (BITS . 15))         (FLOPPYIOCB 15 (BITS . 15)))       '16)(/DECLAREDATATYPE 'PSECTOR9       '(WORD WORD WORD WORD WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD WORD WORD WORD WORD WORD               WORD SWAPPEDFIXP FLAG (BITS 15)              WORD BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE               BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE BYTE               BYTE BYTE BYTE BYTE BYTE BYTE BYTE WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD)       '((PSECTOR9 0 (BITS . 15))         (PSECTOR9 1 (BITS . 15))         (PSECTOR9 2 (BITS . 15))         (PSECTOR9 3 (BITS . 15))         (PSECTOR9 4 (BITS . 15))         (PSECTOR9 5 (BITS . 15))         (PSECTOR9 6 SWAPPEDFIXP)         (PSECTOR9 8 (BITS . 15))         (PSECTOR9 9 SWAPPEDFIXP)         (PSECTOR9 11 (BITS . 15))         (PSECTOR9 12 (BITS . 15))         (PSECTOR9 13 (BITS . 15))         (PSECTOR9 14 (BITS . 15))         (PSECTOR9 15 (BITS . 15))         (PSECTOR9 16 (BITS . 15))         (PSECTOR9 17 (BITS . 15))         (PSECTOR9 18 SWAPPEDFIXP)         (PSECTOR9 20 (FLAGBITS . 0))         (PSECTOR9 20 (BITS . 30))         (PSECTOR9 21 (BITS . 15))         (PSECTOR9 22 (BITS . 7))         (PSECTOR9 22 (BITS . 135))         (PSECTOR9 23 (BITS . 7))         (PSECTOR9 23 (BITS . 135))         (PSECTOR9 24 (BITS . 7))         (PSECTOR9 24 (BITS . 135))         (PSECTOR9 25 (BITS . 7))         (PSECTOR9 25 (BITS . 135))         (PSECTOR9 26 (BITS . 7))         (PSECTOR9 26 (BITS . 135))         (PSECTOR9 27 (BITS . 7))         (PSECTOR9 27 (BITS . 135))         (PSECTOR9 28 (BITS . 7))         (PSECTOR9 28 (BITS . 135))         (PSECTOR9 29 (BITS . 7))         (PSECTOR9 29 (BITS . 135))         (PSECTOR9 30 (BITS . 7))         (PSECTOR9 30 (BITS . 135))         (PSECTOR9 31 (BITS . 7))         (PSECTOR9 31 (BITS . 135))         (PSECTOR9 32 (BITS . 7))         (PSECTOR9 32 (BITS . 135))         (PSECTOR9 33 (BITS . 7))         (PSECTOR9 33 (BITS . 135))         (PSECTOR9 34 (BITS . 7))         (PSECTOR9 34 (BITS . 135))         (PSECTOR9 35 (BITS . 7))         (PSECTOR9 35 (BITS . 135))         (PSECTOR9 36 (BITS . 7))         (PSECTOR9 36 (BITS . 135))         (PSECTOR9 37 (BITS . 7))         (PSECTOR9 37 (BITS . 135))         (PSECTOR9 38 (BITS . 7))         (PSECTOR9 38 (BITS . 135))         (PSECTOR9 39 (BITS . 7))         (PSECTOR9 39 (BITS . 135))         (PSECTOR9 40 (BITS . 7))         (PSECTOR9 40 (BITS . 135))         (PSECTOR9 41 (BITS . 7))         (PSECTOR9 41 (BITS . 135))         (PSECTOR9 42 (BITS . 15))         (PSECTOR9 43 (BITS . 15))         (PSECTOR9 44 (BITS . 15))         (PSECTOR9 45 (BITS . 15))         (PSECTOR9 46 (BITS . 15))         (PSECTOR9 47 (BITS . 15))         (PSECTOR9 48 (BITS . 15))         (PSECTOR9 49 (BITS . 15))         (PSECTOR9 50 (BITS . 15))         (PSECTOR9 51 (BITS . 15))         (PSECTOR9 52 (BITS . 15))         (PSECTOR9 53 (BITS . 15))         (PSECTOR9 54 (BITS . 15))         (PSECTOR9 55 (BITS . 15))         (PSECTOR9 56 (BITS . 15))         (PSECTOR9 57 (BITS . 15))         (PSECTOR9 58 (BITS . 15))         (PSECTOR9 59 (BITS . 15))         (PSECTOR9 60 (BITS . 15))         (PSECTOR9 61 (BITS . 15))         (PSECTOR9 62 (BITS . 15))         (PSECTOR9 63 (BITS . 15)))       '64)(/DECLAREDATATYPE 'PMPAGE       '(WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD SWAPPEDFIXP WORD SWAPPEDFIXP WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD)       '((PMPAGE 0 (BITS . 15))         (PMPAGE 1 (BITS . 15))         (PMPAGE 2 SWAPPEDFIXP)         (PMPAGE 4 (BITS . 15))         (PMPAGE 5 SWAPPEDFIXP)         (PMPAGE 7 (BITS . 15))         (PMPAGE 8 (BITS . 15))         (PMPAGE 9 (BITS . 15))         (PMPAGE 10 (BITS . 15))         (PMPAGE 11 (BITS . 15))         (PMPAGE 12 (BITS . 15))         (PMPAGE 13 (BITS . 15))         (PMPAGE 14 (BITS . 15))         (PMPAGE 15 (BITS . 15))         (PMPAGE 16 (BITS . 15))         (PMPAGE 17 (BITS . 15))         (PMPAGE 18 (BITS . 15))         (PMPAGE 19 (BITS . 15))         (PMPAGE 20 (BITS . 15))         (PMPAGE 21 (BITS . 15))         (PMPAGE 22 (BITS . 15))         (PMPAGE 23 (BITS . 15))         (PMPAGE 24 (BITS . 15))         (PMPAGE 25 (BITS . 15))         (PMPAGE 26 (BITS . 15))         (PMPAGE 27 (BITS . 15))         (PMPAGE 28 (BITS . 15))         (PMPAGE 29 (BITS . 15))         (PMPAGE 30 (BITS . 15))         (PMPAGE 31 (BITS . 15))         (PMPAGE 32 (BITS . 15))         (PMPAGE 33 (BITS . 15))         (PMPAGE 34 (BITS . 15))         (PMPAGE 35 (BITS . 15))         (PMPAGE 36 (BITS . 15))         (PMPAGE 37 (BITS . 15))         (PMPAGE 38 (BITS . 15))         (PMPAGE 39 (BITS . 15))         (PMPAGE 40 (BITS . 15))         (PMPAGE 41 (BITS . 15))         (PMPAGE 42 (BITS . 15))         (PMPAGE 43 (BITS . 15))         (PMPAGE 44 (BITS . 15))         (PMPAGE 45 (BITS . 15))         (PMPAGE 46 (BITS . 15))         (PMPAGE 47 (BITS . 15))         (PMPAGE 48 (BITS . 15))         (PMPAGE 49 (BITS . 15))         (PMPAGE 50 (BITS . 15))         (PMPAGE 51 (BITS . 15))         (PMPAGE 52 (BITS . 15))         (PMPAGE 53 (BITS . 15))         (PMPAGE 54 (BITS . 15))         (PMPAGE 55 (BITS . 15))         (PMPAGE 56 (BITS . 15))         (PMPAGE 57 (BITS . 15))         (PMPAGE 58 (BITS . 15))         (PMPAGE 59 (BITS . 15))         (PMPAGE 60 (BITS . 15))         (PMPAGE 61 (BITS . 15))         (PMPAGE 62 (BITS . 15))         (PMPAGE 63 (BITS . 15))         (PMPAGE 64 (BITS . 15))         (PMPAGE 65 (BITS . 15))         (PMPAGE 66 (BITS . 15))         (PMPAGE 67 (BITS . 15))         (PMPAGE 68 (BITS . 15))         (PMPAGE 69 (BITS . 15))         (PMPAGE 70 (BITS . 15))         (PMPAGE 71 (BITS . 15))         (PMPAGE 72 (BITS . 15))         (PMPAGE 73 (BITS . 15))         (PMPAGE 74 (BITS . 15))         (PMPAGE 75 (BITS . 15))         (PMPAGE 76 (BITS . 15))         (PMPAGE 77 (BITS . 15))         (PMPAGE 78 (BITS . 15))         (PMPAGE 79 (BITS . 15))         (PMPAGE 80 (BITS . 15))         (PMPAGE 81 (BITS . 15))         (PMPAGE 82 (BITS . 15))         (PMPAGE 83 (BITS . 15))         (PMPAGE 84 (BITS . 15))         (PMPAGE 85 (BITS . 15))         (PMPAGE 86 (BITS . 15))         (PMPAGE 87 (BITS . 15))         (PMPAGE 88 (BITS . 15))         (PMPAGE 89 (BITS . 15))         (PMPAGE 90 (BITS . 15))         (PMPAGE 91 (BITS . 15))         (PMPAGE 92 (BITS . 15))         (PMPAGE 93 (BITS . 15))         (PMPAGE 94 (BITS . 15))         (PMPAGE 95 (BITS . 15))         (PMPAGE 96 (BITS . 15))         (PMPAGE 97 (BITS . 15))         (PMPAGE 98 (BITS . 15))         (PMPAGE 99 (BITS . 15))         (PMPAGE 100 (BITS . 15))         (PMPAGE 101 (BITS . 15))         (PMPAGE 102 (BITS . 15))         (PMPAGE 103 (BITS . 15))         (PMPAGE 104 (BITS . 15))         (PMPAGE 105 (BITS . 15))         (PMPAGE 106 (BITS . 15))         (PMPAGE 107 (BITS . 15))         (PMPAGE 108 (BITS . 15))         (PMPAGE 109 (BITS . 15))         (PMPAGE 110 (BITS . 15))         (PMPAGE 111 (BITS . 15))         (PMPAGE 112 (BITS . 15))         (PMPAGE 113 (BITS . 15))         (PMPAGE 114 (BITS . 15))         (PMPAGE 115 (BITS . 15))         (PMPAGE 116 (BITS . 15))         (PMPAGE 117 (BITS . 15))         (PMPAGE 118 (BITS . 15))         (PMPAGE 119 (BITS . 15))         (PMPAGE 120 (BITS . 15))         (PMPAGE 121 (BITS . 15))         (PMPAGE 122 (BITS . 15))         (PMPAGE 123 (BITS . 15))         (PMPAGE 124 (BITS . 15))         (PMPAGE 125 (BITS . 15))         (PMPAGE 126 (BITS . 15))         (PMPAGE 127 (BITS . 15))         (PMPAGE 128 (BITS . 15))         (PMPAGE 129 SWAPPEDFIXP)         (PMPAGE 131 (BITS . 15))         (PMPAGE 132 SWAPPEDFIXP)         (PMPAGE 134 (BITS . 15))         (PMPAGE 135 (BITS . 15))         (PMPAGE 136 (BITS . 15))         (PMPAGE 137 (BITS . 15))         (PMPAGE 138 (BITS . 15))         (PMPAGE 139 (BITS . 15))         (PMPAGE 140 (BITS . 15))         (PMPAGE 141 (BITS . 15))         (PMPAGE 142 (BITS . 15))         (PMPAGE 143 (BITS . 15))         (PMPAGE 144 (BITS . 15))         (PMPAGE 145 (BITS . 15))         (PMPAGE 146 (BITS . 15))         (PMPAGE 147 (BITS . 15))         (PMPAGE 148 (BITS . 15))         (PMPAGE 149 (BITS . 15))         (PMPAGE 150 (BITS . 15))         (PMPAGE 151 (BITS . 15))         (PMPAGE 152 (BITS . 15))         (PMPAGE 153 (BITS . 15))         (PMPAGE 154 (BITS . 15))         (PMPAGE 155 (BITS . 15))         (PMPAGE 156 (BITS . 15))         (PMPAGE 157 (BITS . 15))         (PMPAGE 158 (BITS . 15))         (PMPAGE 159 (BITS . 15))         (PMPAGE 160 (BITS . 15))         (PMPAGE 161 (BITS . 15))         (PMPAGE 162 (BITS . 15))         (PMPAGE 163 (BITS . 15))         (PMPAGE 164 (BITS . 15))         (PMPAGE 165 (BITS . 15))         (PMPAGE 166 (BITS . 15))         (PMPAGE 167 (BITS . 15))         (PMPAGE 168 (BITS . 15))         (PMPAGE 169 (BITS . 15))         (PMPAGE 170 (BITS . 15))         (PMPAGE 171 (BITS . 15))         (PMPAGE 172 (BITS . 15))         (PMPAGE 173 (BITS . 15))         (PMPAGE 174 (BITS . 15))         (PMPAGE 175 (BITS . 15))         (PMPAGE 176 (BITS . 15))         (PMPAGE 177 (BITS . 15))         (PMPAGE 178 (BITS . 15))         (PMPAGE 179 (BITS . 15))         (PMPAGE 180 (BITS . 15))         (PMPAGE 181 (BITS . 15))         (PMPAGE 182 (BITS . 15))         (PMPAGE 183 (BITS . 15))         (PMPAGE 184 (BITS . 15))         (PMPAGE 185 (BITS . 15))         (PMPAGE 186 (BITS . 15))         (PMPAGE 187 (BITS . 15))         (PMPAGE 188 (BITS . 15))         (PMPAGE 189 (BITS . 15))         (PMPAGE 190 (BITS . 15))         (PMPAGE 191 (BITS . 15))         (PMPAGE 192 (BITS . 15))         (PMPAGE 193 (BITS . 15))         (PMPAGE 194 (BITS . 15))         (PMPAGE 195 (BITS . 15))         (PMPAGE 196 (BITS . 15))         (PMPAGE 197 (BITS . 15))         (PMPAGE 198 (BITS . 15))         (PMPAGE 199 (BITS . 15))         (PMPAGE 200 (BITS . 15))         (PMPAGE 201 (BITS . 15))         (PMPAGE 202 (BITS . 15))         (PMPAGE 203 (BITS . 15))         (PMPAGE 204 (BITS . 15))         (PMPAGE 205 (BITS . 15))         (PMPAGE 206 (BITS . 15))         (PMPAGE 207 (BITS . 15))         (PMPAGE 208 (BITS . 15))         (PMPAGE 209 (BITS . 15))         (PMPAGE 210 (BITS . 15))         (PMPAGE 211 (BITS . 15))         (PMPAGE 212 (BITS . 15))         (PMPAGE 213 (BITS . 15))         (PMPAGE 214 (BITS . 15))         (PMPAGE 215 (BITS . 15))         (PMPAGE 216 (BITS . 15))         (PMPAGE 217 (BITS . 15))         (PMPAGE 218 (BITS . 15))         (PMPAGE 219 (BITS . 15))         (PMPAGE 220 (BITS . 15))         (PMPAGE 221 (BITS . 15))         (PMPAGE 222 (BITS . 15))         (PMPAGE 223 (BITS . 15))         (PMPAGE 224 (BITS . 15))         (PMPAGE 225 (BITS . 15))         (PMPAGE 226 (BITS . 15))         (PMPAGE 227 (BITS . 15))         (PMPAGE 228 (BITS . 15))         (PMPAGE 229 (BITS . 15))         (PMPAGE 230 (BITS . 15))         (PMPAGE 231 (BITS . 15))         (PMPAGE 232 (BITS . 15))         (PMPAGE 233 (BITS . 15))         (PMPAGE 234 (BITS . 15))         (PMPAGE 235 (BITS . 15))         (PMPAGE 236 (BITS . 15))         (PMPAGE 237 (BITS . 15))         (PMPAGE 238 (BITS . 15))         (PMPAGE 239 (BITS . 15))         (PMPAGE 240 (BITS . 15))         (PMPAGE 241 (BITS . 15))         (PMPAGE 242 (BITS . 15))         (PMPAGE 243 (BITS . 15))         (PMPAGE 244 (BITS . 15))         (PMPAGE 245 (BITS . 15))         (PMPAGE 246 (BITS . 15))         (PMPAGE 247 (BITS . 15))         (PMPAGE 248 (BITS . 15))         (PMPAGE 249 (BITS . 15))         (PMPAGE 250 (BITS . 15))         (PMPAGE 251 (BITS . 15))         (PMPAGE 252 (BITS . 15))         (PMPAGE 253 (BITS . 15))         (PMPAGE 254 (BITS . 15))         (PMPAGE 255 (BITS . 15)))       '256)(/DECLAREDATATYPE 'PLPAGE       '(WORD WORD WORD SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP SWAPPEDFIXP WORD              WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD WORD               WORD)       '((PLPAGE 0 (BITS . 15))         (PLPAGE 1 (BITS . 15))         (PLPAGE 2 (BITS . 15))         (PLPAGE 3 SWAPPEDFIXP)         (PLPAGE 5 SWAPPEDFIXP)         (PLPAGE 7 SWAPPEDFIXP)         (PLPAGE 9 SWAPPEDFIXP)         (PLPAGE 11 SWAPPEDFIXP)         (PLPAGE 13 SWAPPEDFIXP)         (PLPAGE 15 (BITS . 15))         (PLPAGE 16 (BITS . 15))         (PLPAGE 17 (BITS . 15))         (PLPAGE 18 (BITS . 15))         (PLPAGE 19 (BITS . 15))         (PLPAGE 20 (BITS . 15))         (PLPAGE 21 (BITS . 15))         (PLPAGE 22 (BITS . 15))         (PLPAGE 23 (BITS . 15))         (PLPAGE 24 (BITS . 15))         (PLPAGE 25 (BITS . 15))         (PLPAGE 26 (BITS . 15))         (PLPAGE 27 (BITS . 15))         (PLPAGE 28 (BITS . 15))         (PLPAGE 29 (BITS . 15))         (PLPAGE 30 (BITS . 15))         (PLPAGE 31 (BITS . 15))         (PLPAGE 32 (BITS . 15))         (PLPAGE 33 (BITS . 15))         (PLPAGE 34 (BITS . 15))         (PLPAGE 35 (BITS . 15))         (PLPAGE 36 (BITS . 15))         (PLPAGE 37 (BITS . 15))         (PLPAGE 38 (BITS . 15))         (PLPAGE 39 (BITS . 15))         (PLPAGE 40 (BITS . 15))         (PLPAGE 41 (BITS . 15))         (PLPAGE 42 (BITS . 15))         (PLPAGE 43 (BITS . 15))         (PLPAGE 44 (BITS . 15))         (PLPAGE 45 (BITS . 15))         (PLPAGE 46 (BITS . 15))         (PLPAGE 47 (BITS . 15))         (PLPAGE 48 (BITS . 15))         (PLPAGE 49 (BITS . 15))         (PLPAGE 50 (BITS . 15))         (PLPAGE 51 (BITS . 15))         (PLPAGE 52 (BITS . 15))         (PLPAGE 53 (BITS . 15))         (PLPAGE 54 (BITS . 15))         (PLPAGE 55 (BITS . 15))         (PLPAGE 56 (BITS . 15))         (PLPAGE 57 (BITS . 15))         (PLPAGE 58 (BITS . 15))         (PLPAGE 59 (BITS . 15))         (PLPAGE 60 (BITS . 15))         (PLPAGE 61 (BITS . 15))         (PLPAGE 62 (BITS . 15))         (PLPAGE 63 (BITS . 15))         (PLPAGE 64 (BITS . 15))         (PLPAGE 65 (BITS . 15))         (PLPAGE 66 (BITS . 15))         (PLPAGE 67 (BITS . 15))         (PLPAGE 68 (BITS . 15))         (PLPAGE 69 (BITS . 15))         (PLPAGE 70 (BITS . 15))         (PLPAGE 71 (BITS . 15))         (PLPAGE 72 (BITS . 15))         (PLPAGE 73 (BITS . 15))         (PLPAGE 74 (BITS . 15))         (PLPAGE 75 (BITS . 15))         (PLPAGE 76 (BITS . 15))         (PLPAGE 77 (BITS . 15))         (PLPAGE 78 (BITS . 15))         (PLPAGE 79 (BITS . 15))         (PLPAGE 80 (BITS . 15))         (PLPAGE 81 (BITS . 15))         (PLPAGE 82 (BITS . 15))         (PLPAGE 83 (BITS . 15))         (PLPAGE 84 (BITS . 15))         (PLPAGE 85 (BITS . 15))         (PLPAGE 86 (BITS . 15))         (PLPAGE 87 (BITS . 15))         (PLPAGE 88 (BITS . 15))         (PLPAGE 89 (BITS . 15))         (PLPAGE 90 (BITS . 15))         (PLPAGE 91 (BITS . 15))         (PLPAGE 92 (BITS . 15))         (PLPAGE 93 (BITS . 15))         (PLPAGE 94 (BITS . 15))         (PLPAGE 95 (BITS . 15))         (PLPAGE 96 (BITS . 15))         (PLPAGE 97 (BITS . 15))         (PLPAGE 98 (BITS . 15))         (PLPAGE 99 (BITS . 15))         (PLPAGE 100 (BITS . 15))         (PLPAGE 101 (BITS . 15))         (PLPAGE 102 (BITS . 15))         (PLPAGE 103 (BITS . 15))         (PLPAGE 104 (BITS . 15))         (PLPAGE 105 (BITS . 15))         (PLPAGE 106 (BITS . 15))         (PLPAGE 107 (BITS . 15))         (PLPAGE 108 (BITS . 15))         (PLPAGE 109 (BITS . 15))         (PLPAGE 110 (BITS . 15))         (PLPAGE 111 (BITS . 15))         (PLPAGE 112 (BITS . 15))         (PLPAGE 113 (BITS . 15))         (PLPAGE 114 (BITS . 15))         (PLPAGE 115 (BITS . 15))         (PLPAGE 116 (BITS . 15))         (PLPAGE 117 (BITS . 15))         (PLPAGE 118 (BITS . 15))         (PLPAGE 119 (BITS . 15))         (PLPAGE 120 (BITS . 15))         (PLPAGE 121 (BITS . 15))         (PLPAGE 122 (BITS . 15))         (PLPAGE 123 (BITS . 15))         (PLPAGE 124 (BITS . 15))         (PLPAGE 125 (BITS . 15))         (PLPAGE 126 (BITS . 15))         (PLPAGE 127 (BITS . 15))         (PLPAGE 128 (BITS . 15))         (PLPAGE 129 (BITS . 15))         (PLPAGE 130 (BITS . 15))         (PLPAGE 131 (BITS . 15))         (PLPAGE 132 (BITS . 15))         (PLPAGE 133 (BITS . 15))         (PLPAGE 134 (BITS . 15))         (PLPAGE 135 (BITS . 15))         (PLPAGE 136 (BITS . 15))         (PLPAGE 137 (BITS . 15))         (PLPAGE 138 (BITS . 15))         (PLPAGE 139 (BITS . 15))         (PLPAGE 140 (BITS . 15))         (PLPAGE 141 (BITS . 15))         (PLPAGE 142 (BITS . 15))         (PLPAGE 143 (BITS . 15))         (PLPAGE 144 (BITS . 15))         (PLPAGE 145 (BITS . 15))         (PLPAGE 146 (BITS . 15))         (PLPAGE 147 (BITS . 15))         (PLPAGE 148 (BITS . 15))         (PLPAGE 149 (BITS . 15))         (PLPAGE 150 (BITS . 15))         (PLPAGE 151 (BITS . 15))         (PLPAGE 152 (BITS . 15))         (PLPAGE 153 (BITS . 15))         (PLPAGE 154 (BITS . 15))         (PLPAGE 155 (BITS . 15))         (PLPAGE 156 (BITS . 15))         (PLPAGE 157 (BITS . 15))         (PLPAGE 158 (BITS . 15))         (PLPAGE 159 (BITS . 15))         (PLPAGE 160 (BITS . 15))         (PLPAGE 161 (BITS . 15))         (PLPAGE 162 (BITS . 15))         (PLPAGE 163 (BITS . 15))         (PLPAGE 164 (BITS . 15))         (PLPAGE 165 (BITS . 15))         (PLPAGE 166 (BITS . 15))         (PLPAGE 167 (BITS . 15))         (PLPAGE 168 (BITS . 15))         (PLPAGE 169 (BITS . 15))         (PLPAGE 170 (BITS . 15))         (PLPAGE 171 (BITS . 15))         (PLPAGE 172 (BITS . 15))         (PLPAGE 173 (BITS . 15))         (PLPAGE 174 (BITS . 15))         (PLPAGE 175 (BITS . 15))         (PLPAGE 176 (BITS . 15))         (PLPAGE 177 (BITS . 15))         (PLPAGE 178 (BITS . 15))         (PLPAGE 179 (BITS . 15))         (PLPAGE 180 (BITS . 15))         (PLPAGE 181 (BITS . 15))         (PLPAGE 182 (BITS . 15))         (PLPAGE 183 (BITS . 15))         (PLPAGE 184 (BITS . 15))         (PLPAGE 185 (BITS . 15))         (PLPAGE 186 (BITS . 15))         (PLPAGE 187 (BITS . 15))         (PLPAGE 188 (BITS . 15))         (PLPAGE 189 (BITS . 15))         (PLPAGE 190 (BITS . 15))         (PLPAGE 191 (BITS . 15))         (PLPAGE 192 (BITS . 15))         (PLPAGE 193 (BITS . 15))         (PLPAGE 194 (BITS . 15))         (PLPAGE 195 (BITS . 15))         (PLPAGE 196 (BITS . 15))         (PLPAGE 197 (BITS . 15))         (PLPAGE 198 (BITS . 15))         (PLPAGE 199 (BITS . 15))         (PLPAGE 200 (BITS . 15))         (PLPAGE 201 (BITS . 15))         (PLPAGE 202 (BITS . 15))         (PLPAGE 203 (BITS . 15))         (PLPAGE 204 (BITS . 15))         (PLPAGE 205 (BITS . 15))         (PLPAGE 206 (BITS . 15))         (PLPAGE 207 (BITS . 15))         (PLPAGE 208 (BITS . 15))         (PLPAGE 209 (BITS . 15))         (PLPAGE 210 (BITS . 15))         (PLPAGE 211 (BITS . 15))         (PLPAGE 212 (BITS . 15))         (PLPAGE 213 (BITS . 15))         (PLPAGE 214 (BITS . 15))         (PLPAGE 215 (BITS . 15))         (PLPAGE 216 (BITS . 15))         (PLPAGE 217 (BITS . 15))         (PLPAGE 218 (BITS . 15))         (PLPAGE 219 (BITS . 15))         (PLPAGE 220 (BITS . 15))         (PLPAGE 221 (BITS . 15))         (PLPAGE 222 (BITS . 15))         (PLPAGE 223 (BITS . 15))         (PLPAGE 224 (BITS . 15))         (PLPAGE 225 (BITS . 15))         (PLPAGE 226 (BITS . 15))         (PLPAGE 227 (BITS . 15))         (PLPAGE 228 (BITS . 15))         (PLPAGE 229 (BITS . 15))         (PLPAGE 230 (BITS . 15))         (PLPAGE 231 (BITS . 15))         (PLPAGE 232 (BITS . 15))         (PLPAGE 233 (BITS . 15))         (PLPAGE 234 (BITS . 15))         (PLPAGE 235 (BITS . 15))         (PLPAGE 236 (BITS . 15))         (PLPAGE 237 (BITS . 15))         (PLPAGE 238 (BITS . 15))         (PLPAGE 239 (BITS . 15))         (PLPAGE 240 (BITS . 15))         (PLPAGE 241 (BITS . 15))         (PLPAGE 242 (BITS . 15))         (PLPAGE 243 (BITS . 15))         (PLPAGE 244 (BITS . 15))         (PLPAGE 245 (BITS . 15))         (PLPAGE 246 (BITS . 15))         (PLPAGE 247 (BITS . 15))         (PLPAGE 248 (BITS . 15))         (PLPAGE 249 (BITS . 15))         (PLPAGE 250 (BITS . 15))         (PLPAGE 251 (BITS . 15))         (PLPAGE 252 (BITS . 15))         (PLPAGE 253 (BITS . 15))         (PLPAGE 254 (BITS . 15)))       '256)(/DECLAREDATATYPE 'PFLE '(SWAPPEDFIXP WORD WORD WORD)       '((PFLE 0 SWAPPEDFIXP)         (PFLE 2 (BITS . 15))         (PFLE 3 (BITS . 15))         (PFLE 4 (BITS . 15)))       '6))(DEFINEQ(\FLOPPY.TRANSLATEFLOPPYRESULT  [LAMBDA (FLOPPYRESULT)                                 (* kbr%: "23-Jul-84 01:08")    (SELECT (LOGAND FLOPPYRESULT R.WRITEERRORMASK)           (R.WRITEPROTECT 'WRITEPROTECT)           (SELECT (LOGAND FLOPPYRESULT R.READERRORMASK)                  (R.OK 'OK)                  (R.BUSY 'BUSY)                  (R.CRCERROR 'CRCERROR)                  (R.DATALOST 'DATALOST)                  (R.DOOROPENED 'DOOROPENED)                  (R.DOORISOPEN 'DOORISOPEN)                  (R.DOORISOPEN2 'DOORISOPEN)                  (R.NOTREADY 'NOTREADY)                  (R.RECALIBRATEERROR 'RECALIBRATERROR)                  (R.RECORDNOTFOUND 'RECORDNOTFOUND)                  (R.WRITEPROTECT 'WRITEPROTECT)                  'UNKNOWNERROR])(\FLOPPY.SEVERE.ERROR  [LAMBDA (MESSAGE)                                      (* kbr%: "22-Mar-86 18:09")                                                             (* FLOPPY just tried to do something                                                            that would have crashed lisp.                                                           *)    (PROG NIL          (ERROR "Floppy: Severe Error!" MESSAGE)          (COND             (\DOVEFLOPPY.TRACEFLG (STOPTEST])(\FLOPPY.TRANSLATEPMPAGEETYPE  [LAMBDA (PMPAGEETYPE)                                  (* kbr%: "23-Jul-84 01:08")    (SELECT PMPAGEETYPE (PMPAGEETYPE.FREE 'FREE)           (PMPAGEETYPE.FILE 'FILE)           (PMPAGEETYPE.PFILELIST 'PFILELIST)           (PMPAGEETYPE.BADSECTORS 'BADSECTORS)           '?])(\FLOPPY.TRANSLATEFILETYPE  [LAMBDA (FILETYPE)                                     (* kbr%: "23-Jul-84 01:08")    (SELECT FILETYPE (FILETYPE.FREE 'FREE)           (2048 'UNASSIGNED)           (2049 'DIRECTORY)           (2050 'ATVMSTRANSACTION)           (2051 'BACKSTOPLOG)           (FILETYPE.FILE 'FILE)           (2053 'CLEARINGHOUSEBACKUPFILE)           (FILETYPE.PFILELIST 'PFILELIST)           (2055 'BACKSTOPDEBUGGER)           (2066 'BACKSTOPDEBUGGEE)           '?])(\FLOPPY.MTL.FIXP  [LAMBDA (X)                                            (* kbr%: "23-Jul-84 01:08")                                                             (* Mesa FIXP to Lisp FIXP.                                                           *)    (ROT X 16 32])(\FLOPPY.LTM.FIXP  [LAMBDA (X)                                            (* kbr%: "23-Jul-84 01:08")                                                             (* Lisp FIXP to Mesa FIXP.                                                           *)    (ROT X 16 32])(\FLOPPY.MTL.IDATE  [LAMBDA (X)                                            (* kbr%: "23-Jul-84 01:08")                                                             (* Mesa IDATE to Lisp IDATE.                                                           *)    (LOGXOR -2147483648 X])(\FLOPPY.LTM.IDATE  [LAMBDA (X)                                            (* kbr%: "23-Jul-84 01:08")                                                             (* Lisp IDATE to Mesa IDATE.                                                           *)    (LOGXOR -2147483648 X]))(* ; "`HEAD' *")(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE (RPAQQ IBMS128 0)(RPAQQ IBMS256 1)(RPAQQ IBMS512 2)(RPAQQ IBMS1024 3)(RPAQQ IBMD128 4)(RPAQQ IBMD256 5)(RPAQQ IBMD512 6)(RPAQQ IBMD1024 7)(CONSTANTS (IBMS128 0)       (IBMS256 1)       (IBMS512 2)       (IBMS1024 3)       (IBMD128 4)       (IBMD256 5)       (IBMD512 6)       (IBMD1024 7))))(RPAQ? \FLOPPY.DEBUG NIL)(RPAQ? \FLOPPY.CYLINDERS 77)(RPAQ? \FLOPPY.TRACKSPERCYLINDER 2)(RPAQ? \FLOPPY.SECTORSPERTRACK 15)(RPAQ? \FLOPPYMPERRORS 0)(RPAQ? \FLOPPYMPERRORSFLG NIL)(RPAQ? \FLOPPY.MOUNTEDP.DOVETIME NIL)(RPAQ? \FLOPPY.MOUNTEDP.DOVEANSWER NIL)(DEFINEQ(\FLOPPY.TRANSLATESETUP  [LAMBDA (SETUP)                                        (* kbr%: "22-Jul-84 22:34")    (SELECT SETUP (IBMS128 'IBMS128)           (IBMS256 'IBMS256)           (IBMS512 'IBMS512)           (IBMS1024 'IBMS1024)           (IBMD128 'IBMD128)           (IBMD256 'IBMD256)           (IBMD512 'IBMD512)           (IBMD1024 'IBMD1024)           (SHOULDNT])(\FLOPPY.SETUP.IOCB  [LAMBDA (FLOPPYIOCB SETUP)                             (* ; "Edited 11-Jun-87 17:17 by jds")                                                             (* ;      "Change setup (i.e.  manufacturer, density, and sectorlength info) of FLOPPYIOCB to SETUP.  *")    (PROG (SECTORLENGTH DENSITY ENCODEDSECTORLENGTH SECTORSPERTRACK GAP3)          (SETQ SECTORLENGTH (\FLOPPY.SECTORLENGTH SETUP))          (SETQ DENSITY (\FLOPPY.DENSITY SETUP))          (SETQ ENCODEDSECTORLENGTH (\FLOPPY.ENCODEDSECTORLENGTH SETUP))          (SETQ SECTORSPERTRACK (\FLOPPY.SECTORSPERTRACK SETUP))          (SETQ GAP3 (\FLOPPY.GAP3 SETUP))               (* ;    "UNINTERRUPTABLY because mislaid FLOPPYIOCBs FLOPPYRESULT in 500 PMPAGE series hard crashes.  *")          (UNINTERRUPTABLY              (replace (FLOPPYIOCB SECTORLENGTHDIV2) of FLOPPYIOCB with (LRSH                                                                                          SECTORLENGTH                                                                                          1))              (replace (FLOPPYIOCB DENSITY) of FLOPPYIOCB with DENSITY)              (replace (FLOPPYIOCB TROYORIBM) of FLOPPYIOCB with IBM)              (replace (FLOPPYIOCB SECTORLENGTHDIV4) of FLOPPYIOCB with (LRSH                                                                                          SECTORLENGTH                                                                                          2))              (replace (FLOPPYIOCB ENCODEDSECTORLENGTH) of FLOPPYIOCB with                                                                                   ENCODEDSECTORLENGTH                     )              (replace (FLOPPYIOCB SECTORSPERTRACK) of FLOPPYIOCB with SECTORSPERTRACK)              (replace (FLOPPYIOCB GAP3) of FLOPPYIOCB with GAP3))          (RETURN FLOPPYIOCB])(\FLOPPY.CHECK.FLOPPYIOCB  [LAMBDA (FLOPPYIOCB)                                   (* kbr%: " 7-Aug-85 19:20")                                                             (* Check FLOPPYIOCB is legal--A                                                            better debugging tool than                                                            bletcherous flashing PMPAGE codes.                                                           *)    (PROG (SETUP)                                            (* Check command *)          (COND             ((OR (NOT (MEMB (fetch (FLOPPYIOCB COMMAND) of FLOPPYIOCB)                             (LIST C.NOP C.INITIALIZE C.RECALIBRATE C.READSECTOR C.WRITESECTOR                                    C.FORMATTRACK)))                  (NOT (IEQP (fetch (FLOPPYIOCB SUBCOMMAND) of FLOPPYIOCB)                             SC.NOP)))                       (* We're not supporting anything                                                            besides these. *)              (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Command")))                                                             (* Check diskaddress *)          (create DISKADDRESS                 CYLINDER _ (fetch (FLOPPYIOCB CYLINDER) of FLOPPYIOCB)                 HEAD _ (fetch (FLOPPYIOCB HEAD) of FLOPPYIOCB)                 SECTOR _ (fetch (FLOPPYIOCB SECTOR) of FLOPPYIOCB))                                                             (* Check buffer *)          (COND             ([NOT (OR (AND (fetch (FLOPPYIOCB BUFFER) of FLOPPYIOCB)                            (IEQP (fetch (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB)                                  1))                       (AND (NULL (fetch (FLOPPYIOCB BUFFER) of FLOPPYIOCB))                            (ZEROP (fetch (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB)))                       (AND (IEQP (fetch (FLOPPYIOCB COMMAND) of FLOPPYIOCB)                                  C.FORMATTRACK)                            (ILEQ (IPLUS (fetch (FLOPPYIOCB CYLINDER) of FLOPPYIOCB)                                         (fetch (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB))                                  \FLOPPY.CYLINDERS]              (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Buffer")))                                                             (* Check setup *)          (COND             ((OR (IEQP (fetch (FLOPPYIOCB TROYORIBM) of FLOPPYIOCB)                        TROY)                  (fetch (FLOPPYIOCB SAMEPAGE) of FLOPPYIOCB))                                                             (* We're not supporting these.                                                           *)              (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Setup 1")))          (SETQ SETUP (SELECTC (fetch (FLOPPYIOCB DENSITY) of FLOPPYIOCB)                          (SINGLE (SELECTC (fetch (FLOPPYIOCB ENCODEDSECTORLENGTH) of                                                                                            FLOPPYIOCB                                                  )                                      (B128 IBMS128)                                      (B256 IBMS256)                                      (B512 IBMS512)                                      (B1024 IBMS1024)                                      (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Setup 2")))                          (DOUBLE (SELECTC (fetch (FLOPPYIOCB ENCODEDSECTORLENGTH) of                                                                                            FLOPPYIOCB                                                  )                                      (B128 IBMD128)                                      (B256 IBMD256)                                      (B512 IBMD512)                                      (B1024 IBMD1024)                                      (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Setup 2")))                          (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Setup 2")))          (COND             ([OR (NOT (IEQP (fetch (FLOPPYIOCB SECTORLENGTHDIV2) of FLOPPYIOCB)                             (IQUOTIENT (\FLOPPY.SECTORLENGTH SETUP)                                    2)))                  (NOT (IEQP (fetch (FLOPPYIOCB SECTORLENGTHDIV4) of FLOPPYIOCB)                             (IQUOTIENT (\FLOPPY.SECTORLENGTH SETUP)                                    4)))                  (NOT (IEQP (fetch (FLOPPYIOCB SECTORSPERTRACK) of FLOPPYIOCB)                             (\FLOPPY.SECTORSPERTRACK SETUP)))                  (IGREATERP (fetch (FLOPPYIOCB SECTOR) of FLOPPYIOCB)                         (fetch (FLOPPYIOCB SECTORSPERTRACK) of FLOPPYIOCB))                  (NOT (IEQP (fetch (FLOPPYIOCB GAP3) of FLOPPYIOCB)                             (\FLOPPY.GAP3 SETUP]              (\FLOPPY.SEVERE.ERROR "Illegal FLOPPYIOCB Setup 3"])(\FLOPPY.DENSITY  [LAMBDA (SETUP)                                        (* ; "Edited 11-Jun-87 17:17 by jds")    (* ;; "zConvert from an encoded setup code to a density value:  0 for single, 8 for double.")    (SELECT SETUP ((IBMS128 IBMS256 IBMS512 IBMS1024)                   SINGLE)           ((IBMD128 IBMD256 IBMD512 IBMD1024)            DOUBLE)           (SHOULDNT])(\FLOPPY.SECTORLENGTH  [LAMBDA (SETUP)                                        (* kbr%: "22-Jul-84 22:34")    (SELECT SETUP ((IBMS128 IBMD128)                   128)           ((IBMS256 IBMD256)            256)           ((IBMS512 IBMD512)            512)           ((IBMS1024 IBMD1024)            1024)           (SHOULDNT])(\FLOPPY.ENCODEDSECTORLENGTH  [LAMBDA (SETUP)                                        (* kbr%: "22-Jul-84 22:34")    (SELECT SETUP ((IBMS128 IBMD128)                   B128)           ((IBMS256 IBMD256)            B256)           ((IBMS512 IBMD512)            B512)           ((IBMS1024 IBMD1024)            B1024)           (SHOULDNT])(\FLOPPY.GAP3  [LAMBDA (SETUP)                                        (* kbr%: "22-Jul-84 22:34")    (SELECT SETUP (IBMS128 27)           (IBMS256 42)           (IBMS512 58)           (IBMS1024 75)           (IBMD128 26)           (IBMD256 54)           (IBMD512 84)           (IBMD1024 116)           (SHOULDNT])(\FLOPPY.SECTORSPERTRACK  [LAMBDA (SETUP)                                        (* kbr%: "22-Jul-84 22:34")    (SELECT SETUP (IBMS128 26)           (IBMS256 15)           (IBMS512 8)           (IBMS1024 4)           (IBMD128 36)           (IBMD256 26)           (IBMD512 15)           (IBMD1024 8)           (SHOULDNT])(\FLOPPY.RUN  [LAMBDA (FLOPPYIOCB NOERROR)                           (* kbr%: "11-Oct-85 15:21")                                                             (* Returns T if command successfully                                                            completed. *)    (PROG (RETRYFLG)      RETRY          (RESETLST              (RESETSAVE (\FLOPPY.LOCK.BUFFER FLOPPYIOCB)                     (LIST (FUNCTION \FLOPPY.UNLOCK.BUFFER)                           FLOPPYIOCB))                      (* IOP acts when it sees nonzero                                                            NEXT field of CSB.                                                           *)              (while (NOT (ZEROP (fetch (IOPAGE DLFLOPPYCMD) of \IOPAGE)))                 do                                      (* Since we're monitor locked, this                                                            particular loop shouldnt be                                                            necessary. *)                       (BLOCK))              (UNINTERRUPTABLY                  (\BLT \FLOPPYIOCB FLOPPYIOCB FLOPPYIOCB.SIZE)                  (replace (IOPAGE DLFLOPPYCMD) of \IOPAGE with \FLOPPYIOCBADDR))              (while (NOT (ZEROP (fetch (IOPAGE DLFLOPPYCMD) of \IOPAGE)))                 do (BLOCK)))          (COND             ((NOT (OR (fetch (FLOPPYRESULT ERROR) of \FLOPPYRESULT)                       (fetch (FLOPPYRESULT MPERROR) of \FLOPPYRESULT)))              (RETURN T))             ((fetch (FLOPPYRESULT DOOROPENED) of \FLOPPYRESULT)                                                             (* Note%: ERROR flag is on whenever                                                            DOOROPENED is on. *)                                                             (* Door opened. Always an error at                                                            this deep a level.                                                           (Otherwise user could switch                                                            floppies on stream.) *)              (\FLOPPY.ERROR)                            (* Abandon command.                                                           *)              (RETURN NIL))             [[AND (OR (fetch (FLOPPYRESULT RECORDNOTFOUND) of \FLOPPYRESULT)                       (fetch (FLOPPYRESULT RECALIBRATEERROR) of \FLOPPYRESULT))                   (NOT RETRYFLG)                   (NOT (MEMB (fetch (FLOPPYIOCB COMMAND) of FLOPPYIOCB)                              (LIST C.INITIALIZE C.RECALIBRATE C.NOP]                                                             (* Try one more time after                                                            initializing and recalibrating.                                                           *)              (\FLOPPY.INITIALIZE NOERROR)              (COND                 ((NOT (fetch (FLOPPYRESULT DOOROPENED) of \FLOPPYRESULT))                  (\FLOPPY.RECALIBRATE NOERROR]             [(fetch (FLOPPYRESULT MPERROR) of \FLOPPYRESULT)              (SETQ \FLOPPYMPERRORS (ADD1 \FLOPPYMPERRORS))         (* These should only be generated by still undiagnosed bugs living in IOP        assembly language code. Reissuing command seems to work.       *)              [COND                 (\FLOPPYMPERRORSFLG (\FLOPPY.BREAK (fetch (FLOPPYRESULT MPMESSAGE)                                                           of \FLOPPYRESULT]              (COND                 [RETRYFLG (COND                              (NOERROR (RETURN NIL))                              (T (\FLOPPY.BREAK (fetch (FLOPPYRESULT MPMESSAGE) of                                                                                         \FLOPPYRESULT                                                           ]                 ((FMEMB (fetch (FLOPPYRESULT MPERROR) of \FLOPPYRESULT)                         '(597 598))         (* These 597 and 598 pseudo mpcodes were installed by Mitch Lichtenberg to        avoid FLOPPY sometimes crashing the Dandelion with MPC 1108, espesicially when        RS232 is also running. See AR291. Supposedly helps to wait 1 or 2 seconds after        this kind of spurious error. *)                  (BLOCK 2000]             [(fetch (FLOPPYRESULT CRCERROR) of \FLOPPYRESULT)                                                             (* Cyclic Redundancy Check.                                                           Reissuing command seems to work.                                                           *)              (COND                 (RETRYFLG (COND                              (NOERROR (RETURN NIL))                              (T (\FLOPPY.BREAK 'CRCERROR]             (NOERROR                                        (* Abandon command.                                                           Calling routine will handle                                                           (or ignore) error.                                                           *)                    (RETURN NIL))             (T                                              (* Hit the user with the bad news.                                                           *)                (\FLOPPY.ERROR)))          (SETQ RETRYFLG T)          (GO RETRY])(\FLOPPY.ERROR  [LAMBDA NIL                                            (* ; "Edited 28-Oct-87 14:53 by jds")    (* ;; "Indicate to the user that an error happened in the FLOPPY drive or driver code.")    (PROG ($FLOPPYRESULT)          (SETQ $FLOPPYRESULT (\FLOPPY.TRANSLATEFLOPPYRESULT (fetch (FLOPPYRESULT WORD)                                                                    of \FLOPPYRESULT)))          [COND             ((EQ $FLOPPYRESULT 'DOOROPENED)              (* ;;             "Floppy drive door solenoids will lock drive door in place after a DOOROPENED error.")              (* ;; "DISKCHANGECLEAR done before break to unlock the door and allow user to remedy if no floppy present.")              (\FLOPPY.CLOSE)              (\FLOPPY.INITIALIZE)              (COND                 ((NOT (fetch (FLOPPYRESULT DOOROPENED) of \FLOPPYRESULT))                  (\FLOPPY.RECALIBRATE]          (\FLOPPY.INITIALIZE)          (\FLOPPY.BREAK $FLOPPYRESULT)          (COND             ((MEMB $FLOPPYRESULT '(DOOROPENED DOORISOPEN))              (\FLOPPY.CLOSE)))                          (* ;                          "INITIALIZE again, since user may open floppy drive door during break.  *")          (\FLOPPY.INITIALIZE)          (COND             ((NOT (fetch (FLOPPYRESULT DOOROPENED) of \FLOPPYRESULT))              (\FLOPPY.RECALIBRATE])(\FLOPPY.LOCK.BUFFER  [LAMBDA (FLOPPYIOCB)                                   (* ; "Edited 11-Jun-87 11:09 by jds")    (* ;; "Lock floppy buffer down.")    (PROG (BUFFER COUNT)     (* ;; "NOTE: This routine insures each floppy buffer page has been referenced before being sent to the IOP.  If the IOP sees a CP page hasn't been referenced, the IOP forces a fatal 510 crash.  *")          (COND             ((MEMB (fetch (FLOPPYIOCB COMMAND) of FLOPPYIOCB)                    (LIST C.READSECTOR C.WRITESECTOR))              (SETQ BUFFER (fetch (FLOPPYIOCB BUFFER) of FLOPPYIOCB))              (SETQ COUNT (fetch (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB))              (\TEMPLOCKPAGES BUFFER COUNT)                  (* ; "Lock the buffer")              (* ;; "Fatal 510 error possible without this loop:")              (for J from 0 to (SUB1 COUNT) do                                                               (* ;;                                                            "Force a reference to each buffer page.")                                                              (\PUTBASE BUFFER (ITIMES 256 J)                                                                     (\GETBASE BUFFER                                                                            (ITIMES 256 J])(\FLOPPY.UNLOCK.BUFFER  [LAMBDA (FLOPPYIOCB)                                   (* ; "Edited 11-Jun-87 11:10 by jds")    (* ;; "Unlock floppy buffer.")    (PROG (BUFFER COUNT)          (COND             ((MEMB (fetch (FLOPPYIOCB COMMAND) of FLOPPYIOCB)                    (LIST C.READSECTOR C.WRITESECTOR))              (SETQ BUFFER (fetch (FLOPPYIOCB BUFFER) of FLOPPYIOCB))              (SETQ COUNT (fetch (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB))              (\TEMPUNLOCKPAGES BUFFER COUNT])(\FLOPPY.PREPAREFORCRASH  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")    (PROG NIL         (* Prepare for the worst by duMPing all pertinent records to screen before        doing \FLOPPY.RUN in case we crash *)          (\FLOPPY.DEBUGBLOCKS)          (SAVEVM)          (COND             ([NOT (MEMBER (PROMPTFORWORD "Proceed?" NIL NIL PROMPTWINDOW)                          '(NIL "y" "Y" "yes" "YES"]              (RESET])(\FLOPPY.COMMAND  [LAMBDA (FLOPPYIOCB COMMAND SUBCOMMAND NOERROR)        (* kbr%: "22-Jul-84 22:34")    (PROG (DISKADDRESS)          (SETQ DISKADDRESS (CONSTANT (create DISKADDRESS                                             CYLINDER _ 0                                             HEAD _ 0                                             SECTOR _ 1)))          (UNINTERRUPTABLY              (replace (FLOPPYIOCB COMMAND) of FLOPPYIOCB with COMMAND)              (replace (FLOPPYIOCB SUBCOMMAND) of FLOPPYIOCB with SUBCOMMAND)              (replace (FLOPPYIOCB DISKADDRESS) of FLOPPYIOCB with DISKADDRESS)              (replace (FLOPPYIOCB BUFFER) of FLOPPYIOCB with NIL)              (replace (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB with 0))          (RETURN (\FLOPPY.RUN FLOPPYIOCB NOERROR])(\FLOPPY.INITIALIZE  [LAMBDA (NOERROR)                                      (* ; "Edited 11-Jun-87 17:03 by jds")    (* ;; "Initialize a floppy--recalibrate the heads and clear any %"door opened%" bit.")    (SELECTQ (MACHINETYPE)        (DANDELION (GLOBALRESOURCE \FLOPPY.SCRATCH.FLOPPYIOCB (\FLOPPY.COMMAND                                                                      \FLOPPY.SCRATCH.FLOPPYIOCB                                                                      C.INITIALIZE SC.NOP NOERROR)                          (* ;; "DISKCHANGECLEAR is needed for KIKU machine.  KIKU's INITIALIZE doesn't clear DOOROPENED flag in \FLOPPYRESULT and IOP will not proceed until it is cleared.  *")                          (\FLOPPY.COMMAND \FLOPPY.SCRATCH.FLOPPYIOCB C.ESCAPE SC.DISKCHANGECLEAR                                 NOERROR)))        (DOVE (\DOVEFLOPPY.RESET))        NIL])(\FLOPPY.NOP  [LAMBDA (NOERROR)                                      (* kbr%: "22-Jul-84 22:34")    (GLOBALRESOURCE \FLOPPY.SCRATCH.FLOPPYIOCB (\FLOPPY.COMMAND \FLOPPY.SCRATCH.FLOPPYIOCB C.NOP                                                      SC.NOP NOERROR])(\FLOPPY.RECALIBRATE  [LAMBDA (NOERROR)                                      (* kbr%: " 5-Oct-85 20:09")    (SELECTQ (MACHINETYPE)        (DANDELION (GLOBALRESOURCE \FLOPPY.SCRATCH.FLOPPYIOCB (\FLOPPY.COMMAND                                                                      \FLOPPY.SCRATCH.FLOPPYIOCB                                                                      C.RECALIBRATE SC.NOP NOERROR)))        (DOVE T)        NIL])(\FLOPPY.RECOVER  [LAMBDA (NOERROR)                                      (* kbr%: "22-Jul-84 22:34")    (GLOBALRESOURCE \FLOPPY.SCRATCH.FLOPPYIOCB (\FLOPPY.COMMAND \FLOPPY.SCRATCH.FLOPPYIOCB                                                       C.ESCAPE SC.DISKCHANGECLEAR NOERROR])(\FLOPPY.TRANSFER  [LAMBDA (FLOPPYIOCB COMMAND DISKADDRESS PAGE NOERROR)  (* kbr%: "17-Apr-86 18:41")    (PROG (MESSAGE ANSWER)          (SETQ ANSWER (SELECTQ (MACHINETYPE)                           (DANDELION (SETQ COMMAND (SELECTQ COMMAND                                                        (READ C.READSECTOR)                                                        (WRITE C.WRITESECTOR)                                                        (SHOULDNT)))                                      (UNINTERRUPTABLY                                          (replace (FLOPPYIOCB COMMAND) of FLOPPYIOCB                                             with COMMAND)                                          (replace (FLOPPYIOCB SUBCOMMAND) of FLOPPYIOCB                                             with SC.NOP)                                          (replace (FLOPPYIOCB DISKADDRESS) of FLOPPYIOCB                                             with DISKADDRESS)                                          (replace (FLOPPYIOCB BUFFER) of FLOPPYIOCB                                             with PAGE)                                          (replace (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB                                             with 1))                                      (COND                                         ((\FLOPPY.RUN FLOPPYIOCB NOERROR)                                                             (* Successful coMPletion.                                                           *)                                          PAGE)))                           (DOVE (SETQ COMMAND (SELECTQ COMMAND                                                   (READ 'READDATA)                                                   (WRITE 'WRITEDATA)                                                   (SHOULDNT)))                                 (\DOVEFLOPPY.SETCONTEXT (fetch (FLOPPYIOCB $DENSITY)                                                            of FLOPPYIOCB)                                        (fetch (FLOPPYIOCB $ENCODEDSECTORLENGTH) of                                                                                            FLOPPYIOCB                                               ))                                 (COND                                    ((EQ COMMAND 'WRITEDATA)         (* kbr%: "24-Mar-86 01:36" We're going to write a sector on DOVE floppy, but it        turns out that DOVE floppy drive heads vibrate when they move and 1 in 5000        times you smash your floppy if you try to move and write with the same        operation. We get around this problem by first doing our move during a read        operation, which is safe since we are not modifying floppy during a read.       After completing the read we do a DISMISS to pass a little time between the        read/move and the coming write. I tried running without the DISMISS and do        still find occasional long sequences of MISSINGADDRESSMARKs or DATAERRORs in        the error log in TRACEWINDOW I get with \DOVEFLOPPY.TRACEFLG = T.       After 10 hours of filebanging operations, one of the long sequences finally got        long enough to break FLOPPY. I have not tested yet whether the DISMISS does any        good, but I don't think it can hurt. (WHAT A MESS!) *)         (* kbr%: "17-Apr-86 18:38" Message from PURVES.OSBUNORTH AND        MCQUILKIN.OSBUNORTH recomends 40 ms settling time for DOVE floppy drive head        before writing. Therefore (DISMISS 20) changed to       (DISMISS 40) Pray this works. *)                                     (GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER2                                            (\DOVEFLOPPY.XFERDISK (fetch (DISKADDRESS CYLINDER)                                                                     of DISKADDRESS)                                                   (fetch (DISKADDRESS HEAD) of DISKADDRESS)                                                   (fetch (DISKADDRESS SECTOR) of DISKADDRESS                                                          )                                                   \FLOPPY.SCRATCH.BUFFER2                                                   'READDATA))                                     (DISMISS 40)))                                 (SETQ MESSAGE (\DOVEFLOPPY.XFERDISK (fetch (DISKADDRESS CYLINDER                                                                                       ) of                                                                                         DISKADDRESS)                                                      (fetch (DISKADDRESS HEAD) of                                                                                           DISKADDRESS                                                             )                                                      (fetch (DISKADDRESS SECTOR) of                                                                                           DISKADDRESS                                                             )                                                      PAGE COMMAND))                                 (COND                                    ((EQ MESSAGE 'OK)                                     PAGE)                                    ((NOT NOERROR)                                     (\FLOPPY.BREAK MESSAGE))))                           NIL))          (RETURN ANSWER])(\FLOPPY.READSECTOR  [LAMBDA (FLOPPYIOCB DISKADDRESS PAGE NOERROR)          (* kbr%: " 7-Aug-85 20:42")    (\FLOPPY.TRANSFER FLOPPYIOCB 'READ DISKADDRESS PAGE NOERROR])(\FLOPPY.WRITESECTOR  [LAMBDA (FLOPPYIOCB DISKADDRESS PAGE NOERROR)          (* kbr%: " 7-Aug-85 20:42")    (\FLOPPY.TRANSFER FLOPPYIOCB 'WRITE DISKADDRESS PAGE NOERROR])(\FLOPPY.FORMATTRACKS  [LAMBDA (FLOPPYIOCB DISKADDRESS KOUNT NOERROR)         (* ; "Edited 11-Jun-87 14:41 by jds")    (PROG (ANSWER MESSAGE)          (SETQ ANSWER (SELECTQ (MACHINETYPE)                           (DANDELION (UNINTERRUPTABLY                                          (replace (FLOPPYIOCB COMMAND) of FLOPPYIOCB                                             with C.FORMATTRACK)                                          (replace (FLOPPYIOCB SUBCOMMAND) of FLOPPYIOCB                                             with SC.NOP)                                          (replace (FLOPPYIOCB DISKADDRESS) of FLOPPYIOCB                                             with DISKADDRESS)                                          (replace (FLOPPYIOCB BUFFER) of FLOPPYIOCB                                             with NIL)                                          (replace (FLOPPYIOCB SECTORCOUNT) of FLOPPYIOCB                                             with KOUNT))                                      (\FLOPPY.RUN FLOPPYIOCB NOERROR))                           ((DOVE DAYBREAK)                                 (\DOVEFLOPPY.SETCONTEXT (fetch (FLOPPYIOCB $DENSITY) of                                                                                         FLOPPYIOCB)                                       (fetch (FLOPPYIOCB $ENCODEDSECTORLENGTH) of FLOPPYIOCB                                              ))                                (for I from 0 to (SUB1 KOUNT)                                   do (SETQ MESSAGE (\DOVEFLOPPY.XFERDISK                                                         (IPLUS (fetch (DISKADDRESS CYLINDER)                                                                   of DISKADDRESS)                                                                I)                                                         (fetch (DISKADDRESS HEAD) of                                                                                           DISKADDRESS                                                                )                                                         (fetch (DISKADDRESS SECTOR) of                                                                                         DISKADDRESS)                                                         \FLOPPY.SCRATCH.BUFFER                                                         'FORMATTRACK))                                         (COND                                            ((EQ MESSAGE 'OK)                                             T)                                            ((NOT NOERROR)                                             (\FLOPPY.BREAK MESSAGE))                                            (T (RETURN NIL))) finally (RETURN T)))                           NIL))          (RETURN ANSWER])(\FLOPPY.DISKCHANGECLEAR  [LAMBDA (NOERROR)                                      (* kbr%: "25-Apr-85 14:52")    (GLOBALRESOURCE \FLOPPY.SCRATCH.FLOPPYIOCB (\FLOPPY.COMMAND \FLOPPY.SCRATCH.FLOPPYIOCB                                                       C.ESCAPE SC.DISKCHANGECLEAR NOERROR])(\FLOPPY.MOUNTEDP  [LAMBDA (NOERROR)                                      (* ; "Edited 11-Jun-87 16:57 by jds")    (* ;;   "Floppy drive contains floppy, door is shut, door stable since last \FLOPPY.INITIALIZE?  *")    (PROG (ANSWER)     (* ;; "There is apparently no way to test these facts independently.  Also, if DOOROPENED bit was set in the past & floppy is now mounted, this routine treats this as unmounted.  Some recovery routine must do a \FLOPPY.INITIALIZE as one of its actions to clear this bit.  *")          (SETQ ANSWER (SELECTQ (MACHINETYPE)                           (DANDELION (UNINTERRUPTABLY                                          (\FLOPPY.NOP T)                                          (NOT (fetch (FLOPPYRESULT DOOROPENED) of                                                                                         \FLOPPYRESULT                                                      ))))                           (DOVE                             (* ;                                  "MORE UGLY CRUFT TO GET AROUND DOVE DOOROPEN BITS NOT WORKING.  *")                                 (COND                                    ((\DEVICE-OPEN-STREAMS \FLOPPYFDEV)                                                             (* ;      "If the user has streams open on {FLOPPY} then the user probably hasn't switched floppies.  *")                                     T)                                    ((AND (NOT (STKPOS 'FLOPPY.FORMAT))                                          (EQ (WITH.MONITOR \FLOPPYLOCK                                                  (\DOVEFLOPPY.TRANSFER 20 0 1 \FLOPPY.SCRATCH.BUFFER                                                         'READDATA))                                              'TIMEOUT))                                 (* ;; "Notice that we obtain \FLOPPYLOCK before doing timeing.  Since TIMEOUT can happen if floppy is not formatted properly, just say T if we're underneath FLOPPY.FORMAT.  *")                                     NIL)                                    (T T)))                           NIL))          (COND             ((OR NOERROR ANSWER)              (RETURN ANSWER)))          (\FLOPPY.BREAK "Door open(ed) or disk missing"])(\FLOPPY.CAN.READP  [LAMBDA (NOERROR)                                      (* edited%: "23-Jul-84 15:33")    (AND (\FLOPPY.EXISTSP NOERROR)         (\FLOPPY.MOUNTEDP NOERROR])(\FLOPPY.CAN.WRITEP  [LAMBDA (NOERROR)                                      (* edited%: "23-Jul-84 15:33")    (AND (\FLOPPY.EXISTSP NOERROR)         (\FLOPPY.MOUNTEDP NOERROR)         (\FLOPPY.WRITEABLEP NOERROR])(\FLOPPY.WRITEABLEP  [LAMBDA (NOERROR)                                      (* kbr%: " 7-Aug-85 20:17")                                                             (* Floppy is write protected *)    (PROG (ANSWER)                                           (* This routine assumes floppy                                                            hardware exists. *)          (SETQ ANSWER (SELECTQ (MACHINETYPE)                           (DANDELION (UNINTERRUPTABLY                                          (\FLOPPY.NOP T)                                          (NOT (OR (fetch (FLOPPYRESULT DOOROPENED) of                                                                                         \FLOPPYRESULT                                                          )                                                   (fetch (FLOPPYRESULT WRITEPROTECT)                                                      of \FLOPPYRESULT)))))                           ((DOVE DAYBREAK)                                 (NOT (\DOVEFLOPPY.WRITEPROTECTED)))                           NIL))          (COND             ((OR NOERROR ANSWER)              (RETURN ANSWER)))          (\FLOPPY.BREAK "Write protected"])(\FLOPPY.TWOSIDEDP  [LAMBDA (NOERROR)                                      (* kbr%: " 7-Aug-85 20:27")                                                             (* Floppy drive contains floppy,                                                            door is shut, door stable since last                                                            \FLOPPY.INITIALIZE? *)    (PROG (ANSWER)          (SETQ ANSWER (SELECTQ (MACHINETYPE)                           (DANDELION (UNINTERRUPTABLY                                          (\FLOPPY.NOP T)                                          (NOT (fetch (FLOPPYRESULT TWOSIDED) of                                                                                         \FLOPPYRESULT                                                      ))))                           ((DOVE DAYBREAK)                                 T)                           NIL))          (COND             ((OR NOERROR ANSWER)              (RETURN ANSWER)))          (\FLOPPY.BREAK "Not a two sided floppy"])(\FLOPPY.DUMP  [LAMBDA (DISKADDRESS MODE)                             (* kbr%: "22-Jul-84 22:34")    (PROG (STRING PAGE)          [SETQ PAGE (\FLOPPY.READSECTOR \FLOPPY.SCRATCH.FLOPPYIOCB DISKADDRESS                            (NCREATE 'VMEMPAGEP]          (SETQ STRING (create STRINGP                              BASE _ PAGE                              LENGTH _ (fetch (FLOPPYIOCB $ENCODEDSECTORLENGTH) of                                                                                           \FLOPPYIOCB                                              )))          (SELECTQ MODE              (ASCII (SETQ STRING (ASCIITOASCII STRING)))              (EBCDIC (SETQ STRING (EBCDICTOASCII STRING)))                                                             (* STRING ok the way it is.                                                           *))          (RETURN STRING])(\FLOPPY.DEBUG  [LAMBDA NIL                                            (* kbr%: " 7-Aug-85 19:36")    (PROG NIL          (CLOSEINSPECT)          (SELECTQ (MACHINETYPE)              (DANDELION (WINDOWPROP (INSPECT \FLOPPYIOCB 'FLOPPYIOCB                                            (create POSITION                                                   XCOORD _ 20                                                   YCOORD _ 70))                                'TITLE                                '\FLOPPYIOCB)                         (WINDOWPROP (INSPECT \FLOPPYRESULT 'FLOPPYRESULT                                            (create POSITION                                                   XCOORD _ 290                                                   YCOORD _ 70))                                'TITLE                                '\FLOPPYRESULT))              ((DOVE DAYBREAK)                    NIL)              NIL]))(* ; "`COMMON' *")(RPAQ? \FLOPPYFDEV NIL)(RPAQ? \FLOPPYLOCK NIL)(RPAQ? \FLOPPY.SCRATCH.BUFFER NIL)(RPAQ? \FLOPPY.SCRATCH.BUFFER2 NIL)(RPAQ? \FLOPPY.SCRATCH.FLOPPYIOCB NIL)(RPAQ? \FLOPPY.IBMS128.FLOPPYIOCB NIL)(RPAQ? \FLOPPY.IBMD256.FLOPPYIOCB NIL)(RPAQ? \FLOPPY.IBMD512.FLOPPYIOCB NIL)(RPAQ? \FLOPPYIOCBADDR NIL)(RPAQ? \FLOPPYIOCB NIL)(RPAQ? \FLOPPYRESULT NIL)(DECLARE%: DONTCOPY (DECLARE%: EVAL@COMPILE [PUTDEF '\FLOPPY.SCRATCH.FLOPPYIOCB 'RESOURCES '(NEW (create FLOPPYIOCB][PUTDEF '\FLOPPY.IBMS128.FLOPPYIOCB 'RESOURCES '(NEW (\FLOPPY.SETUP.IOCB (create FLOPPYIOCB)                                                            IBMS128][PUTDEF '\FLOPPY.IBMD256.FLOPPYIOCB 'RESOURCES '(NEW (\FLOPPY.SETUP.IOCB (create FLOPPYIOCB)                                                            IBMD256][PUTDEF '\FLOPPY.IBMD512.FLOPPYIOCB 'RESOURCES '(NEW (\FLOPPY.SETUP.IOCB (create FLOPPYIOCB)                                                            IBMD512][PUTDEF '\FLOPPY.SCRATCH.BUFFER 'RESOURCES '(NEW (\FLOPPY.BUFFER 4][PUTDEF '\FLOPPY.SCRATCH.BUFFER2 'RESOURCES '(NEW (\FLOPPY.BUFFER 4]))(/SETTOPVAL '\\FLOPPY.SCRATCH.FLOPPYIOCB.GLOBALRESOURCE NIL)(/SETTOPVAL '\\FLOPPY.IBMS128.FLOPPYIOCB.GLOBALRESOURCE NIL)(/SETTOPVAL '\\FLOPPY.IBMD256.FLOPPYIOCB.GLOBALRESOURCE NIL)(/SETTOPVAL '\\FLOPPY.IBMD512.FLOPPYIOCB.GLOBALRESOURCE NIL)(/SETTOPVAL '\\FLOPPY.SCRATCH.BUFFER.GLOBALRESOURCE NIL)(/SETTOPVAL '\\FLOPPY.SCRATCH.BUFFER2.GLOBALRESOURCE NIL)(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(ACCESSFNS FLOPPYSTREAM ((PFALLOC (fetch (STREAM F1) of DATUM)                                    (replace (STREAM F1) of DATUM with NEWVALUE))                             (PLPAGE (fetch (STREAM F2) of DATUM)                                    (replace (STREAM F2) of DATUM with NEWVALUE))                             (CALLOC (fetch (STREAM F1) of DATUM)                                    (replace (STREAM F1) of DATUM with NEWVALUE))                             (FCBS (fetch (STREAM F2) of DATUM)                                   (replace (STREAM F2) of DATUM with NEWVALUE))))(RECORD FILEGENOBJ (NEXTFILEFN FILEINFOFN . GENFILESTATE))(RECORD GENFILESTATE (ALLOCS DEVICENAME CURRENTALLOC))))(DEFINEQ(FLOPPY.RESTART  [LAMBDA NIL                                            (* ; "Edited 11-Jun-87 17:12 by jds")                                                             (* ;                            "Initializes floppy code, setting globals and creating file devices.  *")    (SETQ \FLOPPYLOCK (CREATE.MONITORLOCK 'FLOPPY))    (WITH.MONITOR \FLOPPYLOCK        [PROG NIL              (SETQ \FLOPPY.SCRATCH.BUFFER (\FLOPPY.BUFFER 4))              (SETQ \FLOPPY.SCRATCH.BUFFER2 (\FLOPPY.BUFFER 4))              (COND                 (\FLOPPYFDEV (\FLOPPY.FLUSH)))              (SETQ \PFLOPPYFDEV NIL)              (SETQ \SFLOPPYFDEV NIL)              (SETQ \HFLOPPYFDEV NIL)              (SETQ \CFLOPPYFDEV NIL)              (FLOPPY.MODE 'PILOT)              (COND                 ((\FLOPPY.EXISTSP T)                  (\FLOPPY.SETUP.HARDWARE])])(FLOPPY.MODE  [LAMBDA (MODE)                                         (* ; "Edited 11-Jun-87 17:12 by jds")                                                             (* ;    "Set floppy MODE to one of PILOT HUGEPILOT, or SYSOUT.  Indicate current mode if MODE = NIL.  *")    (WITH.MONITOR \FLOPPYLOCK        (PROG (OLDMODE FDEV)          RETRY              (SETQ OLDMODE (SELECT \FLOPPYFDEV (NIL NIL)                                   (\PFLOPPYFDEV 'PILOT)                                   (\HFLOPPYFDEV 'HUGEPILOT)                                   (\SFLOPPYFDEV 'SYSOUT)                                   (\CFLOPPYFDEV 'CPM)                                   (PROGN                    (* ;                  "Shouldn't happen, but a SHOULDNT here would kill FLOPPY for good.  So ignore.  *")                                          NIL)))              (SELECTQ MODE                  (PILOT (COND                            ((NULL \PFLOPPYFDEV)                             (\PFLOPPY.INIT)))                         (SETQ FDEV \PFLOPPYFDEV))                  (HUGEPILOT (COND                                ((NULL \HFLOPPYFDEV)                                 (\HFLOPPY.INIT)))                             (SETQ FDEV \HFLOPPYFDEV))                  (SYSOUT (COND                             ((NULL \SFLOPPYFDEV)                              (\SFLOPPY.INIT)))                          (SETQ FDEV \SFLOPPYFDEV))                  (CPM (COND                          ((NULL \CFLOPPYFDEV)                           (\CFLOPPY.INIT)))                       (SETQ FDEV \CFLOPPYFDEV))                  (NIL                                       (* ; "No change *")                       (SETQ FDEV \FLOPPYFDEV))                  (PROGN (SETQ MODE (LISPERROR "ILLEGAL ARG" MODE))                         (GO RETRY)))              (COND                 ((AND \FLOPPYFDEV (NOT (EQ FDEV \FLOPPYFDEV)))                  (\FLOPPY.CLOSE)))              [COND                 (MODE (UNINTERRUPTABLY                           (\DEFINEDEVICE 'FLOPPY FDEV)                           (SETQ \FLOPPYFDEV FDEV))]              (RETURN OLDMODE)))])(\FLOPPY.SETUP.HARDWARE  [LAMBDA NIL                                            (* ; "Edited 11-Jun-87 17:17 by jds")    (PROG NIL          (SELECTQ (MACHINETYPE)              (DANDELION                                     (* ; "DANDELION & KIKU drives.  *")                         (* ;; "16 quad aligned words needed for FLOPPYIOCB in the first 64K.  Cannibalize last part of \IOCBPAGE located at real address 256 *")                         (SETQ \FLOPPYIOCBADDR (IPLUS 256 (IDIFFERENCE 256 16)))                         (SETQ \FLOPPYIOCB (\ADDBASE \IOCBPAGE (IDIFFERENCE 256 16)))                         (SETQ \FLOPPYRESULT (\ADDBASE \FLOPPYIOCB 8))                         (SETQ \FLOPPY.SCRATCH.FLOPPYIOCB (create FLOPPYIOCB))                         (SETQ \FLOPPY.IBMS128.FLOPPYIOCB (\FLOPPY.SETUP.IOCB (create                                                                                          FLOPPYIOCB)                                                                 IBMS128))                         (SETQ \FLOPPY.IBMD256.FLOPPYIOCB (\FLOPPY.SETUP.IOCB (create                                                                                          FLOPPYIOCB)                                                                 IBMD256))                         (SETQ \FLOPPY.IBMD512.FLOPPYIOCB (\FLOPPY.SETUP.IOCB (create                                                                                          FLOPPYIOCB)                                                                 IBMD512))                         (SETQ \FLOPPY.CYLINDERS 77)                         (SETQ \FLOPPY.TRACKSPERCYLINDER 2)                         (SETQ \FLOPPY.SECTORSPERTRACK 15)                         (SETQ \HFLOPPY.MAXPAGES 2250))              (DOVE                                          (* ;                                                            "DAYBREAK B1 low density drives.  *")                    (SETQ \FLOPPY.CYLINDERS 40)                    (SETQ \FLOPPY.TRACKSPERCYLINDER 2)                    (SETQ \FLOPPY.SECTORSPERTRACK 9)                    (SETQ \HFLOPPY.MAXPAGES 684))              (SHOULDNT))                                    (* ;       "PILOT FLOPPY data begins on cylinder 1 (after cylinder 0) and ends on the last cylinder.  *")          (SETQ \PFLOPPYFIRSTDATAPAGE (ADD1 (ITIMES \FLOPPY.TRACKSPERCYLINDER \FLOPPY.SECTORSPERTRACK                                                   )))          (SETQ \PFLOPPYLASTDATAPAGE (ITIMES \FLOPPY.CYLINDERS \FLOPPY.TRACKSPERCYLINDER                                             \FLOPPY.SECTORSPERTRACK])(\FLOPPY.EVENTFN  [LAMBDA (FDEV EVENT)                                   (* ; "Edited 20-Oct-87 12:12 by jds")    (PROG NIL          (COND             ((NOT (\FLOPPY.EXISTSP T))              (RETURN)))          (SELECTQ EVENT              ((AFTERLOGOUT AFTERSYSOUT AFTERMAKESYS AFTERSAVEVM)                    (\FLOPPY.CLOSE)                   (\FLOPPY.SETUP.HARDWARE)                   (\FLOPPY.INITIALIZE)                   (\PAGED.REVALIDATEFILELST FDEV))              (AFTERDOSAVEVM (\PAGED.REVALIDATEFILELST FDEV))              NIL])(\FLOPPY.HOSTNAMEP  [LAMBDA (NAME FDEV)                                    (* gbn " 2-Jun-85 16:18")                                                             (* NAME equals name of floppy FDEV?                                                            *)    (AND (type? FDEV FDEV)         (EQ NAME (fetch (FDEV DEVICENAME) of FDEV])(\FLOPPY.ADDDEVICENAME  [LAMBDA (FILENAME)                                     (* edited%: "23-Jul-84 15:33")                                                             (* Pack floppy FDEV name onto                                                            FILENAME. *)    (PACK* '{ (fetch (FDEV DEVICENAME) of \FLOPPYFDEV)           '} FILENAME])(\FLOPPY.ASSUREFILENAME  [LAMBDA (FILE NOERROR)                                 (* ; "Edited 12-Nov-87 20:27 by sye")                                                             (* Coerce FILE to a litatom                                                            FILENAME. *)    (PROG (UNAME FILENAME)      RETRY          (COND             ((type? STREAM FILE)              (SETQ FILENAME (fetch (STREAM FULLFILENAME) of FILE)))             (T (SETQ FILENAME FILE)))          (SETQ UNAME (NLSETQ (UNPACKFILENAME.STRING FILENAME)))          (COND             ((OR (NULL UNAME)                  (NULL (CAR UNAME)))              [COND                 (NOERROR (RETURN NIL))                 (T (SETQ FILE (LISPERROR "BAD FILE NAME" FILE]              (GO RETRY)))          (SETQ UNAME (CAR UNAME))          (LISTPUT UNAME 'HOST NIL)          (SETQ FILENAME (NLSETQ (PACKFILENAME UNAME)))          (COND             ([OR (NULL FILENAME)                  (EQ (CAR FILENAME)                      (CONSTANT (MKATOM ""]              [COND                 (NOERROR (RETURN NIL))                 (T (SETQ FILE (LISPERROR "BAD FILE NAME" FILE]              (GO RETRY)))          (SETQ FILENAME (CAR FILENAME))          (RETURN FILENAME])(\FLOPPY.OTHERINFO  [LAMBDA (OTHERINFO)                                    (* edited%: "23-Jul-84 15:33")                                                             (* Convert OPENFILE OTHERINFO into                                                            alist. *)    (for BUCKET in OTHERINFO collect (COND                                                    ((LISTP BUCKET)                                                     (COND                                                        ((LISTP (CDR BUCKET))                                                         (CONS (CAR BUCKET)                                                               (CADR BUCKET)))                                                        (T BUCKET)))                                                    (T (CONS BUCKET T])(\FLOPPY.LEXASSOC  [LAMBDA (KEY ALIST)                                    (* edited%: "23-Jul-84 15:33")                                                             (* ASSOC for sorted alist.                                                           *)    (for BUCKET in ALIST while (ALPHORDER KEY (CAR BUCKET))       when (EQ KEY (CAR BUCKET)) do (RETURN BUCKET])(\FLOPPY.LEXPUTASSOC  [LAMBDA (KEY VAL ALIST)                                (* ; "Edited 12-Nov-87 20:25 by sye")                                                             (* PUTASSOC for sorted alist.                                                           Returns alist. *)    (PROG (BUCKET)          (SETQ BUCKET (CAR ALIST))          (COND             ((NULL ALIST)              (SETQ ALIST (LIST (CONS KEY VAL)))              (RETURN ALIST))             ((EQUAL KEY (CAR BUCKET))              (RPLACD BUCKET VAL)              (RETURN ALIST))             ((ALPHORDER KEY (CAR BUCKET))              (push ALIST (CONS KEY VAL))              (RETURN ALIST)))          [for (TAIL _ ALIST) by (CDR TAIL) as BUCKET in (CDR ALIST)             while (CDR TAIL) do (COND                                            ((EQUAL KEY (CAR BUCKET))                                             (RPLACD BUCKET VAL)                                             (RETURN))                                            ((ALPHORDER KEY (CAR BUCKET))                                             (RPLACD TAIL (CONS (CONS KEY VAL)                                                                (CDR TAIL)))                                             (RETURN))) finally (RPLACD TAIL                                                                           (LIST (CONS KEY VAL]          (RETURN ALIST])(\FLOPPY.LEXREMOVEASSOC  [LAMBDA (KEY ALIST)                                    (* ; "Edited 12-Nov-87 20:25 by sye")                                                             (* Opposite of PUTASSOC for sorted                                                            alist. Returns alist.                                                           *)    (PROG (BUCKET)          (SETQ BUCKET (CAR ALIST))          [COND             ((NULL ALIST)              (RETURN ALIST))             ((EQUAL KEY (CAR BUCKET))              (RETURN (CDR ALIST]          [for (TAIL _ ALIST) by (CDR TAIL) as BUCKET in (CDR ALIST)             while (CDR TAIL) do (COND                                            ((EQUAL KEY (CAR BUCKET))                                             (RPLACD TAIL (CDDR TAIL))                                             (RETURN))                                            ((ALPHORDER KEY (CAR BUCKET))                                             (RETURN]          (RETURN ALIST])(\FLOPPY.CACHED.READ  [LAMBDA (NOERROR FORCE-DECACHE)                        (* ; "Edited 16-Oct-87 14:58 by jds")    (* ;; "Cause or make sure IOP is initialized, floppy is mounted, and (correct) directory is cached for coming read operations *")    (PROG (ANSWER)          (COND             ((OR FORCE-DECACHE (NOT (\FLOPPY.CAN.READP T)))                                                             (* ;                                           "Any cached info is no longer guaranteed to be correct *")              (\FLOPPY.CLOSE)))          (SETQ ANSWER (AND (\FLOPPY.UNCACHED.READ NOERROR)                            (\FLOPPY.OPEN NOERROR)))          (RETURN ANSWER])(\FLOPPY.CACHED.WRITE  [LAMBDA (NOERROR FORCE-DECACHE)                        (* ; "Edited 16-Oct-87 14:59 by jds")    (* ;; "Cause or make sure IOP is initialized, floppy is mounted, and (correct) directory is cached for coming write operations *")    (PROG (ANSWER)     (* ;; "In the following COND, we are only verifying that any existing cached info is still correct.  Therefore we do not need to use \FLOPPY.CAN.WRITEP here.  Write protection will be handled by \FLOPPY.UNCACHED.WRITE below.  *")          (COND             ((OR FORCE-DECACHE (NOT (\FLOPPY.CAN.READP T)))                                                             (* ;                                           "Any cached info is no longer guaranteed to be correct *")              (\FLOPPY.CLOSE)))          (SETQ ANSWER (AND (\FLOPPY.UNCACHED.WRITE NOERROR)                            (\FLOPPY.OPEN NOERROR)))          (RETURN ANSWER])(\FLOPPY.OPEN  [LAMBDA (NOERROR)                                      (* ; "Edited  4-Sep-87 19:40 by amd")    (SELECT \FLOPPYFDEV ((\PFLOPPYFDEV \HFLOPPYFDEV \SFLOPPYFDEV)                         (\PFLOPPY.OPEN NOERROR))           (\CFLOPPYFDEV                                     (* "Obsolete" (\CFLOPPY.OPEN NOERROR))                  )           (SHOULDNT])(\FLOPPY.CLOSE  [LAMBDA NIL                                            (* ; "Edited 11-Jun-87 16:58 by jds")    (* ;; "Forcibly close floppy. I.E., mark the floppy as unavailable.")    (PROG NIL                                                (* ;                       "TBW: This function will go away when a wrong floppy FDEV is implemented.  *")          (SELECT \FLOPPYFDEV (\PFLOPPYFDEV (replace (PFINFO OPEN) of \PFLOPPYINFO                                               with NIL))                 (\HFLOPPYFDEV (replace (PFINFO OPEN) of \HFLOPPYINFO with NIL)                        (replace (PFINFO OPEN) of \PFLOPPYINFO with NIL))                 (\SFLOPPYFDEV (replace (PFINFO OPEN) of \SFLOPPYINFO with NIL)                        (replace (PFINFO OPEN) of \PFLOPPYINFO with NIL))                 (\CFLOPPYFDEV (replace (CINFO OPEN) of \CFLOPPYINFO with NIL))                 NIL)          (\FLOPPY.FLUSH])(\FLOPPY.FLUSH  [LAMBDA NIL                                            (* hdj "30-Sep-86 15:29")                                                             (* ; "Forcibly flush streams.  *")    (PROG NIL                                                (* ;                       "TBW: This function will go away when a wrong floppy FDEV is implemented.  *")          (COND             ((FMEMB (FLOPPY.MODE)                     '(SYSOUT HUGEPILOT))              (RETURN)))          (for STREAM in (\DEVICE-OPEN-STREAMS \FLOPPYFDEV)             do (COND                       ([AND \DOVEFLOPPY.TRACEFLG (NOT (STKPOS 'FLOPPY.FORMAT]                        (STOPTEST)                        (BREAK1 NIL T)))                   (FDEVOP 'UNREGISTERFILE \FLOPPYFDEV \FLOPPYFDEV STREAM)                   (replace (STREAM STRMBINFN) of STREAM with '\STREAM.NOT.OPEN)                   (replace (STREAM STRMBOUTFN) of STREAM with '\STREAM.NOT.OPEN)                   (replace (STREAM ACCESS) of STREAM with NIL])(\FLOPPY.UNCACHED.READ  [LAMBDA (NOERROR)                                      (* kbr%: "19-Jul-85 19:29")                                                             (* Initialize IOP, then verify can                                                            read. Return T or NIL.                                                           *)    (PROG NIL          (COND             ((NOT (\FLOPPY.EXISTSP NOERROR))            (* Failed *)              (RETURN NIL)))          (COND             ((NOT (\FLOPPY.CAN.READP T))                (* DOOROPENED bit on, so must                                                            reinitialize IOP & recalibrate *)              (\FLOPPY.INITIALIZE NOERROR)              (COND                 ((NOT (\FLOPPY.CAN.READP NOERROR))      (* Failed *)                  (RETURN NIL)))              (\FLOPPY.RECALIBRATE NOERROR)))            (* Succeeded *)          (RETURN T])(\FLOPPY.UNCACHED.WRITE  [LAMBDA (NOERROR)                                      (* kbr%: " 5-Oct-85 23:52")                                                             (* Initialize IOP, then verify can                                                            write. Return T or NIL.                                                           *)    (PROG NIL          (COND             ((NOT (\FLOPPY.EXISTSP NOERROR))            (* Failed *)              (RETURN NIL)))          (COND             ((NOT (\FLOPPY.CAN.WRITEP T))               (* DOOROPENED bit on, so must                                                            reinitialize IOP & recalibrate *)              (\FLOPPY.INITIALIZE NOERROR)              (COND                 ((NOT (\FLOPPY.CAN.WRITEP NOERROR))     (* Failed *)                  (RETURN NIL)))              (\FLOPPY.RECALIBRATE NOERROR)))            (* Succeeded *)          (RETURN T])(\FLOPPY.EXISTSP  [LAMBDA (NOERROR)                                      (* ; "Edited 11-Jun-87 16:57 by jds")    (* ;; "Floppy drive hardware exists?")    (PROG NIL          (COND             ((FMEMB (MACHINETYPE)                     '(DANDELION DOVE))              (RETURN T))             ((NOT NOERROR)              (\FLOPPY.BREAK "No floppy drive on this machine"])(\FLOPPY.BREAK  [LAMBDA (MESSAGE)                                      (* ; "Edited 28-Oct-87 14:53 by jds")    (* ;;   "Cause a break for the floppy-disk user, giving MESSAGE, or some intelligible form of it.")    (PROG NIL          (\FLOPPY.MESSAGE MESSAGE T)          (COND             (\DOVEFLOPPY.TRACEFLG (STOPTEST)))          (LISPERROR "HARD DISK ERROR" '{FLOPPY} T])(\FLOPPY.MESSAGE  [LAMBDA (MESSAGE STREAM)                               (* ; "Edited 28-Oct-87 14:53 by jds")    (* ;; "Print the problem message for a floppy error.")    (COND       ((NULL STREAM)        (SETQ STREAM PROMPTWINDOW)))    (PROG NIL          (FRESHLINE STREAM)          (PRIN1 "Floppy: " STREAM)          (SELECTQ MESSAGE              (RECORDNOTFOUND                                (* ;                                             "Sector not found:  Bad floppy, or unformatted floppy.")                   (PRIN1 "Damaged or unformatted disk in drive." STREAM))              (PRIN1 MESSAGE STREAM])(\FLOPPY.BUFFER  [LAMBDA (N)                                            (* ; "Edited 11-Jun-87 17:11 by jds")    (* ;; "Allocates N pages worth of buffer.")    (\ALLOCBLOCK (ITIMES N CELLSPERPAGE)           NIL NIL CELLSPERPAGE]))(* ; "`PILOT' *")(RPAQ? \PFLOPPYPSECTOR9 NIL)(RPAQ? \PFLOPPYPFILELIST NIL)(RPAQ? \PFLOPPYINFO NIL)(RPAQ? \PFLOPPYFDEV NIL)(/DECLAREDATATYPE 'PFALLOC '(POINTER FULLXPOINTER POINTER POINTER POINTER POINTER POINTER FLAG FLAG)       '((PFALLOC 0 POINTER)         (PFALLOC 2 FULLXPOINTER)         (PFALLOC 4 POINTER)         (PFALLOC 6 POINTER)         (PFALLOC 8 POINTER)         (PFALLOC 10 POINTER)         (PFALLOC 12 POINTER)         (PFALLOC 12 (FLAGBITS . 0))         (PFALLOC 12 (FLAGBITS . 16)))       '14)(/DECLAREDATATYPE 'PFINFO '(POINTER POINTER POINTER POINTER POINTER)       '((PFINFO 0 POINTER)         (PFINFO 2 POINTER)         (PFINFO 4 POINTER)         (PFINFO 6 POINTER)         (PFINFO 8 POINTER))       '10)(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(DATATYPE PFALLOC (                       (* ;; "Pilot file allocation info?? ")                       FILENAME                              (* ; "Name of the file")                       (PREV FULLXPOINTER)                   (* ; "? previous file alloc info ?")                       NEXT                                  (* ; "? next file alloc info ?")                       START                                 (* ; "? start of file ?")                       PMPAGE                                (* ; "? marker page for this file ?")                       PLPAGE PFLE (WRITEFLG FLAG)           (* ; "? File has been written to ?")                       (DELETEFLG FLAG)                      (* ; "? File has been deleted ?")                       )                      [ACCESSFNS ((LENGTH (fetch (PMPAGE NLENGTH) of (fetch (PFALLOC                                                                                         PMPAGE)                                                                                of DATUM)))                                  (END (IPLUS (fetch (PFALLOC START) of DATUM)                                              (fetch (PFALLOC LENGTH) of DATUM)                                              -1))                                  (FILETYPE (fetch (PMPAGE NFILETYPE) of (fetch                                                                                  (PFALLOC PMPAGE)                                                                                    of DATUM])(DATATYPE PFINFO (OPEN PFILELIST PFALLOCS DIR PSECTOR9))(ACCESSFNS PFLOPPYFDEV [(OPEN (fetch (PFINFO OPEN) of (fetch (FDEV DEVICEINFO)                                                                     of DATUM))                                  (replace (PFINFO OPEN) of (fetch (FDEV DEVICEINFO)                                                                       of DATUM) with                                                                                            NEWVALUE))                            (PFILELIST (fetch (PFINFO PFILELIST) of (fetch (FDEV                                                                                            DEVICEINFO                                                                                             )                                                                               of DATUM))                                   (PROGN (replace (PFINFO PFILELIST) of (fetch                                                                                  (FDEV DEVICEINFO)                                                                                    of DATUM)                                             with NEWVALUE)                                          (SETQ \PFLOPPYPFILELIST NEWVALUE)))                            (PFALLOCS (fetch (PFINFO PFALLOCS) of (fetch (FDEV DEVICEINFO                                                                                           )                                                                             of DATUM))                                   (replace (PFINFO PFALLOCS) of (fetch (FDEV DEVICEINFO)                                                                            of DATUM)                                      with NEWVALUE))                            (DIR (fetch (PFINFO DIR) of (fetch (FDEV DEVICEINFO)                                                                   of DATUM))                                 (replace (PFINFO DIR) of (fetch (FDEV DEVICEINFO)                                                                     of DATUM) with NEWVALUE)                                 )                            (PSECTOR9 (fetch (PFINFO PSECTOR9) of (fetch (FDEV DEVICEINFO                                                                                           )                                                                             of DATUM))                                   (PROGN (replace (PFINFO PSECTOR9) of (fetch                                                                                 (FDEV DEVICEINFO)                                                                                   of DATUM)                                             with NEWVALUE)                                          (SETQ \PFLOPPYPSECTOR9 NEWVALUE]))(/DECLAREDATATYPE 'PFALLOC '(POINTER FULLXPOINTER POINTER POINTER POINTER POINTER POINTER FLAG FLAG)       '((PFALLOC 0 POINTER)         (PFALLOC 2 FULLXPOINTER)         (PFALLOC 4 POINTER)         (PFALLOC 6 POINTER)         (PFALLOC 8 POINTER)         (PFALLOC 10 POINTER)         (PFALLOC 12 POINTER)         (PFALLOC 12 (FLAGBITS . 0))         (PFALLOC 12 (FLAGBITS . 16)))       '14)(/DECLAREDATATYPE 'PFINFO '(POINTER POINTER POINTER POINTER POINTER)       '((PFINFO 0 POINTER)         (PFINFO 2 POINTER)         (PFINFO 4 POINTER)         (PFINFO 6 POINTER)         (PFINFO 8 POINTER))       '10))(DEFINEQ(\PFLOPPY.INIT  [LAMBDA NIL                                            (* ; "Edited 27-Oct-87 13:32 by jds")    (PROG NIL          (SETQ \PFLOPPYINFO (create PFINFO))          (SETQ \PFLOPPYFDEV (create FDEV                                    DEVICENAME _ 'FLOPPY                                    NODIRECTORIES _ T                                    CLOSEFILE _ (FUNCTION \PFLOPPY.CLOSEFILE)                                    DELETEFILE _ (FUNCTION \PFLOPPY.DELETEFILE)                                    DIRECTORYNAMEP _ (FUNCTION TRUE)                                    EVENTFN _ (FUNCTION \FLOPPY.EVENTFN)                                    GENERATEFILES _ (FUNCTION \PFLOPPY.GENERATEFILES)                                    GETFILEINFO _ (FUNCTION \PFLOPPY.GETFILEINFO)                                    GETFILENAME _ (FUNCTION \PFLOPPY.GETFILENAME)                                    HOSTNAMEP _ (FUNCTION \FLOPPY.HOSTNAMEP)                                    OPENFILE _ (FUNCTION \PFLOPPY.OPENFILE)                                    READPAGES _ (FUNCTION \PFLOPPY.READPAGES)                                    REOPENFILE _ (FUNCTION \PFLOPPY.OPENFILE)                                    SETFILEINFO _ (FUNCTION \PFLOPPY.SETFILEINFO)                                    TRUNCATEFILE _ (FUNCTION \PFLOPPY.TRUNCATEFILE)                                    WRITEPAGES _ (FUNCTION \PFLOPPY.WRITEPAGES)                                    DEVICEINFO _ \PFLOPPYINFO                                    RENAMEFILE _ (FUNCTION \PFLOPPY.RENAMEFILE)                                    OPENP _ (FUNCTION \GENERIC.OPENP)                                    REGISTERFILE _ (FUNCTION \ADD-OPEN-STREAM)                                    UNREGISTERFILE _ (FUNCTION \GENERIC-UNREGISTER-STREAM)))          (\MAKE.PMAP.DEVICE \PFLOPPYFDEV])(\PFLOPPY.OPEN  [LAMBDA (NOERROR)                                      (* ; "Edited 12-Aug-88 17:05 by rmk:")    (* ;; "Assume floppy mounted.  Cache directory info for floppy if not already cached.  Return T or NIL. ")    (PROG NIL          (COND             ((fetch (PFLOPPYFDEV OPEN) of \FLOPPYFDEV)                                                             (* ; "Already open *")              (RETURN T)))          (replace (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV with NIL)          (replace (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV with NIL)          (replace (PFLOPPYFDEV DIR) of \FLOPPYFDEV with NIL)          (replace (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV with NIL)          (RETURN (COND                     ((\PFLOPPY.OPEN.PSECTOR9 NOERROR)                      (\PFLOPPY.OPEN.PFILELIST)                      (replace (PFLOPPYFDEV OPEN) of \FLOPPYFDEV with T)                      T])(\PFLOPPY.OPEN.PSECTOR9  [LAMBDA (NOERROR)                                      (* ; "Edited 12-Aug-88 17:07 by rmk:")    (PROG (PSECTOR9)      RETRY          (SETQ PSECTOR9 (\PFLOPPY.GET.PSECTOR9))          (COND             (PSECTOR9 (replace (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV with PSECTOR9)                    (RETURN T))             (NOERROR (RETURN NIL))             (T (\FLOPPY.BREAK "Not a pilot floppy")                (GO RETRY])(\PFLOPPY.GET.PSECTOR9  [LAMBDA NIL                                            (* edited%: "23-Jul-84 15:34")                                                             (* Gets PSECTOR9 of a Pilot floppy.                                                           Returns NIL if not a Pilot floppy.                                                           *)    (PROG (PSECTOR9)                                         (* Read PSECTOR9. *)          (GLOBALRESOURCE \FLOPPY.IBMS128.FLOPPYIOCB                 (SETQ PSECTOR9 (\FLOPPY.READSECTOR \FLOPPY.IBMS128.FLOPPYIOCB                                       (create DISKADDRESS                                              CYLINDER _ 0                                              HEAD _ 0                                              SECTOR _ 9)                                       (NCREATE 'PSECTOR9)                                       T)))                  (* Return answer. *)          (COND             ((AND PSECTOR9 (fetch (PSECTOR9 INTACT) of PSECTOR9))              (RETURN PSECTOR9))             (T (RETURN NIL])(\PFLOPPY.OPEN.PFILELIST  [LAMBDA NIL                                            (* ; "Edited 27-Oct-87 13:24 by jds")    (PROG (PSECTOR9 PFILELIST FILENAME PMPAGE PLPAGE PFALLOC PFALLOCS)      RETRY          (SETQ PSECTOR9 (fetch (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV))          (SETQ PFILELIST (\PFLOPPY.CREATE.PFILELIST (fetch (PSECTOR9 PFILELISTLENGTH)                                                            of PSECTOR9)))          (replace (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV with PFILELIST)          (replace (PSECTOR9 NEXTUNUSEDFILEID) of PSECTOR9 with 1)          [for (START _ (ADD1 \PFLOPPYFIRSTDATAPAGE)) by (IPLUS START (fetch (PMPAGE                                                                                          NLENGTH)                                                                                 of PMPAGE)                                                                        1)             do (SETQ PMPAGE (NCREATE 'PMPAGE))                   (\PFLOPPY.READPAGENO (SUB1 START)                          PMPAGE)                   (COND                      ((NOT (fetch (PMPAGE INTACT) of PMPAGE))                       (\PFLOPPY.DAMAGED)                       (SETQ PFALLOCS NIL)                       (GO RETRY)))                   [COND                      ((EQ (fetch (PMPAGE NFILETYPE) of PMPAGE)                           FILETYPE.FILE)                       (SETQ PLPAGE (NCREATE 'PLPAGE))                       (\PFLOPPY.READPAGENO START PLPAGE)                       (COND                          ((NOT (fetch (PLPAGE INTACT) of PLPAGE))                           (\PFLOPPY.DAMAGED)                           (SETQ PFALLOCS NIL)                           (GO RETRY)))                       (SETQ FILENAME (fetch (PLPAGE $NAME) of PLPAGE)))                      (T (SETQ PLPAGE NIL)                         (SETQ FILENAME (LIST (fetch (PMPAGE $NFILETYPE) of PMPAGE]                   (SETQ PFALLOC                    (create PFALLOC                           FILENAME _ FILENAME                           START _ START                           PMPAGE _ PMPAGE                           PLPAGE _ PLPAGE))                   (COND                      ((NOT (EQ (fetch (PMPAGE NFILETYPE) of PMPAGE)                                FILETYPE.FREE))                       (\PFLOPPY.ADD.TO.PFILELIST PFALLOC)))                   (push PFALLOCS PFALLOC)                   (COND                      ((IEQP START (ADD1 \PFLOPPYLASTDATAPAGE))                       (RETURN]          (SETQ PFALLOCS (DREVERSE PFALLOCS))          (for PREV in PFALLOCS as NEXT in (CDR PFALLOCS) while NEXT             do (replace (PFALLOC NEXT) of PREV with NEXT)                   (replace (PFALLOC PREV) of NEXT with PREV))          (replace (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV with PFALLOCS)     (* ;; "We create the directory last because PACKFILENAME is brittle and it is nice to have the other info already filled in if you have to debug.  *")          (for PFALLOC in PFALLOCS when (EQ (fetch (PFALLOC FILETYPE) of PFALLOC)                                                        FILETYPE.FILE)             do (\PFLOPPY.DIR.PUT (fetch (PFALLOC FILENAME) of PFALLOC)                           'OLD PFALLOC])(\PFLOPPY.DAMAGED  [LAMBDA NIL                                            (* kbr%: " 2-Sep-85 16:37")                                                             (* Tell user floppy needs scavenging                                                            *)    (PROG NIL          (\FLOPPY.BREAK "Damaged floppy.  Needs scavenging."])(\PFLOPPY.OPENFILE  [LAMBDA (FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM)   (* ; "Edited 10-May-88 14:30 by jds")(* ;;; "Open a Pilot-floppy file.  If OLDSTREAM is provided, we're opening a continuation floppy for a large file.")    (* ;; "if file is open in conflicting way, barf")    (COND       ((AND (NOT OLDSTREAM)             (\FILE-CONFLICT (\RECOGNIZE-HACK FILE RECOG FDEV)                    ACCESS FDEV))        (* ;; "If there is a conflicting stream open on this file -- and we're not setting up a continuation floppy -- then return NIL.")        NIL)       ((\SFLOPPY.HACK FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM))       (T           (* ;; "Either there is no conflicting stream open on this file, or this is a continuation floppy for a big file.  Either way, create a stream and fill things in.  ")          (* ;; "")          (PROG (STREAM WAIT PFALLOC FULLFILENAME)                (SETQ OTHERINFO (\FLOPPY.OTHERINFO OTHERINFO))            RETRY                (COND                   ((AND (NOT OLDSTREAM)                         (\FILE-CONFLICT (\RECOGNIZE-HACK FILE RECOG FDEV)                                ACCESS FDEV))                    (* ;; "If there is a conflicting stream open on this file -- and we're not setting up a continuation floppy -- then return NIL.")                    NIL))           (* ;; "Get STREAM *")                (COND                   ([NULL (NLSETQ (SELECTQ ACCESS                                      (INPUT (\FLOPPY.CACHED.READ NIL (NULL (FETCH                                                                                 (PFLOPPYFDEV                                                                                         PFILELIST)                                                                                   of \FLOPPYFDEV                                                                                 ))))                                      (\FLOPPY.CACHED.WRITE NIL (NULL (FETCH (PFLOPPYFDEV                                                                                      PFILELIST)                                                                             of \FLOPPYFDEV]                    (LISPERROR "FILE WON'T OPEN" FILE)                    (GO RETRY)))                (COND                   ((NOT (type? STREAM FILE))                    (SETQ STREAM (\PFLOPPY.OPENFILE1 FILE RECOG OTHERINFO)))                   (T (SETQ STREAM FILE)))                (COND                   ((NULL STREAM)                            (* ;                                "FILE NOT FOUND error generated in \OPENFILE when we return NIL.  *")                    (RETURN NIL)))                           (* ; "Establish ACCESS rights.  *")                (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))                [COND                   ((NOT (EQ ACCESS 'INPUT))                    (* ;; "WRITEFLG indicates whether FILE is currently being written.  IPMPAGEossible for more than one stream to point to a file that is being written.  *")                    (SETQ WAIT (CDR (ASSOC 'WAIT OTHERINFO)))                    (COND                       (WAIT (while (\PFLOPPY.STREAMS.AGAINST STREAM) do (BLOCK))                             (replace (PFALLOC WRITEFLG) of PFALLOC with T))                       ((fetch (PFALLOC WRITEFLG) of PFALLOC)                        (SETQ FULLFILENAME (fetch (STREAM FULLFILENAME) of STREAM))                        (SETQ FILE (LISPERROR "FILE WON'T OPEN" FULLFILENAME T))                        (GO RETRY)))                         (* ;                                           "Use OTHERINFO to establish correct CREATIONDATE etc.  *")                    (for BUCKET in OTHERINFO do (\PFLOPPY.SETFILEINFO STREAM                                                                   (CAR BUCKET)                                                                   (CDR BUCKET]                (COND                   ((EQ ACCESS 'OUTPUT)                      (* ;                                                       "ACCESS = OUTPUT always starts ePMPAGEty.  *")                    (replace (STREAM EPAGE) of STREAM with 0)                    (replace (STREAM EOFFSET) of STREAM with 0)))                (RETURN STREAM])(\PFLOPPY.OPENFILE1  [LAMBDA (FILE RECOG OTHERINFO)                         (* ; "Edited 27-Oct-87 13:33 by jds")    (WITH.MONITOR \FLOPPYLOCK        (PROG (FILENAME EXTENSION PFALLOC PLPAGE IDATE STREAM)          RETRY                                                             (* ;                       "Case where old FILE is being opened for output or appending to be written *")              (SETQ FILENAME (\FLOPPY.ASSUREFILENAME FILE))              (SETQ PFALLOC (\PFLOPPY.DIR.GET FILENAME RECOG))              (SETQ STREAM (SELECTQ RECOG                               ((EXACT OLD/NEW)                                     (COND                                       ((NULL PFALLOC)                                        (\PFLOPPY.OPENNEWFILE FILENAME RECOG OTHERINFO))                                       (T (\PFLOPPY.OPENOLDFILE PFALLOC))))                               (NEW (COND                                       ((NULL PFALLOC)                                        (\PFLOPPY.OPENNEWFILE FILENAME RECOG OTHERINFO))))                               ((OLD OLDEST)                                     (\PFLOPPY.OPENOLDFILE PFALLOC))                               (SHOULDNT)))              (COND                 ((NULL STREAM)                  (SELECTQ RECOG                      ((NEW OLD/NEW)                            (SETQ FILENAME (LISPERROR "FILE WON'T OPEN" FILENAME T)))                      (PROGN                                 (* ;                           "'FILE NOT FOUND' error is generated in \OPENFILE by our returning NIL *")                             (RETURN NIL)))                  (GO RETRY)))              (RETURN STREAM)))])(\PFLOPPY.OPENOLDFILE  [LAMBDA (PFALLOC)                                      (* edited%: "23-Jul-84 15:34")    (PROG (PLPAGE STREAM)          (COND             ((NULL PFALLOC)                                 (* Error in calling function.                                                           *)              (RETURN NIL)))          (SETQ PLPAGE (fetch (PFALLOC PLPAGE) of PFALLOC))          (SETQ STREAM (create STREAM                              DEVICE _ \FLOPPYFDEV                              FULLFILENAME _ (\FLOPPY.ADDDEVICENAME (fetch (PFALLOC FILENAME)                                                                           of PFALLOC))                              EPAGE _ (IQUOTIENT (fetch (PLPAGE LENGTH) of PLPAGE)                                             512)                              EOFFSET _ (IREMAINDER (fetch (PLPAGE LENGTH) of PLPAGE)                                               512)))          (replace (FLOPPYSTREAM PFALLOC) of STREAM with PFALLOC)          (replace (FLOPPYSTREAM PLPAGE) of STREAM with PLPAGE)          (RETURN STREAM])(\PFLOPPY.OPENNEWFILE  [LAMBDA (FILENAME RECOG OTHERINFO)                     (* kbr%: "31-Dec-85 10:26")    (PROG (LENGTH PFALLOC PLPAGE IDATE STREAM)          (SETQ LENGTH (CDR (ASSOC 'LENGTH OTHERINFO)))          [COND             (LENGTH (SETQ LENGTH (ADD1 (IQUOTIENT (IPLUS LENGTH 511)                                               512]          (SETQ PFALLOC (\PFLOPPY.ALLOCATE LENGTH))          (\PFLOPPY.DIR.PUT FILENAME RECOG PFALLOC)      (* ICREATIONDATE defaults to                                                            IWRITEDATE. TBW%: Should put in                                                            check for length of FILENAME.                                                           *)          (SETQ IDATE (IDATE))          [SETQ PLPAGE (create PLPAGE                              ICREATIONDATE _ IDATE                              IWRITEDATE _ IDATE                              TYPE _ (CDR (ASSOC 'TYPE OTHERINFO]          (replace (PLPAGE $NAME) of PLPAGE with (fetch (PFALLOC FILENAME)                                                                of PFALLOC))          (replace (PFALLOC PLPAGE) of PFALLOC with PLPAGE)          (\PFLOPPY.ADD.TO.PFILELIST PFALLOC)            (* File is empty *)          (SETQ STREAM (create STREAM                              DEVICE _ \FLOPPYFDEV                              FULLFILENAME _ (\FLOPPY.ADDDEVICENAME (fetch (PFALLOC FILENAME)                                                                           of PFALLOC))                              EPAGE _ 0                              EOFFSET _ 0))          (replace (FLOPPYSTREAM PFALLOC) of STREAM with PFALLOC)          (replace (FLOPPYSTREAM PLPAGE) of STREAM with (fetch (PFALLOC PLPAGE)                                                                       of PFALLOC))          (RETURN STREAM])(\PFLOPPY.ASSURESTREAM  [LAMBDA (FILE)                                         (* edited%: "23-Jul-84 15:34")    (PROG (STREAM)      RETRY          (COND             ((type? STREAM FILE)              (RETURN FILE)))          (SETQ STREAM (\PFLOPPY.OPENFILE1 FILE 'OLD))          (COND             ((NULL STREAM)              (SETQ FILE (LISPERROR "FILE NOT FOUND" FILE))              (GO RETRY)))          (RETURN STREAM])(\PFLOPPY.GETFILEINFO  [LAMBDA (FILE ATTRIBUTE FDEV)                          (* edited%: "23-Jul-84 15:34")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PLPAGE ANSWER)              (\FLOPPY.CACHED.READ)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              [COND                 (STREAM (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))                        (SETQ ANSWER (\PFLOPPY.GETFILEINFO1 PFALLOC ATTRIBUTE]              (RETURN ANSWER)))])(\PFLOPPY.GETFILEINFO1  [LAMBDA (PFALLOC ATTRIBUTE)                            (* kbr%: "25-Nov-84 13:02")                                                             (* Used by \PFLOPPY.GETFILEINFO &                                                            \PFLOPPY.FILEINFOFN *)    (PROG (PLPAGE ANSWER)          (SETQ PLPAGE (fetch (PFALLOC PLPAGE) of PFALLOC))                                                             (* Wizard incantations%: PAGELENGTH,                                                            HUGEPAGESTART, HUGEPAGELENGTH,                                                            HUGELENGTH *)          (SETQ ANSWER (SELECTQ ATTRIBUTE                           (WRITEDATE (fetch (PLPAGE WRITEDATE) of PLPAGE))                           (CREATIONDATE (fetch (PLPAGE CREATIONDATE) of PLPAGE))                           (IWRITEDATE (fetch (PLPAGE IWRITEDATE) of PLPAGE))                           (ICREATIONDATE (fetch (PLPAGE ICREATIONDATE) of PLPAGE))                           (LENGTH (fetch (PLPAGE LENGTH) of PLPAGE))                           (TYPE (fetch (PLPAGE TYPE) of PLPAGE))                           (BYTESIZE 8)                           (MESATYPE (fetch (PLPAGE MESATYPE) of PLPAGE))                           (SIZE (fetch (PLPAGE PAGELENGTH) of PLPAGE))                           (HUGEPAGESTART (fetch (PLPAGE HUGEPAGESTART) of PLPAGE))                           (HUGEPAGELENGTH                                 (fetch (PLPAGE HUGEPAGELENGTH) of PLPAGE))                           (HUGELENGTH (fetch (PLPAGE HUGELENGTH) of PLPAGE))                           NIL))          (RETURN ANSWER])(\PFLOPPY.SETFILEINFO  [LAMBDA (FILE ATTRIBUTE VALUE)                         (* ; "Edited 27-Oct-87 13:35 by jds")    (* ;; "SETFILEINFO for the floppy device")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PLPAGE SUCCESSFUL)              (\FLOPPY.CACHED.WRITE)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              [COND                 (STREAM (SETQ PLPAGE (fetch (FLOPPYSTREAM PLPAGE) of STREAM))                        (SETQ SUCCESSFUL T)                        (SELECTQ ATTRIBUTE                            (WRITEDATE (replace (PLPAGE WRITEDATE) of PLPAGE with VALUE))                            (CREATIONDATE (replace (PLPAGE CREATIONDATE) of PLPAGE                                             with VALUE))                            (IWRITEDATE (replace (PLPAGE IWRITEDATE) of PLPAGE with                                                                                       VALUE))                            (ICREATIONDATE (replace (PLPAGE ICREATIONDATE) of PLPAGE                                              with VALUE))                            (LENGTH                          (* Treated specially by FILEIO.                                                           *))                            (TYPE (replace (PLPAGE TYPE) of PLPAGE with VALUE))                            (EOL (replace (STREAM EOLCONVENTION) of STREAM                                    with (SELECTQ VALUE                                                 (CR CR.EOLC)                                                 (CRLF CRLF.EOLC)                                                 (LF LF.EOLC)                                                 NIL)))                            (MESATYPE (replace (PLPAGE MESATYPE) of PLPAGE with VALUE))                            (PAGELENGTH (replace (PLPAGE PAGELENGTH) of PLPAGE with                                                                                       VALUE))                            (HUGEPAGESTART (replace (PLPAGE HUGEPAGESTART) of PLPAGE                                              with VALUE))                            (HUGEPAGELENGTH                                  (replace (PLPAGE HUGEPAGELENGTH) of PLPAGE with VALUE))                            (HUGELENGTH (replace (PLPAGE HUGELENGTH) of PLPAGE with                                                                                       VALUE))                            (SETQ SUCCESSFUL NIL))                        (COND                           ((OPENP STREAM)                   (* PLPAGE will be written out to                                                            floppy when STREAM is closed.                                                           *)                            )                           (T (\PFLOPPY.WRITEPAGENO (fetch (PFALLOC START)                                                           of (fetch (FLOPPYSTREAM PFALLOC)                                                                     of STREAM))                                     PLPAGE]              (RETURN SUCCESSFUL)))])(\PFLOPPY.CLOSEFILE  [LAMBDA (FILE)                                         (* hdj "24-Sep-86 10:32")    (WITH.MONITOR \FLOPPYLOCK                                (*)        (PROG (STREAM FULLFILENAME)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              (\CLEARMAP STREAM)              (SETQ FULLFILENAME (\PFLOPPY.CLOSEFILE1 STREAM))              (RETURN FULLFILENAME)))])(\PFLOPPY.CLOSEFILE1  [LAMBDA (STREAM)                                       (* hdj " 8-May-86 15:36")                                                             (* The real CLOSEFILE.                                                           *)                                                             (* Part of \PFLOPPY.CLOSEFILE needed                                                            to close subportions of huge files.                                                           *)    (PROG (PFALLOC PMPAGE NEXT NPMPAGE FULLFILENAME)          (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))          (SETQ FULLFILENAME (fetch (STREAM FULLFILENAME) of STREAM))          (COND             ((EQ (fetch (STREAM ACCESS) of STREAM)                  'INPUT)              (RETURN FULLFILENAME)))         (* Best place to fail is in trying to write PLPAGE.       TBW%: FILE WON'T CLOSE error message? *)          (COND             ((NULL (\PFLOPPY.WRITEPAGENO (fetch (PFALLOC START) of PFALLOC)                           (fetch (PFALLOC PLPAGE) of PFALLOC)))              (RETURN NIL)))                                 (* Ignore any errors now.                                                           *)          (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of PFALLOC))          (SETQ NEXT (fetch (PFALLOC NEXT) of PFALLOC))          (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))          (UNINTERRUPTABLY              (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.FILE)              (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.FILE)              (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FILE)              (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.FILE)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of PFALLOC))                     PMPAGE T)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                     NPMPAGE T)              (\PFLOPPY.SAVE.PFILELIST T)              (\PFLOPPY.SAVE.PSECTOR9 T))                (* Release STREAM.                                                           *)          (replace (PFALLOC WRITEFLG) of PFALLOC with NIL)          (RETURN FULLFILENAME])(\PFLOPPY.DELETEFILE  [LAMBDA (FILE FDEV)                                    (* hdj "23-Jun-86 15:10")    (WITH.MONITOR \FLOPPYLOCK        (PROG (FILENAME PFALLOC PMPAGE NEXT NPMPAGE FULLFILENAME)              (\PFLOPPY.OPEN)              (SETQ FILENAME (\FLOPPY.ASSUREFILENAME FILE T))              (COND                 ((NULL FILENAME)                            (* Bad filename. *)                                                             (* Returning NIL means unsuccessful.                                                           *)                  (RETURN NIL)))              (SETQ PFALLOC (\PFLOPPY.DIR.GET FILENAME 'OLDEST))              (COND                 ((NULL PFALLOC)                             (* File not found.                                                           *)                                                             (* Returning NIL means unsuccessful.                                                           *)                  (RETURN NIL)))              (SETQ FULLFILENAME (\FLOPPY.ADDDEVICENAME (fetch (PFALLOC FILENAME)                                                               of PFALLOC)))              (COND                 ((FDEVOP 'OPENP FDEV FILE NIL FDEV)         (* file is open -                                                           can't delete it *)                  (RETURN NIL))                 (T                                          (* Carry out deletion.                                                           *)                    (\PFLOPPY.DIR.REMOVE PFALLOC)                    (\PFLOPPY.DEALLOCATE PFALLOC)                    (\PFLOPPY.DELETE.FROM.PFILELIST PFALLOC)                    (\PFLOPPY.SAVE.PFILELIST)))              (RETURN FULLFILENAME)))])(\PFLOPPY.GENERATEFILES  [LAMBDA (FDEV PATTERN DESIREDPROPS OPTIONS)            (* hdj " 5-Jun-86 12:59")    (WITH.MONITOR \FLOPPYLOCK        (PROG (ALLOCS FILTER DESIREDVERSION GENFILESTATE PFALLOC VALIST VERSION FILEGENOBJ)         (* No floppy gives empty directory so that {FLOPPY} can safely be on        DIRECTORIES search path. *)              [COND                 ((EQ (MACHINETYPE)                      'DOVE)         (* Patch around DOVE IOP assembly language coded dooropen & diskchangeclear        status flags not working. *)                  (COND                     ((NOT (\DEVICE-OPEN-STREAMS \FLOPPYFDEV))         (* Don't have any open streams to DOVE floppy, so assume that user may have        switched floppies. *)                      (\FLOPPY.CLOSE]              [COND                 ((AND (\FLOPPY.EXISTSP T)                       (\FLOPPY.CACHED.READ T))                  (SETQ FILTER (DIRECTORY.MATCH.SETUP PATTERN))                  (SETQ DESIREDVERSION (FILENAMEFIELD PATTERN 'VERSION))                  (SETQ ALLOCS (for NBUCKET in (fetch (PFLOPPYFDEV DIR) of                                                                                           \FLOPPYFDEV                                                              )                                  join (for EBUCKET in (CDR NBUCKET)                                              join (COND                                                          [(FIXP DESIREDVERSION)                                                           [SETQ PFALLOC (CDR (ASSOC DESIREDVERSION                                                                                     (CDR EBUCKET]                                                           (COND                                                              ((AND PFALLOC                                                                    (DIRECTORY.MATCH                                                                     FILTER                                                                     (fetch (PFALLOC FILENAME)                                                                        of PFALLOC)))                                                               (LIST PFALLOC]                                                          ((DIRECTORY.MATCH FILTER                                                                  (CONCAT (CAR NBUCKET)                                                                         "."                                                                         (CAR EBUCKET)))                                                           (COND                                                              [(NULL DESIREDVERSION)                                                             (* Highest version only *)                                                               (SETQ VALIST (CDR EBUCKET))                                                               (SETQ VERSION (\PFLOPPY.DIR.VERSION                                                                              NIL                                                                              'OLD VALIST))                                                               (SETQ PFALLOC (CDR (ASSOC VERSION                                                                                          VALIST)))                                                               (COND                                                                  (PFALLOC (LIST PFALLOC]                                                              (T (for VBUCKET                                                                    in (CDR EBUCKET)                                                                    collect (CDR VBUCKET]              [COND                 ((MEMB 'SORT OPTIONS)                  (SORT ALLOCS (FUNCTION (LAMBDA (X Y)                                           (UALPHORDER (fetch (PFALLOC FILENAME) of X)                                                  (fetch (PFALLOC FILENAME) of Y]              (SETQ GENFILESTATE (create GENFILESTATE                                        ALLOCS _ ALLOCS                                        DEVICENAME _ (fetch (FDEV DEVICENAME) of FDEV)))              (SETQ FILEGENOBJ (create FILEGENOBJ                                      NEXTFILEFN _ (FUNCTION \PFLOPPY.NEXTFILEFN)                                      FILEINFOFN _ (FUNCTION \PFLOPPY.FILEINFOFN)                                      GENFILESTATE _ GENFILESTATE))              (RETURN FILEGENOBJ)))])(\PFLOPPY.NEXTFILEFN  [LAMBDA (GENFILESTATE NAMEONLY SCRATCHLIST)            (* edited%: "23-Jul-84 15:35")                                                             (* Generates next file from                                                            GENFILESTATE or NIL if finished.                                                           Used by \PFLOPPY.GENERATEFILES.                                                           *)    (PROG (ALLOCS FILENAME DEVICENAME ANSWER)          (SETQ ALLOCS (fetch (GENFILESTATE ALLOCS) of GENFILESTATE))          (COND             ((NULL ALLOCS)              (RETURN)))          (replace (GENFILESTATE CURRENTALLOC) of GENFILESTATE with (CAR ALLOCS))          (replace (GENFILESTATE ALLOCS) of GENFILESTATE with (CDR ALLOCS))          (SETQ FILENAME (fetch (PFALLOC FILENAME) of (CAR ALLOCS)))          (SETQ DEVICENAME (fetch (GENFILESTATE DEVICENAME) of GENFILESTATE))          [COND             (NAMEONLY (SETQ ANSWER FILENAME))             (T (SETQ ANSWER (CONCAT "{" (fetch (GENFILESTATE DEVICENAME) of GENFILESTATE)                                    "}" FILENAME]          (RETURN ANSWER])(\PFLOPPY.FILEINFOFN  [LAMBDA (GENFILESTATE ATTRIBUTE)                       (* edited%: "23-Jul-84 15:35")                                                             (* Get file info for current file in                                                            GENFILESTATE. *)    (\PFLOPPY.GETFILEINFO1 (fetch (GENFILESTATE CURRENTALLOC) of GENFILESTATE)           ATTRIBUTE])(\PFLOPPY.RENAMEFILE  [LAMBDA (OLDDEVICE OLDFILE NEWDEVICE NEWFILE OLDRECOG NEWRECOG)                                                             (* hdj "23-Jun-86 16:51")    (if (NEQ OLDDEVICE NEWDEVICE)        then (\GENERIC.RENAMEFILE OLDDEVICE OLDFILE NEWDEVICE NEWFILE)      else [COND                  ((NULL OLDRECOG)                   (SETQ OLDRECOG 'OLD]            [COND               ((NULL NEWRECOG)                (SETQ NEWRECOG 'NEW]            (WITH.MONITOR \FLOPPYLOCK                        (*)                (PROG (OLDFILENAME NEWFILENAME PFALLOC PLPAGE FULLFILENAME)                      (\PFLOPPY.OPEN)                      (SETQ OLDFILENAME (\FLOPPY.ASSUREFILENAME OLDFILE))                      (SETQ NEWFILENAME (\FLOPPY.ASSUREFILENAME NEWFILE))                      (if (FDEVOP 'OPENP OLDDEVICE OLDFILENAME NIL OLDDEVICE)                          then (RETURN))                      (SETQ PFALLOC (\PFLOPPY.DIR.GET OLDFILENAME OLDRECOG))                      (COND                         ((OR (NULL PFALLOC)                              (FDEVOP 'OPENP OLDDEVICE OLDFILENAME 'OLD OLDDEVICE))                                                             (* File not found or open *)                                                             (* Returning NIL means unsuccessful.                                                           *)                          (RETURN NIL)))                      (\PFLOPPY.DIR.REMOVE PFALLOC)      (* TBW%: If new file name too long.                                                           *)                                                             (* Store NEWFILENAME on PFALLOC.                                                           *)                      (\PFLOPPY.DIR.PUT NEWFILENAME NEWRECOG PFALLOC)                                                             (* Store NEWFILENAME on PLPAGE.                                                           *)                      (SETQ PLPAGE (fetch (PFALLOC PLPAGE) of PFALLOC))                      (replace (PLPAGE $NAME) of PLPAGE with (fetch (PFALLOC FILENAME                                                                                           )                                                                            of PFALLOC))                                                             (* Write changes onto floppy.                                                           *)                      (\PFLOPPY.WRITEPAGENO (fetch (PFALLOC START) of PFALLOC)                             PLPAGE)                         (* Return FULLFILENAME.                                                           *)                      (SETQ FULLFILENAME (\FLOPPY.ADDDEVICENAME (fetch (PFALLOC FILENAME)                                                                       of PFALLOC)))                      (RETURN FULLFILENAME)))])(\PFLOPPY.STREAMS.AGAINST  [LAMBDA (STREAM)                                       (* hdj " 5-Jun-86 13:01")                                                             (* Return other open floppy streams                                                            with same PFALLOC.                                                           *)    (for F in (\DEVICE-OPEN-STREAMS \FLOPPYFDEV)       when (AND (EQ (fetch (FLOPPYSTREAM PFALLOC) of F)                         (fetch (FLOPPYSTREAM PFALLOC) of STREAM))                     (NOT (EQ F STREAM))) collect F])(\PFLOPPY.STREAMS.USING  [LAMBDA (PFALLOC)                                      (* hdj " 5-Jun-86 13:01")                                                             (* Return open floppy streams with                                                            this PFALLOC. *)    (for F in (\DEVICE-OPEN-STREAMS \FLOPPYFDEV) when (EQ (fetch (FLOPPYSTREAM                                                                                         PFALLOC)                                                                         of F)                                                                      PFALLOC) collect F])(\PFLOPPY.READPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* edited%: "23-Jul-84 15:35")    (PROG NIL          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\PFLOPPY.READPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\PFLOPPY.READPAGE  [LAMBDA (FILE FIRSTPAGE# BUFFER)                       (* kbr%: "19-Jul-85 14:24")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PFALLOC PAGENO)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))              (SETQ PAGENO (IPLUS (fetch (PFALLOC START) of PFALLOC)                                  1 FIRSTPAGE#))              (COND                 ((IGREATERP FIRSTPAGE# (FOLDLO (SUB1 (\GETEOFPTR STREAM))                                               BYTESPERPAGE))(* Don't bother to do actual read.                                                           *)                  (COND                     ((IGREATERP PAGENO (fetch (PFALLOC END) of PFALLOC))         (* Typically (because of lisp page buffering) we will try to write to PAGENO in        the very near future. It's easier for the user to confront FILE SYSTEM        RESOURCES EXCEEDED if we reallocate now instead of later.       *)                      (\PFLOPPY.EXTEND PFALLOC)))                  (RETURN)))              (\PFLOPPY.READPAGENO PAGENO BUFFER)))    (BLOCK])(\PFLOPPY.READPAGENO  [LAMBDA (PAGENO PAGE NOERROR)                          (* kbr%: " 7-Aug-85 18:48")    (PROG (ANSWER)                                           (* Read page. *)          [GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB (SETQ ANSWER (COND                                                                     ((OR (ILESSP PAGENO 1)                                                                          (IGREATERP PAGENO                                                                                  \PFLOPPYLASTDATAPAGE                                                                                 ))                                                                      (\FLOPPY.SEVERE.ERROR                                                                       "Illegal Read Page Number")                                                                      NIL)                                                                     (T (\FLOPPY.READSECTOR                                                                         \FLOPPY.IBMD512.FLOPPYIOCB                                                                         (                                                                       \PFLOPPY.PAGENOTODISKADDRESS                                                                          PAGENO)                                                                         PAGE NOERROR]                                                             (* Return ANSWER (PAGE or NIL) *)          (RETURN ANSWER])(\PFLOPPY.WRITEPAGENO  [LAMBDA (PAGENO PAGE NOERROR)                          (* kbr%: " 7-Aug-85 18:48")    (PROG (ANSWER)                                           (* Write page. *)          [GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB (SETQ ANSWER (COND                                                                     ((OR (ILESSP PAGENO 1)                                                                          (IGREATERP PAGENO                                                                                  \PFLOPPYLASTDATAPAGE                                                                                 ))                                                                      (\FLOPPY.SEVERE.ERROR                                                                       "Illegal Write Page Number")                                                                      NIL)                                                                     (T (\FLOPPY.WRITESECTOR                                                                         \FLOPPY.IBMD512.FLOPPYIOCB                                                                         (                                                                       \PFLOPPY.PAGENOTODISKADDRESS                                                                          PAGENO)                                                                         PAGE NOERROR]                                                             (* Return ANSWER (PAGE or NIL) *)          (RETURN ANSWER])(\PFLOPPY.PAGENOTODISKADDRESS  [LAMBDA (PAGENO)                                       (* kbr%: " 7-Aug-85 17:07")    (PROG (QUOTIENT CYLINDER HEAD SECTOR DISKADDRESS)          (SETQ SECTOR (ADD1 (IREMAINDER (SUB1 PAGENO)                                    \FLOPPY.SECTORSPERTRACK)))          (SETQ QUOTIENT (IQUOTIENT (SUB1 PAGENO)                                \FLOPPY.SECTORSPERTRACK))          (SETQ HEAD (IREMAINDER QUOTIENT \FLOPPY.TRACKSPERCYLINDER))          (SETQ CYLINDER (IQUOTIENT QUOTIENT \FLOPPY.TRACKSPERCYLINDER))          (SETQ DISKADDRESS (create DISKADDRESS                                   SECTOR _ SECTOR                                   HEAD _ HEAD                                   CYLINDER _ CYLINDER))          (RETURN DISKADDRESS])(\PFLOPPY.DISKADDRESSTOPAGENO  [LAMBDA (DISKADDRESS)                                  (* kbr%: " 7-Aug-85 19:26")    (PROG (PAGENO)          [SETQ PAGENO (IPLUS (fetch (DISKADDRESS SECTOR) of DISKADDRESS)                              (ITIMES \FLOPPY.SECTORSPERTRACK (IPLUS (fetch (DISKADDRESS HEAD)                                                                        of DISKADDRESS)                                                                     (ITIMES                                                                             \FLOPPY.TRACKSPERCYLINDER                                                                            (fetch (DISKADDRESS                                                                                        CYLINDER)                                                                               of DISKADDRESS]          (RETURN PAGENO])(\PFLOPPY.DIR.GET  [LAMBDA (FILENAME RECOG)                               (* ; "Edited 13-Nov-87 13:22 by sye")    (PROG (UNAME NALIST EALIST VALIST NAME EXTENSION VERSION PFALLOC)          (SETQ FILENAME (\FLOPPY.ASSUREFILENAME FILENAME))          [COND             [(NOT (EQ RECOG 'EXACT))              (SETQ UNAME (UNPACKFILENAME.STRING FILENAME))              [SETQ NAME (U-CASE (PACKFILENAME.STRING (LIST 'DIRECTORY (LISTGET UNAME 'DIRECTORY)                                                            'NAME                                                            (LISTGET UNAME 'NAME]              (SETQ EXTENSION (OR (U-CASE (LISTGET UNAME 'EXTENSION))                                  ""))              [SETQ VERSION (MKATOM (U-CASE (LISTGET UNAME 'VERSION]              (SETQ NALIST (fetch (PFLOPPYFDEV DIR) of \FLOPPYFDEV))              [SETQ EALIST (CDR (CL:ASSOC NAME NALIST :TEST #'EQUAL :KEY (FUNCTION MKSTRING]              [SETQ VALIST (CDR (CL:ASSOC EXTENSION EALIST :TEST #'EQUAL :KEY (FUNCTION MKSTRING]              (SETQ VERSION (\PFLOPPY.DIR.VERSION VERSION RECOG VALIST FILENAME))              (COND                 ((EQ RECOG 'NEW)                  (RETURN)))              (SETQ PFALLOC (CDR (ASSOC VERSION VALIST]             (T (SETQ PFALLOC (for PFALLOC in (fetch (PFLOPPYFDEV PFALLOCS) of                                                                                           \FLOPPYFDEV                                                             )                                 thereis (EQ (fetch (PFALLOC FILENAME) of PFALLOC)                                                 FILENAME]          (RETURN PFALLOC])(\PFLOPPY.DIR.PUT  [LAMBDA (FILENAME RECOG PFALLOC)                       (* ; "Edited 12-Nov-87 20:27 by sye")    (PROG (UNAME NALIST EALIST VALIST NAME EXTENSION VERSION)          [SETQ FILENAME (OR (\FLOPPY.ASSUREFILENAME FILENAME T)                             (GENSYM 'BADFILENAME]          (SETQ UNAME (UNPACKFILENAME.STRING FILENAME))          [SETQ NAME (U-CASE (PACKFILENAME.STRING (LIST 'DIRECTORY (LISTGET UNAME 'DIRECTORY)                                                        'NAME                                                        (LISTGET UNAME 'NAME]          (SETQ EXTENSION (OR (U-CASE (LISTGET UNAME 'EXTENSION))                              ""))          [SETQ VERSION (MKATOM (U-CASE (LISTGET UNAME 'VERSION]          (SETQ NALIST (fetch (PFLOPPYFDEV DIR) of \FLOPPYFDEV))          (SETQ EALIST (CDR (SASSOC NAME NALIST)))          (SETQ VALIST (CDR (SASSOC EXTENSION EALIST)))          (SETQ VERSION (\PFLOPPY.DIR.VERSION VERSION RECOG VALIST))          (LISTPUT UNAME 'VERSION VERSION)          (LISTPUT UNAME 'HOST NIL)          [SETQ FILENAME (COND                            ((EQ RECOG 'EXACT)                             (U-CASE FILENAME))                            (T (PACKFILENAME UNAME]          (replace (PFALLOC FILENAME) of PFALLOC with FILENAME)          (SETQ VALIST (\FLOPPY.LEXPUTASSOC VERSION PFALLOC VALIST))          (SETQ EALIST (\FLOPPY.LEXPUTASSOC EXTENSION VALIST EALIST))          (SETQ NALIST (\FLOPPY.LEXPUTASSOC NAME EALIST NALIST))          (replace (PFLOPPYFDEV DIR) of \FLOPPYFDEV with NALIST)          (RETURN PFALLOC])(\PFLOPPY.DIR.REMOVE  [LAMBDA (PFALLOC)                                      (* ; "Edited 13-Nov-87 13:21 by sye")    (PROG (FILENAME UNAME NALIST EALIST VALIST NAME EXTENSION VERSION)          (SETQ FILENAME (fetch (PFALLOC FILENAME) of PFALLOC))          (SETQ UNAME (UNPACKFILENAME.STRING FILENAME))          [SETQ NAME (U-CASE (PACKFILENAME.STRING (LIST 'DIRECTORY (LISTGET UNAME 'DIRECTORY)                                                        'NAME                                                        (LISTGET UNAME 'NAME]          (SETQ EXTENSION (OR (U-CASE (LISTGET UNAME 'EXTENSION))                              ""))          [SETQ VERSION (MKATOM (U-CASE (LISTGET UNAME 'VERSION]          (SETQ NALIST (fetch (PFLOPPYFDEV DIR) of \FLOPPYFDEV))          [SETQ EALIST (CDR (CL:ASSOC NAME NALIST :TEST (FUNCTION EQUAL)                                   :KEY                                   (FUNCTION MKSTRING]          [SETQ VALIST (CDR (CL:ASSOC EXTENSION EALIST :TEST (FUNCTION EQUAL)                                   :KEY                                   (FUNCTION MKSTRING]          (SETQ VERSION (\PFLOPPY.DIR.VERSION VERSION 'OLD VALIST))          (SETQ VALIST (\FLOPPY.LEXREMOVEASSOC VERSION VALIST))          [COND             (VALIST (SETQ EALIST (\FLOPPY.LEXPUTASSOC EXTENSION VALIST EALIST))                    (SETQ NALIST (\FLOPPY.LEXPUTASSOC NAME EALIST NALIST)))             (T (SETQ EALIST (\FLOPPY.LEXREMOVEASSOC EXTENSION EALIST))                (COND                   (EALIST (SETQ NALIST (\FLOPPY.LEXPUTASSOC NAME EALIST NALIST)))                   (T (SETQ NALIST (\FLOPPY.LEXREMOVEASSOC NAME NALIST]          (replace (PFLOPPYFDEV DIR) of \FLOPPYFDEV with NALIST)          (RETURN PFALLOC])(\PFLOPPY.DIR.VERSION  [LAMBDA (VERSION RECOG VALIST FILENAME)                (* kbr%: "13-Feb-85 15:39")    (PROG (PFALLOC)          (SETQ VALIST (for BUCKET in VALIST when (NUMBERP (CAR BUCKET)) collect                                                                                     BUCKET))          [COND             ((EQ RECOG 'OLD/NEW)              (COND                 (VALIST (SETQ RECOG 'OLD))                 (T (SETQ RECOG 'NEW]          [COND             ((NULL VERSION)              (SELECTQ RECOG                  (NEW [COND                          ((NULL VALIST)                           (SETQ VERSION 1))                          (T (SETQ VERSION (CAAR (LAST VALIST)))                             (COND                                ((NUMBERP VERSION)                                 (SETQ VERSION (ADD1 VERSION])                  (OLD (SETQ VERSION (CAAR (LAST VALIST))))                  (OLDEST (SETQ VERSION (CAAR VALIST)))                  (EXACT                                     (* No version. *))                  (SHOULDNT)))             ((AND (EQ RECOG 'NEW)                   FILENAME)              (SETQ PFALLOC (\PFLOPPY.DIR.GET FILENAME 'OLD))              (COND                 (PFALLOC (\PFLOPPY.DIR.REMOVE PFALLOC)                        (\PFLOPPY.DEALLOCATE PFALLOC)                        (\PFLOPPY.DELETE.FROM.PFILELIST PFALLOC)                        (\PFLOPPY.SAVE.PFILELIST]          (RETURN VERSION])(\PFLOPPY.GETFILENAME  [LAMBDA (FILE RECOG FDEV)                              (* ; "Edited 11-Aug-88 09:37 by rmk:")    (WITH.MONITOR \FLOPPYLOCK        [PROG (UNAME NAME VERSION VALIST PFALLOC)              [COND                 ((type? STREAM FILE)                  (RETURN (fetch (STREAM FULLFILENAME) of FILE]              (COND                 ((NOT (AND (\FLOPPY.EXISTSP T)                            (\FLOPPY.CACHED.READ T)))    (* ;                                                            "NIL is returned if there is no floppy.")                  (RETURN NIL)))              (OR (NLSETQ (SETQ UNAME (UNPACKFILENAME.STRING FILE)))                  (RETURN NIL))              (COND                 ((EQ RECOG 'EXACT)                  (RETURN FILE)))                            (* ;                                                       "rmk:  Not sure what EXACT is supposed to do")              [SETQ NAME (PACKFILENAME.STRING 'DIRECTORY (LISTGET UNAME 'DIRECTORY)                                'NAME                                (LISTGET UNAME 'NAME]        (* ; "rmk:  for efficiency, directory really should have its own alist indexing level and not be packed with the name.  In fact, the best thing would be to have the floppy cache share structure and code with the CORE device")              [SETQ VALIST (CDR (CL:ASSOC (OR (LISTGET UNAME 'EXTENSION)                                              "")                                       (CDR (CL:ASSOC NAME (fetch (PFLOPPYFDEV DIR) of FDEV)                                                   :TEST                                                   #'STRING.EQUAL))                                       :TEST                                       #'STRING.EQUAL]              (SETQ VERSION (LISTGET UNAME 'VERSION))              (SETQ VERSION (AND VERSION (NEQ 0 (NCHARS VERSION))                                 (MKATOM VERSION)))          (* ;                                 "Version got unpacked as (possibly) empty string instead of number")              (SETQ VERSION (\PFLOPPY.DIR.VERSION VERSION RECOG VALIST))              (RETURN (COND                         ((EQ RECOG 'NEW)                          (LISTPUT UNAME 'VERSION VERSION)                          (U-CASE (PACKFILENAME UNAME)))                         ((SETQ PFALLOC (CDR (ASSOC VERSION VALIST)))                                                             (* ;                                                        "INFILEP returns NIL if filename not found ")                                                             (* ;        "rmk:  Packing the name out of the FDEV might make it easier to implement a 2-floppy system")                          (\FLOPPY.ADDDEVICENAME (fetch (PFALLOC FILENAME) of PFALLOC])])(\PFLOPPY.CREATE.PFILELIST  [LAMBDA (NPAGES)                                       (* lmm "13-Aug-84 15:46")    (PROG (PFILELIST)                                        (* Must be page aligned integral                                                            number of pages. *)          (SETQ PFILELIST (\FLOPPY.BUFFER NPAGES))          (replace (PFILELIST SEAL) of PFILELIST with SEAL.PFILELIST)          (replace (PFILELIST VERSION) of PFILELIST with VERSION.PFILELIST)          (replace (PFILELIST MAXENTRIES) of PFILELIST with (IQUOTIENT                                                                         (IDIFFERENCE (ITIMES                                                                                          WORDSPERPAGE                                                                                             NPAGES)                                                                                4)                                                                         5))          (RETURN PFILELIST])(\PFLOPPY.ADD.TO.PFILELIST  [LAMBDA (PFALLOC)                                      (* mjs "29-Nov-84 16:08")    (PROG (PSECTOR9 PFILELIST PFLE NENTRIES NPAGES NEWPFILELIST NEXT PMPAGE NPMPAGE NEWMAXENTRIES                  NEWNPAGES)          (SETQ PSECTOR9 (fetch (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV))          (SETQ PFILELIST (fetch (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV))                                                             (* Create PFLE. *)          (SETQ PFLE (create PFLE                            FILEID _ (fetch (PSECTOR9 NEXTUNUSEDFILEID) of PSECTOR9)                            TYPE _ (fetch (PFALLOC FILETYPE) of PFALLOC)                            START _ (fetch (PFALLOC START) of PFALLOC)                            LENGTH _ (fetch (PFALLOC LENGTH) of PFALLOC)))          (replace (PSECTOR9 NEXTUNUSEDFILEID) of PSECTOR9 with                                                                   (ADD1 (fetch (PSECTOR9                                                                                      NEXTUNUSEDFILEID                                                                                           )                                                                            of PSECTOR9)))          (replace (PFALLOC PFLE) of PFALLOC with PFLE)                                                             (* Add PFLE to PFILELIST.                                                           *)          (SETQ NENTRIES (fetch (PFILELIST NENTRIES) of PFILELIST))          [COND             ((IEQP NENTRIES (fetch (PFILELIST MAXENTRIES) of PFILELIST))                                                             (* First increase size of PFILELIST)              (SETQ NPAGES (fetch (PFILELIST NPAGES) of PFILELIST))              (SETQ NEWPFILELIST (\PFLOPPY.CREATE.PFILELIST (ADD1 NPAGES)))              (SETQ NEWMAXENTRIES (fetch (PFILELIST MAXENTRIES) of NEWPFILELIST))              (SETQ NEWNPAGES (fetch (PFILELIST NPAGES) of NEWPFILELIST))              (\BLT NEWPFILELIST PFILELIST (ITIMES 256 NPAGES))                                                             (* update the MAXENTRIES field of                                                            the new PFILELIST)              (replace (PFILELIST MAXENTRIES) of NEWPFILELIST with NEWMAXENTRIES)                                                             (* note%: don't need to update                                                            NPAGES field since it is calculated                                                            from MAXENTRIES field)              (SETQ PFILELIST NEWPFILELIST)              (SETQ NPAGES NEWNPAGES)              (replace (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV with PFILELIST)                                                             (* Now allocate larger block on                                                            floppy. *)              (SETQ PFALLOC (\PFLOPPY.ALLOCATE NPAGES))              [\PFLOPPY.DEALLOCATE (for PFALLOC in (fetch (PFLOPPYFDEV PFALLOCS)                                                                  of \FLOPPYFDEV)                                          thereis (EQUAL (fetch (PFALLOC FILENAME)                                                                of PFALLOC)                                                             '(PFILELIST]              (SETQ NEXT (fetch (PFALLOC NEXT) of PFALLOC))              (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of PFALLOC))              (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))              (SETQ PSECTOR9 (fetch (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV))              (UNINTERRUPTABLY                  (replace (PFALLOC FILENAME) of PFALLOC with '(PFILELIST))                  (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.PFILELIST)                  (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.PFILELIST)                  (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.PFILELIST)                  (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.PFILELIST)                  (replace (PSECTOR9 PFILELISTSTART) of PSECTOR9 with (fetch                                                                                   (PFALLOC START)                                                                                     of PFALLOC))                  (replace (PSECTOR9 PFILELISTLENGTH) of PSECTOR9 with NPAGES)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of PFALLOC))                         PMPAGE T)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                         NPMPAGE T)                  (\PFLOPPY.SAVE.PFILELIST T)                  (\PFLOPPY.SAVE.PSECTOR9 T))]          (\MOVEWORDS PFLE 0 PFILELIST (IPLUS 4 (ITIMES 5 NENTRIES))                 5)          (replace (PFILELIST NENTRIES) of PFILELIST with (ADD1 NENTRIES])(\PFLOPPY.DELETE.FROM.PFILELIST  [LAMBDA (PFALLOC)                                      (* edited%: "23-Jul-84 15:35")    (PROG (PFILELIST PFLE FILEID NENTRIES)          (SETQ PFILELIST (fetch (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV))          (SETQ PFLE (fetch (PFALLOC PFLE) of PFALLOC))          (SETQ FILEID (fetch (PFLE FILEID) of PFLE))          (SETQ NENTRIES (fetch (PFILELIST NENTRIES) of PFILELIST))                                                             (* Delete PFLE from PFILELIST.                                                           *)          (for I from 1 to NENTRIES             when (IEQP [\FLOPPY.MTL.FIXP (\GETBASEFIXP PFILELIST (IPLUS 4 (ITIMES 5 I]                            FILEID) do (SETQ NENTRIES (SUB1 NENTRIES))                                          (\MOVEWORDS PFILELIST (IPLUS 4 (ITIMES 5 NENTRIES))                                                 PFILELIST                                                 (IPLUS 4 (ITIMES 5 I))                                                 5)                                          [\ZEROWORDS (\ADDBASE PFILELIST (IPLUS 4 (ITIMES 5 NENTRIES                                                                                          )))                                                 (\ADDBASE PFILELIST (IPLUS 8 (ITIMES 5 NENTRIES]                                          (replace (PFILELIST NENTRIES) of PFILELIST                                             with NENTRIES))                                                             (* TBW%: Could try to shorten                                                            PFILELIST after a delete.                                                           Not a crucial problem.                                                           *)          (replace (PFALLOC PFLE) of PFALLOC with NIL])(\PFLOPPY.SAVE.PFILELIST  [LAMBDA (NOERROR)                                      (* kbr%: " 1-Nov-85 18:23")    (PROG (PFILELIST)          (SETQ PFILELIST (fetch (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV))          (for I from 0 to (SUB1 (fetch (PFILELIST NPAGES) of PFILELIST))             do (\PFLOPPY.WRITEPAGENO (IPLUS (fetch (PSECTOR9 PFILELISTSTART)                                                        of (fetch (PFLOPPYFDEV PSECTOR9)                                                                  of \FLOPPYFDEV))                                                     I)                           (\ADDBASE PFILELIST (ITIMES I 256))                           NOERROR])(\PFLOPPY.SAVE.PSECTOR9  [LAMBDA (NOERROR)                                      (* edited%: "23-Jul-84 15:35")    (PROG NIL          (GLOBALRESOURCE \FLOPPY.IBMS128.FLOPPYIOCB                 (\FLOPPY.WRITESECTOR \FLOPPY.IBMS128.FLOPPYIOCB                        (create DISKADDRESS                               CYLINDER _ 0                               HEAD _ 0                               SECTOR _ 9)                        (fetch (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV)                        NOERROR])(\PFLOPPY.WRITEPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* edited%: "23-Jul-84 15:35")    (PROG NIL          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\PFLOPPY.WRITEPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\PFLOPPY.WRITEPAGE  [LAMBDA (FILE FIRSTPAGE# BUFFER)                       (* edited%: "23-Jul-84 15:35")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PFALLOC PAGENO)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE)) (* Put in a check to see that we                                                            have not exceeded our allocation.                                                           *)              (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))          RETRY              (SETQ PAGENO (IPLUS (fetch (PFALLOC START) of PFALLOC)                                  1 FIRSTPAGE#))              (COND                 ((IGREATERP PAGENO (fetch (PFALLOC END) of PFALLOC))                  (\PFLOPPY.EXTEND PFALLOC)                  (GO RETRY)))              (\PFLOPPY.WRITEPAGENO PAGENO BUFFER)))    (BLOCK])(\PFLOPPY.TRUNCATEFILE  [LAMBDA (FILE LASTPAGE LASTOFFSET)                     (* kbr%: "25-Nov-84 13:25")    (WITH.MONITOR \FLOPPYLOCK        [PROG (STREAM EPAGE EOFFSET PFALLOC PLPAGE)          (* TBW%: Can't extend files only                                                            shorten files with this function as                                                            it stands. *)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE)) (* Split PFALLOC into file block and                                                            free block. *)              (SETQ EPAGE (fetch (STREAM EPAGE) of STREAM))              (SETQ EOFFSET (fetch (STREAM EOFFSET) of STREAM))              (COND                 ((NULL LASTPAGE)                            (* LASTPAGE = NIL means to truncate                                                            to the current length.                                                           *)                  (SETQ LASTPAGE EPAGE)                  (SETQ LASTOFFSET EOFFSET)))              (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))              (replace (PLPAGE LENGTH) of (fetch (PFALLOC PLPAGE) of PFALLOC)                 with (IPLUS (ITIMES 512 LASTPAGE)                                 LASTOFFSET))                (* Convert remaining pages into free                                                            block. *)              (COND                 ((ZEROP LASTOFFSET)                         (* Special case LASTOFFSET = 0.0 *)                  (\PFLOPPY.TRUNCATE PFALLOC (IPLUS 1 LASTPAGE)))                 (T (\PFLOPPY.TRUNCATE PFALLOC (IPLUS 1 (ADD1 LASTPAGE])])(\PFLOPPY.FORMAT  [LAMBDA (NAME AUTOCONFIRMFLG SLOWFLG)                  (* ; "Edited 11-Jun-87 17:54 by jds")    (* ;; "FORMAT a PILOT-mode floppy.")    (* ;; "Return T if formatted, NIL if user abort.  *")    (PROG (CONFIRM PSECTOR9 PMPAGEA PMPAGEB PMPAGEC PFILELIST PFLE NATTEMPTS (NTIMES 1))          (\FLOPPY.UNCACHED.WRITE)                       (* ; "Confirmation.  *")          (SETQ CONFIRM (\PFLOPPY.CONFIRM "Destroy contents of floppy" AUTOCONFIRMFLG T))          (COND             ((NOT CONFIRM)              (RETURN NIL)))     (* ;; "Forcibly close floppy:")          (\FLOPPY.CLOSE)     (* ;; "Create critical records:")          (SETQ PFILELIST (\FLOPPY.BUFFER 2))          (replace (PFILELIST SEAL) of PFILELIST with SEAL.PFILELIST)          (replace (PFILELIST VERSION) of PFILELIST with VERSION.PFILELIST)          (replace (PFILELIST NENTRIES) of PFILELIST with 1)          (replace (PFILELIST MAXENTRIES) of PFILELIST with (IQUOTIENT (IDIFFERENCE                                                                                    512 4)                                                                               5))          (SETQ PFLE (create PFLE                            FILEID _ 1                            TYPE _ FILETYPE.PFILELIST                            START _ (ADD1 \PFLOPPYFIRSTDATAPAGE)                            LENGTH _ 2))          (\MOVEWORDS PFLE 0 PFILELIST 4 5)          (SETQ PMPAGEA           (create PMPAGE                  PTYPE _ PMPAGEETYPE.FREE                  PFILEID _ 0                  PFILETYPE _ FILETYPE.FREE                  PLENGTH _ 0                  NTYPE _ PMPAGEETYPE.PFILELIST                  NFILETYPE _ FILETYPE.PFILELIST                  NFILEID _ 1                  NLENGTH _ 2))          [SETQ PMPAGEB           (create PMPAGE                  PTYPE _ PMPAGEETYPE.PFILELIST                  PFILETYPE _ FILETYPE.PFILELIST                  PFILEID _ 1                  PLENGTH _ 2                  NTYPE _ PMPAGEETYPE.FREE                  NFILETYPE _ FILETYPE.FREE                  NFILEID _ 0                  NLENGTH _ (IDIFFERENCE \PFLOPPYLASTDATAPAGE (IPLUS \PFLOPPYFIRSTDATAPAGE 4]          (SETQ PMPAGEC (create PMPAGE                               PTYPE _ PMPAGEETYPE.FREE                               PFILEID _ 0                               PFILETYPE _ FILETYPE.FREE                               PLENGTH _ (IDIFFERENCE \PFLOPPYLASTDATAPAGE (IPLUS                                                                                 \PFLOPPYFIRSTDATAPAGE                                                                                  4))                               NTYPE _ PMPAGEETYPE.FREE                               NFILEID _ 0                               NFILETYPE _ FILETYPE.FREE                               NLENGTH _ 0))          (SETQ PSECTOR9 (create PSECTOR9                                PFILELISTSTART _ (ADD1 \PFLOPPYFIRSTDATAPAGE)                                PFILELISTFILEID _ 1                                PFILELISTLENGTH _ 2                                ROOTFILEID _ 0                                NEXTUNUSEDFILEID _ 2))          (replace (PSECTOR9 $LABEL) of PSECTOR9 with NAME)                                                             (* ; "Check floppy can write.  *")          (SETQ NATTEMPTS 0)      RETRY          (SETQ NATTEMPTS (ADD1 NATTEMPTS))          (COND             ((IGREATERP NATTEMPTS 5)              (\FLOPPY.MESSAGE "Couldn't format floppy")              (RETURN NIL)))          (COND             ((NOT (AND (\FLOPPY.INITIALIZE T)                        (\FLOPPY.WRITEABLEP)))              (GO ERROR)))                                   (* ; "Configure floppy.  *")          [COND             ((OR SLOWFLG (NULL PSECTOR9))                   (* ; "Format tracks.  *")              (COND                 ([NOT (AND (\FLOPPY.INITIALIZE T)                            (\FLOPPY.RECALIBRATE T)                            (GLOBALRESOURCE \FLOPPY.IBMS128.FLOPPYIOCB                                   (\FLOPPY.FORMATTRACKS \FLOPPY.IBMS128.FLOPPYIOCB                                          (create DISKADDRESS                                                 CYLINDER _ 0                                                 HEAD _ 0                                                 SECTOR _ 1)                                          1 T))                            (GLOBALRESOURCE \FLOPPY.IBMD256.FLOPPYIOCB                                   (\FLOPPY.FORMATTRACKS \FLOPPY.IBMD256.FLOPPYIOCB                                          (create DISKADDRESS                                                 CYLINDER _ 0                                                 HEAD _ 1                                                 SECTOR _ 1)                                          1 T))                            (\FLOPPY.RECALIBRATE T)                            (GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB                                   (\FLOPPY.FORMATTRACKS \FLOPPY.IBMD512.FLOPPYIOCB                                          (create DISKADDRESS                                                 CYLINDER _ 1                                                 HEAD _ 0                                                 SECTOR _ 1)                                          (SUB1 \FLOPPY.CYLINDERS)                                          T)                                   (\FLOPPY.FORMATTRACKS \FLOPPY.IBMD512.FLOPPYIOCB                                          (create DISKADDRESS                                                 CYLINDER _ 1                                                 HEAD _ 1                                                 SECTOR _ 1)                                          (SUB1 \FLOPPY.CYLINDERS)                                          T]                  (GO ERROR)))              (* ;; "Check that we can read from each page.  We need to do this because FORMATTRACKS (espescially DOVE) is unreliable.  If we find a bad page, it usually works to try again a few times.  We know from experience that the tendency is for an unformatted floppy to become better the more times you format it.  *")              (COND                 ([GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB                         (for I from \PFLOPPYFIRSTDATAPAGE to \PFLOPPYLASTDATAPAGE                            by (SELECTQ (MACHINETYPE)                                       (DOVE                 (* ; "WAS 1")                                             9)                                       (DANDELION (COND                                                     ((type? PSECTOR9 CONFIRM)                                                             (* ;                                            "Formatted before.  Spot check output of formatting.  *")                                                      19)                                                     (T      (* ;                                                      "Never formatted before.  Be more careful.  *")                                                        1)))                                       NIL) thereis (NULL (\PFLOPPY.READPAGENO I                                                                      \FLOPPY.SCRATCH.BUFFER T]                  (\FLOPPY.MESSAGE "Retrying format." PROMPTWINDOW)                  (GO ERROR]     (* ;; "Write PMPAGEs, PFILELIST, and PSECTOR9.  Write PSECTOR9 last.  We check for it first when we open floppy.  *")          (COND             ([NOT (AND (\PFLOPPY.WRITEPAGENO \PFLOPPYFIRSTDATAPAGE PMPAGEA T)                        (\PFLOPPY.WRITEPAGENO (ADD1 \PFLOPPYFIRSTDATAPAGE)                               PFILELIST T)                        (\PFLOPPY.WRITEPAGENO (IPLUS \PFLOPPYFIRSTDATAPAGE 2)                               (\ADDBASE PFILELIST 256)                               T)                        (\PFLOPPY.WRITEPAGENO (IPLUS \PFLOPPYFIRSTDATAPAGE 3)                               PMPAGEB T)                        (\PFLOPPY.WRITEPAGENO \PFLOPPYLASTDATAPAGE PMPAGEC T)                        (GLOBALRESOURCE \FLOPPY.IBMS128.FLOPPYIOCB                               (\FLOPPY.WRITESECTOR \FLOPPY.IBMS128.FLOPPYIOCB                                      (create DISKADDRESS                                             CYLINDER _ 0                                             HEAD _ 0                                             SECTOR _ 9)                                      PSECTOR9 T]              (GO ERROR)))          (SETQ NTIMES (SUB1 NTIMES))          (COND             ((EQ NTIMES 0)                                  (* ; "Successful Return.  *")              (RETURN T))             (T (GO RETRY)))      ERROR          (SETQ SLOWFLG T)          (COND             ((EQ (MACHINETYPE)                  'DOVE)              (* ;; "DOVEFLOPPY formatting is so flakey that if we find any indication of problems in formatting that we then insist that we keep formatting until we can successfully format twice in a row.  *")              (SETQ NTIMES 2)))          (GO RETRY])(\PFLOPPY.CONFIRM  [LAMBDA (MESSAGE AUTOCONFIRMFLG NOERROR WAIT-TIME)     (* ; "Edited 15-Aug-88 11:51 by jds")    (PROG (PSECTOR9 STRING ANSWER)      RETRY          [COND             ((OR (NOT NOERROR)                  (NOT AUTOCONFIRMFLG))              (SETQ PSECTOR9 (\PFLOPPY.GET.PSECTOR9]          (COND             ((AND (NOT NOERROR)                   (NULL PSECTOR9))              (\FLOPPY.BREAK "Not a pilot floppy")              (GO RETRY)))          (COND             [(NOT AUTOCONFIRMFLG)              [SETQ STRING (COND                              (PSECTOR9 (CONCAT MESSAGE " " (fetch (PSECTOR9 $LABEL) of                                                                                         PSECTOR9)                                               "? "))                              (T (CONCAT MESSAGE "? "]              (SELECTQ (ASKUSER WAIT-TIME 'Y STRING)                  (Y (SETQ ANSWER T))                  (N (SETQ ANSWER NIL))                  (SHOULDNT))                                (* ;                                       "Now check that user didn't switch floppies during ASKUSER *")              (COND                 ((NOT (\FLOPPY.UNCACHED.WRITE))                  (GO RETRY]             (T (SETQ ANSWER T)))          (COND             ((AND (NOT NOERROR)                   (NOT ANSWER))              (\FLOPPY.BREAK "User confirmation required.")              (GO RETRY)))          (COND             ((AND ANSWER PSECTOR9)                          (* ;                          "Not only indicate confirmation, but also that this is a PILOT floppy.  *")              (SETQ ANSWER PSECTOR9)))          (RETURN ANSWER])(\PFLOPPY.GET.NAME  [LAMBDA NIL                                            (* kbr%: "13-Feb-85 16:24")    (PROG NIL          (\FLOPPY.CACHED.READ)          (\PFLOPPY.OPEN.PSECTOR9)          (RETURN (fetch (PSECTOR9 $LABEL) of (fetch (PFLOPPYFDEV PSECTOR9) of                                                                                           \FLOPPYFDEV                                                             ])(\PFLOPPY.SET.NAME  [LAMBDA (NAME)                                         (* kbr%: "13-Feb-85 16:24")    (PROG NIL          (\FLOPPY.CACHED.WRITE)          (\PFLOPPY.OPEN.PSECTOR9)          (UNINTERRUPTABLY              (replace (PSECTOR9 $LABEL) of (fetch (PFLOPPYFDEV PSECTOR9) of                                                                                           \FLOPPYFDEV                                                           ) with NAME)              (\PFLOPPY.SAVE.PSECTOR9))          (RETURN (fetch (PSECTOR9 $LABEL) of (fetch (PFLOPPYFDEV PSECTOR9) of                                                                                           \FLOPPYFDEV                                                             ]))(* ; "`ALLOCATE' *")(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE (RPAQQ MINIMUM.ALLOCATION 5)(RPAQQ DEFAULT.ALLOCATION 50)(CONSTANTS (MINIMUM.ALLOCATION 5)       (DEFAULT.ALLOCATION 50))))(RPAQ? \FLOPPY.ALLOCATIONS.BITMAP NIL)(DEFINEQ(\PFLOPPY.ALLOCATE  [LAMBDA (LENGTH)                                       (* kbr%: "22-Jul-84 22:34")                                                             (* Return a PFALLOC pointing to a                                                            free block. *)    (PROG (FREE PFLENGTH PMPAGE NEXT NPMPAGE)      RETRY          (SETQ FREE (\PFLOPPY.ALLOCATE.LARGEST))          (COND             ((NULL FREE)              (\PFLOPPY.GAINSPACE LENGTH)              (GO RETRY)))          (SETQ PFLENGTH (fetch (PFALLOC LENGTH) of FREE))          [COND             [LENGTH                                         (* Required LENGTH.                                                           *)                    (COND                       ((ILESSP PFLENGTH LENGTH)                        (\PFLOPPY.GAINSPACE LENGTH)                        (GO RETRY))                       ((ILESSP PFLENGTH (IPLUS LENGTH MINIMUM.ALLOCATION)))                       (T (\PFLOPPY.TRUNCATE FREE LENGTH]             (T                                              (* Defaulted LENGTH.                                                           *)                (COND                   ((ILESSP PFLENGTH MINIMUM.ALLOCATION)                    (\PFLOPPY.GAINSPACE MINIMUM.ALLOCATION)                    (GO RETRY))                   ((ILESSP PFLENGTH (IPLUS DEFAULT.ALLOCATION MINIMUM.ALLOCATION)))                   (T (\PFLOPPY.TRUNCATE FREE DEFAULT.ALLOCATION]          (replace (PFALLOC FILENAME) of FREE with '(FILE))          (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of FREE))          [COND             ((NOT (EQ (fetch (PMPAGE NTYPE) of PMPAGE)                       PMPAGEETYPE.FILE))                    (* Marker pages need to be updated.                                                           *)              (SETQ NEXT (fetch (PFALLOC NEXT) of FREE))              (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))              (UNINTERRUPTABLY                  (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.FILE)                  (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.FILE)                  (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FILE)                  (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.FILE)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of FREE))                         PMPAGE T)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                         NPMPAGE T))]          (\PFLOPPY.ALLOCATE.WATCHDOG)          (\PFLOPPY.ICHECK)          (RETURN FREE])(\PFLOPPY.ALLOCATE.LARGEST  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")                                                             (* Return largest free PFALLOC.                                                           *)    (PROG (LENGTH ANSWER)          (SETQ LENGTH 0)          (for PFALLOC in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)             when (AND (EQUAL (fetch (PFALLOC FILENAME) of PFALLOC)                                  '(FREE))                           (IGREATERP (fetch (PFALLOC LENGTH) of PFALLOC)                                  LENGTH)) do (SETQ ANSWER PFALLOC)                                                 (SETQ LENGTH (fetch (PFALLOC LENGTH)                                                                 of PFALLOC)))          (\PFLOPPY.ICHECK)          (RETURN ANSWER])(\PFLOPPY.TRUNCATE  [LAMBDA (PFALLOC LENGTH)                               (* kbr%: "22-Jul-84 22:34")                                                             (* Trunctate PFALLOC to LENGTH                                                            pages. *)    (PROG (PMPAGE NEXT NPMPAGE FREE FPMPAGE TAIL)            (* Trivial case = already the right                                                            length. *)          (COND             ((IGEQ LENGTH (fetch (PMPAGE NLENGTH) of (fetch (PFALLOC PMPAGE)                                                                 of PFALLOC)))                                                             (* No remaining pages, so no free                                                            block. *)              (\PFLOPPY.ICHECK)              (RETURN)))                                     (* Nontrivial case.                                                           *)          (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of PFALLOC))          (SETQ NEXT (fetch (PFALLOC NEXT) of PFALLOC))          (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))                                                             (* Create FREE block.                                                           *)          (SETQ FPMPAGE (create PMPAGE                               PLENGTH _ LENGTH                               PTYPE _ (fetch (PMPAGE NTYPE) of PMPAGE)                               PFILETYPE _ (fetch (PMPAGE NFILETYPE) of PMPAGE)                               NLENGTH _ (IPLUS (fetch (PMPAGE NLENGTH) of PMPAGE)                                                (IMINUS (ADD1 LENGTH)))                               NTYPE _ PMPAGEETYPE.FREE                               NFILETYPE _ FILETYPE.FREE))          (SETQ FREE (create PFALLOC                            FILENAME _ '(FREE)                            START _ (IPLUS (fetch (PFALLOC START) of PFALLOC)                                           (ADD1 LENGTH))                            PMPAGE _ FPMPAGE))          (SETQ TAIL (MEMB PFALLOC (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)))          (UNINTERRUPTABLY                                                             (* Fix PMPAGE and NPMPAGE fields.                                                           *)              (replace (PMPAGE NLENGTH) of PMPAGE with (fetch (PMPAGE PLENGTH)                                                                      of FPMPAGE))              (replace (PMPAGE PLENGTH) of NPMPAGE with (fetch (PMPAGE NLENGTH)                                                                       of FPMPAGE))              (replace (PMPAGE PTYPE) of NPMPAGE with (fetch (PMPAGE NTYPE)                                                                     of FPMPAGE))              (replace (PMPAGE PFILETYPE) of NPMPAGE with (fetch (PMPAGE NFILETYPE)                                                                         of FPMPAGE))                                                             (* Insert FREE between PFALLOC and                                                            NEXT. *)              (push (CDR TAIL)                     FREE)              (replace (PFALLOC NEXT) of PFALLOC with FREE)              (replace (PFALLOC PREV) of FREE with PFALLOC)              (replace (PFALLOC NEXT) of FREE with NEXT)              (replace (PFALLOC PREV) of NEXT with FREE)                                                             (* Write new marker pages out to                                                            floppy. *)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of PFALLOC))                     PMPAGE T)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of FREE))                     FPMPAGE T)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                     NPMPAGE T))          (\PFLOPPY.ICHECK])(\PFLOPPY.DEALLOCATE  [LAMBDA (PFALLOC)                                      (* kbr%: "22-Jul-84 22:34")    (PROG (PMPAGE NEXT NPMPAGE)          (replace (PFALLOC PLPAGE) of PFALLOC with NIL)          (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of PFALLOC))          (SETQ NEXT (fetch (PFALLOC NEXT) of PFALLOC))          (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))          (UNINTERRUPTABLY              (replace (PFALLOC FILENAME) of PFALLOC with '(FREE))              (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.FREE)              (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.FREE)              (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.FREE)              (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FREE)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of PFALLOC))                     PMPAGE T)              (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                     NPMPAGE T))          (\PFLOPPY.ICHECK])(\PFLOPPY.EXTEND  [LAMBDA (PFALLOC)                                      (* kbr%: "22-Jul-84 22:34")    (PROG (NEXT PMPAGE NNEXT NNPMPAGE OLDLENGTH LENGTH TAIL NEW START1 START2 PMPAGE1 PMPAGE2 PREV1                 PREV2 NEXT1 NEXT2 TAIL1 TAIL2)          (SETQ NEXT (fetch (PFALLOC NEXT) of PFALLOC))          (COND             ((AND (EQUAL (fetch (PFALLOC FILENAME) of NEXT)                          '(FREE))                   (fetch (PFALLOC NEXT) of NEXT))   (* Cannibalize following free block.                                                           *)              (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of PFALLOC))              (SETQ NNEXT (fetch (PFALLOC NEXT) of NEXT))              (SETQ NNPMPAGE (fetch (PFALLOC PMPAGE) of NNEXT))              (SETQ OLDLENGTH (fetch (PFALLOC LENGTH) of PFALLOC))              (SETQ LENGTH (IPLUS (fetch (PFALLOC START) of NNEXT)                                  (IMINUS (fetch (PFALLOC START) of PFALLOC))                                  -1))              (SETQ TAIL (MEMB PFALLOC (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)))              (UNINTERRUPTABLY                  (replace (PMPAGE NLENGTH) of PMPAGE with LENGTH)                  (replace (PMPAGE PLENGTH) of NNPMPAGE with LENGTH)                  (replace (PMPAGE PTYPE) of NNPMPAGE with PMPAGEETYPE.FILE)                  (replace (PMPAGE PFILETYPE) of NNPMPAGE with FILETYPE.FILE)                  (pop (CDR TAIL))                  (replace (PFALLOC NEXT) of PFALLOC with NNEXT)                  (replace (PFALLOC PREV) of NNEXT with PFALLOC)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of PFALLOC))                         PMPAGE T)                  (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NNEXT))                         NNPMPAGE T))              [COND                 ((IGREATERP LENGTH (IPLUS OLDLENGTH DEFAULT.ALLOCATION MINIMUM.ALLOCATION))                  (\PFLOPPY.TRUNCATE PFALLOC (IPLUS OLDLENGTH DEFAULT.ALLOCATION]              (\PFLOPPY.ICHECK)              (RETURN)))                                     (* Have to reallocate.                                                           *)          (SETQ NEW (\PFLOPPY.ALLOCATE (IPLUS (fetch (PFALLOC LENGTH) of PFALLOC)                                                  DEFAULT.ALLOCATION)))                                                             (* Copy contents from PFALLOC to                                                            NEW. *)          (\FLOPPY.MESSAGE "Reallocating")          [GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER (for I from (fetch (PFALLOC START)                                                                        of PFALLOC)                                                    to (fetch (PFALLOC END) of PFALLOC)                                                    as J from (fetch (PFALLOC START)                                                                         of NEW)                                                    do (\PFLOPPY.WRITEPAGENO J                                                                  (\PFLOPPY.READPAGENO I                                                                          \FLOPPY.SCRATCH.BUFFER]          (\FLOPPY.MESSAGE "Finished Reallocating")      (* Make PFALLOC and NEW switch                                                            places in (fetch (PFLOPPYFDEV                                                            PFALLOCS) of \FLOPPYFDEV) *)          (\PFLOPPY.DELETE.FROM.PFILELIST PFALLOC)          (SETQ START1 (fetch (PFALLOC START) of PFALLOC))          (SETQ START2 (fetch (PFALLOC START) of NEW))          (SETQ PMPAGE1 (fetch (PFALLOC PMPAGE) of PFALLOC))          (SETQ PMPAGE2 (fetch (PFALLOC PMPAGE) of NEW))          (SETQ PREV1 (fetch (PFALLOC PREV) of PFALLOC))          (SETQ PREV2 (fetch (PFALLOC PREV) of NEW))          (SETQ NEXT1 (fetch (PFALLOC NEXT) of PFALLOC))          (SETQ NEXT2 (fetch (PFALLOC NEXT) of NEW))          (SETQ TAIL1 (MEMB PFALLOC (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)))          (SETQ TAIL2 (MEMB NEW (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)))          (UNINTERRUPTABLY              (replace (PFALLOC START) of PFALLOC with START2)              (replace (PFALLOC START) of NEW with START1)              (replace (PFALLOC PMPAGE) of PFALLOC with PMPAGE2)              (replace (PFALLOC PMPAGE) of NEW with PMPAGE1)              (COND                 (PREV1 (replace (PFALLOC NEXT) of PREV1 with NEW)))              (COND                 (PREV2 (replace (PFALLOC NEXT) of PREV2 with PFALLOC)))              (COND                 (NEXT1 (replace (PFALLOC PREV) of NEXT1 with NEW)))              (COND                 (NEXT2 (replace (PFALLOC PREV) of NEXT2 with PFALLOC)))              (replace (PFALLOC PREV) of PFALLOC with PREV2)              (replace (PFALLOC PREV) of NEW with PREV1)              (replace (PFALLOC NEXT) of PFALLOC with NEXT2)              (replace (PFALLOC NEXT) of NEW with NEXT1)              (RPLACA TAIL1 NEW)              (RPLACA TAIL2 PFALLOC))          (\PFLOPPY.ADD.TO.PFILELIST PFALLOC)         (* Now that PFALLOC points to extended block and NEW points to old block, we        can deallocate NEW. *)          (\PFLOPPY.DEALLOCATE NEW)          (\PFLOPPY.ICHECK])(\PFLOPPY.GAINSPACE  [LAMBDA (LENGTH)                                       (* kbr%: " 1-Nov-85 16:17")                                                             (* Returns after a free block of                                                            length LENGTH has been made                                                            available. *)    (PROG (PFALLOCS)      RETRY          (\PFLOPPY.GAINSPACE.MERGE)                     (* See if we have a long enough                                                            block yet. *)          (COND             ((for PFALLOC in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)                 thereis (AND (EQUAL (fetch (PFALLOC FILENAME) of PFALLOC)                                         '(FREE))                                  (IGEQ (fetch (PFALLOC LENGTH) of PFALLOC)                                        LENGTH)))              (RETURN)))                                     (* Punt to user. *)          (COND             ((AND (IGEQ (FLOPPY.FREE.PAGES)                         (IPLUS LENGTH MINIMUM.ALLOCATION))                   (FLOPPY.COMPACT))              (GO RETRY)))          (LISPERROR "FILE SYSTEM RESOURCES EXCEEDED" '{FLOPPY} T)          (GO RETRY])(\PFLOPPY.GAINSPACE.MERGE  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")                                                             (* Merge adjacent free blocks.                                                           *)    (PROG (PFALLOCS FREE OTHERS LAST NEXT PMPAGE NPMPAGE LENGTH)          (SETQ PFALLOCS (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV))          (\PFLOPPY.ICHECK)          (do [SETQ FREE (for P in PFALLOCS                                thereis (AND (EQUAL (fetch (PFALLOC FILENAME) of P)                                                        '(FREE))                                                 (fetch (PFALLOC NEXT) of P)                                                 (EQUAL (fetch (PFALLOC FILENAME)                                                           of (fetch (PFALLOC NEXT)                                                                     of P))                                                        '(FREE))                                                 (fetch (PFALLOC NEXT) of (fetch                                                                                   (PFALLOC NEXT)                                                                                     of P]                 (COND                    ((NULL FREE)                     (RETURN)))                 (SETQ OTHERS (for (P _ (fetch (PFALLOC NEXT) of FREE))                                 by (fetch (PFALLOC NEXT) of P)                                 while (AND (EQUAL (fetch (PFALLOC FILENAME) of P)                                                       '(FREE))                                                (fetch (PFALLOC NEXT) of P)) collect                                                                                     P))                 (SETQ LAST (CAR (LAST OTHERS)))                 (SETQ NEXT (fetch (PFALLOC NEXT) of LAST))                 (SETQ PMPAGE (fetch (PFALLOC PMPAGE) of FREE))                 (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))                 (SETQ LENGTH (IPLUS (fetch (PFALLOC START) of NEXT)                                     (IMINUS (fetch (PFALLOC START) of FREE))                                     -1))                 (UNINTERRUPTABLY                     (for P in OTHERS do (DREMOVE P PFALLOCS))                     (replace (PFALLOC NEXT) of FREE with NEXT)                     (replace (PFALLOC PREV) of NEXT with FREE)                     (replace (PMPAGE NLENGTH) of PMPAGE with LENGTH)                     (replace (PMPAGE PLENGTH) of NPMPAGE with LENGTH)                     (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of FREE))                            PMPAGE T)                     (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                            NPMPAGE T))                 (\PFLOPPY.ICHECK])(\PFLOPPY.ALLOCATE.WATCHDOG  [LAMBDA NIL                                            (* kbr%: "30-Sep-84 10:01")                                                             (* Bark bark *)    (PROG (FREEPAGES)          (COND             ((NOT (EQ \FLOPPYFDEV \PFLOPPYFDEV))         (* Must be sysout or huge mode. Having little space after an allocation is what        we expect. *)              (RETURN)))          (SETQ FREEPAGES (\PFLOPPY.FREE.PAGES))          (COND             ((ILESSP FREEPAGES 200)              (\FLOPPY.MESSAGE (CONCAT FREEPAGES " pages left."])(\PFLOPPY.FREE.PAGES  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")                                                             (* Assume floppy is mounted.                                                           Return number of free pages on                                                            floppy. *)    (PROG (ANSWER)         (* Answer is calculated as if all free blocks were concentrated into one large        free block. *)          (SETQ ANSWER 0)          [for PFALLOC in (fetch (PFINFO PFALLOCS) of (fetch (FDEV DEVICEINFO)                                                                         of \FLOPPYFDEV))             when (EQUAL (fetch (PFALLOC FILENAME) of PFALLOC)                             '(FREE)) do                 (* Add in 1 here for overhead pages                                                            that could be reclaimed.                                                           *)                                            (SETQ ANSWER (IPLUS ANSWER 1 (fetch (PFALLOC LENGTH)                                                                            of PFALLOC]                                                             (* Lose 1 for overhead on large free                                                            block. *)          (SETQ ANSWER (SUB1 ANSWER))          (RETURN ANSWER])(\PFLOPPY.LENGTHS  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")    (for P in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)       collect (fetch (PFALLOC LENGTH) of P])(\PFLOPPY.STARTS  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")    (for P in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)       collect (fetch (PFALLOC START) of P])(\PFLOPPY.ICHECK  [LAMBDA NIL                                            (* hdj " 5-Jun-86 13:00")                                                             (* Integrity check.                                                           *)    (PROG (STARTS LENGTHS PFALLOCS PMPAGE1 PMPAGE2)          (SETQ STARTS (\PFLOPPY.STARTS))          (SETQ LENGTHS (\PFLOPPY.LENGTHS))          (COND             ([NOT (EQUAL STARTS (SORT (COPY STARTS]              (\FLOPPY.SEVERE.ERROR "Starts Allocation Error")))          (COND             ((for L in LENGTHS thereis (ILESSP L 0))              (\FLOPPY.SEVERE.ERROR "Lengths1 Allocation Error")))          (COND             ((NOT (IEQP (IPLUS (for L in LENGTHS sum L)                                (LENGTH LENGTHS))                         (IPLUS \PFLOPPYLASTDATAPAGE (IMINUS \PFLOPPYFIRSTDATAPAGE)                                1)))              (\FLOPPY.SEVERE.ERROR "Lengths2 Allocation Error")))          (SETQ PFALLOCS (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV))          (for P1 in PFALLOCS when [OR (AND (fetch (PFALLOC PREV) of P1)                                                        (NOT (MEMB (fetch (PFALLOC PREV)                                                                      of P1)                                                                   PFALLOCS)))                                                   (AND (fetch (PFALLOC NEXT) of P1)                                                        (NOT (MEMB (fetch (PFALLOC NEXT)                                                                      of P1)                                                                   PFALLOCS]             do (\FLOPPY.SEVERE.ERROR "Links Allocation Error"))          (for P1 in PFALLOCS as P2 in (CDR PFALLOCS)             when (OR (NOT (EQ (fetch (PFALLOC NEXT) of P1)                                   P2))                          (NOT (EQ (fetch (PFALLOC PREV) of P2)                                   P1))) do (\FLOPPY.SEVERE.ERROR "Links2 Allocation Error"))          (for P1 in PFALLOCS as P2 in (CDR PFALLOCS)             when (NOT (IEQP (IPLUS (fetch (PFALLOC END) of P1)                                        2)                                 (fetch (PFALLOC START) of P2))) do (                                                                               \FLOPPY.SEVERE.ERROR                                                                                                                                                           "Lengths3 Allocation Error"                                                                                 ))                                                             (* Patch around FUGUE disaster *)          [OR 'POSSIBLY.FUGUE.FLOPPY (for P1 in PFALLOCS as P2 in (CDR PFALLOCS)                                        do (SETQ PMPAGE1 (fetch (PFALLOC PMPAGE) of                                                                                         P1))                                              (SETQ PMPAGE2 (fetch (PFALLOC PMPAGE) of P2))                                              (COND                                                 ([OR (NOT (IEQP (fetch (PMPAGE NLENGTH)                                                                    of PMPAGE1)                                                                 (fetch (PMPAGE PLENGTH)                                                                    of PMPAGE2)))                                                      (NOT (IEQP (fetch (PMPAGE NTYPE)                                                                    of PMPAGE1)                                                                 (fetch (PMPAGE PTYPE)                                                                    of PMPAGE2)))                                                      (NOT (IEQP (fetch (PMPAGE NFILEID)                                                                    of PMPAGE1)                                                                 (fetch (PMPAGE PFILEID)                                                                    of PMPAGE2)))                                                      (NOT (IEQP (fetch (PMPAGE NFILETYPE)                                                                    of PMPAGE1)                                                                 (fetch (PMPAGE PFILETYPE)                                                                    of PMPAGE2]                                                  (\FLOPPY.SEVERE.ERROR                                                          "PMPAGEs Allocation Error"]          (COND             ([NOT (FMEMB (FLOPPY.MODE)                          '(SYSOUT HUGEPILOT]              (for F in (\DEVICE-OPEN-STREAMS \FLOPPYFDEV)                 when [AND (EQ (fetch (STREAM DEVICE) of F)                                   \FLOPPYFDEV)                               (NOT (MEMB (fetch (FLOPPYSTREAM PFALLOC) of F)                                          (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV]                 do (\FLOPPY.SEVERE.ERROR "Streams Allocation Error"])(\PFLOPPY.ALLOCATIONS  [LAMBDA NIL                                            (* kbr%: " 7-Aug-85 19:19")                                                             (* Debugging fn. Puts up a bitmap                                                            representation of allocations on                                                            floppy. *)    (PROG (SECTORSPERCYLINDER REGION)          (SETQ SECTORSPERCYLINDER (ITIMES \FLOPPY.TRACKSPERCYLINDER \FLOPPY.SECTORSPERTRACK))          [COND             ((NULL \FLOPPY.ALLOCATIONS.BITMAP)              (SETQ \FLOPPY.ALLOCATIONS.BITMAP (BITMAPCREATE SECTORSPERCYLINDER \FLOPPY.CYLINDERS]          (BITBLT NIL NIL NIL \FLOPPY.ALLOCATIONS.BITMAP NIL NIL NIL NIL 'TEXTURE 'REPLACE WHITESHADE                 )          (for PFALLOC in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)             when [NOT (EQUAL (fetch (PFALLOC FILENAME) of PFALLOC)                                  '(FREE] do (for I from (fetch (PFALLOC START)                                                                        of PFALLOC)                                                    to (fetch (PFALLOC END) of PFALLOC)                                                    do (BITMAPBIT \FLOPPY.ALLOCATIONS.BITMAP                                                                  (IREMAINDER (SUB1 I)                                                                         SECTORSPERCYLINDER)                                                                  (IQUOTIENT (SUB1 I)                                                                         SECTORSPERCYLINDER)                                                                  1)))          (EDITBM \FLOPPY.ALLOCATIONS.BITMAP]))(* ; "`SERVICES' *")(DEFINEQ(FLOPPY.FREE.PAGES  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:40")    (WITH.MONITOR \FLOPPYLOCK        (\FLOPPY.CACHED.READ)        (SELECTQ (FLOPPY.MODE)            ((PILOT HUGEPILOT SYSOUT)                  (\PFLOPPY.FREE.PAGES))            (CPM (\CFLOPPY.FREE.PAGES))            (SHOULDNT)))])(FLOPPY.FORMAT  [LAMBDA (NAME AUTOCONFIRMFLG SLOWFLG)                  (* ; "Edited 11-Jun-87 14:35 by jds")(* ;;; "Format a floppy disk for use.  Label the floppy with NAME.  If AUTOCONFIRMFLG, then don't bother asking the user if he's willing to lose the information on the floppy.  If SLOWFLG, then really format it track by track; otherwise, if possible, just rewrite the volume label and clean out the directory.")    (WITH.MONITOR \FLOPPYLOCK        (SELECTQ (FLOPPY.MODE)            ((PILOT HUGEPILOT SYSOUT)                        (* ;                  "For Pilot, HugePilot, and Sysout format floppies, it's the same formatting code:")                 (\PFLOPPY.FORMAT NAME AUTOCONFIRMFLG SLOWFLG))            (CPM                                             (* ; "Format for CPM use (obsolete):")                 (\CFLOPPY.FORMAT NAME AUTOCONFIRMFLG SLOWFLG))            (SHOULDNT)))])(FLOPPY.NAME  [LAMBDA (NAME)                                         (* kbr%: "22-Jul-84 22:40")    (COND       (NAME (FLOPPY.SET.NAME NAME))       (T (FLOPPY.GET.NAME])(FLOPPY.GET.NAME  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:40")    (WITH.MONITOR \FLOPPYLOCK        (SELECTQ (FLOPPY.MODE)            ((PILOT HUGEPILOT SYSOUT)                  (\PFLOPPY.GET.NAME))            (SHOULDNT)))])(FLOPPY.SET.NAME  [LAMBDA (NAME)                                         (* kbr%: "22-Jul-84 22:40")    (WITH.MONITOR \FLOPPYLOCK        (SELECTQ (FLOPPY.MODE)            ((PILOT HUGEPILOT SYSOUT)                  (\PFLOPPY.SET.NAME NAME))            (SHOULDNT)))])(FLOPPY.CAN.READP  [LAMBDA NIL                                            (* ; "Edited 11-Jun-87 17:03 by jds")    (* ;; "Returns T if a floppy is loaded and readable.")    (WITH.MONITOR \FLOPPYLOCK        (PROG (ANSWER)              [COND                 ((\FLOPPY.EXISTSP T)                  (SETQ ANSWER (\FLOPPY.MOUNTEDP T))                  (COND                     ((NOT ANSWER)                           (* ;                                                           "Possibly the user switched floppies.  *")                      (\FLOPPY.CLOSE)                      (\FLOPPY.INITIALIZE T)                      (SETQ ANSWER (\FLOPPY.MOUNTEDP T]              (RETURN ANSWER)))])(FLOPPY.CAN.WRITEP  [LAMBDA NIL                                            (* ; "Edited 11-Jun-87 16:56 by jds")    (* ;; "Returns T if the floppy is available and writeable.")    (WITH.MONITOR \FLOPPYLOCK        (PROG (ANSWER)              [COND                 ((\FLOPPY.EXISTSP T)                  (SETQ ANSWER (\FLOPPY.CAN.WRITEP T))                  (COND                     ((NOT ANSWER)                           (* ;                                                           "Possibly the user switched floppies.  *")                      (\FLOPPY.CLOSE)                      (\FLOPPY.INITIALIZE T)                      (SETQ ANSWER (\FLOPPY.CAN.WRITEP T]              (RETURN ANSWER)))])(FLOPPY.WAIT.FOR.FLOPPY  [LAMBDA (NEWFLG)                                       (* ; "Edited 29-Jul-87 14:48 by jds")                                                             (* ;                                                    "Wait until floppy drive contains (new) floppy.")    (WITH.MONITOR \FLOPPYLOCK        [PROG NIL                                            (* ;                                        "NOTE: Wait 2 seconds to guarantee drive door is secure.  *")              (\FLOPPY.CLOSE)              (COND                 ((EQ (MACHINETYPE)                      'DOVE)                  (SETQ NEWFLG T)))              (COND                 (NEWFLG (SELECTQ (MACHINETYPE)                             (DANDELION (DISMISS 5000)                                        (until (NOT (FLOPPY.CAN.READP)) do (BLOCK)))                             (DOVE                           (* ;                                                      "GODDAMN DAYBREAK DOOROPEN BIT DOESN'T WORK *")                                   (\FLOPPY.MESSAGE                                           "Type any character after inserting new floppy." T)                                   (CLEARBUF T)                                   (\GETKEY))                             NIL)))          DEBOUNCE              (until (FLOPPY.CAN.READP) do (BLOCK))              (COND                 (NEWFLG (DISMISS 2000)))              (COND                 ((NOT (\FLOPPY.CAN.READP T))            (* ;                                                            "Drive door probably didn't stick.  *")                  (GO DEBOUNCE])]))(* ; "`SYSOUT' *")(RPAQ? \SFLOPPYINFO NIL)(RPAQ? \SFLOPPYFDEV NIL)(RPAQ? \HFLOPPY.MAXPAGES NIL)(RPAQ? \SFLOPPY.PAGENO NIL)(RPAQ? \SFLOPPY.FLOPPYNO NIL)(RPAQ? \SFLOPPY.PAGES NIL)(RPAQ? \SFLOPPY.HUGELENGTH NIL)(RPAQ? \SFLOPPY.HUGEPAGELENGTH NIL)(RPAQ? \SFLOPPY.IWRITEDATE NIL)(RPAQ? \SFLOPPY.FLOPPYNAME "Lisp Sysout ")(RPAQ? \SFLOPPY.FILENAME 'lisp.sysout)(RPAQ? \SFLOPPY.RECOG NIL)(RPAQ? \SFLOPPY.OTHERINFO NIL)(RPAQ? \SFLOPPY.SLOWFLG T)(RPAQ? \SFLOPPY.HACK.MODE NIL)(RPAQ? \SFLOPPY.HACK.STREAM NIL)(DEFINEQ(\SFLOPPY.INIT  [LAMBDA NIL                                            (* hdj "24-Sep-86 10:53")    (PROG NIL          (SETQ \SFLOPPYINFO (create PFINFO))          (SETQ \SFLOPPYFDEV (create FDEV                                    DEVICENAME _ 'FLOPPY                                    NODIRECTORIES _ T                                    CLOSEFILE _ (FUNCTION \SFLOPPY.CLOSEHUGEFILE)                                    DELETEFILE _ (FUNCTION NILL)                                    DIRECTORYNAMEP _ (FUNCTION TRUE)                                    EVENTFN _ (FUNCTION \FLOPPY.EVENTFN)                                    GENERATEFILES _ (FUNCTION \PFLOPPY.GENERATEFILES)                                    GETFILEINFO _ (FUNCTION \SFLOPPY.GETFILEINFO)                                    GETFILENAME _ (FUNCTION \PFLOPPY.GETFILENAME)                                    HOSTNAMEP _ (FUNCTION \FLOPPY.HOSTNAMEP)                                    OPENFILE _ (FUNCTION \SFLOPPY.OPENHUGEFILE)                                    READPAGES _ (FUNCTION \SFLOPPY.READPAGES)                                    REOPENFILE _ (FUNCTION \SFLOPPY.OPENHUGEFILE)                                    SETFILEINFO _ (FUNCTION NILL)                                    TRUNCATEFILE _ (FUNCTION NILL)                                    WRITEPAGES _ (FUNCTION \SFLOPPY.WRITEPAGES)                                    DEVICEINFO _ \SFLOPPYINFO                                    RENAMEFILE _ (FUNCTION NILL)                                    REGISTERFILE _ (FUNCTION \ADD-OPEN-STREAM)                                    UNREGISTERFILE _ (FUNCTION \GENERIC-UNREGISTER-STREAM)                                    OPENP _ (FUNCTION \GENERIC.OPENP)))          (\MAKE.PMAP.DEVICE \SFLOPPYFDEV])(\SFLOPPY.GETFILEINFO  [LAMBDA (FILE ATTRIBUTE FDEV)                          (* kbr%: "25-Nov-84 13:02")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PLPAGE ANSWER)              (\FLOPPY.CACHED.READ)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              (SETQ PLPAGE (fetch (FLOPPYSTREAM PLPAGE) of STREAM))                                                             (* Wizard incantations%: PAGELENGTH,                                                            HUGEPAGESTART, HUGEPAGELENGTH,                                                            HUGELENGTH *)              (SETQ ANSWER (SELECTQ ATTRIBUTE                               (WRITEDATE (fetch (PLPAGE WRITEDATE) of PLPAGE))                               (CREATIONDATE (fetch (PLPAGE CREATIONDATE) of PLPAGE))                               (IWRITEDATE (fetch (PLPAGE IWRITEDATE) of PLPAGE))                               (ICREATIONDATE (fetch (PLPAGE ICREATIONDATE) of PLPAGE))                               (LENGTH                       (* We want hugelength.                                                           *)                                       (fetch (PLPAGE HUGELENGTH) of PLPAGE))                               (TYPE (fetch (PLPAGE TYPE) of PLPAGE))                               (BYTESIZE 8)                               (MESATYPE (fetch (PLPAGE MESATYPE) of PLPAGE))                               (PAGELENGTH (fetch (PLPAGE PAGELENGTH) of PLPAGE))                               (HUGEPAGESTART (fetch (PLPAGE HUGEPAGESTART) of PLPAGE))                               (HUGEPAGELENGTH                                     (fetch (PLPAGE HUGEPAGELENGTH) of PLPAGE))                               (HUGELENGTH (fetch (PLPAGE HUGELENGTH) of PLPAGE))                               NIL))              (RETURN ANSWER)))])(\SFLOPPY.OPENHUGEFILE  [LAMBDA (FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM)   (* hdj "16-May-86 21:52")         (* * if file is open in conflicting way, barf)    (if (NOT (\FILE-CONFLICT FILE ACCESS FDEV))        then (WITH.MONITOR \FLOPPYLOCK                     (PROG (STREAM)                       RETRY                           (SELECTQ ACCESS                               (OUTPUT (SELECTQ RECOG                                           (NEW              (* OK. *))                                           (PROGN (SETQ RECOG (LISPERROR "ILLEGAL ARG" RECOG))                                                  (GO RETRY))))                               (INPUT (SELECTQ RECOG                                          (OLD               (* OK. *))                                          (PROGN (SETQ RECOG (LISPERROR "ILLEGAL ARG" RECOG))                                                 (GO RETRY))))                               (PROGN (SETQ ACCESS (LISPERROR "ILLEGAL ARG" ACCESS))                                      (GO RETRY)))                           (SETQ \SFLOPPY.RECOG RECOG)                           (SETQ \SFLOPPY.OTHERINFO (\FLOPPY.OTHERINFO OTHERINFO))                           [COND                              ((EQ RECOG 'NEW)                               (SETQ \SFLOPPY.IWRITEDATE (IDATE))                               (SETQ \SFLOPPY.HUGELENGTH (CDR (ASSOC 'LENGTH \SFLOPPY.OTHERINFO)))                               (COND                                  ((NULL \SFLOPPY.HUGELENGTH)                                   (\FLOPPY.MESSAGE                                           "Can't open file without LENGTH parameter in SYSOUT mode."                                          T)                                   (LISPERROR "FILE WON'T OPEN" "")))                               (SETQ \SFLOPPY.HUGEPAGELENGTH (IQUOTIENT (IPLUS \SFLOPPY.HUGELENGTH                                                                                511)                                                                    512))                               (printout T (IQUOTIENT (IPLUS \SFLOPPY.HUGEPAGELENGTH                                                              \HFLOPPY.MAXPAGES -1)                                                  \HFLOPPY.MAXPAGES)                                      " floppies will be required." T)                               (RPLACD (OR (ASSOC 'LENGTH \SFLOPPY.OTHERINFO)                                           (PROGN (push \SFLOPPY.OTHERINFO (LIST 'LENGTH))                                                  (CAR \SFLOPPY.OTHERINFO)))                                      (ITIMES \HFLOPPY.MAXPAGES 512))                               (SETQ STREAM (\SFLOPPY.OUTPUTFLOPPY \SFLOPPY.FLOPPYNAME                                                    \SFLOPPY.FILENAME \SFLOPPY.OTHERINFO)))                              (T (SETQ STREAM (\SFLOPPY.INPUTFLOPPY \SFLOPPY.FLOPPYNAME                                                      \SFLOPPY.FILENAME \SFLOPPY.OTHERINFO]                           (RETURN STREAM)))])(\SFLOPPY.WRITEPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* kbr%: "26-Aug-84 11:20")    (PROG NIL          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\SFLOPPY.WRITEPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\SFLOPPY.WRITEPAGE  [LAMBDA (STREAM FIRSTPAGE# BUFFER)                     (* kbr%: "26-Aug-84 11:20")    (WITH.MONITOR \FLOPPYLOCK        (PROG (NEWSTREAM)              [COND                 ((IGEQ \SFLOPPY.PAGENO \HFLOPPY.MAXPAGES)                  (\SFLOPPY.CLOSEFLOPPY STREAM)                  (RINGBELLS)                  [RPLACD (OR (ASSOC 'LENGTH \SFLOPPY.OTHERINFO)                              (PROGN (push \SFLOPPY.OTHERINFO (LIST 'LENGTH))                                     (CAR \SFLOPPY.OTHERINFO)))                         (IMIN (ITIMES \HFLOPPY.MAXPAGES 512)                               (IDIFFERENCE \SFLOPPY.HUGELENGTH (ITIMES \SFLOPPY.FLOPPYNO                                                                        \HFLOPPY.MAXPAGES 512]                  (SETQ STREAM (\SFLOPPY.OUTPUTFLOPPY \SFLOPPY.FLOPPYNAME \SFLOPPY.FILENAME                                       \SFLOPPY.OTHERINFO STREAM]                                                             (* Write page \SFLOPPY.PAGENO.                                                           *)              (GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER (\BLT \FLOPPY.SCRATCH.BUFFER BUFFER 256)                     (\PFLOPPY.WRITEPAGE STREAM \SFLOPPY.PAGENO \FLOPPY.SCRATCH.BUFFER))              (SETQ \SFLOPPY.PAGENO (ADD1 \SFLOPPY.PAGENO))))])(\SFLOPPY.READPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* kbr%: "26-Aug-84 11:20")    (PROG NIL          (COND             ((EQ \SFLOPPY.RECOG 'NEW)              (RETURN)))          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\SFLOPPY.READPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\SFLOPPY.READPAGE  [LAMBDA (STREAM FIRSTPAGE# BUFFER)                     (* bvm%: "22-Nov-85 01:05")    (WITH.MONITOR \FLOPPYLOCK        (PROG (NEWSTREAM)              [COND                 ((IGEQ \SFLOPPY.PAGENO \SFLOPPY.PAGES)                  (\SFLOPPY.CLOSEFLOPPY STREAM)                  (RINGBELLS)                  (SETQ STREAM (\SFLOPPY.INPUTFLOPPY \SFLOPPY.FLOPPYNAME \SFLOPPY.FILENAME                                       \SFLOPPY.OTHERINFO STREAM]                                                             (* Read page \SFLOPPY.PAGENO.                                                           *)              (\PFLOPPY.READPAGE STREAM \SFLOPPY.PAGENO BUFFER)              (SETQ \SFLOPPY.PAGENO (ADD1 \SFLOPPY.PAGENO))))])(\SFLOPPY.CLOSEHUGEFILE  [LAMBDA (STREAM)                                       (* hdj "24-Sep-86 10:33")    (WITH.MONITOR \FLOPPYLOCK        (PROG (FULLFILENAME)              (COND                 ((EQ \SFLOPPY.RECOG 'OLD)                  (RETURN)))              (\CLEARMAP STREAM)         (* ;; "Following 2 SETQ's patch around SYSOUT not passing us right HUGELENGTH in orignal OTHERINFO.  I think this may be fixed now.  *")              (COND                 ((NOT (IEQP (IPLUS (ITIMES 512 (fetch (STREAM EPAGE) of STREAM))                                    (fetch (STREAM EOFFSET) of STREAM))                             \SFLOPPY.HUGELENGTH))                  (\FLOPPY.MESSAGE                          "Warning.  Predicted file length disagrees with actual length.")                  (\FLOPPY.MESSAGE "Proceeding anyway.")))              (SETQ \SFLOPPY.HUGELENGTH (IPLUS (ITIMES 512 (fetch (STREAM EPAGE) of STREAM))                                               (fetch (STREAM EOFFSET) of STREAM)))              (SETQ \SFLOPPY.HUGEPAGELENGTH (IQUOTIENT (IPLUS \SFLOPPY.HUGELENGTH 511)                                                   512))              (SETQ FULLFILENAME (\SFLOPPY.CLOSEFLOPPY STREAM T))              (COND                 ((EQ STREAM \SFLOPPY.HACK.STREAM)           (* ; "This was a sysout *")                  (FLOPPY.MODE \SFLOPPY.HACK.MODE)                  (SETQ \SFLOPPY.HACK.STREAM NIL)))              (RETURN FULLFILENAME)))])(\SFLOPPY.INPUTFLOPPY  [LAMBDA (FLOPPYNAME FILENAME OTHERINFO OLDSTREAM)      (* ; "Edited 30-Jul-87 11:24 by jds")    (* ;; "Set up to read from a sysout floppy;  Prompt for the next floppy, if need be.")    (* ;; "Returns a stream open on the file.")    (PROG (FLOPPYNAME#I STREAM)          [COND             ((NULL OLDSTREAM)              (SETQ \SFLOPPY.FLOPPYNO 1))             (T (SETQ \SFLOPPY.FLOPPYNO (ADD1 \SFLOPPY.FLOPPYNO]          (SETQ FLOPPYNAME#I (CONCAT FLOPPYNAME "#" \SFLOPPY.FLOPPYNO))          (COND             ((OR (IGREATERP \SFLOPPY.FLOPPYNO 1)                  (NOT (\FLOPPY.UNCACHED.READ T)))              (printout T "Insert floppy " FLOPPYNAME#I T)              (FLOPPY.WAIT.FOR.FLOPPY T)))          (SETQ STREAM (\PFLOPPY.OPENFILE FILENAME 'INPUT 'OLD OTHERINFO \FLOPPYFDEV))          (SETQ \SFLOPPY.PAGENO 0)          [COND             ((NULL STREAM)                                  (* ;       "Couldn't open the file on this floppy.  Might be a bad floppy, might be in PILOT mode, etc.")              (* ;; "Returning NIL will cause OPENFILE code to signal %"File Not Found%":")              (LISPERROR "FILE NOT FOUND" FILENAME)              (RETURN NIL))             (OLDSTREAM                                      (* ;                                               "We're opening a continuation floppy for a big file.")                    (* ;;                   "Fill in fields in the existing stream to mimic this floppy's worth of info:")                    (replace (FLOPPYSTREAM PFALLOC) of OLDSTREAM with (fetch                                                                                   (FLOPPYSTREAM                                                                                    PFALLOC)                                                                                     of STREAM))                    (replace (FLOPPYSTREAM PLPAGE) of OLDSTREAM with (fetch                                                                                  (FLOPPYSTREAM                                                                                   PLPAGE)                                                                                    of STREAM))                    (SETQ STREAM OLDSTREAM))             (T                                              (* ; "Opening a fresh sysout stream.  Fill in GLOBAL variables from the directory entry, to control the reading of the file across floppies.")                (SETQ \SFLOPPY.HUGELENGTH (fetch (PLPAGE HUGELENGTH) of (fetch                                                                                 (FLOPPYSTREAM PLPAGE                                                                                        )                                                                                   of STREAM)))                (SETQ \SFLOPPY.HUGEPAGELENGTH (fetch (PLPAGE HUGEPAGELENGTH)                                                 of (fetch (FLOPPYSTREAM PLPAGE) of                                                                                         STREAM)))                (replace (STREAM EPAGE) of STREAM with (IQUOTIENT \SFLOPPY.HUGELENGTH 512                                                                          ))                (replace (STREAM EOFFSET) of STREAM with (IREMAINDER \SFLOPPY.HUGELENGTH                                                                            512]          (SETQ \SFLOPPY.PAGES (COND                                  (STREAM (fetch (PLPAGE PAGELENGTH) of (fetch                                                                                 (FLOPPYSTREAM PLPAGE                                                                                        )                                                                                   of STREAM)))                                  (T 0)))          (RETURN STREAM])(\SFLOPPY.OUTPUTFLOPPY  [LAMBDA (FLOPPYNAME FILENAME OTHERINFO OLDSTREAM)      (* kbr%: " 5-Aug-86 16:26")    (PROG (FLOPPYNAME#I STREAM)          [COND             ((NULL OLDSTREAM)              (SETQ \SFLOPPY.FLOPPYNO 1))             (T (SETQ \SFLOPPY.FLOPPYNO (ADD1 \SFLOPPY.FLOPPYNO]          (SETQ FLOPPYNAME#I (CONCAT FLOPPYNAME "#" \SFLOPPY.FLOPPYNO))          (COND             ((AND (IEQP \SFLOPPY.FLOPPYNO 1)                   (\FLOPPY.UNCACHED.READ T))            (* Don't prompt if first floppy                                                            already ready for us.                                                           *)              (GO FORMAT)))      RETRY          (printout T "Insert floppy to become " FLOPPYNAME#I T)          (FLOPPY.WAIT.FOR.FLOPPY T)      FORMAT          (COND             ((NOT (\FLOPPY.UNCACHED.WRITE T))              (printout T "Can't proceed.  This floppy is writeprotected." T)              (GO RETRY))             ((NOT (\PFLOPPY.FORMAT FLOPPYNAME#I NIL \SFLOPPY.SLOWFLG))                                                             (* Didn't format *)              (GO RETRY)))          (SETQ STREAM (\PFLOPPY.OPENFILE FILENAME 'OUTPUT 'NEW OTHERINFO \FLOPPYFDEV))          (SETQ \SFLOPPY.PAGENO 0)          (SETQ \SFLOPPY.PAGES (IQUOTIENT (IPLUS (CDR (ASSOC 'LENGTH OTHERINFO))                                                 511)                                      512))          (COND             (OLDSTREAM (replace (FLOPPYSTREAM PFALLOC) of OLDSTREAM                           with (fetch (FLOPPYSTREAM PFALLOC) of STREAM))                    (replace (FLOPPYSTREAM PLPAGE) of OLDSTREAM with (fetch                                                                                  (FLOPPYSTREAM                                                                                   PLPAGE)                                                                                    of STREAM))                    (SETQ STREAM OLDSTREAM)))          (replace (STREAM FULLFILENAME) of STREAM with (PACK* '{FLOPPY} FILENAME))          (replace (PLPAGE $NAME) of (fetch (FLOPPYSTREAM PLPAGE) of STREAM)             with FILENAME)          (replace (PFALLOC FILENAME) of (fetch (FLOPPYSTREAM PFALLOC) of STREAM)             with FILENAME)          (RETURN STREAM])(\SFLOPPY.CLOSEFLOPPY  [LAMBDA (STREAM LASTFLOPPYFLG)                         (* kbr%: "25-Feb-85 12:18")                                                             (* The same as \PFLOPPY.CLOSEFILE                                                            but without releasing STREAM.                                                           Called only by \SFLOPPY.WRITEPAGE.                                                           *)    (PROG (PFALLOC PLPAGE PMPAGE NEXT NPMPAGE)          (COND             ((EQ (\GETACCESS STREAM)                  'INPUT)              (RETURN)))          [\PFLOPPY.TRUNCATEFILE STREAM [COND                                               ((NOT LASTFLOPPYFLG)                                                \HFLOPPY.MAXPAGES)                                               (T (IDIFFERENCE (fetch (STREAM EPAGE) of                                                                                         STREAM)                                                         (ITIMES \HFLOPPY.MAXPAGES (SUB1                                                                                     \SFLOPPY.FLOPPYNO                                                                                         ]                 (COND                    ((NOT LASTFLOPPYFLG)                     0)                    (T (fetch (STREAM EOFFSET) of STREAM]          (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))          (SETQ PLPAGE (fetch (PFALLOC PLPAGE) of PFALLOC))          (replace (PLPAGE IWRITEDATE) of PLPAGE with \SFLOPPY.IWRITEDATE)          (replace (PLPAGE ICREATIONDATE) of PLPAGE with \SFLOPPY.IWRITEDATE)          (replace (PLPAGE HUGEPAGESTART) of PLPAGE with (ITIMES \HFLOPPY.MAXPAGES                                                                            (SUB1 \SFLOPPY.FLOPPYNO))                 )          (replace (PLPAGE HUGEPAGELENGTH) of PLPAGE with \SFLOPPY.HUGEPAGELENGTH)          (replace (PLPAGE HUGELENGTH) of PLPAGE with \SFLOPPY.HUGELENGTH)          (\PFLOPPY.WRITEPAGENO (fetch (PFALLOC START) of PFALLOC)                 PLPAGE)          (\PFLOPPY.SAVE.PFILELIST)          (\PFLOPPY.SAVE.PSECTOR9])(\SFLOPPY.HACK  [LAMBDA (FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM)   (* kbr%: " 2-Dec-84 11:58")    (COND       ([AND (STKPOS '\COPYSYS)             (NOT (EQ (FLOPPY.MODE)                      'SYSOUT]                               (* Sysouting to {FLOPPY} *)        (SETQ \SFLOPPY.HACK.MODE (FLOPPY.MODE 'SYSOUT))        (SETQ \SFLOPPY.HACK.STREAM (\SFLOPPY.OPENHUGEFILE FILE ACCESS RECOG OTHERINFO \FLOPPYFDEV                                          OLDSTREAM))        \SFLOPPY.HACK.STREAM)       (T                                                    (* The usual case is to return NIL                                                            telling OPENFILE fn to proceed                                                            normally *)          NIL]))(* ; "`HUGE' *")(RPAQ? \HFLOPPYINFO NIL)(RPAQ? \HFLOPPYFDEV NIL)(RPAQ? \HFLOPPY.MAXPAGES NIL)(RPAQ? \HFLOPPY.PAGENO NIL)(RPAQ? \HFLOPPY.FLOPPYNO NIL)(RPAQ? \HFLOPPY.HUGELENGTH NIL)(RPAQ? \HFLOPPY.HUGEPAGELENGTH NIL)(RPAQ? \HFLOPPY.IWRITEDATE NIL)(RPAQ? \HFLOPPY.FLOPPYNAME NIL)(RPAQ? \HFLOPPY.FILENAME NIL)(RPAQ? \HFLOPPY.RECOG NIL)(RPAQ? \HFLOPPY.OTHERINFO NIL)(RPAQ? \HFLOPPY.SLOWFLG T)(DEFINEQ(\HFLOPPY.INIT  [LAMBDA NIL                                            (* hdj "24-Sep-86 10:54")    (PROG NIL          (SETQ \HFLOPPYINFO (create PFINFO))          (SETQ \HFLOPPYFDEV (create FDEV                                    DEVICENAME _ 'FLOPPY                                    NODIRECTORIES _ T                                    CLOSEFILE _ (FUNCTION \HFLOPPY.CLOSEHUGEFILE)                                    DELETEFILE _ (FUNCTION NILL)                                    DIRECTORYNAMEP _ (FUNCTION TRUE)                                    EVENTFN _ (FUNCTION \FLOPPY.EVENTFN)                                    GENERATEFILES _ (FUNCTION \PFLOPPY.GENERATEFILES)                                    GETFILEINFO _ (FUNCTION \HFLOPPY.GETFILEINFO)                                    GETFILENAME _ (FUNCTION \PFLOPPY.GETFILENAME)                                    HOSTNAMEP _ (FUNCTION \FLOPPY.HOSTNAMEP)                                    OPENFILE _ (FUNCTION \HFLOPPY.OPENHUGEFILE)                                    READPAGES _ (FUNCTION \HFLOPPY.READPAGES)                                    REOPENFILE _ (FUNCTION \HFLOPPY.OPENHUGEFILE)                                    SETFILEINFO _ (FUNCTION NILL)                                    TRUNCATEFILE _ (FUNCTION NILL)                                    WRITEPAGES _ (FUNCTION \HFLOPPY.WRITEPAGES)                                    DEVICEINFO _ \HFLOPPYINFO                                    RENAMEFILE _ (FUNCTION NILL)                                    REGISTERFILE _ (FUNCTION \ADD-OPEN-STREAM)                                    UNREGISTERFILE _ (FUNCTION \GENERIC-UNREGISTER-STREAM)                                    OPENP _ (FUNCTION \GENERIC.OPENP)))          (\MAKE.PMAP.DEVICE \HFLOPPYFDEV])(\HFLOPPY.GETFILEINFO  [LAMBDA (FILE ATTRIBUTE FDEV)                          (* kbr%: "25-Nov-84 13:03")    (WITH.MONITOR \FLOPPYLOCK        (PROG (STREAM PLPAGE ANSWER)              (\FLOPPY.CACHED.READ)              (SETQ STREAM (\PFLOPPY.ASSURESTREAM FILE))              (SETQ PLPAGE (fetch (FLOPPYSTREAM PLPAGE) of STREAM))                                                             (* Wizard incantations%: PAGELENGTH,                                                            HUGEPAGESTART, HUGEPAGELENGTH,                                                            HUGELENGTH *)              (SETQ ANSWER (SELECTQ ATTRIBUTE                               (WRITEDATE (fetch (PLPAGE WRITEDATE) of PLPAGE))                               (CREATIONDATE (fetch (PLPAGE CREATIONDATE) of PLPAGE))                               (IWRITEDATE (fetch (PLPAGE IWRITEDATE) of PLPAGE))                               (ICREATIONDATE (fetch (PLPAGE ICREATIONDATE) of PLPAGE))                               (LENGTH                       (* We want hugelength.                                                           *)                                       (fetch (PLPAGE HUGELENGTH) of PLPAGE))                               (TYPE (fetch (PLPAGE TYPE) of PLPAGE))                               (BYTESIZE 8)                               (MESATYPE (fetch (PLPAGE MESATYPE) of PLPAGE))                               (PAGELENGTH (fetch (PLPAGE PAGELENGTH) of PLPAGE))                               (HUGEPAGESTART (fetch (PLPAGE HUGEPAGESTART) of PLPAGE))                               (HUGEPAGELENGTH                                     (fetch (PLPAGE HUGEPAGELENGTH) of PLPAGE))                               (HUGELENGTH (fetch (PLPAGE HUGELENGTH) of PLPAGE))                               NIL))              (RETURN ANSWER)))])(\HFLOPPY.OPENHUGEFILE  [LAMBDA (FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM)   (* hdj "16-May-86 21:50")         (* * if file is open in conflicting way, barf)    (if (NOT (\FILE-CONFLICT FILE ACCESS FDEV))        then (OR (\SFLOPPY.HACK FILE ACCESS RECOG OTHERINFO FDEV OLDSTREAM)                     (WITH.MONITOR \FLOPPYLOCK                         (PROG (STREAM)                           RETRY                               (SELECTQ ACCESS                                   (OUTPUT (SELECTQ RECOG                                               (NEW          (* OK. *))                                               (PROGN (SETQ RECOG (LISPERROR "ILLEGAL ARG" RECOG))                                                      (GO RETRY))))                                   (INPUT (SELECTQ RECOG                                              (OLD           (* OK. *))                                              (PROGN (SETQ RECOG (LISPERROR "ILLEGAL ARG" RECOG))                                                     (GO RETRY))))                                   (PROGN (SETQ ACCESS (LISPERROR "ILLEGAL ARG" ACCESS))                                          (GO RETRY)))                               (SETQ \HFLOPPY.FILENAME (\FLOPPY.ASSUREFILENAME FILE))                               (SETQ \HFLOPPY.FLOPPYNAME \HFLOPPY.FILENAME)                               (SETQ \HFLOPPY.RECOG RECOG)                               (SETQ \HFLOPPY.OTHERINFO (\FLOPPY.OTHERINFO OTHERINFO))                               [COND                                  ((EQ RECOG 'NEW)                                   (SETQ \HFLOPPY.IWRITEDATE (IDATE))                                   (SETQ \HFLOPPY.HUGELENGTH (CDR (ASSOC 'LENGTH \HFLOPPY.OTHERINFO))                                    )                                   (COND                                      ((NULL \HFLOPPY.HUGELENGTH)                                       (\FLOPPY.MESSAGE                                              "Can't open file without LENGTH parameter in HUGE mode."                                              T)                                       (LISPERROR "FILE WON'T OPEN" "")))                                   (SETQ \HFLOPPY.HUGEPAGELENGTH (IQUOTIENT (IPLUS                                                                                   \HFLOPPY.HUGELENGTH                                                                                   511)                                                                        512))                                   (printout T (IQUOTIENT (IPLUS \HFLOPPY.HUGEPAGELENGTH                                                                  \HFLOPPY.MAXPAGES -1)                                                      \HFLOPPY.MAXPAGES)                                          " floppies will be required." T)                                   (RPLACD (OR (ASSOC 'LENGTH \HFLOPPY.OTHERINFO)                                               (PROGN (push \HFLOPPY.OTHERINFO                                                             (LIST 'LENGTH))                                                      (CAR \HFLOPPY.OTHERINFO)))                                          (ITIMES \HFLOPPY.MAXPAGES 512))                                   (SETQ STREAM (\HFLOPPY.OUTPUTFLOPPY \HFLOPPY.FLOPPYNAME                                                        \HFLOPPY.FILENAME \HFLOPPY.OTHERINFO)))                                  (T (SETQ STREAM (\HFLOPPY.INPUTFLOPPY \HFLOPPY.FLOPPYNAME                                                          \HFLOPPY.FILENAME \HFLOPPY.OTHERINFO]                               (RETURN STREAM)))])(\HFLOPPY.WRITEPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* kbr%: "26-Aug-84 11:19")    (PROG NIL          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\HFLOPPY.WRITEPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\HFLOPPY.WRITEPAGE  [LAMBDA (STREAM FIRSTPAGE# BUFFER)                     (* kbr%: "26-Aug-84 11:20")    (WITH.MONITOR \FLOPPYLOCK        (PROG (NEWSTREAM)              [COND                 ((IGEQ \HFLOPPY.PAGENO \HFLOPPY.MAXPAGES)                  (\HFLOPPY.CLOSEFLOPPY STREAM)                  (RINGBELLS)                  [RPLACD (OR (ASSOC 'LENGTH \HFLOPPY.OTHERINFO)                              (PROGN (push \HFLOPPY.OTHERINFO (LIST 'LENGTH))                                     (CAR \HFLOPPY.OTHERINFO)))                         (IMIN (ITIMES \HFLOPPY.MAXPAGES 512)                               (IDIFFERENCE \HFLOPPY.HUGELENGTH (ITIMES \HFLOPPY.FLOPPYNO                                                                        \HFLOPPY.MAXPAGES 512]                  (SETQ STREAM (\HFLOPPY.OUTPUTFLOPPY \HFLOPPY.FLOPPYNAME \HFLOPPY.FILENAME                                       \HFLOPPY.OTHERINFO STREAM]                                                             (* Write page \HFLOPPY.PAGENO.                                                           *)              (GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER (\BLT \FLOPPY.SCRATCH.BUFFER BUFFER 256)                     (\PFLOPPY.WRITEPAGE STREAM \HFLOPPY.PAGENO \FLOPPY.SCRATCH.BUFFER))              (SETQ \HFLOPPY.PAGENO (ADD1 \HFLOPPY.PAGENO))))])(\HFLOPPY.READPAGES  [LAMBDA (STREAM FIRSTPAGE# BUFFERS)                    (* kbr%: "26-Aug-84 11:20")    (PROG NIL          (COND             ((EQ \HFLOPPY.RECOG 'NEW)              (RETURN)))          (for BUFFER in (MKLIST BUFFERS) as I from 0             do (\HFLOPPY.READPAGE STREAM (IPLUS FIRSTPAGE# I)                           BUFFER])(\HFLOPPY.READPAGE  [LAMBDA (STREAM FIRSTPAGE# BUFFER)                     (* bvm%: "22-Nov-85 00:21")    (WITH.MONITOR \FLOPPYLOCK        (PROG (NEWSTREAM)              [COND                 ((IGEQ \HFLOPPY.PAGENO \HFLOPPY.PAGES)                  (\HFLOPPY.CLOSEFLOPPY STREAM)                  (RINGBELLS)                  (SETQ STREAM (\HFLOPPY.INPUTFLOPPY \HFLOPPY.FLOPPYNAME \HFLOPPY.FILENAME                                       \HFLOPPY.OTHERINFO STREAM]                                                             (* Read page \HFLOPPY.PAGENO.                                                           *)              (\PFLOPPY.READPAGE STREAM \HFLOPPY.PAGENO BUFFER)              (SETQ \HFLOPPY.PAGENO (ADD1 \HFLOPPY.PAGENO))))])(\HFLOPPY.CLOSEHUGEFILE  [LAMBDA (STREAM)                                       (* hdj "24-Sep-86 10:34")    (WITH.MONITOR \FLOPPYLOCK        (PROG (FULLFILENAME)              (COND                 ((EQ \HFLOPPY.RECOG 'OLD)                  (RETURN)))              (\CLEARMAP STREAM)         (* ;; "Following 2 SETQ's patch around SYSOUT not passing us right HUGELENGTH in orignal OTHERINFO.  I think this may be fixed now.  *")              (SETQ \HFLOPPY.HUGELENGTH (IPLUS (ITIMES 512 (fetch (STREAM EPAGE) of STREAM))                                               (fetch (STREAM EOFFSET) of STREAM)))              (SETQ \HFLOPPY.HUGEPAGELENGTH (IQUOTIENT (IPLUS \HFLOPPY.HUGELENGTH 511)                                                   512))              (SETQ FULLFILENAME (\HFLOPPY.CLOSEFLOPPY STREAM T))              (RETURN FULLFILENAME)))])(\HFLOPPY.INPUTFLOPPY  [LAMBDA (FLOPPYNAME FILENAME OTHERINFO OLDSTREAM)      (* kbr%: " 5-Aug-86 16:26")    (PROG (FLOPPYNAME#I STREAM)          [COND             ((NULL OLDSTREAM)              (SETQ \HFLOPPY.FLOPPYNO 1))             (T (SETQ \HFLOPPY.FLOPPYNO (ADD1 \HFLOPPY.FLOPPYNO]          (SETQ FLOPPYNAME#I (CONCAT FLOPPYNAME "#" \HFLOPPY.FLOPPYNO))          (COND             ((OR (IGREATERP \HFLOPPY.FLOPPYNO 1)                  (NOT (\FLOPPY.UNCACHED.READ T)))              (printout T "Insert floppy " FLOPPYNAME#I T)              (FLOPPY.WAIT.FOR.FLOPPY T)))          (SETQ STREAM (\PFLOPPY.OPENFILE FILENAME 'INPUT 'OLD OTHERINFO \FLOPPYFDEV))          (SETQ \HFLOPPY.PAGENO 0)          (COND             ((NULL OLDSTREAM)              (SETQ \HFLOPPY.HUGELENGTH (fetch (PLPAGE HUGELENGTH) of (fetch (                                                                                         FLOPPYSTREAM                                                                                          PLPAGE)                                                                                 of STREAM)))              (SETQ \HFLOPPY.HUGEPAGELENGTH (fetch (PLPAGE HUGEPAGELENGTH)                                               of (fetch (FLOPPYSTREAM PLPAGE) of STREAM)                                                   ))              (replace (STREAM EPAGE) of STREAM with (IQUOTIENT \HFLOPPY.HUGELENGTH 512))              (replace (STREAM EOFFSET) of STREAM with (IREMAINDER \HFLOPPY.HUGELENGTH                                                                           512)))             (T (replace (FLOPPYSTREAM PFALLOC) of OLDSTREAM with (fetch (                                                                                         FLOPPYSTREAM                                                                                          PFALLOC)                                                                                 of STREAM))                (replace (FLOPPYSTREAM PLPAGE) of OLDSTREAM with (fetch (FLOPPYSTREAM                                                                                         PLPAGE)                                                                                of STREAM))                (SETQ STREAM OLDSTREAM)))          (SETQ \HFLOPPY.PAGES (fetch (PLPAGE PAGELENGTH) of (fetch (FLOPPYSTREAM PLPAGE)                                                                        of STREAM)))          (RETURN STREAM])(\HFLOPPY.OUTPUTFLOPPY  [LAMBDA (FLOPPYNAME FILENAME OTHERINFO OLDSTREAM)      (* ; "Edited 25-Mar-87 15:24 by jds")    (* ;; "Set up FLOPPYNAME for output to FILENAME??")    (PROG (FLOPPYNAME#I STREAM)          [COND             ((NULL OLDSTREAM)              (SETQ \HFLOPPY.FLOPPYNO 1))             (T (SETQ \HFLOPPY.FLOPPYNO (ADD1 \HFLOPPY.FLOPPYNO]          (SETQ FLOPPYNAME#I (CONCAT FLOPPYNAME "#" \HFLOPPY.FLOPPYNO))          (COND             ((AND (IEQP \HFLOPPY.FLOPPYNO 1)                   (\FLOPPY.UNCACHED.READ T))            (* ;                                             "Don't prompt if first floppy already ready for us.  *")              (GO FORMAT)))      RETRY          (printout T "Insert floppy to become " FLOPPYNAME#I T)          (FLOPPY.WAIT.FOR.FLOPPY T)      FORMAT          (COND             ((NOT (\FLOPPY.UNCACHED.WRITE T))              (printout T "Can't proceed.  This floppy is writeprotected." T)              (GO RETRY))             ((NOT (\PFLOPPY.FORMAT FLOPPYNAME#I NIL \HFLOPPY.SLOWFLG))                                                             (* ; "Didn't format *")              (GO RETRY)))          (SETQ STREAM (\PFLOPPY.OPENFILE FILENAME 'OUTPUT 'NEW OTHERINFO \FLOPPYFDEV OLDSTREAM))          (SETQ \HFLOPPY.PAGENO 0)          (SETQ \HFLOPPY.PAGES (IQUOTIENT (IPLUS (CDR (ASSOC 'LENGTH OTHERINFO))                                                 511)                                      512))          (COND             (OLDSTREAM (replace (FLOPPYSTREAM PFALLOC) of OLDSTREAM                           with (fetch (FLOPPYSTREAM PFALLOC) of STREAM))                    (replace (FLOPPYSTREAM PLPAGE) of OLDSTREAM with (fetch                                                                                  (FLOPPYSTREAM                                                                                   PLPAGE)                                                                                    of STREAM))                    (SETQ STREAM OLDSTREAM)))          (RETURN STREAM])(\HFLOPPY.CLOSEFLOPPY  [LAMBDA (STREAM LASTFLOPPYFLG)                         (* kbr%: "25-Feb-85 12:23")                                                             (* The same as \PFLOPPY.CLOSEFILE                                                            but without releasing STREAM.                                                           Called only by \HFLOPPY.WRITEPAGE.                                                           *)    (PROG (PFALLOC PLPAGE PMPAGE NEXT NPMPAGE)          (COND             ((EQ (\GETACCESS STREAM)                  'INPUT)              (RETURN)))                                     (* At this point \HFLOPPY.PAGENO is                                                            the next page we would write.                                                           *)          [\PFLOPPY.TRUNCATEFILE STREAM [COND                                               ((NOT LASTFLOPPYFLG)                                                \HFLOPPY.MAXPAGES)                                               (T (IDIFFERENCE (fetch (STREAM EPAGE) of                                                                                         STREAM)                                                         (ITIMES \HFLOPPY.MAXPAGES (SUB1                                                                                     \HFLOPPY.FLOPPYNO                                                                                         ]                 (COND                    ((NOT LASTFLOPPYFLG)                     0)                    (T (fetch (STREAM EOFFSET) of STREAM]          (SETQ PFALLOC (fetch (FLOPPYSTREAM PFALLOC) of STREAM))          (SETQ PLPAGE (fetch (PFALLOC PLPAGE) of PFALLOC))          (replace (PLPAGE IWRITEDATE) of PLPAGE with \HFLOPPY.IWRITEDATE)          (replace (PLPAGE ICREATIONDATE) of PLPAGE with \HFLOPPY.IWRITEDATE)          (replace (PLPAGE HUGEPAGESTART) of PLPAGE with (ITIMES \HFLOPPY.MAXPAGES                                                                            (SUB1 \HFLOPPY.FLOPPYNO))                 )          (replace (PLPAGE HUGEPAGELENGTH) of PLPAGE with \HFLOPPY.HUGEPAGELENGTH)          (replace (PLPAGE HUGELENGTH) of PLPAGE with \HFLOPPY.HUGELENGTH)          (\PFLOPPY.WRITEPAGENO (fetch (PFALLOC START) of PFALLOC)                 PLPAGE)          (\PFLOPPY.SAVE.PFILELIST)          (\PFLOPPY.SAVE.PSECTOR9]))(* ; "`SCAVENGE' *")(RPAQ? \FLOPPY.SCAVENGE.IDATE NIL)(DEFINEQ(FLOPPY.SCAVENGE  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:40")    (SETQ \FLOPPY.SCAVENGE.IDATE (IDATE))    (\PFLOPPY.SCAVENGE])(\PFLOPPY.SCAVENGE  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:40")    (PROG NIL          (\FLOPPY.UNCACHED.WRITE)          (COND             ((NOT (\PFLOPPY.CONFIRM "Scavenge contents of floppy"))              (RETURN NIL)))          (\FLOPPY.CLOSE)          (\PFLOPPY.SCAVENGE.PMPAGES)          (\PFLOPPY.SCAVENGE.PLPAGES)          (\FLOPPY.CACHED.WRITE)          (\PFLOPPY.SCAVENGE.PSECTOR9)          (\PFLOPPY.SCAVENGE.PFILELIST)          (RETURN T])(\PFLOPPY.SCAVENGE.PMPAGES  [LAMBDA NIL                                            (* kbr%: " 2-Sep-85 21:37")                                                             (* Scavenge the marker pages.                                                           *)    (PROG (LOCATION PMPAGE NPMPAGE)          (SETQ LOCATION \PFLOPPYFIRSTDATAPAGE)          (SETQ PMPAGE (\PFLOPPY.SCAVENGE.PMPAGEA))          (while (ILESSP LOCATION \PFLOPPYLASTDATAPAGE) do (SETQ NPMPAGE (                                                                     \PFLOPPY.SCAVENGE.PMPAGE.AFTER                                                                                  PMPAGE LOCATION))                                                                  (SETQ LOCATION                                                                   (IPLUS LOCATION                                                                          (fetch (PMPAGE NLENGTH)                                                                             of PMPAGE)                                                                          1))                                                                  (SETQ PMPAGE NPMPAGE))          (\PFLOPPY.WRITEPAGENO \PFLOPPYLASTDATAPAGE PMPAGE])(\PFLOPPY.SCAVENGE.PMPAGEA  [LAMBDA NIL                                            (* kbr%: "11-Sep-85 17:24")    (PROG (PMPAGE)                                           (* Try to believe marker page A *)          (SETQ PMPAGE (NCREATE 'PMPAGE))      RETRY          (COND             ((NOT (\PFLOPPY.READPAGENO \PFLOPPYFIRSTDATAPAGE PMPAGE T))                                                             (* Couldn't read this LOCATION.                                                           Assume misformatted track.                                                           *)              (GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB (\FLOPPY.FORMATTRACKS                                                                 \FLOPPY.IBMD512.FLOPPYIOCB                                                                (\PFLOPPY.PAGENOTODISKADDRESS                                                                 LOCATION)                                                                1 T))              (GO RETRY)))          (replace (PMPAGE SEAL) of PMPAGE with SEAL.PMPAGE)          (replace (PMPAGE VERSION) of PMPAGE with VERSION.PMPAGE)          (replace (PMPAGE PLENGTH) of PMPAGE with 0)          (replace (PMPAGE PTYPE) of PMPAGE with PMPAGEETYPE.FREE)          (replace (PMPAGE PFILETYPE) of PMPAGE with FILETYPE.FREE)          (replace (PMPAGE PFILEID) of PMPAGE with 0)          (RETURN PMPAGE])(\PFLOPPY.SCAVENGE.PMPAGE.AFTER  [LAMBDA (PPMPAGE PLOCATION)                            (* kbr%: " 2-Sep-85 23:30")         (* Come up with a plausible PMPAGE between       (ADD1 PLOCATION) and \PFLOPPYLASTDATAPAGE inclusive where PPMPAGE at PLOCATION        is the preceding marker page. *)    (PROG (PMPAGE LOCATION)          (SETQ PMPAGE (NCREATE 'PMPAGE))         (* Hunt for first plausible PMPAGE after PPMPAGE.       Smash PMPAGE into correctness and make PPMPAGE tell the new truth.       *)          [for LOCATION from (ADD1 PLOCATION) to \PFLOPPYLASTDATAPAGE             do (PRIN1 "." T)                   (COND                      ((EQ (IMOD LOCATION 20)                           0)                       (PRIN1 LOCATION T)))                   (\PFLOPPY.SCAVENGE.PMPAGE.AFTER1 PLOCATION PPMPAGE LOCATION PMPAGE)                   (COND                      ((fetch (PMPAGE INTACT) of PMPAGE)                       (RETURN]          (RETURN PMPAGE])(\PFLOPPY.SCAVENGE.PMPAGE.AFTER1  [LAMBDA (PLOCATION PPMPAGE LOCATION PMPAGE)            (* edited%: "23-Mar-86 20:05")    (PROG (TRIEDWRITING TRIEDFORMATTING OLDPAGES LENGTH TYPE FILETYPE FILEID)      RETRY          [COND             ((NOT (\PFLOPPY.READPAGENO LOCATION PMPAGE T))                                                             (* Couldn't read this LOCATION.                                                           Assume misformatted track.                                                           *)              (COND                 ((NOT TRIEDWRITING)                  (for I from 0 to 511 do (\PUTBASEBYTE PMPAGE I (CHARCODE " ")))                  (\PFLOPPY.WRITEPAGENO LOCATION PMPAGE T)                  (SETQ TRIEDWRITING T)                  (GO RETRY))                 ((NOT TRIEDFORMATTING)                  (GLOBALRESOURCE \FLOPPY.IBMD512.FLOPPYIOCB (SETQ DISKADDRESS (                                                                       \PFLOPPY.PAGENOTODISKADDRESS                                                                                LOCATION))                         [SETQ OLDPAGES (for SECTOR from 1 to \FLOPPY.SECTORSPERTRACK                                           collect (PROG (OLDPAGE)                                                             (SETQ OLDPAGE (NCREATE 'VMEMPAGEP))                                                             (\FLOPPY.READSECTOR                                                              \FLOPPY.IBMD512.FLOPPYIOCB                                                              (create DISKADDRESS                                                                     CYLINDER _ (fetch                                                                                 (DISKADDRESS                                                                                         CYLINDER)                                                                                   of DISKADDRESS                                                                                 )                                                                     HEAD _ (fetch (DISKADDRESS                                                                                        HEAD)                                                                               of DISKADDRESS)                                                                     SECTOR _ SECTOR)                                                              OLDPAGE T)                                                             (RETURN OLDPAGE]                                                             (* Since formatting is unreliable,                                                            repeat format twice in a row.                                                           *)                         (\FLOPPY.FORMATTRACKS \FLOPPY.IBMD512.FLOPPYIOCB DISKADDRESS 1 T)                         (\FLOPPY.FORMATTRACKS \FLOPPY.IBMD512.FLOPPYIOCB DISKADDRESS 1 T)                                                             (* Restore what we could salvage                                                            before reformatting.                                                           *)                         (for SECTOR from 1 to \FLOPPY.SECTORSPERTRACK as OLDPAGE                            in OLDPAGES do (\FLOPPY.WRITESECTOR                                                    \FLOPPY.IBMD512.FLOPPYIOCB                                                    (create DISKADDRESS                                                           CYLINDER _ (fetch (DISKADDRESS                                                                                         CYLINDER)                                                                         of DISKADDRESS)                                                           HEAD _ (fetch (DISKADDRESS HEAD)                                                                     of DISKADDRESS)                                                           SECTOR _ SECTOR)                                                    OLDPAGE T)))                  (SETQ TRIEDFORMATTING T)                  (GO RETRY))                 (T (\FLOPPY.MESSAGE (CONCAT "Couldn't read or reformat page " LOCATION))                    (\FLOPPY.MESSAGE "User should not trust this floppy.")                                                             (* At this point PMPAGE is blank.                                                           *)                    (RETURN PMPAGE]          (COND             ((NOT (OR (fetch (PMPAGE INTACT) of PMPAGE)                       (IEQP LOCATION \PFLOPPYLASTDATAPAGE)))              (RETURN)))                                     (* Force PMPAGE to be a legal marker                                                            page. *)          (replace (PMPAGE SEAL) of PMPAGE with SEAL.PMPAGE)          (replace (PMPAGE VERSION) of PMPAGE with VERSION.PMPAGE)          (SETQ LENGTH (IPLUS LOCATION (IMINUS PLOCATION)                              -1))          [COND             ((ZEROP LENGTH)              (SETQ TYPE PMPAGEETYPE.FREE)              (SETQ FILETYPE FILETYPE.FREE)              (SETQ FILEID 0))             (T (SETQ TYPE (fetch (PMPAGE NTYPE) of PPMPAGE))                (SETQ FILETYPE (fetch (PMPAGE NFILETYPE) of PPMPAGE))                (SETQ FILEID (COND                                ((EQ TYPE PMPAGEETYPE.PFILELIST)                                 1)                                (T 0]          (replace (PMPAGE PLENGTH) of PMPAGE with LENGTH)          (replace (PMPAGE PTYPE) of PMPAGE with TYPE)          (replace (PMPAGE PFILETYPE) of PMPAGE with FILETYPE)          (replace (PMPAGE PFILEID) of PMPAGE with FILEID)                                                             (* Fix PPMPAGE wrt PMPAGE now *)          (replace (PMPAGE NLENGTH) of PPMPAGE with LENGTH)          (replace (PMPAGE NTYPE) of PPMPAGE with TYPE)          (replace (PMPAGE NFILETYPE) of PPMPAGE with FILETYPE)          (replace (PMPAGE NFILEID) of PPMPAGE with FILEID)          (\PFLOPPY.WRITEPAGENO PLOCATION PPMPAGE])(\PFLOPPY.SCAVENGE.PLPAGES  [LAMBDA NIL                                            (* kbr%: " 8-Nov-85 11:16")                                                             (* Scavenge the leader pages.                                                           *)    (PROG (LOCATION NLOCATION PMPAGE NPMPAGE PLPAGE LENGTH START)          (SETQ LOCATION \PFLOPPYFIRSTDATAPAGE)          (SETQ PMPAGE (NCREATE 'PMPAGE))          (SETQ NPMPAGE (NCREATE 'PMPAGE))          (SETQ PLPAGE (create PLPAGE))          (\PFLOPPY.READPAGENO \PFLOPPYFIRSTDATAPAGE NPMPAGE)          (while (ILESSP LOCATION \PFLOPPYLASTDATAPAGE)             do (swap PMPAGE NPMPAGE)                   (SETQ LENGTH (SUB1 (fetch (PMPAGE NLENGTH) of PMPAGE)))                   (SETQ NLOCATION (IPLUS LOCATION (ADD1 LENGTH)                                          1))                   (\PFLOPPY.READPAGENO NLOCATION NPMPAGE)                   (COND                      ((AND (IGEQ LENGTH 0)                            (OR (IEQP (fetch (PMPAGE NTYPE) of PMPAGE)                                      PMPAGEETYPE.FILE)                                (IEQP (fetch (PMPAGE NTYPE) of PMPAGE)                                      PMPAGEETYPE.FREE)))                       (SETQ START (ADD1 LOCATION))                       (\PFLOPPY.READPAGENO START PLPAGE)                       [COND                          [(for I from 0 to 511                              always (EQ (\GETBASEBYTE PLPAGE I)                                             (SELECTQ (MACHINETYPE)                                                 (DANDELION (CHARCODE @))                                                 (DOVE 255)                                                 NIL)))         (* Looks like we haven't written on this page since it was formatted.       Assume we are looking at a free block. *)                           (COND                              ((IEQP (fetch (PMPAGE NTYPE) of PMPAGE)                                     PMPAGEETYPE.FILE)       (* Become a FREE block.                                                           *)                               (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.FREE)                               (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.FREE)                               (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FREE)                               (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.FREE)                               (\PFLOPPY.WRITEPAGENO LOCATION PMPAGE)                               (\PFLOPPY.WRITEPAGENO NLOCATION NPMPAGE]                          (T                                 (* Assume there is a whole file or a                                                            partial file to be recovered.                                                           *)                             [COND                                ((fetch (PLPAGE INTACT) of PLPAGE)                                                             (* Proper beginning of a whole or                                                            truncated file. *)                                 [replace (PLPAGE HUGELENGTH) of PLPAGE                                    with (COND                                                ((EQ (FOLDHI (fetch (PLPAGE HUGELENGTH)                                                                of PLPAGE)                                                            512)                                                     LENGTH) (* What we expect.                                                           Treat extra bytes on last page as                                                            true garbage. *)                                                 (fetch (PLPAGE HUGELENGTH) of PLPAGE))                                                (T          (* Either HUGELENGTH is too big or too small for the number of pages allotted,        so make HUGELENGTH 512 x pages allotted.       *)                                                   (ITIMES LENGTH 512]                                 (replace (PLPAGE PAGELENGTH) of PLPAGE with LENGTH)                                 (replace (PLPAGE HUGEPAGESTART) of PLPAGE with 0)                                 (replace (PLPAGE HUGEPAGELENGTH) of PLPAGE with LENGTH))                                (T                           (* Front end of file gone.                                                           *)                                   (replace (PLPAGE \CREATIONDATE) of PLPAGE with                                                                                \FLOPPY.SCAVENGE.IDATE                                          )                                   (replace (PLPAGE \WRITEDATE) of PLPAGE with                                                                                \FLOPPY.SCAVENGE.IDATE                                          )                                   (replace (PLPAGE HUGELENGTH) of PLPAGE                                      with (ITIMES LENGTH 512))                                   (replace (PLPAGE PAGELENGTH) of PLPAGE with LENGTH)                                   (replace (PLPAGE HUGEPAGESTART) of PLPAGE with 0)                                   (replace (PLPAGE HUGEPAGELENGTH) of PLPAGE with LENGTH                                          )                                   (replace (PLPAGE $NAME) of PLPAGE                                      with (GENSYM 'OLDFILE]                             (replace (PLPAGE SEAL) of PLPAGE with SEAL.PLPAGE)                             (replace (PLPAGE VERSION) of PLPAGE with VERSION.PLPAGE)                             (replace (PLPAGE MESATYPE) of PLPAGE with 65535)                             (replace (PLPAGE NAMEMAXLENGTH) of PLPAGE with                                                                                  NAMEMAXLENGTH.PLPAGE                                    )                             (replace (PLPAGE UFO1) of PLPAGE with 2)                             (replace (PLPAGE UFO2) of PLPAGE with 187)                             (replace (PLPAGE DATAVERSION) of PLPAGE with VERSION.DATA)                             (replace (PLPAGE \TYPE) of PLPAGE with 1)                             (COND                                ((IEQP (fetch (PMPAGE NTYPE) of PMPAGE)                                       PMPAGEETYPE.FREE)     (* Become a FILE block.                                                           *)                                 (replace (PMPAGE NTYPE) of PMPAGE with PMPAGEETYPE.FILE)                                 (replace (PMPAGE NFILETYPE) of PMPAGE with FILETYPE.FILE                                        )                                 (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FILE                                        )                                 (replace (PMPAGE PFILETYPE) of NPMPAGE with                                                                                       FILETYPE.FILE)                                 (\PFLOPPY.WRITEPAGENO LOCATION PMPAGE)                                 (\PFLOPPY.WRITEPAGENO NLOCATION NPMPAGE]                       (\PFLOPPY.WRITEPAGENO START PLPAGE)))                   (SETQ LOCATION NLOCATION])(\PFLOPPY.SCAVENGE.PSECTOR9  [LAMBDA NIL                                            (* kbr%: " 7-Aug-85 19:27")    (PROG (PSECTOR9 PFALLOC)          (SETQ PSECTOR9 (fetch (PFLOPPYFDEV PSECTOR9) of \FLOPPYFDEV))          (replace (PSECTOR9 SEAL) of PSECTOR9 with SEAL.PSECTOR9)          (replace (PSECTOR9 VERSION) of PSECTOR9 with VERSION.PSECTOR9)          (replace (PSECTOR9 CYLINDERS) of PSECTOR9 with \FLOPPY.CYLINDERS)          (replace (PSECTOR9 TRACKSPERCYLINDER) of PSECTOR9 with                                                                           \FLOPPY.TRACKSPERCYLINDER)          (replace (PSECTOR9 SECTORSPERTRACK) of PSECTOR9 with \FLOPPY.SECTORSPERTRACK)          [SETQ PFALLOC (for P in (fetch (PFLOPPYFDEV PFALLOCS) of \FLOPPYFDEV)                           thereis (EQUAL (fetch (PFALLOC FILENAME) of P)                                              '(PFILELIST]          (COND             ((NULL PFALLOC)              (\FLOPPY.BREAK "Can't find PFILELIST")))          (replace (PSECTOR9 PFILELISTSTART) of PSECTOR9 with (fetch (PFALLOC START)                                                                             of PFALLOC))          (replace (PSECTOR9 PFILELISTFILEID) of PSECTOR9 with 1)          (replace (PSECTOR9 PFILELISTLENGTH) of PSECTOR9 with (fetch (PFALLOC LENGTH                                                                                             )                                                                              of PFALLOC))          (replace (PSECTOR9 ROOTFILEID) of PSECTOR9 with 0)          (replace (PSECTOR9 PILOTMICROCODE) of PSECTOR9 with 0)          (replace (PSECTOR9 DIAGNOSTICMICROCODE) of PSECTOR9 with 0)          (replace (PSECTOR9 GERM) of PSECTOR9 with 0)          (replace (PSECTOR9 PILOTBOOTFILE) of PSECTOR9 with 0)          (replace (PSECTOR9 FIRSTALTERNATESECTOR) of PSECTOR9 with 0)          (replace (PSECTOR9 COUNTBADSECTORS) of PSECTOR9 with 0)          (replace (PSECTOR9 CHANGING) of PSECTOR9 with 0)          (replace (PSECTOR9 \LABELLENGTH) of PSECTOR9 with (IMIN (fetch (PSECTOR9                                                                                                                                                                                   \LABELLENGTH                                                                                          )                                                                                 of PSECTOR9)                                                                              20))          (\PFLOPPY.SAVE.PSECTOR9])(\PFLOPPY.SCAVENGE.PFILELIST  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:40")    (PROG (PFILELIST)          (SETQ PFILELIST (fetch (PFLOPPYFDEV PFILELIST) of \FLOPPYFDEV))          (COND             ((ILEQ (fetch (PFILELIST NENTRIES) of PFILELIST)                    49)              (replace (PFILELIST MAXENTRIES) of PFILELIST with 49)))          (\PFLOPPY.SAVE.PFILELIST]))(* ; "`COPY' *")(DEFINEQ(FLOPPY.TO.FILE  [LAMBDA (TOFILE)                                       (* ; "Edited 20-Aug-87 16:45 by jds")    (* ;; "Copy the contents of a whole floppy disk to a single file, TOFILE.")    (WITH.MONITOR \FLOPPYLOCK        (PROG (TOSTREAM PSECTOR9)              (while (NOT (\FLOPPY.UNCACHED.READ)) DO (BLOCK))              [SETQ TOSTREAM (OPENSTREAM TOFILE 'OUTPUT 'NEW NIL                                    (LIST '(TYPE BINARY)                                          (LIST 'LENGTH (ITIMES (IPLUS 1 1 (ITIMES                                                                             \FLOPPY.TRACKSPERCYLINDER                                                                                                                                                                \FLOPPY.SECTORSPERTRACK                                                                                  (SUB1                                                                                     \FLOPPY.CYLINDERS                                                                                        )))                                                               512]                                                             (* ; "First page.  *")              (PRIN1 "PILOT" TOSTREAM)              (for I from 6 to 512 do (\BOUT TOSTREAM 0))                                                             (* ; "PSECTOR9 page.  *")              (GLOBALRESOURCE (\FLOPPY.SCRATCH.BUFFER \FLOPPY.IBMS128.FLOPPYIOCB)                     (\FLOPPY.READSECTOR \FLOPPY.IBMS128.FLOPPYIOCB                            (create DISKADDRESS                                   CYLINDER _ 0                                   HEAD _ 0                                   SECTOR _ 9)                            \FLOPPY.SCRATCH.BUFFER)                     (\BOUTS TOSTREAM \FLOPPY.SCRATCH.BUFFER 0 512))                                                             (* ; "Remaining pages.  *")              (GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER (for I from \PFLOPPYFIRSTDATAPAGE                                                        to \PFLOPPYLASTDATAPAGE                                                        do (\PFLOPPY.READPAGENO I                                                                       \FLOPPY.SCRATCH.BUFFER)                                                              (\BOUTS TOSTREAM \FLOPPY.SCRATCH.BUFFER                                                                     0 512)))              (CLOSEF TOSTREAM)))])(FLOPPY.FROM.FILE  [LAMBDA (FROMFILE)                                     (* edited%: "12-Dec-85 16:54")    (WITH.MONITOR \FLOPPYLOCK        (PROG (FROMSTREAM PSECTOR9)              (SETQ FROMSTREAM (OPENSTREAM FROMFILE 'INPUT 'OLD))                                                             (* GODDAMN FILEIO *)              (SETFILEPTR FROMSTREAM 0)          RETRY              (COND                 ((NOT (IEQP (GETFILEINFO FROMSTREAM 'LENGTH)                             (ITIMES (IPLUS 1 1 (ITIMES \FLOPPY.TRACKSPERCYLINDER                                                        \FLOPPY.SECTORSPERTRACK (SUB1                                                                                     \FLOPPY.CYLINDERS                                                                                     )))                                    512)))                  (\FLOPPY.BREAK "Wrong length form FROMFILE")                  (GO RETRY)))              (COND                 ((NOT (\FLOPPY.UNCACHED.WRITE))                  (GO RETRY)))              (COND                 ((NOT (\PFLOPPY.FORMAT))                  (GO RETRY)))                               (* Throw away first page.                                                           *)              (for I from 1 to 512 do (\BIN FROMSTREAM))                                                             (* PSECTOR9 page. *)              (GLOBALRESOURCE (\FLOPPY.SCRATCH.BUFFER \FLOPPY.IBMS128.FLOPPYIOCB)                     (\BINS FROMSTREAM \FLOPPY.SCRATCH.BUFFER 0 512)                     (\FLOPPY.WRITESECTOR \FLOPPY.IBMS128.FLOPPYIOCB                            (create DISKADDRESS                                   CYLINDER _ 0                                   HEAD _ 0                                   SECTOR _ 9)                            \FLOPPY.SCRATCH.BUFFER))         (* Remaining pages.                                                           *)              (GLOBALRESOURCE \FLOPPY.SCRATCH.BUFFER (for I from \PFLOPPYFIRSTDATAPAGE                                                        to \PFLOPPYLASTDATAPAGE                                                        do (\BINS FROMSTREAM                                                                       \FLOPPY.SCRATCH.BUFFER 0 512)                                                              (\PFLOPPY.WRITEPAGENO I                                                                      \FLOPPY.SCRATCH.BUFFER)))              (CLOSEF FROMSTREAM)))]))(* ; "`COMPACT' *")(DEFINEQ(FLOPPY.COMPACT  [LAMBDA NIL                                            (* ; "Edited 15-Aug-88 09:48 by jds")    (WITH.MONITOR \FLOPPYLOCK        (SELECTQ (FLOPPY.MODE)            ((PILOT HUGEPILOT SYSOUT)                  (\PFLOPPY.COMPACT))            (CPM                                             (* ;                                                 "Do nothing for CPM floppies, no longer supported.")                 NIL)            (SHOULDNT)))])(\PFLOPPY.COMPACT  [LAMBDA NIL                                            (* ; "Edited 15-Aug-88 11:51 by jds")    (WITH.MONITOR \FLOPPYLOCK        (* ;; "COMPACT scattered free blocks into large free block at end of floppy. ")        (PROG (PFINFO PFALLOCS)              (\FLOPPY.CACHED.WRITE)                     (* ; "Confirmation. ")              (COND                 ((NOT (\PFLOPPY.CONFIRM "COMPACT contents of floppy" NIL T 20))                  (RETURN NIL)))                             (* ;                                                      "Trivial case = floppy is already COMPACT.  *")              (SETQ PFINFO (fetch (FDEV DEVICEINFO) of \FLOPPYFDEV))              (SETQ PFALLOCS (fetch (PFINFO PFALLOCS) of PFINFO))              (SELECT [for PFALLOC in PFALLOCS count (EQUAL (fetch (PFALLOC FILENAME)                                                                           of PFALLOC)                                                                        '(FREE]                     (1 (RETURN T))                     [2 (COND                           ((EQUAL [fetch (PFALLOC FILENAME) of (fetch (PFALLOC PREV)                                                                           of (CAR (LAST PFALLOCS                                                                                             ]                                   '(FREE))                            (RETURN T]                       (* ; "Need to COMPACT.  *")                     )                                       (* ; "Nontrivial case.  *")              (\FLOPPY.MESSAGE "COMPACTing floppy")              (\PFLOPPY.COMPACT.PFALLOCS)              (\PFLOPPY.COMPACT.PSECTOR9)              (\PFLOPPY.COMPACT.PFILELIST)              (\FLOPPY.MESSAGE "Finished COMPACTing floppy")              (RETURN T)))])(\PFLOPPY.COMPACT.PFALLOCS  [LAMBDA NIL                                            (* kbr%: " 7-Aug-85 18:46")    (PROG (PFINFO PREV NEXT NPMPAGE LAST)          (SETQ PFINFO (fetch (FDEV DEVICEINFO) of \FLOPPYFDEV))         (* PREV = the last block moved. NEXT = block to be moved.       LAST = zero length final block. *)                                                             (* Skip blocks that don't need to be                                                            moved. *)          [SETQ LAST (CAR (LAST (fetch (PFINFO PFALLOCS) of PFINFO]          (SETQ NEXT (CAR (fetch (PFINFO PFALLOCS) of PFINFO)))          (while [NOT (EQUAL (fetch (PFALLOC FILENAME) of NEXT)                                 '(FREE] do (SETQ NEXT (fetch (PFALLOC NEXT) of NEXT)))          (SETQ PREV (fetch (PFALLOC PREV) of NEXT))      LOOP                                                             (* Get NEXT non free block.                                                           *)          (while [AND NEXT (EQUAL (fetch (PFALLOC FILENAME) of NEXT)                                      '(FREE] do (SETQ NEXT (fetch (PFALLOC NEXT)                                                                   of NEXT)))          [COND             ((NULL NEXT)         (* No more non free blocks. PREV cannot be NIL at this point since every floppy        has a non free PFILELIST block. *)              (COND                 ((ILESSP (fetch (PFALLOC END) of PREV)                         (SUB1 \PFLOPPYLASTDATAPAGE))        (* Create next to LAST free block.                                                           *)                  (SETQ NPMPAGE (create PMPAGE                                       SEAL _ SEAL.PMPAGE                                       VERSION _ VERSION.PMPAGE                                       PFILEID _ (fetch (PMPAGE NFILEID)                                                    of (fetch (PFALLOC PMPAGE) of PREV))                                       NLENGTH _ (IDIFFERENCE \PFLOPPYLASTDATAPAGE                                                        (IPLUS (fetch (PFALLOC END) of PREV)                                                               2))                                       NTYPE _ PMPAGEETYPE.FREE                                       NFILEID _ 0                                       NFILETYPE _ FILETYPE.FREE))                  (SETQ NEXT (create PFALLOC                                    FILENAME _ '(FREE)                                    START _ (IPLUS (fetch (PFALLOC END) of PREV)                                                   2)                                    PMPAGE _ NPMPAGE                                    NEXT _ LAST))                  (replace (PFALLOC PREV) of LAST with NEXT))                 ((IEQP (fetch (PFALLOC END) of PREV)                        (SUB1 \PFLOPPYLASTDATAPAGE))         (* Zero length LAST block.                                                           *)                  (SETQ NEXT LAST))                 ((IEQP (fetch (PFALLOC END) of PREV)                        \PFLOPPYLASTDATAPAGE)                (* No more blocks.                                                           *)                  (GO EXIT))                 (T (SHOULDNT]          (\PFLOPPY.COMPACT.PFALLOC PREV NEXT)          (SETQ PREV NEXT)          (SETQ NEXT (fetch (PFALLOC NEXT) of PREV))          (GO LOOP)      EXIT          (replace (PFINFO PFALLOCS) of PFINFO with                                                       (DREVERSE (for (PFALLOC _ LAST)                                                                    by (fetch (PFALLOC PREV)                                                                              of PFALLOC)                                                                    while PFALLOC collect                                                                                      PFALLOC])(\PFLOPPY.COMPACT.PFALLOC  [LAMBDA (PREV NEXT)                                    (* kbr%: " 1-Nov-85 17:21")         (* Smash NEXT PFALLOC start location and fields on NPMPAGE between PREV and        NEXT. Write new NPMPAGE out to floppy. Move contents of NEXT block.       *)    (PROG (NPMPAGE NSTART PPMPAGE)          (SETQ NPMPAGE (fetch (PFALLOC PMPAGE) of NEXT))          (SETQ NSTART (fetch (PFALLOC START) of NEXT))          (replace (PFALLOC PREV) of NEXT with PREV)          (COND             (PREV (replace (PFALLOC NEXT) of PREV with NEXT)                   (replace (PFALLOC START) of NEXT with (IPLUS (fetch (PFALLOC                                                                                        END)                                                                               of PREV)                                                                            2))                   (SETQ PPMPAGE (fetch (PFALLOC PMPAGE) of PREV))                   (replace (PMPAGE PLENGTH) of NPMPAGE with (fetch (PMPAGE NLENGTH)                                                                            of PPMPAGE))                   (replace (PMPAGE PFILEID) of NPMPAGE with (fetch (PMPAGE NFILEID)                                                                            of PPMPAGE))                   (replace (PMPAGE PTYPE) of NPMPAGE with (fetch (PMPAGE NTYPE)                                                                          of PPMPAGE))                   (replace (PMPAGE PFILETYPE) of NPMPAGE with (fetch (PMPAGE                                                                                             NFILETYPE                                                                                             )                                                                              of PPMPAGE)))             (T (replace (PFALLOC START) of NEXT with (ADD1 \PFLOPPYFIRSTDATAPAGE))                (replace (PMPAGE PLENGTH) of NPMPAGE with 0)                (replace (PMPAGE PFILEID) of NPMPAGE with 0)                (replace (PMPAGE PTYPE) of NPMPAGE with PMPAGEETYPE.FREE)                (replace (PMPAGE PFILETYPE) of NPMPAGE with FILETYPE.FREE)))          [COND             ((LITATOM (fetch (PFALLOC FILENAME) of NEXT))                                                             (* Real file, not a file list or                                                            free block. *)              (replace (PFLE START) of (fetch (PFALLOC PFLE) of NEXT)                 with (fetch (PFALLOC START) of NEXT]          (\PFLOPPY.WRITEPAGENO (SUB1 (fetch (PFALLOC START) of NEXT))                 NPMPAGE)          (COND             ((EQUAL (fetch (PFALLOC FILENAME) of NEXT)                     '(FREE))              (RETURN)))          (for I from 0 to (SUB1 (fetch (PFALLOC LENGTH) of NEXT))             do (\PFLOPPY.WRITEPAGENO (IPLUS (fetch (PFALLOC START) of NEXT)                                                     I)                           (\PFLOPPY.READPAGENO (IPLUS NSTART I)                                  \FLOPPY.SCRATCH.BUFFER])(\PFLOPPY.COMPACT.PSECTOR9  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")    (PROG (PFINFO PSECTOR9)          (SETQ PFINFO (fetch (FDEV DEVICEINFO) of \FLOPPYFDEV))          (SETQ PSECTOR9 (fetch (PFINFO PSECTOR9) of PFINFO))          [replace (PSECTOR9 PFILELISTSTART) of PSECTOR9             with (fetch (PFALLOC START) of (for PFALLOC                                                           in (fetch (PFINFO PFALLOCS)                                                                     of PFINFO)                                                           thereis (EQUAL (fetch (PFALLOC                                                                                          FILENAME)                                                                                 of PFALLOC)                                                                              '(PFILELIST]          (\PFLOPPY.SAVE.PSECTOR9])(\PFLOPPY.COMPACT.PFILELIST  [LAMBDA NIL                                            (* kbr%: "22-Jul-84 22:34")    (PROG (PFINFO PFILELIST)          (SETQ PFINFO (fetch (FDEV DEVICEINFO) of \FLOPPYFDEV))          (SETQ PFILELIST (fetch (PFINFO PFILELIST) of PFINFO))          (replace (PFILELIST NENTRIES) of PFILELIST with 0)          (for PFALLOC in (fetch (PFINFO PFALLOCS) of PFINFO)             when [NOT (EQUAL (fetch (PFALLOC FILENAME) of PFALLOC)                                  '(FREE] do (\PFLOPPY.ADD.TO.PFILELIST PFALLOC))          (\PFLOPPY.SAVE.PFILELIST]))(* ; "`ARCHIVE' *")(DEFINEQ(FLOPPY.ARCHIVE  [LAMBDA (FILES NAME)                                   (* kbr%: "18-Jan-86 11:38")    [COND       ((LITATOM FILES)                                      (* Assume FILES is a directory                                                            pattern. *)        (SETQ FILES (DIRECTORY FILES]    [COND       ((NULL NAME)        (SETQ NAME 'ARCHIVE]    (PROG (NAME#I FLOPPYFILE SIZE FILE)          (for I from 1 while FILES do (SETQ NAME#I (CONCAT NAME '%# I))                                                      (printout T "Insert floppy " NAME#I T)                                                      (FLOPPY.WAIT.FOR.FLOPPY (NOT (IEQP I 1)))                                                      (FLOPPY.FORMAT NAME#I NIL T)                                                      (while FILES                                                         do (SETQ FILE (CAR FILES))                                                               (SETQ SIZE (GETFILEINFO FILE                                                                                 'SIZE))                                                               (COND                                                                  ((ILESSP (FLOPPY.FREE.PAGES)                                                                          (IPLUS SIZE 50))                                                             (* Go to next floppy *)                                                                   (RETURN)))                                                               (SETQ FLOPPYFILE (UNPACKFILENAME                                                                                 FILE))                                                               (LISTPUT FLOPPYFILE 'HOST 'FLOPPY)                                                               (SETQ FLOPPYFILE (PACKFILENAME                                                                                        FLOPPYFILE))                                                               (COPYFILE FILE FLOPPYFILE)                                                               (pop FILES])(FLOPPY.UNARCHIVE  [LAMBDA (HOST/DIRECTORY)                               (* kbr%: "18-Jan-86 11:50")    (PROG (FLOPPYFILES NAME HOST DIRECTORY FILE)          (SETQ HOST/DIRECTORY (UNPACKFILENAME HOST/DIRECTORY))          (SETQ HOST (LISTGET HOST/DIRECTORY 'HOST))          (SETQ DIRECTORY (LISTGET HOST/DIRECTORY 'DIRECTORY))          (FLOPPY.WAIT.FOR.FLOPPY)          (SETQ NAME (FLOPPY.GET.NAME))          (printout T "Unarchiving floppy " NAME T)          (SETQ FLOPPYFILES (DIRECTORY '{FLOPPY}*))          (for FLOPPYFILE in FLOPPYFILES do (SETQ FILE (UNPACKFILENAME FLOPPYFILE))                                                       (LISTPUT FILE 'HOST HOST)                                                       (COND                                                          (DIRECTORY (LISTPUT FILE 'DIRECTORY                                                                             DIRECTORY)))                                                       (SETQ FILE (PACKFILENAME FILE))                                                       (COPYFILE FLOPPYFILE FILE]))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \FLOPPY.DEBUG \FLOPPY.INSPECTW \FLOPPYFDEV \FLOPPYLOCK \FLOPPYIOCBADDR \FLOPPYIOCB        \FLOPPYRESULT \FLOPPY.MODE.BEFORE.EVENT \PFLOPPYPSECTOR9 \PFLOPPYPFILELIST \PFLOPPYINFO        \PFLOPPYFDEV \FLOPPY.ALLOCATIONS.BITMAP \SFLOPPYINFO \SFLOPPYFDEV \HFLOPPY.MAXPAGES        \SFLOPPY.PAGENO \SFLOPPY.FLOPPYNO \SFLOPPY.HUGELENGTH \SFLOPPY.HUGEPAGELENGTH        \SFLOPPY.IWRITEDATE \SFLOPPY.FILENAME \SFLOPPY.RECOG \SFLOPPY.FLOPPYNAME \SFLOPPY.SLOWFLG        \HFLOPPYINFO \HFLOPPYFDEV \HFLOPPY.MAXPAGES \HFLOPPY.PAGENO \HFLOPPY.FLOPPYNO        \HFLOPPY.HUGELENGTH \HFLOPPY.HUGEPAGELENGTH \HFLOPPY.IWRITEDATE \HFLOPPY.RECOG        \HFLOPPY.FILENAME \HFLOPPY.SLOWFLG \FLOPPY.SCAVENGE.IDATE))(DECLARE%: DONTEVAL@LOAD DOCOPY (FLOPPY.RESTART))(PUTPROPS FLOPPY COPYRIGHT ("Venue & Xerox Corporation" 1984 1985 1986 1987 1988 1990 1993))(DECLARE%: DONTCOPY  (FILEMAP (NIL (90522 93853 (\FLOPPY.TRANSLATEFLOPPYRESULT 90532 . 91322) (\FLOPPY.SEVERE.ERROR 91324 . 91831) (\FLOPPY.TRANSLATEPMPAGEETYPE 91833 . 92154) (\FLOPPY.TRANSLATEFILETYPE 92156 . 92655) (\FLOPPY.MTL.FIXP 92657 . 92948) (\FLOPPY.LTM.FIXP 92950 . 93241) (\FLOPPY.MTL.IDATE 93243 . 93546) (\FLOPPY.LTM.IDATE 93548 . 93851)) (94590 132702 (\FLOPPY.TRANSLATESETUP 94600 . 94994) (\FLOPPY.SETUP.IOCB 94996 . 97000) (\FLOPPY.CHECK.FLOPPYIOCB 97002 . 102161) (\FLOPPY.DENSITY 102163 . 102561) (\FLOPPY.SECTORLENGTH 102563 . 102909) (\FLOPPY.ENCODEDSECTORLENGTH 102911 . 103268) (\FLOPPY.GAP3 103270 . 103605) (\FLOPPY.SECTORSPERTRACK 103607 . 103949) (\FLOPPY.RUN 103951 . 109612) (\FLOPPY.ERROR 109614 . 111089) (\FLOPPY.LOCK.BUFFER 111091 . 112476) (\FLOPPY.UNLOCK.BUFFER 112478 . 113022) (\FLOPPY.PREPAREFORCRASH 113024 . 113517) (\FLOPPY.COMMAND 113519 . 114400) (\FLOPPY.INITIALIZE 114402 . 115326) (\FLOPPY.NOP 115328 . 115609) (\FLOPPY.RECALIBRATE 115611 . 116068) (\FLOPPY.RECOVER 116070 . 116371) (\FLOPPY.TRANSFER 116373 . 122027) (\FLOPPY.READSECTOR 122029 . 122215) (\FLOPPY.WRITESECTOR 122217 . 122405) (\FLOPPY.FORMATTRACKS 122407 . 125385) (\FLOPPY.DISKCHANGECLEAR 125387 . 125696) (\FLOPPY.MOUNTEDP 125698 . 128015) (\FLOPPY.CAN.READP 128017 . 128215) (\FLOPPY.CAN.WRITEP 128217 . 128458) (\FLOPPY.WRITEABLEP 128460 . 129721) (\FLOPPY.TWOSIDEDP 129723 . 130808) (\FLOPPY.DUMP 130810 . 131735) (\FLOPPY.DEBUG 131737 . 132700)) (135150 155332 (FLOPPY.RESTART 135160 . 136068) (FLOPPY.MODE 136070 . 138285) (\FLOPPY.SETUP.HARDWARE 138287 . 140966) (\FLOPPY.EVENTFN 140968 . 141547) (\FLOPPY.HOSTNAMEP 141549 . 141922) (\FLOPPY.ADDDEVICENAME 141924 . 142306) (\FLOPPY.ASSUREFILENAME 142308 . 143597) (\FLOPPY.OTHERINFO 143599 . 144447) (\FLOPPY.LEXASSOC 144449 . 144858) (\FLOPPY.LEXPUTASSOC 144860 . 146318) (\FLOPPY.LEXREMOVEASSOC 146320 . 147385) (\FLOPPY.CACHED.READ 147387 . 148114) (\FLOPPY.CACHED.WRITE 148116 . 149087) (\FLOPPY.OPEN 149089 . 149476) (\FLOPPY.CLOSE 149478 . 150509) (\FLOPPY.FLUSH 150511 . 151606) (\FLOPPY.UNCACHED.READ 151608 . 152607) (\FLOPPY.UNCACHED.WRITE 152609 . 153610) (\FLOPPY.EXISTSP 153612 . 154012) (\FLOPPY.BREAK 154014 . 154423) (\FLOPPY.MESSAGE 154425 . 155077) (\FLOPPY.BUFFER 155079 . 155330)) (161415 242222 (\PFLOPPY.INIT 161425 . 163300) (\PFLOPPY.OPEN 163302 . 164313) (\PFLOPPY.OPEN.PSECTOR9 164315 . 164799) (\PFLOPPY.GET.PSECTOR9 164801 . 165944) (\PFLOPPY.OPEN.PFILELIST 165946 . 169489) (\PFLOPPY.DAMAGED 169491 . 169856) (\PFLOPPY.OPENFILE 169858 . 174362) (\PFLOPPY.OPENFILE1 174364 . 176114) (\PFLOPPY.OPENOLDFILE 176116 . 177294) (\PFLOPPY.OPENNEWFILE 177296 . 179290) (\PFLOPPY.ASSURESTREAM 179292 . 179746) (\PFLOPPY.GETFILEINFO 179748 . 180263) (\PFLOPPY.GETFILEINFO1 180265 . 182052) (\PFLOPPY.SETFILEINFO 182054 . 185353) (\PFLOPPY.CLOSEFILE 185355 . 185775) (\PFLOPPY.CLOSEFILE1 185777 . 188214) (\PFLOPPY.DELETEFILE 188216 . 190080) (\PFLOPPY.GENERATEFILES 190082 . 194824) (\PFLOPPY.NEXTFILEFN 194826 . 196074) (\PFLOPPY.FILEINFOFN 196076 . 196493) (\PFLOPPY.RENAMEFILE 196495 . 199565) (\PFLOPPY.STREAMS.AGAINST 199567 . 200196) (\PFLOPPY.STREAMS.USING 200198 . 200868) (\PFLOPPY.READPAGES 200870 . 201180) (\PFLOPPY.READPAGE 201182 . 202411) (\PFLOPPY.READPAGENO 202413 . 203999) (\PFLOPPY.WRITEPAGENO 204001 . 205591) (\PFLOPPY.PAGENOTODISKADDRESS 205593 . 206381) (\PFLOPPY.DISKADDRESSTOPAGENO 206383 . 207305) (\PFLOPPY.DIR.GET 207307 . 209039) (\PFLOPPY.DIR.PUT 209041 . 210710) (\PFLOPPY.DIR.REMOVE 210712 . 212547) (\PFLOPPY.DIR.VERSION 212549 . 214083) (\PFLOPPY.GETFILENAME 214085 . 216987) (\PFLOPPY.CREATE.PFILELIST 216989 . 218088) (\PFLOPPY.ADD.TO.PFILELIST 218090 . 223406) (\PFLOPPY.DELETE.FROM.PFILELIST 223408 . 225381) (\PFLOPPY.SAVE.PFILELIST 225383 . 226132) (\PFLOPPY.SAVE.PSECTOR9 226134 . 226680) (\PFLOPPY.WRITEPAGES 226682 . 226994) (\PFLOPPY.WRITEPAGE 226996 . 227912) (\PFLOPPY.TRUNCATEFILE 227914 . 229693) (\PFLOPPY.FORMAT 229695 . 239193) (\PFLOPPY.CONFIRM 239195 . 240940) (\PFLOPPY.GET.NAME 240942 . 241408) (\PFLOPPY.SET.NAME 241410 . 242220)) (242496 272075 (\PFLOPPY.ALLOCATE 242506 . 245305) (\PFLOPPY.ALLOCATE.LARGEST 245307 . 246242) (\PFLOPPY.TRUNCATE 246244 . 250521) (\PFLOPPY.DEALLOCATE 250523 . 251655) (\PFLOPPY.EXTEND 251657 . 257562) (\PFLOPPY.GAINSPACE 257564 . 258902) (\PFLOPPY.GAINSPACE.MERGE 258904 . 262068) (\PFLOPPY.ALLOCATE.WATCHDOG 262070 . 262685) (\PFLOPPY.FREE.PAGES 262687 . 264191) (\PFLOPPY.LENGTHS 264193 . 264441) (\PFLOPPY.STARTS 264443 . 264689) (\PFLOPPY.ICHECK 264691 . 270239) (\PFLOPPY.ALLOCATIONS 270241 . 272073)) (272105 277429 (FLOPPY.FREE.PAGES 272115 . 272479) (FLOPPY.FORMAT 272481 . 273424) (FLOPPY.NAME 273426 . 273619) (FLOPPY.GET.NAME 273621 . 273907) (FLOPPY.SET.NAME 273909 . 274200) (FLOPPY.CAN.READP 274202 . 274948) (FLOPPY.CAN.WRITEP 274950 . 275707) (FLOPPY.WAIT.FOR.FLOPPY 275709 . 277427)) (278033 299163 (\SFLOPPY.INIT 278043 . 279855) (\SFLOPPY.GETFILEINFO 279857 . 281838) (\SFLOPPY.OPENHUGEFILE 281840 . 284993) (\SFLOPPY.WRITEPAGES 284995 . 285304) (\SFLOPPY.WRITEPAGE 285306 . 286672) (\SFLOPPY.READPAGES 286674 . 287061) (\SFLOPPY.READPAGE 287063 . 287846) (\SFLOPPY.CLOSEHUGEFILE 287848 . 289403) (\SFLOPPY.INPUTFLOPPY 289405 . 293499) (\SFLOPPY.OUTPUTFLOPPY 293501 . 295995) (\SFLOPPY.CLOSEFLOPPY 295997 . 298340) (\SFLOPPY.HACK 298342 . 299161)) (299639 318312 (\HFLOPPY.INIT 299649 . 301461) (\HFLOPPY.GETFILEINFO 301463 . 303444) (\HFLOPPY.OPENHUGEFILE 303446 . 307186) (\HFLOPPY.WRITEPAGES 307188 . 307497) (\HFLOPPY.WRITEPAGE 307499 . 308865) (\HFLOPPY.READPAGES 308867 . 309254) (\HFLOPPY.READPAGE 309256 . 310039) (\HFLOPPY.CLOSEHUGEFILE 310041 . 310942) (\HFLOPPY.INPUTFLOPPY 310944 . 313571) (\HFLOPPY.OUTPUTFLOPPY 313573 . 315729) (\HFLOPPY.CLOSEFLOPPY 315731 . 318310)) (318382 340817 (FLOPPY.SCAVENGE 318392 . 318576) (\PFLOPPY.SCAVENGE 318578 . 319124) (\PFLOPPY.SCAVENGE.PMPAGES 319126 . 320432) (\PFLOPPY.SCAVENGE.PMPAGEA 320434 . 321972) (\PFLOPPY.SCAVENGE.PMPAGE.AFTER 321974 . 323023) (\PFLOPPY.SCAVENGE.PMPAGE.AFTER1 323025 . 329574) (\PFLOPPY.SCAVENGE.PLPAGES 329576 . 337463) (\PFLOPPY.SCAVENGE.PSECTOR9 337465 . 340351) (\PFLOPPY.SCAVENGE.PFILELIST 340353 . 340815)) (340843 346090 (FLOPPY.TO.FILE 340853 . 343475) (FLOPPY.FROM.FILE 343477 . 346088)) (346119 357971 (FLOPPY.COMPACT 346129 . 346621) (\PFLOPPY.COMPACT 346623 . 348576) (\PFLOPPY.COMPACT.PFALLOCS 348578 . 352802) (\PFLOPPY.COMPACT.PFALLOC 352804 . 356268) (\PFLOPPY.COMPACT.PSECTOR9 356270 . 357307) (\PFLOPPY.COMPACT.PFILELIST 357309 . 357969)) (358000 361349 (FLOPPY.ARCHIVE 358010 . 360223) (FLOPPY.UNARCHIVE 360225 . 361347)))))STOP