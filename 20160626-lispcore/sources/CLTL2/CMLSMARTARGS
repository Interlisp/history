(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)
(FILECREATED "18-Oct-93 15:15:10" "{Pele:mv:envos}<LispCore>Sources>CLTL2>CMLSMARTARGS.;2" 36820  

      previous date%: "13-Apr-92 16:26:44" "{Pele:mv:envos}<LispCore>Sources>CLTL2>CMLSMARTARGS.;1"
)


(* ; "
Copyright (c) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993 by Venue & Xerox Corporation.  All rights reserved.
")

(PRETTYCOMPRINT CMLSMARTARGSCOMS)

(RPAQQ CMLSMARTARGSCOMS
       ((VARS *CL-ARGINFO-LIST* *XCL-ARGINFO-LIST*)
        (FUNCTIONS ARGINFO-MUNG CLSMARTEN)
        [DECLARE%: DONTEVAL@LOAD DOCOPY (P (CLSMARTEN *CL-ARGINFO-LIST*)
                                           (CLSMARTEN *XCL-ARGINFO-LIST*)
                                           (SETQ *CL-ARGINFO-LIST* (SETQ *XCL-ARGINFO-LIST*
                                                                         'NOBIND]
        (PROP FILETYPE CMLSMARTARGS)))

(RPAQQ *CL-ARGINFO-LIST*
       (((LISP:* +)
         &REST NUMBERS)
        ((- / LISP:/= < <= = > >= MAX MIN)
         LISP:NUMBER &REST MORE-NUMBERS)
        ((LISP:1+ LISP:1- ABS LISP:ACOS LISP:ACOSH LISP:ASIN LISP:ASINH LISP:ATANH LISP:CONJUGATE 
                LISP:COSH LISP:EXP LISP:IMAGPART MINUSP LISP:PHASE LISP:PLUSP LISP:RATIONAL 
                LISP:RATIONALIZE LISP:REALPART LISP:SIGNUM LISP:SINH LISP:SQRT LISP:TANH LISP:ZEROP)
         LISP:NUMBER)
        (LISP:ACONS KEY DATUM A-LIST)
        ((LISP:ADJOIN LISP:MEMBER)
         ITEM LIST &KEY :TEST :TEST-NOT :KEY)
        (LISP:ADJUST-ARRAY LISP:ARRAY NEW-DIMENSIONS &KEY :ELEMENT-TYPE :INITIAL-ELEMENT 
               :INITIAL-CONTENTS :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :FATP 
               :DISPLACED-TO-BASE)
        ((LISP:ADJUSTABLE-ARRAY-P LISP:ARRAY-DIMENSIONS LISP:ARRAY-ELEMENT-TYPE 
                LISP:ARRAY-HAS-FILL-POINTER-P LISP:ARRAY-RANK LISP:ARRAY-TOTAL-SIZE)
         LISP:ARRAY)
        ((LISP:ALPHA-CHAR-P LISP:ALPHANUMERICP LISP:BOTH-CASE-P LISP:CHAR-BITS LISP:CHAR-CODE 
                LISP:CHAR-DOWNCASE LISP:CHAR-FONT LISP:CHAR-INT LISP:CHAR-NAME LISP:CHAR-UPCASE 
                LISP:GRAPHIC-CHAR-P LISP:LOWER-CASE-P LISP:STANDARD-CHAR-P LISP:STRING-CHAR-P 
                LISP:UPPER-CASE-P)
         LISP:CHAR)
        ((AND OR PROGN)
         (CURLYLIST FORM)
         #\*)
        ((LISP:APPEND NCONC)
         &REST LISTS)
        (LISP:APPLY LISP:FUNCTION ARG &REST MORE-ARGS)
        (LISP:APPLYHOOK LISP:FUNCTION ARGS EVALHOOKFN APPLYHOOKFN &OPTIONAL ENV)
        ((LISP:APROPOS LISP:APROPOS-LIST)
         STRING &OPTIONAL PACKAGE)
        ((LISP:AREF LISP:ARRAY-IN-BOUNDS-P LISP:ARRAY-ROW-MAJOR-INDEX)
         LISP:ARRAY &REST SUBSCRIPTS)
        (LISP:ARRAY-DIMENSION LISP:ARRAY AXIS-NUMBER)
        ((LISP:ARRAYP LISP:ATOM LISP:BIT-VECTOR-P LISP:CHARACTER LISP:CHARACTERP LISP:COMMONP 
                LISP:COMPILED-FUNCTION-P LISP:COMPLEXP LISP:CONSP LISP:CONSTANTP LISP:COPY-TREE 
                LISP:DESCRIBE LISP:ENDP LISP:FLOATP LISP:FUNCTIONP LISP:HASH-TABLE-P LISP:IDENTITY 
                INSPECT LISP:INTEGERP LISP:KEYWORDP LISP:LISTP NULL LISP:NUMBERP LISP:PACKAGEP 
                LISP:PATHNAMEP LISP:PRIN1-TO-STRING LISP:PRINC-TO-STRING LISP:RANDOM-STATE-P 
                LISP:RATIONALP READTABLEP LISP:SIMPLE-BIT-VECTOR-P LISP:SIMPLE-STRING-P 
                LISP:SIMPLE-VECTOR-P STREAMP LISP:STRINGP LISP:SXHASH LISP:SYMBOLP LISP:TYPE-OF 
                LISP:VECTORP)
         OBJECT)
        (LISP:ASH INTEGER LISP:COUNT)
        [LISP:ASSERT TEST-FORM (SQUARELIST ((CURLYLIST* PLACE))
                                      (SQUARELIST STRING (CURLYLIST* ARG]
        ((LISP:ASSOC LISP:RASSOC)
         ITEM A-LIST &KEY :TEST :TEST-NOT :KEY)
        ((LISP:ASSOC-IF LISP:ASSOC-IF-NOT LISP:RASSOC-IF LISP:RASSOC-IF-NOT)
         PREDICATE A-LIST &KEY :KEY)
        (LISP:ATAN Y &OPTIONAL X)
        (BIT BIT-ARRAY &REST SUBSCRIPTS)
        ((LISP:BIT-AND LISP:BIT-EQV LISP:BIT-IOR LISP:BIT-XOR)
         BIT-ARRAY1 BIT-ARRAY-2 &OPTIONAL RESULT-BIT-ARRAY)
        ((LISP:BIT-ANDC1 LISP:BIT-ANDC2 LISP:BIT-NAND LISP:BIT-NOR LISP:BIT-ORC1 LISP:BIT-ORC2)
         BIT-ARRAY1 BIT-ARRAY2 &OPTIONAL RESULT-BIT-ARRAY)
        (LISP:BIT-NOT BIT-ARRAY &OPTIONAL RESULT-BIT-ARRAY)
        (LISP:BLOCK NAME
            (CURLYLIST FORM)
            #\*)
        (LISP:BOOLE OP INTEGER1 INTEGER2)
        ((BOUNDP LISP:FBOUNDP LISP:FMAKUNBOUND LISP:MAKE-SYNONYM-STREAM LISP:MAKUNBOUND 
                LISP:SPECIAL-FORM-P LISP:SYMBOL-FUNCTION LISP:SYMBOL-PLIST LISP:SYMBOL-VALUE)
         LISP:SYMBOL)
        (LISP:BREAK &OPTIONAL FORMAT-STRING &REST ARGS)
        ((LISP:BUTLAST LISP:NBUTLAST)
         LIST &OPTIONAL N)
        (BYTE SIZE LISP:POSITION)
        ((LISP:BYTE-POSITION BYTE-SIZE)
         BYTESPEC)
        ((CAAAAR CAAADR CAAAR CAADAR CAADDR CAADR CAAR CADAAR CADADR CADAR CADDAR CADDDR CADDR CADR 
                CAR CDAAAR CDAADR CDAAR CDADAR CDADDR CDADR CDAR CDDAAR CDDADR CDDAR CDDDAR CDDDDR 
                CDDDR CDDR CDR LISP:EIGHTH LISP:FIFTH LISP:FIRST LISP:FOURTH LISP:LIST-LENGTH 
                LISP:NINTH LISP:REST LISP:SECOND LISP:SEVENTH LISP:SIXTH LISP:TENTH LISP:THIRD)
         LIST)
        [(CASE LISP:ECASE)
         KEYFORM
         (CURLYLIST* ((CURLYLIST ((CURLYLIST* KEY))
                             #\| KEY)
                      (CURLYLIST* FORM]
        (LISP:CATCH TAG
            (CURLYLIST FORM)
            #\*)
        [LISP:CCASE KEYPLACE (CURLYLIST* ((CURLYLIST ((CURLYLIST* KEY))
                                                 #\| KEY)
                                          (CURLYLIST* FORM]
        ((LISP:CEILING LISP:FCEILING LISP:FFLOOR LISP:FLOOR LISP:FROUND LISP:FTRUNCATE ROUND 
                LISP:TRUNCATE)
         LISP:NUMBER &OPTIONAL DIVISOR)
        (LISP:CERROR CONTINUE-FORMAT-STRING ERROR-FORMAT-STRING &REST ARGS)
        (LISP:CHAR STRING INDEX)
        (LISP:CHAR-BIT LISP:CHAR NAME)
        ((LISP:CHAR-EQUAL LISP:CHAR-GREATERP LISP:CHAR-LESSP LISP:CHAR-NOT-EQUAL 
                LISP:CHAR-NOT-GREATERP LISP:CHAR-NOT-LESSP LISP:CHAR/= LISP:CHAR< LISP:CHAR<= 
                LISP:CHAR= LISP:CHAR> LISP:CHAR>=)
         LISP:CHARACTER &REST MORE-CHARACTERS)
        (LISP:CHECK-TYPE PLACE TYPESPEC &OPTIONAL STRING)
        ((LISP:CIS LISP:COS LISP:SIN LISP:TAN)
         RADIANS)
        ((LISP:CLEAR-INPUT LISP:LISTEN)
         &OPTIONAL INPUT-STREAM)
        ((LISP:CLEAR-OUTPUT LISP:FINISH-OUTPUT LISP:FORCE-OUTPUT LISP:FRESH-LINE LISP:TERPRI)
         &OPTIONAL OUTPUT-STREAM)
        (LISP:CLOSE STREAM &KEY :ABORT)
        ((CLRHASH LISP:HASH-TABLE-COUNT)
         LISP:HASH-TABLE)
        (LISP:CODE-CHAR CODE &OPTIONAL BITS FONT)
        (COERCE OBJECT RESULT-TYPE)
        (LISP:COMPILE NAME &OPTIONAL DEFINITION &KEY :LAP)
        (LISP:COMPILE-FILE INPUT-PATHNAME &KEY :OUTPUT-FILE :ERROR-FILE :ERRORS-TO-TERMINAL :LAP-FILE
               :LOAD :FILE-MANAGER-FORMAT :PROCESS-ENTIRE-FILE)
        (LISP:COMPILER-LET ((CURLYLIST VAR #\| (VAR VALUE))
                            #\*)
               (CURLYLIST FORM)
               #\*)
        (COMPLEX LISP:REALPART &OPTIONAL IMAGPART)
        (LISP:COMPUTE-RESTARTS &OPTIONAL CONDITION)
        (LISP:CONCATENATE RESULT-TYPE &REST SEQUENCES)
        (COND (CURLYLIST (TEST (CURLYLIST FORM)
                               #\*))
              #\*)
        ((CONS LISP:NRECONC LISP:REVAPPEND RPLACA RPLACD)
         X Y)
        ((LISP:COPY-ALIST LISP:COPY-LIST LISP:VALUES-LIST)
         LIST)
        (LISP:COPY-READTABLE &OPTIONAL FROM-READTABLE TO-READTABLE)
        ((LISP:COPY-SEQ LISP:LENGTH LISP:NREVERSE LISP:REVERSE)
         SEQUENCE)
        (LISP:COPY-SYMBOL SYM &OPTIONAL COPY-PROPS)
        ((LISP:COUNT LISP:FIND LISP:POSITION)
         ITEM SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :KEY)
        ((LISP:COUNT-IF LISP:COUNT-IF-NOT LISP:FIND-IF LISP:FIND-IF-NOT LISP:POSITION-IF 
                LISP:POSITION-IF-NOT)
         TEST SEQUENCE &KEY :FROM-END :START :END :KEY)
        [LISP:CTYPECASE KEYPLACE (CURLYLIST* (TYPE (CURLYLIST* FORM]
        ((LISP:DECF LISP:INCF)
         PLACE
         (SQUARELIST DELTA))
        (LISP:DECLAIM (CURLYLIST* DECL-SPEC)
               #\*)
        (DECLARE (CURLYLIST DECL-SPEC)
               #\*)
        ((LISP:DECODE-FLOAT LISP:FLOAT-DIGITS LISP:FLOAT-PRECISION LISP:FLOAT-RADIX 
                LISP:INTEGER-DECODE-FLOAT)
         FLOAT)
        (LISP:DECODE-UNIVERSAL-TIME UNIVERSAL-TIME &OPTIONAL TIME-ZONE)
        ((LISP:DEFCONSTANT LISP:DEFPARAMETER)
         NAME INITIAL-VALUE (SQUARELIST LISP:DOCUMENTATION))
        (DEFINE-CONDITION NAME ((CURLYLIST PARENT-TYPE)
                                #\*)
               (SQUARELIST ((CURLYLIST SLOT-SPECIFIER)
                            #\*)
                      (CURLYLIST OPTION)
                      #\*))
        (LISP:DEFINE-MODIFY-MACRO NAME LAMBDA-LIST LISP:FUNCTION (SQUARELIST DOC-STRING))
        (LISP:DEFINE-SETF-METHOD ACCESS-FN LAMBDA-LIST (CURLYLIST LISP:DECLARATION #\| DOC-STRING)
               #\*
               (CURLYLIST FORM)
               #\*)
        ((DEFMACRO LISP:DEFTYPE LISP:DEFUN)
         NAME LAMBDA-LIST (CURLYLIST* LISP:DECLARATION #\| DOC-STRING)
         (CURLYLIST* FORM))
        (DEFPACKAGE DEFINED-PACKAGE-NAME (CURLYLIST OPTION)
               #\*)
        (LISP:DEFSETF ACCESS-FN (CURLYLIST UPDATE-FN (SQUARELIST DOC-STRING)
                                       #\| LAMBDA-LIST (STORE-VARIABLE)
                                       (CURLYLIST LISP:DECLARATION #\| DOC-STRING)
                                       #\*
                                       (CURLYLIST FORM)
                                       #\*))
        (LISP:DEFSTRUCT NAME-AND-OPTIONS (SQUARELIST DOC-STRING)
               (CURLYLIST SLOT-DESCRIPTION)
               #\+)
        (LISP:DEFVAR NAME (SQUARELIST INITIAL-VALUE (SQUARELIST LISP:DOCUMENTATION)))
        ((LISP:DELETE LISP:REMOVE)
         ITEM SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :COUNT :KEY)
        ((LISP:DELETE-DUPLICATES LISP:REMOVE-DUPLICATES)
         SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :KEY)
        ((LISP:DELETE-FILE LISP:FILE-AUTHOR LISP:FILE-WRITE-DATE LISP:PROBE-FILE)
         FILE)
        ((LISP:DELETE-IF LISP:DELETE-IF-NOT LISP:REMOVE-IF LISP:REMOVE-IF-NOT)
         TEST SEQUENCE &KEY :FROM-END :START :END :COUNT :KEY)
        ((LISP:DENOMINATOR LISP:NUMERATOR)
         LISP:RATIONAL)
        ((LISP:DEPOSIT-FIELD DPB)
         NEWBYTE BYTESPEC INTEGER)
        (DESTRUCTURING-BIND BIND-PATTERN VALUE &BODY BODY)
        (LISP:DIGIT-CHAR WEIGHT &OPTIONAL RADIX FONT)
        (LISP:DIGIT-CHAR-P LISP:CHAR &OPTIONAL RADIX)
        ((LISP:DIRECTORY LISP:DIRECTORY-NAMESTRING LISP:FILE-NAMESTRING LISP:HOST-NAMESTRING 
                LISP:NAMESTRING PATHNAME LISP:PATHNAME-DEVICE LISP:PATHNAME-DIRECTORY 
                LISP:PATHNAME-HOST LISP:PATHNAME-NAME LISP:PATHNAME-TYPE LISP:PATHNAME-VERSION 
                LISP:TRUENAME)
         PATHNAME)
        (LISP:DISASSEMBLE NAME-OR-COMPILED-FUNCTION)
        ((LISP:DO LISP:DO*)
         [(CURLYLIST* VAR #\| (VAR (SQUARELIST INIT (SQUARELIST LISP:STEP]
         (END-TEST (CURLYLIST* RESULT))
         (CURLYLIST* LISP:DECLARATION)
         (CURLYLIST* TAG #\| STATEMENT))
        (LISP:DO-ALL-SYMBOLS (VAR (SQUARELIST RESULT-FORM))
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST TAG #\| STATEMENT)
               #\*)
        ((LISP:DO-EXTERNAL-SYMBOLS LISP:DO-SYMBOLS)
         (VAR (SQUARELIST PACKAGE (SQUARELIST RESULT-FORM)))
         (CURLYLIST LISP:DECLARATION)
         #\*
         (CURLYLIST TAG #\| STATEMENT)
         #\*)
        (LISP:DOCUMENTATION LISP:SYMBOL DOC-TYPE)
        (LISP:DOLIST (VAR LISTFORM (SQUARELIST RESULTFORM))
            (CURLYLIST LISP:DECLARATION)
            #\*
            (CURLYLIST TAG #\| STATEMENT)
            #\*)
        (LISP:DOTIMES (VAR COUNTFORM (SQUARELIST RESULTFORM))
            (CURLYLIST LISP:DECLARATION)
            #\*
            (CURLYLIST TAG #\| STATEMENT)
            #\*)
        (DRIBBLE &OPTIONAL PATHNAME)
        (ED &OPTIONAL NAME OPTIONS #\= ((CURLYLIST "FILEPKGTYPE" #\| :DISPLAY #\| :NEW)
                                        #\*))
        (LISP:ELT SEQUENCE INDEX)
        (LISP:ENCODE-UNIVERSAL-TIME LISP:SECOND MINUTE HOUR DATE MONTH YEAR &OPTIONAL TIME-ZONE)
        (LISP:ENOUGH-NAMESTRING PATHNAME &OPTIONAL DEFAULTS)
        ((EQ EQL LISP:EQUAL LISP:EQUALP)
         X Y)
        ((LISP:ERROR LISP:WARN)
         FORMAT-STRING &REST ARGS)
        ((LISP:ETYPECASE LISP:TYPECASE)
         KEYFORM
         (CURLYLIST (TYPE (CURLYLIST FORM)
                          #\*))
         #\*)
        ((LISP:EVAL LISP:GET-SETF-METHOD LISP:GET-SETF-METHOD-MULTIPLE-VALUE)
         FORM)
        (LISP:EVAL-WHEN ((CURLYLIST SITUATION)
                         #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:EVALHOOK FORM EVALHOOKFN APPLYHOOKFN &OPTIONAL ENV)
        ((EVENP LISP:INT-CHAR LISP:INTEGER-LENGTH LISP:ISQRT LISP:LOGCOUNT LOGNOT ODDP)
         INTEGER)
        ((LISP:EVERY LISP:NOTANY LISP:NOTEVERY LISP:SOME)
         PREDICATE SEQUENCE &REST MORE-SEQUENCES)
        ((EXPORT IMPORT LISP:SHADOW LISP:SHADOWING-IMPORT LISP:UNEXPORT)
         SYMBOLS &OPTIONAL PACKAGE)
        (LISP:EXPT BASE-NUMBER POWER-NUMBER)
        (LISP:FILE-LENGTH FILE-STREAM)
        (LISP:FILE-POSITION FILE-STREAM &OPTIONAL LISP:POSITION)
        (LISP:FILL SEQUENCE ITEM &KEY :START :END)
        ((LISP:FILL-POINTER LISP:VECTOR-POP)
         LISP:VECTOR)
        (LISP:FIND-ALL-SYMBOLS STRING-OR-SYMBOL)
        ((LISP:FIND-PACKAGE LISP:NAME-CHAR)
         NAME)
        (LISP:FIND-RESTART RESTART-IDENTIFIER &OPTIONAL CONDITION)
        ((LISP:FIND-SYMBOL LISP:INTERN)
         STRING &OPTIONAL PACKAGE)
        ((LISP:FLET LISP:LABELS)
         ((CURLYLIST (NAME LAMBDA-LIST (CURLYLIST LISP:DECLARATION #\| DOC-STRING)
                           #\*
                           (CURLYLIST FORM)
                           #\*))
          #\*)
         (CURLYLIST FORM)
         #\*)
        (FLOAT LISP:NUMBER &OPTIONAL OTHER)
        (LISP:FLOAT-SIGN FLOAT1 &OPTIONAL FLOAT2)
        (LISP:FORMAT DESTINATION CONTROL-STRING &REST ARGUMENTS)
        (LISP:FUNCALL FN &REST ARGUMENTS)
        #'FN
        ((LISP:GCD LOGAND LISP:LOGEQV LISP:LOGIOR LOGXOR)
         &REST INTEGERS)
        (LISP:GENSYM &OPTIONAL X)
        (LISP:GENTEMP &OPTIONAL PREFIX PACKAGE)
        (GET LISP:SYMBOL INDICATOR &OPTIONAL DEFAULT)
        ((LISP:GET-DECODED-TIME LISP:GET-INTERNAL-REAL-TIME LISP:GET-INTERNAL-RUN-TIME 
                LISP:GET-UNIVERSAL-TIME LISP:LISP-IMPLEMENTATION-TYPE 
                LISP:LISP-IMPLEMENTATION-VERSION LISP:LIST-ALL-PACKAGES LISP:LONG-SITE-NAME 
                LISP:MACHINE-INSTANCE LISP:MACHINE-TYPE LISP:MACHINE-VERSION 
                LISP:MAKE-STRING-OUTPUT-STREAM LISP:SHORT-SITE-NAME LISP:SOFTWARE-TYPE 
                LISP:SOFTWARE-VERSION))
        (LISP:GET-DISPATCH-MACRO-CHARACTER DISP-CHAR SUB-CHAR &OPTIONAL LISP:READTABLE)
        (LISP:GET-MACRO-CHARACTER LISP:CHAR &OPTIONAL LISP:READTABLE)
        (LISP:GET-OUTPUT-STREAM-STRING STRING-OUTPUT-STREAM)
        (LISP:GET-PROPERTIES PLACE INDICATOR-LIST)
        (LISP:GETF PLACE INDICATOR &OPTIONAL DEFAULT)
        (LISP:GETHASH KEY LISP:HASH-TABLE &OPTIONAL DEFAULT)
        (GO TAG)
        (HANDLER-BIND ((CURLYLIST (TYPE HANDLER))
                       #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:HANDLER-CASE EXPRESSION (CURLYLIST (TYPESPEC ((SQUARELIST VAR))
                                                        (CURLYLIST FORM)
                                                        #\*))
               #\*)
        (IGNORE-ERRORS &BODY FORMS)
        (LISP:IF TEST
            THEN
            (SQUARELIST ELSE))
        (LISP:IN-PACKAGE NAME)
        (LISP:IN-PACKAGE LISP:PACKAGE-NAME &KEY :NICKNAMES :USE)
        ((LISP:INPUT-STREAM-P LISP:OUTPUT-STREAM-P LISP:STREAM-ELEMENT-TYPE)
         STREAM)
        (LISP:INVOKE-RESTART RESTART-IDENTIFIER &REST ARGUMENTS)
        ((LISP:INTERSECTION LISP:NINTERSECTION LISP:NSET-DIFFERENCE LISP:NSET-EXCLUSIVE-OR 
                LISP:NUNION LISP:SET-DIFFERENCE LISP:SET-EXCLUSIVE-OR LISP:SUBSETP LISP:UNION)
         LIST1 LIST2 &KEY :TEST :TEST-NOT :KEY)
        (LAST LIST &OPTIONAL N)
        (LISP:LCM &REST INTEGERS)
        ((LDB LISP:LDB-TEST LISP:MASK-FIELD)
         BYTESPEC INTEGER)
        (LISP:LDIFF LIST SUBLIST)
        ((LET LET*)
         ((CURLYLIST VAR #\| (VAR (SQUARELIST VALUE)))
          #\*)
         (CURLYLIST LISP:DECLARATION)
         #\*
         (CURLYLIST FORM)
         #\*)
        ((LIST LISP:VALUES)
         &REST ARGS)
        (LIST* ARG &REST OTHERS)
        (LISP:LOAD FILENAME &KEY :VERBOSE :PRINT :IF-DOES-NOT-EXIST :PACKAGE :LOADFLG)
        (LISP:LOCALLY (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:LOG LISP:NUMBER &OPTIONAL BASE)
        ((LISP:LOGANDC1 LISP:LOGANDC2 LISP:LOGNAND LISP:LOGNOR LISP:LOGORC1 LISP:LOGORC2 LISP:LOGTEST
                )
         INTEGER1 INTEGER2)
        (LISP:LOGBITP INDEX INTEGER)
        (LISP:LOOP (CURLYLIST LISP::LOOP-CLAUSE)
               #\*
               (CURLYLIST TAG #\| EXPR)
               #\*)
        (LISP:MACRO-FUNCTION SYMBOL &OPTIONAL ENV)
        ((LISP:MACROEXPAND LISP:MACROEXPAND-1)
         FORM &OPTIONAL ENV)
        (LISP:MACROLET ((CURLYLIST (NAME VARLIST (CURLYLIST LISP:DECLARATION #\| DOC-STRING)
                                         #\*
                                         (CURLYLIST FORM)
                                         #\*))
                        #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:MAKE-ARRAY DIMENSIONS &KEY :ELEMENT-TYPE :INITIAL-ELEMENT :INITIAL-CONTENTS :ADJUSTABLE
               :FILL-POINTER :DISPLACED-TO :DISPLACED-INDEX-OFFSET :FATP :EXTENDABLE :READ-ONLY-P 
               :DISPLACED-TO-BASE)
        ((LISP:MAKE-BROADCAST-STREAM LISP:MAKE-CONCATENATED-STREAM)
         &REST STREAMS)
        (LISP:MAKE-CHAR LISP:CHAR &OPTIONAL BITS FONT)
        (MAKE-CONDITION TYPE &REST SLOT-INITIALIZATIONS)
        (LISP:MAKE-DISPATCH-MACRO-CHARACTER LISP:CHAR &OPTIONAL NON-TERMINATING-P LISP:READTABLE)
        ((LISP:MAKE-ECHO-STREAM LISP:MAKE-TWO-WAY-STREAM)
         INPUT-STREAM OUTPUT-STREAM)
        (LISP:MAKE-HASH-TABLE &KEY :TEST :SIZE :REHASH-SIZE :REHASH-THRESHOLD)
        (LISP:MAKE-LIST SIZE &KEY :INITIAL-ELEMENT)
        (LISP:MAKE-PACKAGE LISP:PACKAGE-NAME &KEY :NICKNAMES :USE :PREFIX-NAME :INTERNAL-SYMBOLS 
               :EXTERNAL-SYMBOLS :EXTERNAL-ONLY)
        (LISP:MAKE-PATHNAME &KEY :HOST :DEVICE :DIRECTORY :NAME :TYPE :VERSION :DEFAULTS :CASE)
        (LISP:MAKE-RANDOM-STATE &OPTIONAL STATE)
        (LISP:MAKE-SEQUENCE TYPE SIZE &KEY :INITIAL-ELEMENT)
        (LISP:MAKE-STRING SIZE &KEY :INITIAL-ELEMENT :ELEMENT-TYPE)
        (LISP:MAKE-STRING-INPUT-STREAM STRING &OPTIONAL START END)
        (LISP:MAKE-STRING-OUTPUT-STREAM &KEY :ELEMENT-TYPE)
        (LISP:MAKE-SYMBOL PRINT-NAME)
        (MAKE-VECTOR LISP:LENGTH &OPTIONAL TYPE INITIAL-VALUE)
        (LISP:MAP RESULT-TYPE LISP:FUNCTION SEQUENCE &REST MORE-SEQUENCES)
        (LISP:MAP-INTO RESULT-SEQUENCE FUNCTION &REST SEQUENCES)
        ((LISP:MAPC LISP:MAPCAN LISP:MAPCAR LISP:MAPCON LISP:MAPL LISP:MAPLIST)
         LISP:FUNCTION LIST &REST MORE-LISTS)
        (LISP:MAPHASH LISP:FUNCTION LISP:HASH-TABLE)
        ((LISP:MEMBER-IF LISP:MEMBER-IF-NOT)
         PREDICATE LIST &KEY :KEY)
        (LISP:MERGE RESULT-TYPE SEQUENCE1 SEQUENCE2 PREDICATE &KEY :KEY)
        (LISP:MERGE-PATHNAMES PATHNAME &OPTIONAL DEFAULTS DEFAULT-VERSION)
        ((LISP:MISMATCH LISP:SEARCH)
         SEQUENCE1 SEQUENCE2 &KEY :FROM-END :TEST :TEST-NOT :KEY :START1 :START2 :END1 :END2)
        ((LISP:MOD LISP:REM)
         LISP:NUMBER DIVISOR)
        (LISP:MULTIPLE-VALUE-BIND ((CURLYLIST VAR)
                                   #\*)
               VALUES-FORM
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:MULTIPLE-VALUE-CALL LISP:FUNCTION (CURLYLIST FORM)
               #\*)
        ((LISP:MULTIPLE-VALUE-LIST LISP:STEP)
         FORM)
        (LISP:MULTIPLE-VALUE-PROG1 FORM (CURLYLIST FORM)
               #\*)
        (LISP:MULTIPLE-VALUE-SETQ VARIABLES FORM)
        ((NOT STRING)
         X)
        ((LISP:NSTRING-CAPITALIZE LISP:NSTRING-DOWNCASE LISP:NSTRING-UPCASE LISP:STRING-CAPITALIZE 
                LISP:STRING-DOWNCASE LISP:STRING-UPCASE)
         STRING &KEY :START :END)
        ((LISP:NSUBLIS LISP:SUBLIS)
         ALIST TREE &KEY :TEST :TEST-NOT :KEY)
        ((LISP:NSUBST LISP:SUBST)
         NEW OLD TREE &KEY :TEST :TEST-NOT :KEY)
        ((LISP:NSUBST-IF LISP:NSUBST-IF-NOT LISP:SUBST-IF LISP:SUBST-IF-NOT)
         NEW TEST TREE &KEY :KEY)
        ((LISP:NSUBSTITUTE LISP:SUBSTITUTE)
         NEWITEM OLDITEM SEQUENCE &KEY :FROM-END :TEST :TEST-NOT :START :END :COUNT :KEY)
        ((LISP:NSUBSTITUTE-IF LISP:NSUBSTITUTE-IF-NOT LISP:SUBSTITUTE-IF LISP:SUBSTITUTE-IF-NOT)
         NEWITEM TEST SEQUENCE &KEY :FROM-END :START :END :COUNT :KEY)
        ((LISP:NTH LISP:NTHCDR)
         N LIST)
        (LISP:NTH-VALUE N FORM)
        (OPEN FILENAME &KEY :DIRECTION :ELEMENT-TYPE :IF-EXISTS :IF-DOES-NOT-EXIST :EXTERNAL-FORMAT)
        ((LISP:PACKAGE-NAME LISP:PACKAGE-NICKNAMES LISP:PACKAGE-SHADOWING-SYMBOLS 
                LISP:PACKAGE-USE-LIST LISP:PACKAGE-USED-BY-LIST)
         PACKAGE)
        (LISP:PAIRLIS KEYS DATA &OPTIONAL A-LIST)
        (LISP:PARSE-INTEGER STRING &KEY :START :END :RADIX :JUNK-ALLOWED)
        (LISP:PARSE-NAMESTRING THING &OPTIONAL HOST DEFAULTS &KEY :START :END :JUNK-ALLOWED)
        ((LISP:PATHNAME-HOST LISP:PATHNAME-DEVICE LISP:PATHNAME-DIRECTORY LISP:PATHNAME-NAME 
                LISP:PATHNAME-TYPE)
         PATHNAME &KEY :CASE)
        (LISP:PEEK-CHAR &OPTIONAL PEEK-TYPE INPUT-STREAM EOF-ERROR-P EOF-VALUE RECURSIVE-P)
        (LISP:POP PLACE)
        ((LISP:PPRINT LISP:PRIN1 LISP:PRINC LISP:PRINT)
         OBJECT &OPTIONAL OUTPUT-STREAM)
        (LISP:PRINT-UNREADABLE-OBJECT (LISP::OBJECT STREAM &KEY :TYPE :IDENTITY)
               (CURLYLIST DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:PROCLAIM DECL-SPEC)
        ((PROG PROG*)
         ((CURLYLIST VAR #\| (VAR (SQUARELIST INIT)))
          #\*)
         (CURLYLIST LISP:DECLARATION)
         #\*
         (CURLYLIST TAG #\| STATEMENT)
         #\*)
        (PROG1 LISP:FIRST
            (CURLYLIST FORM)
            #\*)
        (PROG2 LISP:FIRST LISP:SECOND (CURLYLIST FORM)
               #\*)
        (LISP:PROGV SYMBOLS LISP:VALUES
            (CURLYLIST FORM)
            #\*)
        (LISP:PROVIDE MODULE-NAME)
        ((LISP:PSETF LISP:SETF)
         (CURLYLIST PLACE NEWVALUE)
         #\*)
        ((LISP:PSETQ LISP:SETQ)
         (CURLYLIST VAR FORM)
         #\*)
        (LISP:PUSH ITEM PLACE)
        (LISP:PUSHNEW ITEM LIST &KEY :TEST :TEST-NOT :KEY)
        'OBJECT
        (LISP:RANDOM LISP:NUMBER &OPTIONAL STATE)
        ((LISP:READ LISP:READ-CHAR LISP:READ-CHAR-NO-HANG LISP:READ-LINE)
         &OPTIONAL INPUT-STREAM EOF-ERROR-P EOF-VALUE RECURSIVE-P)
        (LISP:READ-BYTE BINARY-INPUT-STREAM &OPTIONAL EOF-ERROR-P EOF-VALUE)
        (LISP:READ-DELIMITED-LIST LISP:CHAR &OPTIONAL INPUT-STREAM RECURSIVE-P)
        (LISP:READ-FROM-STRING STRING &OPTIONAL EOF-ERROR-P EOF-VALUE &KEY :START :END 
               :PRESERVE-WHITESPACE)
        (LISP:READ-PRESERVING-WHITESPACE &OPTIONAL IN-STREAM EOF-ERROR-P EOF-VALUE RECURSIVE-P)
        (LISP:REDUCE LISP:FUNCTION SEQUENCE &KEY :FROM-END :START :END :INITIAL-VALUE)
        (LISP:REMF PLACE INDICATOR)
        (REMHASH KEY LISP:HASH-TABLE)
        (REMPROP LISP:SYMBOL INDICATOR)
        (LISP:RENAME-FILE FILE NEW-NAME)
        (LISP:RENAME-PACKAGE PACKAGE NEW-NAME &OPTIONAL NEW-NICKNAMES)
        (LISP:REPLACE SEQUENCE1 SEQUENCE2 &KEY :START1 :END1 :START2 :END2)
        (LISP:REQUIRE MODULE-NAME &OPTIONAL PATHNAME)
        (LISP:RESTART-BIND ((CURLYLIST (NAME FUNCTION (CURLYLIST KEYWORD VALUE)
                                             #\*))
                            #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:RESTART-CASE EXPRESSION (CURLYLIST (CASE-NAME ARG-LIST (CURLYLIST KEYWORD VALUE)
                                                        #\*
                                                        (CURLYLIST FORM)
                                                        #\*))
               #\*)
        (RETURN (SQUARELIST RESULT))
        (LISP:RETURN-FROM NAME (SQUARELIST RESULT))
        (LISP:ROTATEF (CURLYLIST PLACE)
               #\*)
        (LISP:SBIT SIMPLE-BIT-ARRAY &REST SUBSCRIPTS)
        (LISP:SCALE-FLOAT FLOAT INTEGER)
        (LISP:SCHAR LISP:SIMPLE-STRING INDEX)
        (SET LISP:SYMBOL VALUE)
        (LISP:SET-CHAR-BIT LISP:CHAR NAME NEWVALUE)
        (LISP:SET-DISPATCH-MACRO-CHARACTER DISP-CHAR SUB-CHAR LISP:FUNCTION &OPTIONAL LISP:READTABLE)
        (LISP:SET-MACRO-CHARACTER LISP:CHAR LISP:FUNCTION &OPTIONAL NON-TERMINATING-P LISP:READTABLE)
        (LISP:SET-SYNTAX-FROM-CHAR TO-CHAR FROM-CHAR &OPTIONAL TO-READTABLE FROM-READTABLE)
        (LISP:SHIFTF (CURLYLIST PLACE)
               #\+ NEWVALUE)
        (SIGNAL DATUM &REST ARGUMENTS)
        (LISP:SLEEP SECONDS)
        ((LISP:SORT LISP:STABLE-SORT)
         SEQUENCE PREDICATE &KEY :KEY)
        ((STORE-VALUE USE-VALUE)
         NEW-VALUE &OPTIONAL CONDITION)
        (LISP:STREAM-EXTERNAL-FORMAT STREAM)
        ((STRING-EQUAL LISP:STRING-GREATERP LISP:STRING-LESSP LISP:STRING-NOT-EQUAL 
                LISP:STRING-NOT-GREATERP LISP:STRING-NOT-LESSP LISP:STRING/= LISP:STRING< 
                LISP:STRING<= LISP:STRING= LISP:STRING> LISP:STRING>=)
         STRING1 STRING2 &KEY :START1 :END1 :START2 :END2)
        ((LISP:STRING-LEFT-TRIM LISP:STRING-RIGHT-TRIM LISP:STRING-TRIM)
         CHARACTER-BAG STRING)
        (LISP:SUBSEQ SEQUENCE START &OPTIONAL END)
        (LISP:SUBTYPEP TYPE1 TYPE2)
        (LISP:SVREF LISP:SIMPLE-VECTOR INDEX)
        (LISP::SYMBOL-MACROLET ((CURLYLIST (LISP::VAR LISP::EXPANSION))
                                #\*)
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST LISP::FORM)
               #\*)
        ((LISP:SYMBOL-NAME LISP:SYMBOL-PACKAGE)
         SYM)
        (LISP:TAGBODY (CURLYLIST TAG #\| STATEMENT)
               #\*)
        (TAILP SUBLIST LIST)
        (THE VALUE-TYPE FORM)
        (LISP:THROW TAG RESULT)
        (TIME FORM &KEY :REPEAT :OUTPUT :DATA-TYPES)
        ((TRACE UNTRACE)
         (CURLYLIST FUNCTION-NAME)
         #\*)
        (LISP:TRANSLATE-PATHNAME PATHNAME &KEY)
        (LISP:TRANSLATE-PATHNAME LISP::SOURCE LISP::FROM-WILDNAME LISP::TO-WILDNAME &KEY)
        (LISP:TREE-EQUAL X Y &KEY :TEST :TEST-NOT)
        (TYPEP OBJECT TYPE)
        (LISP:UNINTERN LISP:SYMBOL &OPTIONAL PACKAGE)
        ((LISP:UNLESS LISP:WHEN)
         TEST
         (CURLYLIST FORM)
         #\*)
        (LISP:UNREAD-CHAR LISP:CHARACTER &OPTIONAL INPUT-STREAM)
        (LISP:UNUSE-PACKAGE PACKAGES-TO-UNUSE &OPTIONAL PACKAGE)
        (LISP:UNWIND-PROTECT
            PROTECTED-FORM
            (CURLYLIST CLEANUP-FORM)
            #\*)
        (LISP:USE-PACKAGE PACKAGES-TO-USE &OPTIONAL PACKAGE)
        (LISP:USER-HOMEDIR-PATHNAME &OPTIONAL HOST)
        (LISP:VECTOR &REST OBJECTS)
        (LISP:VECTOR-PUSH NEW-ELEMENT LISP:VECTOR)
        (LISP:VECTOR-PUSH-EXTEND NEW-ELEMENT LISP:VECTOR &OPTIONAL EXTENSION)
        (LISP:WILD-PATHNAME-P PATHNAME &OPTIONAL LISP::FIELD-KEY)
        (LISP:WITH-COMPILATION-UNIT ((CURLYLIST LISP::OPTION-NAME LISP::OPTION-VALUE)
                                     #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-CONDITION-RESTARTS CONDITION-FORM RESTARTS-FORM (CURLYLIST DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-INPUT-FROM-STRING (VAR STRING (CURLYLIST LISP:KEYWORD VALUE)
                                          #\*)
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-HASH-TABLE-ITERATOR (LISP::MNAME LISP:HASH-TABLE)
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-OPEN-FILE (STREAM FILENAME (CURLYLIST OPTIONS)
                                    #\*)
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-OPEN-STREAM (VAR STREAM)
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-OUTPUT-TO-STRING (VAR (SQUARELIST STRING (SQUARELIST ":ELEMENT-TYPE" TYPE)))
               (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-PACKAGE-ITERATOR (MNAME PACKAGE-LIST (CURLYLIST LISP::SYMBOL-TYPE)
                                           #\+)
               (CURLYLIST LISP::FORM)
               #\*)
        (LISP:WITH-SIMPLE-RESTART (NAME FORMAT-STRING (CURLYLIST FORMAT-ARGUMENT)
                                        #\*)
               (CURLYLIST FORM)
               #\*)
        (LISP:WITH-STANDARD-IO-SYNTAX (CURLYLIST LISP:DECLARATION)
               #\*
               (CURLYLIST FORM)
               #\*)
        (WRITE OBJECT &KEY :STREAM :ESCAPE :RADIX :BASE :CIRCLE :PRETTY :LEVEL :LENGTH :CASE :GENSYM
               :ARRAY :READABLY :RIGHT-MARGIN :MISER-WIDTH :LINES :PPRINT-DISPATCH)
        (LISP:WRITE-BYTE INTEGER BINARY-OUTPUT-STREAM)
        (LISP:WRITE-CHAR LISP:CHARACTER &OPTIONAL OUTPUT-STREAM)
        ((LISP:WRITE-LINE LISP:WRITE-STRING)
         STRING &OPTIONAL OUTPUT-STREAM &KEY :START :END)
        (LISP:WRITE-TO-STRING OBJECT &KEY :ESCAPE :RADIX :BASE :CIRCLE :PRETTY :LEVEL :LENGTH :CASE 
               :GENSYM :ARRAY :READABLY :RIGHT-MARGIN :MISER-WIDTH :LINES :PPRINT-DISPATCH)
        ((LISP:Y-OR-N-P LISP:YES-OR-NO-P)
         &OPTIONAL FORMAT-STRING &REST ARGUMENTS)))

(RPAQQ *XCL-ARGINFO-LIST*
       ((ADD-EXEC &KEY :PROFILE :REGION :TTY :EXEC :ID)
        (ASET NEWVALUE ARRAY &REST INDICES)
        (CATCH-ABORT PRINT-FORM &BODY FORMS)
        (CONDITION-CASE FORM (CURLYLIST (TYPE ((SQUARELIST VAR))
                                              (CURLYLIST FORM)
                                              #\*))
               #\*)
        ((CONDITION-HANDLER CONDITION-REPORTER)
         TYPE)
        (COMPILER:COPY-ENV-WITH-FUNCTION ENVIRONMENT FUNCTION &OPTIONAL KIND EXP-FN)
        (COMPILER:COPY-ENV-WITH-VARIABLE ENVIRONMENT VARIABLE &OPTIONAL KIND)
        (DEBUG &OPTIONAL DATUM &REST ARGUMENTS)
        (DEF-DEFINE-TYPE NAME DESCRIPTION-STRING &KEY :UNDEFINER)
        (DEFAULT-PROCEED-TEST PROCEED-CASE-NAME)
        (DEFCOMMAND NAME ARGUMENT-LIST &REST BODY)
        (DEFDEFINER (CURLYLIST NAME #\| (NAME (CURLYLIST OPTION-CLAUSE)
                                              #\*))
               TYPE ARGLIST &BODY BODY)
        (DEFGLOBALPARAMETER NAME INITIAL-VALUE &OPTIONAL DOC-STRING)
        (DEFGLOBALVAR NAME &OPTIONAL INITIAL-VALUE DOC-STRING)
        (DEFINE-PROCEED-FUNCTION NAME (SQUARELIST KEYWORD VALUE)
               #\* &REST VARIABLES)
        (DEFINLINE NAME ARG-LIST &BODY BODY)
        (DEFOPTIMIZER FORM-NAME (SQUARELIST OPT-NAME)
               (SQUARELIST ARG-LIST (SQUARELIST DECL #\| DOC-STRING)
                      #\*)
               BODY)
        ((XCL:DO-INTERNAL-SYMBOLS DO-LOCAL-SYMBOLS)
         (VAR (SQUARELIST PACKAGE (SQUARELIST RESULT-FORM)))
         (CURLYLIST LISP:DECLARATION)
         #\*
         (CURLYLIST TAG #\| STATEMENT)
         #\*)
        (EXEC &KEY :TOP-LEVEL-P :WINDOW :TITLE :COMMAND-TABLES :ENVIRONMENT :PROMPT :FUNCTION 
              :PROFILE :ID)
        (EXEC-EVAL FORM &OPTIONAL ENVIRONMENT &KEY :PROMPT :ID :TYPE)
        (EXEC-FORMAT CONTROL-STRING &REST ARGUMENTS)
        ((EXTENDABLE-ARRAY-P READ-ONLY-ARRAY-P)
         ARRAY)
        (FILL-VECTOR VECTOR VALUE &KEY :START :END)
        (GLOBALIZE NAMESTRINGS &OPTIONAL PACKAGE)
        (INVOKE-PROCEED-CASE PROCEED-CASE &REST VALUES)
        (COMPILER:MAKE-CONTEXT &KEY :TOP-LEVEL-P :VALUES-USED :PREDICATE-P)
        (PARSE-BODY BODY ENVIRONMENT &OPTIONAL DOC-STRING-ALLOWED?)
        (PROCEED-CASE FORM (CURLYLIST (PROCEED-FUNCTION-NAME ARGLIST (SQUARELIST KEYWORD VALUE)
                                             #\*
                                             (CURLYLIST BODY-FORM)
                                             #\*))
               #\*)
        ((XCL:SET-DEFAULT-EXEC-TYPE XCL:SET-EXEC-TYPE)
         NAME)
        (UNDOABLY (CURLYLIST FORMS))
        (UNDOABLY-SETF (CURLYLIST PLACE VALUE)
               #\*)))

(LISP:DEFUN ARGINFO-MUNG (LST)

   (* ;; "Flattens list elements of LST into a single top-level list of characters and words, recognizing special directives (SQUARELIST . things) and (CURLYLIST . things) to mean turn it into [things] and {things}, respectively.")

   [FOR THING IN LST JOIN (COND
                                         [(LISP:CONSP THING)
                                          (CASE (CAR THING)
                                              (SQUARELIST (CONS #\[ (NCONC1 (ARGINFO-MUNG
                                                                             (CDR THING))
                                                                           #\])))
                                              (CURLYLIST (CONS #\{ (NCONC1 (ARGINFO-MUNG
                                                                            (CDR THING))
                                                                          #\})))
                                              (CURLYLIST* (CONS #\{ (NCONC (ARGINFO-MUNG
                                                                            (CDR THING))
                                                                           (LIST #\} #\*))))
                                              (LISP:OTHERWISE (CONS #\( (NCONC1 (ARGINFO-MUNG
                                                                                 THING)
                                                                               #\)))))]
                                         (T (LIST THING])

(LISP:DEFUN CLSMARTEN (FNLIST)

   (* ;; "Transfer arg info from entries in FNLIST to the ARGNAMES props of those fns that need it.  Format of an entry in FNLIST is (Functions . StylizedArgInfo), where Functions can be a symbol or list of symbols.")

   [LET ((NOSPELLFLG T))                                     (* ; 
                                                           "Tell SMARTARGLIST not to try too hard")
        (DECLARE (LISP:SPECIAL NOSPELLFLG))
        (LISP:DOLIST (PAIR FNLIST)
            [LET (NEWARGS KNOWNARGS)
                 (LISP:DOLIST [FN (OR (LISTP (CAR PAIR))
                                      (LIST (CAR PAIR]
                     (LISP:UNLESS (AND [SETQ KNOWNARGS (NLSETQ (SMARTARGLIST
                                                                FN
                                                                (MEMB (ARGTYPE FN)
                                                                      '(0 2]
                                       (LISP:LISTP (SETQ KNOWNARGS (CAR KNOWNARGS)))
                                       (NOT (LISP:MACRO-FUNCTION FN)))

                         (* ;; "Only do this for fns for which SMARTARGLIST doesn't know the answer (something other than an atomic arglist) already.  Also ignore macros to override arglists provided by DEFMACRO.  The ARGTYPE check means try EXPLAINFLG=T in the case where the function is already defined as a lambda (don't want to do that for macros, since SMARTARGLIST would then fake something out of a macro/dmacro prop).  Format of ARGNAMES prop for this kind of guy is (NIL PrettyArgs . InterlispArgs).")

                         (LISP:SETF (GET FN 'ARGNAMES)
                                (LIST* NIL [OR NEWARGS (SETQ NEWARGS (ARGINFO-MUNG (CDR PAIR]
                                       KNOWNARGS))))])])
(DECLARE%: DONTEVAL@LOAD DOCOPY 

(CLSMARTEN *CL-ARGINFO-LIST*)

(CLSMARTEN *XCL-ARGINFO-LIST*)

(SETQ *CL-ARGINFO-LIST* (SETQ *XCL-ARGINFO-LIST* 'NOBIND))
)

(PUTPROPS CMLSMARTARGS FILETYPE :COMPILE-FILE)
(PUTPROPS CMLSMARTARGS COPYRIGHT ("Venue & Xerox Corporation" 1986 1987 1988 1989 1990 1991 1992 1993)
)
(DECLARE%: DONTCOPY
  (FILEMAP (NIL)))
STOP
