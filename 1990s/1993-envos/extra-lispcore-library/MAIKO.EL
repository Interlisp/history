;; Connect to socket from maiko so EMACS users won't have to learn anything;; new (*sigh*).(require 'shell)(defvar maiko-socket-pattern  "/tmp/Maiko-Socket0")(setq inferior-lisp-prompt "^.*/[0-9]*_ ")(defvar inferior-maiko-mode-map nil)(if inferior-maiko-mode-map    nil  (setq inferior-maiko-mode-map (copy-alist inferior-lisp-mode-map))  (define-key inferior-maiko-mode-map "\C-c\C-d" 'maiko-exit)  (define-key inferior-maiko-mode-map "\C-c\C-\\" 'maiko-exit)  (define-key inferior-maiko-mode-map "\C-c\C-z" 'maiko-interrupt)  (define-key inferior-maiko-mode-map "\C-c\C-c" 'maiko-interrupt)  (define-key inferior-maiko-mode-map "\C-c\C-t" 'maiko-control-t)  (define-key inferior-maiko-mode-map "\C-c\C-e" 'maiko-control-e)  )(defun maiko-exit ()  (interactive)  (maiko-interrupt)  (let ((cp (get-buffer-process (current-buffer))))    (accept-process-output cp)    (process-send-string     cp "(IL:PROGN (IL:PRIN1 \"Connection closed\")(IL:RETFROM (IL:QUOTE IL:EMACSCHATSERVEROPENFN)))")    (while (progn	     (accept-process-output cp)	     (goto-char (point-max))	     (beginning-of-line)	     (not (looking-at "Connection closed"))))    (delete-process cp)    )  )(defun maiko-interrupt ()  (interactive)  (process-send-string (get-buffer-process (current-buffer)) "")  )(defun maiko-control-t ()  (interactive)  (process-send-string (get-buffer-process (current-buffer)) "")  )(defun maiko-control-e ()  (interactive)  (process-send-string (get-buffer-process (current-buffer)) "")  )(defun make-maiko-buffer ()  (let ((buffer (get-buffer-create "*maiko*"))	proc status)    (setq proc (get-buffer-process buffer))    (if proc (setq status (process-status proc)))    (save-excursion      (set-buffer buffer)      (if (memq status '(run stop))	  nil	(if proc (delete-process proc))	(setq proc (open-network-stream	(buffer-name buffer) buffer		                        (expand-file-name maiko-socket-pattern)					0))	(goto-char (point-max))	(set-marker (process-mark proc) (point))	(shell-mode))      buffer)))(defun connect-to-maiko ()  "Connect to a running Maiko, input and output via buffer *maiko*."  (interactive)  (switch-to-buffer (make-maiko-buffer))  (inferior-lisp-mode)  (use-local-map inferior-maiko-mode-map)  );;;; This will need some work, primarily in translating interrupt characters;; under inferior-lisp-mode so the right things will get through to Maiko.;;