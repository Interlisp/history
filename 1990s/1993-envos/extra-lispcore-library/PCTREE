(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED "26-Jun-91 14:19:33" |{PELE:MV:ENVOS}<LISPCORE>LIBRARY>PCTREE.;8| 43966        changes to%:  (FNS UPDATEPCNODE-SUBTREE UPDATEPCNODES DELETENODE-RANK FINDNODE FINDNODE-INDEX                          INDEX INSERT-BRT)      previous date%: "29-May-91 12:55:28" |{PELE:MV:ENVOS}<LISPCORE>LIBRARY>PCTREE.;5|)(* ; "Copyright (c) 1990, 1991 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT PCTREECOMS)(RPAQQ PCTREECOMS       [        (* ;; "Balanced tree PIECE TABLE supporting functions")        (FILES TEDITDECLS)        (DECLARE%: EVAL@COMPILE DONTCOPY (FILES (LOADCOMP)                                                TEDITDECLS))        (FNS ADJUST-BALANCE-FACTOR CREATEPCNODE DELETENODE-RANK FINDNODE FINDNODE-INDEX INDEX              INSERT-BRT ROTATE-NODE UPDATEPCNODE-SUBTREE UPDATEPCNODES FINDPCNODE FINDPCNODE-SUB              \FIRSTNODE \FIRSTNODE-SUB \LASTNODE)        (FNS DISPTREE TREEGRAPHNODE)        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)                                                                             (NLAML)                                                                             (LAMA])(* ;; "Balanced tree PIECE TABLE supporting functions")(FILESLOAD TEDITDECLS)(DECLARE%: EVAL@COMPILE DONTCOPY (FILESLOAD (LOADCOMP)       TEDITDECLS))(DEFINEQ(ADJUST-BALANCE-FACTOR  [LAMBDA (NODE A DELTA)                                (* ; "Edited 12-Jun-90 10:32 by mitani")    (* ;; "NODE:  Node to adjust balance factor")    (* ;; "A:  1 -- Right subtree is changed,  -1 -- Left subtree is changed.")    (* ;; "DELTA:  1 -- Subtree becames longer,   -1 -- Subtree becames shorter.")    (* ;; "Returns new balance facter, If this function returns 2 or -2 , NODE needs Rotation.")    (LET ((BF (fetch (PCTNODE BF) of NODE)))         (* ;; "Adjust balance factor")         (COND            [(EQ BF A)             (COND                ((EQ DELTA -1)                               (* ; "Tree has gotten more balanced")                 (replace (PCTNODE BF) of NODE with 0)                 0)                ((EQ DELTA 1)                                (* ; "Tree has gotten out of balance")                 (COND                    ((EQ BF 1)                     2)                    ((EQ BF -1)                     -2)))                (T (SHOULDNT "DELTA must be 1 or -1."]            [(EQ BF 0)             (COND                ((EQ DELTA -1)                               (* ; "Tree has gotten more balanced")                 (replace (PCTNODE BF) of NODE with (IMINUS A))                 (IMINUS A))                ((EQ DELTA 1)                                (* ; "Tree has gotten out of balance")                 (replace (PCTNODE BF) of NODE with A)                 A)                (T (SHOULDNT "DELTA must be 1 or -1."]            ((EQ BF (IMINUS A))             (COND                ((EQ DELTA 1)                                (* ; "Tree has gotten more balanced")                 (replace (PCTNODE BF) of NODE with 0)                 0)                ((EQ DELTA -1)                               (* ; "Tree has gotten out of balance")                 (COND                    ((EQ BF 1)                     2)                    ((EQ BF -1)                     -2)))                (T (SHOULDNT "DELTA must be 1 or -1."])(CREATEPCNODE  [LAMBDA (CH# PIECE)                                    (* ; "Edited 28-Mar-90 16:20 by ON")    (create PCTNODE           CHNUM _ CH#           BF _ 0           RANK _ 1           PCE _ PIECE])(DELETENODE-RANK  [LAMBDA (K TREE)                                       (* ; "Edited 26-Jun-91 13:59 by jds")    (LET ((TT TREE)          (S (fetch (PCTNODE HI) of TREE))          (P (ffetch (PCTNODE HI) of TREE))          (U K)          (M K)          DELNODE DELPARENT A NODESTACK R RE-BALANCE-BOTTOM THISNODE PREVNODE NEWBALANCE)         (* ;; "Search delete node and its parent of NODE")         (push NODESTACK P)         (bind RANK Q while P do [COND                                                ((NULL P)    (* ; "Not found")                                                 (ERROR " Delete node not found." NIL))                                                ((IEQP M (SETQ RANK (fetch (PCTNODE RANK)                                                                       of P)))                                                             (* ; "Find it")                                                 (SETQ DELNODE P)                                                 (pop NODESTACK)                                                 (RETURN))                                                ((ILESSP M RANK)                                                             (* ; "Move left")                                                 (SETQ Q (fetch (PCTNODE LO) of P)))                                                (T           (* ; "Move right")                                                   (SETQ M (IDIFFERENCE M RANK))                                                   (SETQ Q (fetch (PCTNODE HI) of P]                                            (COND                                               ((NEQ (fetch (PCTNODE BF) of Q)                                                     0)                                                (SETQ TT P)                                                (SETQ S Q)                                                (SETQ U M)))                                            (SETQ P Q)                                            (push NODESTACK P))         (COND            ((NULL DELNODE)             (HELP "delete node not found.")))         (SETQ DELPARENT (OR (AND NODESTACK (CAR NODESTACK))                             TT))         (* ;; "Try to delete")         (SETQ TT DELNODE)         [COND            ((NULL (fetch (PCTNODE HI) of TT))             [COND                [(EQ (fetch (PCTNODE LO) of DELPARENT)                     DELNODE)                 (* ;; "(SETQ A -1)")                 (replace (PCTNODE LO) of DELPARENT with (fetch (PCTNODE LO)                                                                        of TT))                 (* ;; "Adjust RANK")                 (replace (PCTNODE RANK) of DELPARENT with (SUB1 (fetch (PCTNODE                                                                                         RANK)                                                                                of DELPARENT)))                 (* ;; "Adjust balance factor")                 (COND                    ((NEQ DELPARENT TREE)                     (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR DELPARENT -1 -1))                     (COND                        ((EQ NEWBALANCE 2)                   (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                         (SETQ NEWBALANCE (ROTATE-NODE (OR (CADR NODESTACK)                                                               TREE)                                                 DELPARENT                                                 (fetch (PCTNODE HI) of DELPARENT)                                                 1)))                        ((EQ NEWBALANCE -2)                         (SHOULDNT]                (T                    (* ;; "(SETQ A 1)")                   (replace (PCTNODE HI) of DELPARENT with (fetch (PCTNODE LO)                                                                          of TT))                   (* ;; "Adjust balance factor")                   (COND                      ((NEQ DELPARENT TREE)                       (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR DELPARENT 1 -1))                       (COND                          ((EQ NEWBALANCE -2)                (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                           (SETQ NEWBALANCE (ROTATE-NODE (OR (CADR NODESTACK)                                                                 TREE)                                                   DELPARENT                                                   (fetch (PCTNODE LO) of DELPARENT)                                                   -1)))                          ((EQ NEWBALANCE 2)                           (SHOULDNT]             (SETQ RE-BALANCE-BOTTOM (pop NODESTACK)))            (T (SETQ R (fetch (PCTNODE HI) of TT))               (COND                  [(NULL (fetch (PCTNODE LO) of R))                   (replace (PCTNODE BF) of R with (fetch (PCTNODE BF) of TT))                   (replace (PCTNODE RANK) of R with (fetch (PCTNODE RANK)                                                                    of TT))                   (COND                      [(EQ (fetch (PCTNODE LO) of DELPARENT)                           DELNODE)                       (replace (PCTNODE LO) of R with (fetch (PCTNODE LO)                                                                      of TT))                       (replace (PCTNODE LO) of DELPARENT with R)                       (* ;; "Adjust balance factor on R")                       (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR R 1 -1))                       (SETQ RE-BALANCE-BOTTOM R)                       (COND                          ((EQ NEWBALANCE -2)                (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                           (SETQ NEWBALANCE (ROTATE-NODE DELPARENT R (fetch (PCTNODE LO)                                                                            of R)                                                   -1)))                          ((EQ NEWBALANCE 2)                           (SHOULDNT]                      (T (replace (PCTNODE LO) of R with (fetch (PCTNODE LO)                                                                        of TT))                         (replace (PCTNODE HI) of DELPARENT with R)                         (* ;; "Adjust balance factor on R")                         (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR R 1 -1))                         (SETQ RE-BALANCE-BOTTOM R)                         (COND                            ((EQ NEWBALANCE -2)              (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                             (SETQ NEWBALANCE (ROTATE-NODE DELPARENT R (fetch (PCTNODE LO)                                                                              of R)                                                     -1)))                            ((EQ NEWBALANCE 2)                             (SHOULDNT]                  (T (push NODESTACK TT)                     (SETQ S (fetch (PCTNODE LO) of R))                     (push NODESTACK R)                     [while S do (COND                                            ((NULL (fetch (PCTNODE LO) of S))                                             (RETURN))                                            (T (SETQ R S)                                               (SETQ S (fetch (PCTNODE LO) of R))                                               (push NODESTACK R]                     (replace (PCTNODE LO) of S with (fetch (PCTNODE LO) of                                                                                         TT))                     (replace (PCTNODE LO) of R with (fetch (PCTNODE HI) of                                                                                         S))                     (replace (PCTNODE HI) of S with (fetch (PCTNODE HI) of                                                                                         TT))                     (replace (PCTNODE RANK) of S with (fetch (PCTNODE RANK)                                                                      of TT))                     (replace (PCTNODE BF) of S with (fetch (PCTNODE BF) of                                                                                         TT))                     (RPLACA (MEMQ TT NODESTACK)                            S)                               (* ;                                                          "Replace Deleted NODE in NODESTACK with S")                     (* ;; "(SETQ NEWBALANCE (replace BF of S with (SUB1 (fetch BF of TT)))) (COND ((EQ NEWBALANCE -2) ; Tree has gotten out of balance ; Needs ROTATION (ROTATE-NODE DELPARENT S (fetch HI of S) 1) (SETQ NEWBALANCE 0)) ((EQ NEWBALANCE 2) (SHOULDNT)))")                     (* ;; "Adjust RANK on R ")                     [replace (PCTNODE RANK) of R                        with (COND                                    ((NULL (fetch (PCTNODE LO) of R))                                     1)                                    (T (ADD1 (fetch (PCTNODE RANK) of (fetch (PCTNODE                                                                                          LO)                                                                                 of R]                     (* ;; "Adjust balance factor on R")                     (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR R -1 -1))                     (COND                        ((EQ NEWBALANCE 2)                   (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                         (SETQ NEWBALANCE (ROTATE-NODE (OR (CADR NODESTACK)                                                               TREE)                                                 R                                                 (fetch (PCTNODE HI) of R)                                                 1)))                        ((EQ NEWBALANCE -2)                         (SHOULDNT)))                     (SETQ RE-BALANCE-BOTTOM (pop NODESTACK))                     (COND                        ((OR (EQ DELPARENT TREE)                             (IGREATERP (fetch (PCTNODE CHNUM) of DELNODE)                                    (fetch (PCTNODE CHNUM) of DELPARENT)))                         (replace (PCTNODE HI) of DELPARENT with S)                         (* ;; "Adjust balance factor ")                         (* ;; "(COND ((NEQ DELPARENT TREE) (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR DELPARENT 1 -1)) (SETQ RE-BALANCE-BOTTOM DELPARENT) (COND ((EQ NEWBALANCE -2) ; Tree has gotten out of balance ; Needs ROTATION (ROTATE-NODE (CADR NODESTACK) DELPARENT S -1) (SETQ NEWBALANCE 0)) ((EQ NEWBALANCE 2) ; Tree has gotten out of balance ; Needs ROTATION (ROTATE-NODE (CADR NODESTACK) DELPARENT S 1) (SETQ NEWBALANCE 0)))))")                         NIL)                        (T (replace (PCTNODE LO) of DELPARENT with S)                           (* ;; "Adjust balance factor ")                           (* ;; "(COND ((NEQ DELPARENT TREE) (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR DELPARENT -1 -1)) (SETQ RE-BALANCE-BOTTOM DELPARENT) (COND ((EQ NEWBALANCE -2) ; Tree has gotten out of balance ; Needs ROTATION (ROTATE-NODE (CADR NODESTACK) DELPARENT S -1) (SETQ NEWBALANCE 0)) ((EQ NEWBALANCE 2) ; Tree has gotten out of balance ; Needs ROTATION (ROTATE-NODE (pop NODESTACK) DELPARENT S 1) (SETQ NEWBALANCE 0)))))")                           NIL]         (SETQ PREVNODE RE-BALANCE-BOTTOM)         (SETQ THISNODE (pop NODESTACK))         (while THISNODE do (SETQ A (COND                                               ((NULL PREVNODE)                                                (HELP "Prevnode doesn't exist"))                                               ((IGREATERP (fetch (PCTNODE CHNUM) of PREVNODE                                                                  )                                                       (fetch (PCTNODE CHNUM) of THISNODE))                                                1)                                               (T -1)))                                    (* ;; "Adjust RANK")                                   [COND                                      ((EQ A -1)                                       (replace (PCTNODE RANK) of THISNODE                                          with (SUB1 (fetch (PCTNODE RANK) of THISNODE]                                    (* ;; "Adjust balance factor")                                   [COND                                      ((AND (NEQ NEWBALANCE 1)                                            (NEQ NEWBALANCE -1))                                       (SETQ NEWBALANCE (ADJUST-BALANCE-FACTOR THISNODE A -1))                                       (COND                                          ((EQ NEWBALANCE -2)(* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                                           (SETQ NEWBALANCE (ROTATE-NODE (OR (CAR NODESTACK)                                                                                 TREE)                                                                   THISNODE                                                                   (fetch (PCTNODE LO)                                                                      of THISNODE)                                                                   -1)))                                          ((EQ NEWBALANCE 2) (* ; "Tree has gotten out of balance")                                                             (* ; "Needs ROTATION")                                           (SETQ NEWBALANCE (ROTATE-NODE (OR (CAR NODESTACK)                                                                                 TREE)                                                                   THISNODE                                                                   (fetch (PCTNODE HI)                                                                      of THISNODE)                                                                   1]                                   (SETQ PREVNODE THISNODE)                                   (SETQ THISNODE (pop NODESTACK)))         NIL])(FINDNODE  [LAMBDA (CHNUM TREE)                                   (* ; "Edited 26-Jun-91 13:54 by jds")    (SETQ TREE (fetch (PCTNODE HI) of TREE))    (while TREE do (COND                              ((IEQP CHNUM (fetch (PCTNODE CHNUM) of TREE))                               (RETURN TREE))                              ((IGREATERP CHNUM (ffetch (PCTNODE CHNUM) of TREE))                               (SETQ TREE (ffetch (PCTNODE HI) of TREE)))                              (T (SETQ TREE (ffetch (PCTNODE LO) of TREE])(FINDNODE-INDEX  [LAMBDA (TREE K)                                       (* ; "Edited 26-Jun-91 13:56 by jds")    (* ;; "Tree search by position")    (LET ((M K)          (P (fetch (PCTNODE HI) of TREE))          RANK)         (while P do (COND                                ((NULL P)                    (* ; "Not found")                                 (RETURN NIL))                                ((IEQP M (SETQ RANK (fetch (PCTNODE RANK) of P)))                                                             (* ; "Find it")                                 (RETURN P))                                ((ILESSP M RANK)             (* ; "Move left")                                 (SETQ P (ffetch (PCTNODE LO) of P)))                                (T                           (* ; "Move right")                                   (SETQ M (IDIFFERENCE M RANK))                                   (SETQ P (ffetch (PCTNODE HI) of P])(INDEX  [LAMBDA (CHNUM TREE)                                   (* ; "Edited 26-Jun-91 14:00 by jds")    (* ;; "RETURN INDEX OF NODE IN TREE")    (LET ((INDEX 0)          TREE-CHNUM)         (SETQ TREE (fetch (PCTNODE HI) of TREE))         [while TREE do (COND                                   [(IEQP CHNUM (SETQ TREE-CHNUM (fetch (PCTNODE CHNUM)                                                                    of TREE)))                                                             (* ; "FIND NODE")                                    (RETURN (SETQ INDEX (IPLUS INDEX (fetch (PCTNODE RANK)                                                                        of TREE]                                   ((IGREATERP CHNUM TREE-CHNUM)                                                             (* ; "MOVE RIGHT")                                    (SETQ INDEX (IPLUS INDEX (fetch (PCTNODE RANK) of TREE)))                                    (SETQ TREE (fetch (PCTNODE HI) of TREE)))                                   (T                        (* ; "MOVE LEFT")                                      (SETQ TREE (fetch (PCTNODE LO) of TREE]         (IMAX 1 INDEX])(INSERT-BRT  [LAMBDA (NODE TREE)                                    (* ; "Edited 26-Jun-91 14:04 by jds")    (* ;; "Balanced Tree insertion by position. THE ART OF COMPUTERPROGRAMMING vol,3. pp464-465")    (PROG ((TT TREE)           (S (fetch (PCTNODE HI) of TREE))           (P (fetch (PCTNODE HI) of TREE))           A FOUND Q R NODECH PCH)          (COND             ((NULL P)                                       (* ; "insert node to empty tree")              (replace (PCTNODE HI) of TREE with NODE)              (replace (PCTNODE BF) of NODE with 0)              (replace (PCTNODE RANK) of NODE with 1)              (RETURN NODE)))     (* ;; "Find and insert")          (AND (while P do [COND                                      ((IEQP (SETQ NODECH (fetch (PCTNODE CHNUM) of NODE))                                             (SETQ PCH (fetch (PCTNODE CHNUM) of P)))                                                             (* ; "Find node")                                                             (* ; "Replace with new one")                                       (replace (PCTNODE PCE) of P with                                                                           (fetch (PCTNODE PCE)                                                                              of NODE))                                       (RETURN P))                                      [(ILESSP NODECH PCH)   (* ; "Move left")                                       (replace (PCTNODE RANK) of P                                          with (ADD1 (fetch (PCTNODE RANK) of P)))                                       (SETQ Q (fetch (PCTNODE LO) of P))                                       (COND                                          ((NULL Q)          (* ; "Insert")                                           (replace (PCTNODE LO) of P with NODE)                                           (replace (PCTNODE BF) of NODE with 0)                                           (replace (PCTNODE RANK) of NODE with 1)                                           (RETURN NIL]                                      (T                     (* ; "Move RIGHT")                                         (SETQ Q (fetch (PCTNODE HI) of P))                                         (COND                                            ((NULL Q)        (* ; "Insert")                                             (replace (PCTNODE HI) of P with NODE)                                             (replace (PCTNODE BF) of NODE with 0)                                             (replace (PCTNODE RANK) of NODE with 1)                                             (RETURN NIL]                                  (COND                                     ((NEQ (fetch (PCTNODE BF) of Q)                                           0)                                      (SETQ TT P)                                      (SETQ S Q)))                                  (SETQ P Q))               (RETURN NODE))                                (* ;                                           "If tree has already has node, Replace node with new one")                                                             (* ; "and return this function")     (* ;; "Adjust balance factor")          [COND             [(ILESSP (fetch (PCTNODE CHNUM) of NODE)                     (fetch (PCTNODE CHNUM) of S))              (SETQ P (SETQ R (fetch (PCTNODE LO) of S]             (T (SETQ P (SETQ R (fetch (PCTNODE HI) of S]          [while (NEQ P Q) do (COND                                         ((IEQP (SETQ NODECH (fetch (PCTNODE CHNUM) of NODE))                                                (SETQ PCH (fetch (PCTNODE CHNUM) of P)))                                          (RETURN))                                         ((ILESSP NODECH PCH)                                          (replace (PCTNODE BF) of P with -1)                                          (SETQ P (fetch (PCTNODE LO) of P)))                                         (T (replace (PCTNODE BF) of P with 1)                                            (SETQ P (fetch (PCTNODE HI) of P]     (* ;; "Balancing act")          (COND             ((ILESSP (fetch (PCTNODE CHNUM) of NODE)                     (fetch (PCTNODE CHNUM) of S))              (SETQ A -1))             (T (SETQ A 1)))          (COND             [(IEQP (fetch (PCTNODE BF) of S)                    0)                                       (* ; "Tree has grown higher")              (replace (PCTNODE BF) of S with A)              (replace (PCTNODE LO) of TREE with (ADD1 (fetch (PCTNODE LO)                                                                      of TREE]             ((IEQP (fetch (PCTNODE BF) of S)                    (IMINUS A))                              (* ; "Tree has gotten more balanced")              (replace (PCTNODE BF) of S with 0))             ((IEQP (fetch (PCTNODE BF) of S)                    A)                                       (* ; "Tree has gotten out of balance")              (ROTATE-NODE TT S R A)))          (RETURN NODE])(ROTATE-NODE  [LAMBDA (ROTATE-ROOT ROTATE-HI ROTATE-LO A)            (* ; "Edited 29-May-91 12:47 by jds")    (* ;; "Rotate node around the node that is out of balanced.")    (* ;; "ROTATE-ROOT: The parent node of ROTATE-HI")    (* ;; "ROTATE-HI:  The node that is out of balanced.")    (* ;; "ROTATE-LO:  The child node of ROTATE-HI")    (* ;; "A: 1: ROTATE-LO is right(hi) subtreeof ROTATE-HI (right subtree is higher)")    (* ;; " ;  -1: ROTATE-LO is left(lo) subtree of ROTATE-HI (left subtree is higher)")    (* ;; "Returns Balance factor of ROTATE-HI after rotation.")    (LET ((S ROTATE-HI)          (R ROTATE-LO)          (TT ROTATE-ROOT)          P NEWBALANCE)         [SETQ NEWBALANCE (COND                             ((EQ (fetch (PCTNODE BF) of R)                                  A)                         (* ; "Need single rotation")                              (SETQ P R)                              [COND                                 [(EQ A 1)                                  (replace (PCTNODE HI) of S with (fetch (PCTNODE                                                                                          LO)                                                                                 of R))                                  (replace (PCTNODE LO) of R with S)                                  (* ;; "(replace RANK of R with (COND ((NULL (fetch LO of R)) 1) (T (ADD1 (fetch RANK of (fetch LO of R))))))")                                  (replace (PCTNODE RANK) of R                                     with (IPLUS (fetch (PCTNODE RANK) of R)                                                     (fetch (PCTNODE RANK) of S]                                 (T (replace (PCTNODE LO) of S with (fetch                                                                                 (PCTNODE HI)                                                                                   of R))                                    (replace (PCTNODE HI) of R with S)                                    (* ;; "(replace RANK of S with (COND ((NULL (fetch LO of S)) 1) (T (ADD1 (fetch RANK of (fetch LO of S))))))")                                    (replace (PCTNODE RANK) of S (IDIFFERENCE                                                                          (fetch (PCTNODE RANK)                                                                             of S)                                                                          (fetch (PCTNODE RANK)                                                                             of R]                              (replace (PCTNODE BF) of S with 0)                              (replace (PCTNODE BF) of R with 0))                             [(EQ (fetch (PCTNODE BF) of R)                                  0)                              (SETQ P R)                              (COND                                 ((EQ A 1)                                  (replace (PCTNODE HI) of S with (fetch (PCTNODE                                                                                          LO)                                                                                 of R))                                  (replace (PCTNODE LO) of R with S)                                  (* ;; "(replace RANK of R with (COND ((NULL (fetch LO of R)) 1) (T (ADD1 (fetch RANK of (fetch LO of R))))))")                                  (replace (PCTNODE RANK) of R                                     with (IPLUS (fetch (PCTNODE RANK) of R)                                                     (fetch (PCTNODE RANK) of S)))                                  (replace (PCTNODE BF) of S with 1)                                  (replace (PCTNODE BF) of R with -1))                                 (T (replace (PCTNODE LO) of S with (fetch                                                                                 (PCTNODE HI)                                                                                   of R))                                    (replace (PCTNODE HI) of R with S)                                    (* ;; "(replace RANK of S with (COND ((NULL (fetch LO of S)) 1) (T (ADD1 (fetch RANK of (fetch LO of S))))))")                                    (replace (PCTNODE RANK) of S (IDIFFERENCE                                                                          (fetch (PCTNODE RANK)                                                                             of S)                                                                          (fetch (PCTNODE RANK)                                                                             of R)))                                    (replace (PCTNODE BF) of S with -1)                                    (replace (PCTNODE BF) of R with 1]                             ((EQ (fetch (PCTNODE BF) of R)                                  (IMINUS A))                (* ; "Need double rotation")                              [COND                                 [(EQ A 1)                                  (SETQ P (fetch (PCTNODE LO) of R))                                  (replace (PCTNODE LO) of R with (fetch (PCTNODE                                                                                          HI)                                                                                 of P))                                  (replace (PCTNODE HI) of P with R)                                  (replace (PCTNODE HI) of S with (fetch (PCTNODE                                                                                          LO)                                                                                 of P))                                  (replace (PCTNODE LO) of P with S)                                  (* ;; "(replace RANK of R with (COND ((NULL (fetch LO of R)) 1) (T (ADD1 (fetch RANK of (fetch LO of R))))))")                                  (replace (PCTNODE RANK) of R                                     with (IDIFFERENCE (fetch (PCTNODE RANK) of R)                                                     (fetch (PCTNODE RANK) of P)))                                  (* ;; "(replace RANK of P with (ADD1 (fetch RANK of S)))")                                  (replace (PCTNODE RANK) of P                                     with (IPLUS (fetch (PCTNODE RANK) of P)                                                     (fetch (PCTNODE RANK) of S]                                 (T (SETQ P (fetch (PCTNODE HI) of R))                                    (replace (PCTNODE HI) of R with (fetch                                                                                 (PCTNODE LO)                                                                                   of P))                                    (replace (PCTNODE LO) of P with R)                                    (replace (PCTNODE LO) of S with (fetch                                                                                 (PCTNODE HI)                                                                                   of P))                                    (replace (PCTNODE HI) of P with S)                                    (* ;; "(replace RANK of P with (ADD1 (fetch RANK of R)))")                                    (replace (PCTNODE RANK) of P                                       with (IPLUS (fetch (PCTNODE RANK) of P)                                                       (fetch (PCTNODE RANK) of R)))                                    (* ;; "(replace RANK of S with (COND ((NULL (fetch LO of S)) 1) (T (ADD1 (fetch RANK of (fetch LO of S))))))")                                    (replace (PCTNODE RANK) of S                                       with (IDIFFERENCE (fetch (PCTNODE RANK) of S)                                                       (fetch (PCTNODE RANK) of P]                              (COND                                 ((EQ (fetch (PCTNODE BF) of P)                                      A)                                  (replace (PCTNODE BF) of S with (IMINUS A))                                  (replace (PCTNODE BF) of R with 0))                                 ((EQ (fetch (PCTNODE BF) of P)                                      0)                                  (replace (PCTNODE BF) of S with 0)                                  (replace (PCTNODE BF) of R with 0))                                 ((EQ (fetch (PCTNODE BF) of P)                                      (IMINUS A))                                  (replace (PCTNODE BF) of S with 0)                                  (replace (PCTNODE BF) of R with A)))                              (replace (PCTNODE BF) of P with 0]         (COND            ((EQ S (fetch (PCTNODE HI) of TT))             (replace (PCTNODE HI) of TT with P))            (T (replace (PCTNODE LO) of TT with P)))         NEWBALANCE])(UPDATEPCNODE-SUBTREE  [LAMBDA (INDEX DELTA TREE)                         (* ; "Edited 26-Jun-91 14:16 by jds")    (LET [(RANK (AND TREE (fetch (PCTNODE RANK) of TREE]         (COND            ((NULL TREE)             NIL)            ((>= RANK INDEX)             (add (fetch (PCTNODE CHNUM) of TREE)                    DELTA)             (UPDATEPCNODE-SUBTREE (IDIFFERENCE INDEX RANK)                    DELTA                    (fetch (PCTNODE HI) of TREE))             (UPDATEPCNODE-SUBTREE INDEX DELTA (fetch (PCTNODE LO) of TREE)))            (T (UPDATEPCNODE-SUBTREE (IDIFFERENCE INDEX RANK)                      DELTA                      (fetch (PCTNODE HI) of TREE])(UPDATEPCNODES  [LAMBDA (INDEX DELTA TREE)                         (* ; "Edited 26-Jun-91 14:13 by jds")    (* ;; "ADD DELTA TO CHNUM IN NEXTALL NODES OF TOPNODE.")    (LET* ((M INDEX)           (P (fetch (PCTNODE HI) of TREE))           (RANK (fetch (PCTNODE RANK) of P)))          (COND             ((NULL P)                                       (* ; "Not found")              NIL)             ((>= RANK M)                                    (* ; "p points subtree whoes nodes")                                                             (* ; " have to update.")              (add (fetch (PCTNODE CHNUM) of P)                     DELTA)              (UPDATEPCNODE-SUBTREE (IDIFFERENCE M RANK)                     DELTA                     (fetch (PCTNODE HI) of P))              (UPDATEPCNODE-SUBTREE M DELTA (fetch (PCTNODE LO) of P)))             (T (UPDATEPCNODE-SUBTREE (IDIFFERENCE M RANK)                       DELTA                       (fetch (PCTNODE HI) of P])(FINDPCNODE  [LAMBDA (PC PCTB)                                     (* ; "Edited 12-Jun-90 10:32 by mitani")    (* ;; "Given a piece and the pctb it's in, return pcnode")    (LET ((PCTREE (fetch (PCTNODE HI) of PCTB)))         (COND            ((NULL PCTREE)             NIL)            ((EQ PC (fetch (PCTNODE PCE) of PCTREE))             PCTREE)            (T (OR (FINDPCNODE-SUB PC (fetch (PCTNODE HI) of PCTREE))                   (FINDPCNODE-SUB PC (fetch (PCTNODE LO) of PCTREE])(FINDPCNODE-SUB  [LAMBDA (PC PCTREE)                                   (* ; "Edited 12-Jun-90 10:32 by mitani")    (COND       ((NULL PCTREE)        NIL)       ((EQ PC (fetch (PCTNODE PCE) of PCTREE))        PCTREE)       (T (OR (FINDPCNODE-SUB PC (fetch (PCTNODE HI) of PCTREE))              (FINDPCNODE-SUB PC (fetch (PCTNODE LO) of PCTREE])(\FIRSTNODE  [LAMBDA (TREE)                                        (* ; "Edited 12-Jun-90 10:32 by mitani")    (LET ((P (fetch (PCTNODE HI) of TREE)))         (COND            ((NULL (fetch (PCTNODE LO) of P))             P)            (T (\FIRSTNODE-SUB (fetch (PCTNODE LO) of P])(\FIRSTNODE-SUB  [LAMBDA (TREE)                                        (* ; "Edited 12-Jun-90 10:33 by mitani")    (COND       ((NULL (fetch (PCTNODE LO) of TREE))        TREE)       (T (\FIRSTNODE-SUB (fetch (PCTNODE LO) of TREE])(\LASTNODE  [LAMBDA (TREE)                                        (* ; "Edited 12-Jun-90 10:33 by mitani")    (COND       ((NULL (fetch (PCTNODE HI) of TREE))        TREE)       (T (\LASTNODE (fetch (PCTNODE HI) of TREE]))(DEFINEQ(DISPTREE  [LAMBDA (TREE DEPTH)                                   (* ; "Edited 13-Apr-90 15:00 by ON")    (LET [(G (TREEGRAPHNODE TREE NIL (OR (NUMBERP DEPTH)                                             T]         (SHOWGRAPH (LAYOUTGRAPH (CADR G)                           (LIST (CAR G))                           '(VERTICAL))                NIL                #'(LAMBDA (X)                    (INSPECT (fetch NODEID of X])(TREEGRAPHNODE  [LAMBDA (TREE PARENT DEPTH)                           (* ; "Edited 12-Jun-90 10:33 by mitani")    (LET (THISNODE NEWDEPTH NODEID LONODES HINODES BFNODE BFNODEID RANKNODE RANKNODEID)         (COND            ((ATOM TREE)             (LIST [fetch NODEID of (SETQ THISNODE (NODECREATE (CONS)                                                                  TREE NIL NIL (LIST PARENT]                   (LIST THISNODE)))            ((OR (EQ DEPTH T)                 (AND (NUMBERP DEPTH)                      (>= DEPTH 0)))             (SETQ NEWDEPTH (COND                               ((NUMBERP DEPTH)                                (SUB1 DEPTH))                               (T DEPTH)))             (SETQ NODEID (fetch (PCTNODE PCE) of TREE))             (SETQ LONODES (TREEGRAPHNODE (fetch (PCTNODE LO) of TREE)                                  NODEID NEWDEPTH))             (SETQ HINODES (TREEGRAPHNODE (fetch (PCTNODE HI) of TREE)                                  NODEID NEWDEPTH))             (SETQ BFNODE (NODECREATE (SETQ BFNODEID (CONS))                                 (fetch (PCTNODE BF) of TREE)                                 NIL NIL (LIST NODEID)))             (SETQ RANKNODE (NODECREATE (SETQ RANKNODEID (CONS))                                   (fetch (PCTNODE RANK) of TREE)                                   NIL NIL (LIST NODEID)))             [SETQ THISNODE (NODECREATE NODEID (fetch (PCTNODE CHNUM) of TREE)                                   NIL                                   (LIST (CAR LONODES)                                         BFNODEID RANKNODEID (CAR HINODES))                                   (AND PARENT (LIST PARENT]             (LIST (fetch NODEID of THISNODE)                   (APPEND (LIST THISNODE BFNODE RANKNODE)                          (CADR LONODES)                          (CADR HINODES]))(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDTOVAR NLAMA )(ADDTOVAR NLAML )(ADDTOVAR LAMA ))(PUTPROPS PCTREE COPYRIGHT ("Venue & Xerox Corporation" 1990 1991))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1469 41301 (ADJUST-BALANCE-FACTOR 1479 . 3617) (CREATEPCNODE 3619 . 3848) (DELETENODE-RANK 3850 . 19338) (FINDNODE 19340 . 19927) (FINDNODE-INDEX 19929 . 20947) (INDEX 20949 . 22221) (INSERT-BRT 22223 . 27834) (ROTATE-NODE 27836 . 37632) (UPDATEPCNODE-SUBTREE 37634 . 38395) (UPDATEPCNODES 38397 . 39489) (FINDPCNODE 39491 . 40043) (FINDPCNODE-SUB 40045 . 40440) (\FIRSTNODE 40442 . 40769) (\FIRSTNODE-SUB 40771 . 41039) (\LASTNODE 41041 . 41299)) (41302 43742 (DISPTREE 41312 . 41768) (TREEGRAPHNODE 41770 . 43740)))))STOP