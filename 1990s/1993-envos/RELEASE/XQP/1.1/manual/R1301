ref-13-1                    Xerox Quintus Prolog Reference Manual                 Section 13-1: Dynamic and Static ProceduresAll procedures in Prolog fall into one of two categories:  static or dynamic.Dynamic procedures can be modified by adding or deleting individual clauses.In contrast, static procedures can only be changed by completely redefiningthem using consult/1 or compile/1 ({manual(ref-3)}).If a procedure is first defined by being consulted or compiled, it is static bydefault.  If you need to be able to add, delete, or inspect individual clausesof such a procedure, you must make the procedure dynamic.  There are two waysof making a procedure dynamic:     - If the procedure is to be compiled or consulted, then it must be     declared to be dynamic before it is defined.   - If the procedure is to be created by assertions only, then the first     assert/1 operation on the procedure will make it dynamic.  A dynamic declaration is a declaration of the form             :- dynamic Pred.appearing in a file to be consulted or compiled.  Pred must be a predicatespecification of the form Name/Arity, or else a sequence of such specificationsseparated by commas.  For example,            :- dynamic exchange_rate/3, spouse_of/2,                       gravitational_constant/1.('dynamic' is a built-in prefix operator.)  Note that the ':- ' preceding theword 'dynamic' is essential:  if it were omitted, you would receive an errormessage, because it would appear that you were trying to define a clause forthe predicate dynamic/1.  However, dynamic/1 is not really a built-inpredicate, and it may only be used in declarations.If Pred is not of the specified form, an error message is sent to the standarderror stream, and the declaration is ignored.When a dynamic declaration is encountered in a file being consulted orcompiled, it is considered to be a part of the redefinition of the predicatesin its argument.  Thus if you consult a file containing only the following:              :- dynamic hello/0.the effect will be to remove any previous definition of hello/0 from the database, as well as to make the predicate dynamic.  You cannot make a proceduredynamic retroactively:  if you wish to make an already-existing proceduredynamic, you must redefine it.Although you can simultaneously declare several procedures to be dynamic, asshown above, it is recommended that you place a separate dynamic declarationfor each procedure immediately before the clauses for that procedure.  Thereby,if you reconsult or recompile that procedure through the editor interface, youwill not forget to include its dynamic declaration (reconsulting or recompilinga procedure without its dynamic declaration amounts to defining it as static).It is often useful to have a dynamic declaration for a procedure even if it isto be created only by assertions.  This helps another person to understand yourprogram, since it makes clear the fact that there are no pre-existing clausesfor this procedure, and it also avoids the possibility of Prolog stopping totell you there are no clauses for this procedure if you should happen to callit before any clauses have been asserted.  This is because unknown procedurecatching (see {manual(ref-11-6-9)}) does not apply to dynamic procedures; it ispresumed that a call to a dynamic procedure should simply fail if there are noclauses for it.Dynamic procedures are actually implemented by interpretation, even if they areincluded in a file which is compiled.  This means that they are executed moreslowly than if they were static, and also that they are visible to the debuggerand to listing/0.  Dynamic procedures, as well as static procedures, areindexed on their first argument; see {manual(ref-19-4)}.