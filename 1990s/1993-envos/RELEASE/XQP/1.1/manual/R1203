ref-12-3                    Xerox Quintus Prolog Reference Manual                       Section 12-3: Defining a ModuleThe normal way to define a module is by creating a module-file for it andloading it into the Prolog system.  A module-file is a Prolog file that beginswith a module declaration.A module declaration has the form             :- module(ModuleName, PublicPredList).Such a declaration must appear as the first term in a file, and declares thatfile to be a module-file.  The predicates in the file will become part of themodule ModuleName, and the predicates specified in PublicPredList are thosewhich can be imported by other modules; that is, the public predicates of thismodule.ModuleName must be an atom.  PublicPredList must be a list of predicatespecifications of the form Name/Arity.  If these arguments are not correctlyspecified, an error will be signalled when loading the file.  An error willalso be signalled if the module/2 declaration appears other than as the firstterm in a file being loaded.The definition of a module is not limited to a single file, because amodule-file may contain commands to load other files.  If a module-file for amodule M contains an embedded command to load a file F (for example,':- consult(F).', ':- compile(F).', or ':- ensure_loaded(F).'), and if F is notitself a module-file, then the predicates in F are loaded into module M.Instead of creating and loading a module-file, it is also possible to define amodule dynamically by, for example, asserting clauses into a specified module.A module created in this way has no public predicates; all its predicates areprivate.  This means that they cannot be called from outside that module exceptby explicitly overriding the modularity rules as described in{manual(ref-12-6)}.  Dynamic creation of modules is described in more detail in{manual(ref-12-9)}.