ref-13-7                    Xerox Quintus Prolog Reference Manual                       Section 13-7: The Source ModuleFor any given procedure call, or goal, the source module is the module in whichthe corresponding predicate must be visible.  That is, unless the predicate isbuilt-in it must be defined in, or imported into, the source module.For goals typed at the top level, the source module is the type-in module,which is 'user' by default -- see {manual(ref-13-8)}.  For goals appearing in afile (either as goal clauses or as normal clauses), the source module is theone into which that file has been loaded.There are a number of built-in predicates which take predicate specifications,clauses, or goals as arguments.  Each of these types of argument must beunderstood with reference to some module.  For example, assert/1 takes a clauseas its argument, and it must decide into which module that clause should beasserted.  The default assumption is that it asserts the clause into the sourcemodule.  Another example is call/1.  The goal             call(foo(X))calls the predicate foo/1 in the source module; this ensures that in thecompound goal             call(foo(X)), foo(Y)both occurrences of foo/1 refer to the same predicate.All predicates that refer to the source module allow you to override it byexplicitly naming some other module to be used instead.  This is done byprefixing the relevant argument of the predicate with the module to be usedfollowed by a ':' operator.  For example,             | ?- assert(m:f(x)).asserts f(x) in module m.Note that if you call a goal in a specified module, overriding the normalvisibility rules (see {manual(ref-13-6)}), then the source module for that goalis the one you specify, not the module in which this call occurs.  For example,            | ?- m:assert(f(x)).has exactly the same effect as the previous example -- f(x) is asserted inmodule m.  In other words, prefixing a goal with a module duplicates the effectof calling that goal from that module.Another built-in predicate which refers to the source module is compile/1.  Inthis case, the argument is a file, or list of files, rather than a predicatespecification, clause, or goal.  However, in the case where a file is not amodule-file, compile/1 must decide into which module to compile its clauses,and it chooses the source module by default.  This means that you can compile afile File into a specific module M using             | ?- compile(M:File).For a list of the built-in predicates that depend on the source module, see{manual(ref-13-16)}.  In some cases, user-defined predicates may also requirethe concept of a source module.  This is discussed in {manual(ref-13-17)}.