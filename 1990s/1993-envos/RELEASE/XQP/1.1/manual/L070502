lib-7-5-2                     Xerox Quintus Prolog Library Manual                      Section 7-5-2: library(read_sent)read_sent(-Sentence)            reads a single sentence from the current input stream.  It reads            characters up to the first sentence terminator (as defined by            is_period/1) it finds, then throws characters away until it has            reached the end of a line.  The characters read are then broken up            into "words", where a "word" is               - a sequence of letters, which is converted to lowercase                 and returned as a compound term atom(Word).  For example,                 "THIS" would be returned as atom(this)               - a sequence of decimal digits, which is returned as a                 compound term integer(Value).  For example, "0123" would                 be returned as integer(123).  Plus and minus signs become                 separate atoms.               - a sequence of characters in double quotes, which is                 returned as a compound term string(X), where X is an atom                 containing the characters between the quotes.  Two                 adjacent quotes are read as one, so the input string                 "Double "" Quote" is returned as                 string('Double " Quote').               - apostrophe s ('s) is returned as the atom 'aposts'.               - apostrophe not followed by s (') is returned as the atom                 'apost'.               - any other graphic character is returned as a                 single-character Prolog atom.            The resulting string is returned in Sentence.  Here is an example.| ?- read_sent(X).|: The predicate "read_sent" accepts sentences|: that span more than 1 line, but not lines|: that contain +2 or more sentences.  trash trashX = [atom(the),atom(predicate),string(read_sent),     atom(accepts),atom(sentences),atom(that),     atom(span),atom(more),atom(than),integer(1),     atom(line),',',atom(but),atom(not),atom(lines),     atom(that),atom(contain),+,integer(2),atom(or),     atom(more),atom(sentences),.]            This is more unwieldy than the output of read_in/1, but it does            mean that your parser can tell the difference between words,            numbers, and strings by pattern matching rather than having to use            the "meta-logical" predicates atom/1, integer/1, and so forth.