ref-3-1-1                    Xerox Quintus Prolog Reference Manual                        Section 3-1-1: consult(+File)consult(File) loads the clauses in the file File.  consult(File) can also bewritten [File].File should be an atom which is a valid file specification for a filecontaining Prolog code, except that a ".pl" suffix to a file name may beomitted.  If File does not have an extension, consult/1 will first try addingthe extension ".pl".  consult/1 appends those characters before looking for thefile.  If the file name with the ".pl" suffix does not exist, then the filename without the ".pl" suffix is searched for.  If consult/1 still fails tofind a file, an error message is sent to the standard error stream, and thegoal succeeds without doing anything else.  File may also be the atom 'user',in which case the ".pl" extension is not tried.NOTE:  consult/1, compile/1, and absolute_file_name/2 all resolve file names inexactly the same way; if the file name contains any special characters, it mustbe enclosed in single quotes.Once the file is found, each procedure in the file is read in; then, after anyprevious version of that procedure has been deleted, it is added to the Prologdata base in a form suitable for the interpreter.If a file being consulted is not a module-file, all the predicates defined inthe file are loaded into the source module.  See {manual(ref-12-3)}, forinformation about module-files.If a file being consulted is a module-file, it is first loaded in the normalway, then the source module imports all the public predicates of themodule-file, unless the source module has already imported some predicates fromthe module-file.  Thus, if a module-file has previously been loaded usinguse_module/2, and thereby only some subset of the module-file's publicpredicates has been imported, reloading that file with consult/1 will not causeadditional public predicates to be imported.  In order to import all of thepublic predicates of a module-file regardless of any previous imports,use_module(File) should be called instead of, or after, calling consult(File).consult/1 always succeeds; however, in the event of an error, such as anattempt to redefine a built-in predicate, it sends an error message to thestandard error stream and the clause causing the error is ignored.  The errorshould be corrected and the file consulted again.  The reader and the modulesystem may generate their own errors (such as syntax errors and name clashes)during the execution of consult/1; they are handled in the same way as errorsinternal to consult/1.There are a number of warnings that may appear when a file is consulted.  Theseare designed to aid in catching simple errors in user programs, but some or allof them can be turned off if desired.  See {manual(ref-3-3)}, for moreinformation.If there are any directives in the file being loaded, that is, any terms withprincipal functor ':-'/1 or '?-'/1, then these are executed as they areencountered.  The most useful type of directive to have in a file is one thatconsults another file, such as             :- [otherfile].In this case, if otherfile is a relative file name it is resolved with respectto the directory containing the file which is being loaded, not the currentworking directory of the Prolog system.Any legal Prolog clause may be included as a directive.  There is no differencebetween a ':-'/1 and a '?-'/1 goal in a file being consulted or compiled.  Itshould be noted that debugging will not be on in the execution of such adirective, regardless of the top-level debugging state, but this can always beturned on by an explicit call to debug/0 or trace/0; for example,             :- trace, myprog.File can also be the atom 'user', which means that procedures are to be typeddirectly into Prolog from the terminal.  A special prompt, '| ', is displayedat the beginning of every new clause consulted from the terminal.  Continuationlines of clauses typed at the terminal are preceded by a prompt of five spaces.When all clauses have been typed in, the last should be followed by anend-of-file character.  For more information on prompts, see the Xerox QuintusProlog User's Guide.File can be a list of file names, in which case all the named files areconsulted.When running under the editor interface, a single procedure, a specified partof an editor window, or the whole of an editor window can be consulted (see theXerox Quintus Prolog User's Guide for more information).There is no reason why consult/1 cannot be used during the execution of a userprogram -- for example, while in a break state (see break/0,{manual(ref-10-3)}) -- but see {manual(ref-3-4)}, for a warning about this.