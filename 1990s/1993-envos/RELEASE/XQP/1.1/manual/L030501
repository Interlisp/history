lib-3-5-1                     Xerox Quintus Prolog Library Manual                    Section 3-5-1: Concatenation Functionslibrary(strings) defines a set of concatenation functions.  Each of them takesa list of constants as its first argument, and returns the concatenation of thenames of the constants as its second argument.  Common Lisp character objectsare acceptable in these lists.  These functions are the "offical" way toconvert Common Lisp character objects to Prolog text objects.concat_atom(+Constants, -Atom)            unifies Atom with the atom whose name is the concatenation of the            names of the Constants.concat_chars(+Constants, -Chars)            unifies Chars with the list of character codes which is the            concatenation of the names of the Constants.concat_string(+Constants, -String)            unifies String with the string whose name is the concatenation of            the names of the Constants.  This is only available in Xerox            Quintus Prolog; currently, other versions of Quintus Prolog do not            support strings.Simplified versions of these predicates could have been defined thus:            concat_atom(Constants, Atom) :-                    concat_chars(Constants, Chars),                    atom_chars(Atom, Chars).            concat_chars([], []).            concat_chars([Constant|Constants], Chars0) :-                    name(Constant, Name),                    append(Name, Chars1, Chars0),                    concat_chars(Constants, Chars1).            concat_string(Constants, String) :-                    concat_chars(Constants, Chars),                    string_chars(String, Chars).There is one additional "feature":  in place of a constant, you may supply anon-empty list of character codes.  For example,            | ?- concat_atom([fred_,27], X).            X = fred_27and            | ?- concat_atom([fred,"_",27], X).            X = fred_27both work.  Beware:  an empty list of character codes, "", is in fact the atomwritten []. Because of this ambiguity it is not possible to write a predicatewhich will accept any atom and any list of character codes, because "" = [] isboth.  In Xerox Quintus Prolog, [] is the atom 'NIL', which has three lettersin its name.  This is so that when you pass a list between Prolog and Lisp,empty lists will work as well.  In all other versions of Quintus Prolog,[] isthe atom '[]', which has two punctuation marks in its name.  This is forcompatibility with other Edinburgh Prologs.  So while you might expect            | ?- concat_atom([fr,"",ed], fred).            noyou will in fact get            | ?- concat_atom([fr,"",ed], X).This "feature" of allowing non-empty lists of character codes is thussufficiently confusing that it is likely to be withdrawn in future releases ofthe Quintus library, and is retained in this release for backwardscompatibility with earlier releases of the library.  The concatenationfunctions themselves will remain.