sysdep-5-3            Xerox Quintus Prolog System-Dependent Features Manual             Section 5-3: Improved Compiler/Interpreter InterfaceLike DEC-10 Prolog, Xerox Quintus Prolog provides both an interpreter and acompiler.  There are a number of important differences, however:   - Compiled and interpreted code can be freely intermixed, with no need     for 'public' declarations.  The advantages of using the interpreter     are that there are more extensive debugging facilities, and that     space is reclaimed when procedures are redefined.  The advantage of     using the compiler is that compiled code is very fast in its     execution.   - consult/1 has been changed to behave like reconsult/1 in DEC-10     Prolog.  That is, the procedures defined in a consult/1 operation     replace (rather than extend) any previous definitions for those     procedures.  This makes consult/1 much more like compile/1 so that     alternating between consulting and compiling a piece of code is much     simpler.  It also means that spreading the definition of a procedure     across more than one file requires the use of the special multifile     facility.  A multifile declaration is a goal clause of the form                  :- multifile PredName/PredArity     A predicate must be declared multifile in the first file from which     it is consulted or compiled.  See the section on multifile     declarations in the Xerox Quintus Prolog Reference Manual for     complete details.  reconsult/1 is simply treated as a synonym of     consult/1.   - In DEC-10 Prolog you can use assertion and retraction predicates and     clause/1 on interpreted code but not on compiled code.  In Xerox     Quintus Prolog you can use these predicates only on dynamic code.     Regardless of whether a procedure is compiled or consulted, it may be     declared to be dynamic by a declaration of the form                  :- dynamic foo/1.     This declaration must appear in the same file as the procedure for     foo/1, and before the first clause for that procedure.  Note that     compiled dynamic predicates are actually implemented like interpreted     predicates; that is, they are shown by listing/[0,1] and in     debugging, and they are slow in comparison with non-dynamic compiled     code.     A procedure which is only used by assertion and retraction predicates     and/or clause/1 does not need to be declared dynamic.  However, it is     recommended that you declare the procedure dynamic if it is to be     called (for example, ":- foo(x)."), since if this happens before     foo/1 is known to be dynamic an "unknown procedure" trap may occur.     (See the Xerox Quintus Prolog Reference Manual for information on     unknown/2.)