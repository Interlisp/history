lib-5-3                     Xerox Quintus Prolog Library Manual                   Section 5-3: Renaming and Deleting Fileslibrary(files) defines four predicates pertaining to deleting and renamingfiles.  rename/2 and dec10_rename/2 are identical replacements for the DEC-10Prolog/C-Prolog rename/2 command.  They should only be used to convert old codeto Quintus Prolog.  New programs should use delete_file/1 and rename_file/2.delete_file(+FileName)            FileName should be an atom naming a file which currently exists and            can be deleted.  If so, the file it names is deleted, and the            command succeeds.  If not, an error message is printed, and the            command fails.  Examples:            | ?- delete_file('ask.otl').            yes            | ?- delete_file('does_not_exist').            ! A file-system goal failed            ! Goal: delete_file(does_not_exist)            no            | ?- delete_file("tmp").            ! Type failure in argument 1 of delete_file/1            ! symbol expected, but found [116,109,112]            ! Goal: delete_file([116,109,112])            no            Xerox Quintus Prolog users should be careful about version numbers.rename_file(+OldName, +NewName)            OldName should be an atom naming a file which currently exists and            can be renamed, and NewName should be a valid file name to which            the file can be renamed.  If so, the file will be renamed, and the            command will succeed.  If not, an error message will be printed,            and the command will fail.  Examples:            | ?- rename_file(does_not_exist, imaginary).            ! A file-system goal failed            ! Goal: rename_file(does_not_exist,imaginary)            no            rename_file/2 and delete_file/1 have no effect on currently open            streams, whether opened by open/3, see/1, or tell/1.  What will            happen if you continue to use streams which used to be connected to            files affected by these commands is system-dependent.  In Xerox            Quintus Prolog you cannot rename or delete a file which is open.            The Interlisp function (DELFILE OLD) returns NIL if OLD is open,            while (RENAMEFILE OLD NEW) signals an error if OLD is open.  The            Prolog commands delete_file(Old) and rename_file(Old,New) first            check whether (OPENP Old) and print an explicit error message if            this is the case.  Note that you will be warned about this even if            the file is not in Prolog's table of "current streams", which is            Prolog's equivalent of (OPENP).rename(+OldName, +NewName) This command is identical to dec10_rename/2 below.dec10_rename(+OldName, +NewName)            This predicate is similar, but not identical, to the DEC-10            Prolog/C-Prolog command rename/2, and is provided solely for the            sake of compatibility.  If you are converting existing DEC-10            Prolog or C-Prolog code to Quintus Prolog, the fact that rename/2            does close the file and is sensitive to the 'fileerrors' flag            should be useful.  In new programs we recommend the use of            rename_file/2 and delete_file/1.  OldName and NewName must be            atoms, otherwise an error is reported and the command fails (this            is not affected by the setting of the 'fileerrors' flag).  If            NewName is '[]', the file named by OldName is deleted, otherwise it            is renamed to NewName.  If the rename cannot be performed, what            happens next depends on the setting of the 'fileerrors' flag (see            prolog_flag/3 in the Xerox Quintus Prolog Reference Manual).  If            'fileerrors' is 'on', an error message is printed, and the command            aborts.  If 'fileerrors' is 'off', the command fails quietly.            Examples:            | ?- prolog_flag(fileerrors, Setting).            Setting = on            | ?- dec10_rename(2, 1).            ! Type failure in argument 1 of dec10_rename/2            ! symbol expected, but found 2            ! Goal: dec10_rename(2,1)            no            | ?- dec10_rename(does_not_exist, []).            ! A file-system goal failed            ! Goal: dec10_rename(does_not_exist,[])            [ Execution aborted ]            | ?- prolog_flag(fileerrors, _, off).            yes            | ?- dec10_rename("old", "new").            ! Type failure in argument 1 of dec10_rename/2            ! symbol expected, but found [111,108,100]            ! Goal: dec10_rename([111,108,100],[110,101,119])            no            | ?- dec10_rename(does_not_exist, []).            no