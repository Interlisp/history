sysdep-2-1            Xerox Quintus Prolog System-Dependent Features Manual                    Section 2-1: Lisp Packages and PrologXerox Quintus Prolog 2.0 now has a module system, which allows users tomodularize their Prolog code.  See the Xerox Quintus Prolog Reference Manualfor more information on modules.  And beginning with the Lyric release, XeroxLisp releases contain Common Lisp, which has a package system for similarpurposes.  It is important to remember that these two systems have nothingwhatever to do with each other.  In Xerox Quintus Prolog 2.0, every predicateis in some module.  In Common Lisp, every symbol (atom) is in some package.  InXerox Quintus Prolog 2.0, the module in which to call a predicate is determinedat compile time, where Common Lisp determines which package a symbol is in atread time.  The two systems are very different.Xerox Quintus Prolog Users may safely forget about Lisp packages as long asthey operate only in Prolog.  But when users try to call Lisp from Prolog, orProlog from Lisp, they need to know how Prolog handles Lisp packages.  The ruleis quite simple:  all Prolog atoms and functors, including predicate names, arefound in the XEROX-QUINTUS-PROLOG (XQP:) package.  This means that when callingProlog predicates from Lisp, the predicate name must be a symbol in the XQPpackage.  Similarly, when constructing Prolog terms in Lisp, the functor nameshould be a symbol in the XQP package.  And the arguments to Prolog predicatescalled from Lisp and arguments of Prolog terms constructed in Lisp which aresymbols should usually be in the XQP package, also.All the Lisp functions and variables described in this chapter are accessiblefrom the XQP package.  For the convenience of users of Xerox Quintus Prolog1.5, they are also accessible from the INTERLISP (IL: ?) package.If users need access to a Lisp symbol not in the XQP package from Xerox QuintusProlog, however, they must use the find_symbol/3 predicate to translate betweenProlog atoms and Lisp symbols.            find_symbol(?Atom, ?Package, ?LispSymbol)succeeds when Atom is the name of, and Package is the package of, the Lispsymbol LispSymbol.  Both Atom and Package are Prolog atoms, and LispSymbol is aLisp symbol.  This can be used to determine a Lisp symbol from a name andpackage, or to determine the name and package of an existing symbol.Note that Lisp symbols look and act like Prolog atoms.  A Lisp symbol willprint out just like the Prolog atom with the same name.  However, a Lisp symbolin a package other than XQP will not unify with the Prolog atom of the samename.  This could cause confusion, since two things will print out identically,but not unify.  Therefore, it is recommended that Lisp symbols not in the XQPpackage be used only in calling Lisp, and as little as possible.  Note,however, that all symbols read by Prolog are put into the XQP package, so theonly way to get a Lisp symbol not in the XQP package to Prolog is through theforeign interface, or find_symbol/3.