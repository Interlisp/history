user-8-7                      Xerox Quintus Prolog User's Guide                         Section 8-7: New PredicatesThere are a number of built-in and user-defined predicates in Xerox QuintusProlog that are not included in DEC-10 Prolog:dynamic             (a compiler directive, not a predicate; used in                    declarations)float(X)            X is a floating-point numbernumber(X)           X is either an integer or a float (also in C-Prolog)false               (same as fail/0)otherwise           (same as true/0)abolish(P)          abolish all predicates in predicate list Pretractall(H)       erase every clause in the data base whose head matches Hnospyall            remove all spypointsnotrace             (same as nodebug/0)atom_chars(A, L)    A is the atomic representation of the list of characters Lnumber_chars(A, L)  L is the list of ASCII character codes comprising the                    printed representation of Ahelp                print helpful informationhelp(T)             give help on topic Tmanual              access top-level of on-line manualmanual(X)           access specified manual sectionuser_help           user-defined; tells help/0 what to dono_style_check(X)   turn off specified style checkingstyle_check(X)      turn on specified style checkingcurrent_input(S)    S is the current input streamcurrent_output(S)   S is the current output streamflush_output(S)     flush output buffer for stream Sopen(F, M, S)       file F is opened in mode M returning stream Sopen_null_stream(S) create output stream S which goes nowhereset_input(S)        set S to be the current input streamset_output(S)       set S to be the current output streamcharacter_count(S, N)                    N is number of characters read/written on stream Scurrent_stream(F, M, S)                    S is a stream open on file F in mode Mline_count(S, N)    N is number of lines read/written on stream Sline_position(S, N) N is number of characters read/written on current line of Sformat(C, A)        write arguments A according to control string Cformat(S, C, A)     write arguments A on stream S according to control string Cget(S, C)           C is the next non-blank character on input stream Sget0(S, C)          C is the next character on input stream Snl(S)               send a newline to stream Sportray_clause(C)   writes C to the current output streamprint(S, T)         put term T on stream S using portray/1 or write/2put(S, C)           send character C to stream Sread(S, T)          read term T from stream Sskip(S, C)          skip input on stream S until character C is foundstream_code(S, U)   U is the unique integer associated with stream Sstream_position(S, P)                    P is the current position of stream Sstream_position(S, O, N)                    O is the old position of stream S, N is the newtab(S, N)           send N spaces to stream Swrite(S, T)         write term T on stream Swriteq(S, T)        write T on stream S, quoting atoms where necessarywrite_canonical(T)  write term T so that it can be read back inwrite_canonical(S, T)                    write term T on stream S so that it can be read back interm_expansion(T, N)                    user-defined; tells expand_term/2 what to do (also in                    C-Prolog)absolute_file_name(R, A)                    A is the absolute name of file Rensure_loaded(F)    compile F if not already loadedmodule(M)           make M the type-in modulemodule              declarationpredicate_property(P, Prop)                    Prop is a property of the loaded predicate Psave_program(F)     save the current static state of Prolog in file Fsource_file(F)      F is a loaded filesource_file(P, F)   P is a predicate defined in the loaded file Fuse_module(F)       load the module-file(s) Fuse_module(F, I)    load the procedures I from the module-file Fcurrent_key(N, K)   N is the name and K is the key of a recorded termgarbage_collect     invoke the garbage collector explicitlylibrary_directory(D)                    user-defined; D is a library directory that will be                    searchedmeta_predicate      declarationprolog_flag(F, V)   F is a Prolog flag and V is its current valueprolog_flag(F, O, N)                    O is the old value of flag F, N is the newlisp_apply(F,L,R)            (1100 Series machines only) gives access to Xerox Lisp facilitiesThe checker warns you if you redefine these procedures; in the event of a nameclash between one of these new built-in procedures and a procedure in yourprogram, this facilitates finding all the occurrences so that you can changethe name where necessary.  If you try to define additional clauses for abuilt-in predicate in Xerox Quintus Prolog, you will get an error message.