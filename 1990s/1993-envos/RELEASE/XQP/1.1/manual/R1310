ref-13-10                    Xerox Quintus Prolog Reference Manual                  Section 13-10: Debugging Code in a ModuleHaving loaded a module to be debugged, you can trace through its execution inthe normal way.  When the debugger stops at a port, the procedure beingdebugged is displayed with its module name as a prefix unless the module is'user'.  For example,| ?- [library(not)]....| ?- trace....| ?- not p.   (2) 0 Call: negation:(not p) ?   (3) 1 Call: free_variables:free_variables(p,[],[],_204) ?   ...Here the predicate not/1 is defined in the module 'negation' and the predicatefree_variables/4 is defined in the module 'free_variables'.The predicate spy/1 depends on the source module.  It can be useful to overridethis during debugging.  For example,            | ?- spy mod1:f/3.puts a spypoint on f/3 in module mod1.It can also be useful to call directly a predicate which is private to itsmodule in order to test that it is doing the right thing.  This can be done byprefixing the goal with its module; for example,            | ?- mod1:f(a,b,X).