user-7-11-0                      Xerox Quintus Prolog User's Guide                      Section 7-11-0: Basic InformationShown below is a sample program which contains a number of bugs.  The programis briefly described, and then an annotated debugging session under theProlog/TEdit interface is shown to demonstrate in detail how the debugger isused to find the bugs.The program is designed to find a day when people from different branch officesof a company can meet together in a certain city (in this case, Seattle).  Theprogram contains some basic information about which cities airlines flybetween, flight times, whether or not flights are nonstop, etc.  The program isbased on two assumptions: 1. All the people who are attending the meeting have to travel on the   same day to the city in which the meeting is being held. 2. The only way (in this program) to travel anywhere is to fly there.The predicates contained in the program are as follows:could_meet(List, Place, Day).  The people listed in the List can all meet in a     certain Place on a certain Day.travel_ok(Day, City1, City2).  It is possible to travel on the specified Day     from City1 to City2.one_step(Day, City1, City2, direct(Flight)).  There is a nonstop flight on the     specified Day from City1 to City2.  (Flight represents the flight number.)two_step(Day, City1, City2, change(Flight1,Flight2)).  There is a flight with     one stopover on the specified Day from City1 to City2.  (Flight1 and     Flight2 represent flight numbers.)connects(Flight1, Flight2).  It is possible to fly on Flight1 and connect to     Flight2.meet_on(Day).  It is possible for the meeting to be held on the specified Day.Following are the program and the data base of flight information it uses.Note that the program is a relatively simple one, and that a more sophisticatedprogram (which would allow for different modes of transportation, and so on)could easily be developed.The program contains four bugs:  the variable Stopover, which is used in theprocedure two_step/4, is spelled two ways; the call to could_meet/3 in the rulefor meet_on/1 is missing an argument; the variable Start2 should be greater,not less, than End1; and the predicate travel_ok/3 is missing a rule (it cannotcover the case of a person in Seattle who would not need to fly to attend ameeting in Seattle).The data base containing the program is shown on the next page.  A sampledebugging session for the program is shown following the data base.  (Theactual debugging session is shown on the four left-hand pages following thedata base; the explanations of the session are shown on the right hand pages .)/* ----------------------------------------------------   data base of flight information   ------------------------------------------------- */flight( monday,  u100, los_angeles,   san_francisco ).flight( monday,  u101, san_francisco, seattle ).flight( tuesday, u102, los_angeles,   seattle ).flight_time( u100, 0800, 0900 ).flight_time( u101, 1000, 1200 ).flight_time( u102, 1100, 1400 )./* ---------------------------------------------------------------   Program for use by corporate planning officer to decide if a   meeting can be arranged at one of their offices between people   from a number of different offices. The principal predicate is   could_meet(Offices, MeetingOffice, Day)   which is true if people from the list of Offices could meet at   the MeetingOffice on the day Day.   ------------------------------------------------------------ */could_meet([], _, _).could_meet([Office|Offices], Place, Day) :-        travel_ok(Day, Office, Place),        could_meet(Offices, Place, Day).travel_ok(Day, From, To) :- one_step(Day, From, To, _).travel_ok(Day, From, To) :- two_step(Day, From, To, _).one_step(Day, From, To, direct(Flight)) :-        flight(Day, Flight, From, To).two_step(Day, From, To, change(Flight1,Flight2)) :-        flight(Day, Flight1, From, Stopover),        flight(Day, Flight2, StopOver, To),        connects(Flight1, Flight2).connects(Flight1, Flight2) :-        flight_time(Flight1, _, End1),        flight_time(Flight2, Start2, _),        Start2 < End1./* ---------------------------------------------------------------   Interface for a company with offices in san_francisco,   los_angeles, and seattle wishing to arrange meetings in seattle   ------------------------------------------------------------ */meet_on(Day) :-        could_meet([san_francisco,los_angeles,seattle], Day).Xerox Quintus Prolog Release 2.0Copyright (C) 1987, Quintus Computer Systems, Inc.                    All rights reserved.Copyright (C) 1987, Xerox Corporation.                    All rights reserved.| ?- [flight0]. <CR>[WARNING: Singleton variables, clause 1 of two_step/4: Stopover,StopOver][<{DSK}<LISPFILES>flight0.pl consulted (1.200 sec)]yes| ?- {select two_step/4 and load it into Prolog      by selecting the Consult option of the TEdit menu}[consulting procedure two_step/4][consultation completed (2.916 sec)]yes| ?- meet_on(When). <CR>[Warning: The procedure could_meet/2 is undefined][However, could_meet/3 is defined]   (1) 1 Call: could_meet([san_francisco,los_angeles, seattle],_1264) ?                                                                   g <CR>[Ancestors:]   (-) 0 : meet_on(_1264)   (1) 1 Call: could_meet([san_francisco,los_angeles,seattle],_1264) ?                                                                   a <CR>[ Execution aborted ]| ?- {select meet_on/1 and load it into Prolog      by selecting the Consult option of the TEdit menu}[consulting procedure meet_on/1][consultation completed (9.047 sec)]yes| ?- meet_on(When). <CR>no