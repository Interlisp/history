user-4-6                      Xerox Quintus Prolog User's Guide                      Section 4-6: Undefined PredicatesBy default, if Prolog encounters a call to an undefined predicate, it displaysthe error messageWarning: the procedure name/arity is undefinedturns on the debugger, and begins tracing.  (See {manual(user-6-2)}, for moreinformation about tracing.)  Once this error message has been displayed, youcan take one of several actions.  You can turn the debugger off and continuethe execution of the program by typing 'n'.  If you do this, the undefinedpredicate will fail.  Alternatively, you can abort the execution of the programentirely by typing 'a'.  If you think the predicate was called by mistake, type'g' to find out where it was called from, and then correct the procedure thatcalled it.NOTE:  The 'g' debugger option will not work if the predicate was called fromcompiled code.If the predicate should have been defined, find or write its definition andthen consult or compile it; then resubmit your original query or command.  Ifthe predicate should be undefined, make it a dynamic predicate (see{manual(user-4-8)}), or else define a clause for it with the body "fail.".NOTE:  If you would prefer that calls to undefined predicates simply fail(rather than activating the debugger), use the built-in predicate unknown/2 tochange the default action for calls to undefined predicates.  (See the XeroxQuintus Prolog Reference Manual for more information.)