ref-5-4-1                    Xerox Quintus Prolog Reference Manual            Section 5-4-1: Stream-based Input and Output of TermsThe following predicates are alternatives to the ones described in{manual(ref-5-1)}.  These predicates take an explicit stream argument ratherthan using the current input and output streams.  Opening files and associatingthem with streams is described in {manual(ref-5-3)}.If the stream argument does not specify a valid stream, the predicate willfail, trap to the debugger, and send an error message to the standard errorstream.  If a closed stream is specified, the predicate will fail, and an errormessage will be sent to the standard error stream.read(S, T)       like read/1, {manual(ref-5-1-1)}, except that input is taken from stream       S rather than from the current input stream.write(S, T)       like write/1, {manual(ref-5-1-2)}, except that output is sent to stream       S rather than to the current output stream.write_canonical(S, T)       Like write_canonical/1, {manual(ref-5-1-4)}, except that output is sent       to stream S rather than to the current output stream.writeq(S, T)       like writeq/1, {manual(ref-5-1-3)}, except that output is sent to stream       S rather than to the current output stream.print(S, T)       like print/1, {manual(ref-5-1-6)}, except that output is sent to stream       S rather than to the current output stream.format(S, C, A)       Like format/2, {manual(ref-5-1-8)}, except that output is sent to stream       S rather than to the current output stream.NOTE:  Whether one can read a term written by write_canonical/[1,2] dependsupon the value of the character_escapes flag.  If it has the same value whenTerm is written by write_canonical/[1,2] as when it is read by read/[1,2], thesequence             ...            open(FileName, write, StreamOut),            write_canonical(StreamOut, Term),            write(StreamOut, '.'),            nl(StreamOut),            close(StreamOut),            ...            open(FileName, read, StreamIn),            read(StreamIn, Term),            close(StreamIn),            ...will succeed.For example,             | ?- write({'A' + '$VAR'(0) + [a]}).writes             {A+A+[a]}whereas             | ?- write_canonical({'A' + '$VAR'(0) + [a]}).writes             {}(+(+('A','$VAR'(0)),.(a,[])))to the current output stream.