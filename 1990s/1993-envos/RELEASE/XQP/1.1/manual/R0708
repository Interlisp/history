ref-7-8                    Xerox Quintus Prolog Reference Manual                  Section 7-8: functor(?Term, ?Name, ?Arity)functor(Term, Name, Arity) succeeds if the principal functor of term Term hasname Name and arity Arity.There are two ways of using this predicate:     1. If Term is initially instantiated, then          - if Term is a compound term, Name and Arity are unified with the           name and arity of its principal functor.         - if Term is an atom or number, Name is unified with Term, and           Arity is unified with 0.     2. If Term is initially uninstantiated, Name and Arity must both be      instantiated, and          - if Arity is an integer in the range 1..255, then Name must be           an atom, and Term becomes instantiated to the most general term           having the specified Name and Arity; that is, a term with           distinct variables for all of its arguments.         - if Arity is 0, then Name must be an atom or a number, and it is           unified with Term.         - If Arity is anything else, then functor/3 fails.  Some examples of calls to functor/3 are:              | ?- functor(foo(a,b), N, A).            N = foo,            A = 2            | ?- functor(X, foo, 2).            X = foo(_1,_2)Note:  "_1" and "_2" are anonymous variables.  The term foo(_1,_2) is the "mostgeneral" term that has name foo and arity 2.              | ?- functor(X, 2, 0).            X = 2functor/3 has no associated error conditions.