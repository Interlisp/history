ref-18-3                    Xerox Quintus Prolog Reference Manual          Section 18-3: prolog_flag(+FlagName, -OldValue, +NewValue)prolog_flag(FlagName, OldValue, NewValue) unifies the current value of FlagNamewith OldValue and then sets the value of the flag to NewValue.  Currently, thesupported FlagNames and Values are     character_escapes 'on' or 'off'     debugging         'trace', 'debug', or 'off'     fileerrors        'on' or 'off'     gc                'on' or 'off'     gc_margin         non-negative integer                       in thousands of bytes                          (not available on some systems)     gc_trace          'verbose', 'terse', or 'off'     module            a module name     unknown           'trace' or 'fail'To inspect the value of a flag without changing it, one can say             | ?- prolog_flag(FlagName, Value, Value).where FlagName is bound to one of the valid flags above.  See prolog_flag/2({manual(ref-18-4)}) for another way of doing this.If FlagName is not bound to a legal flag name, or if NewValue is anuninstantiated variable which is not identical to OldValue, prolog_flag/3fails, and an error message is sent to the standard error stream.  The systemthen enters the debugger in trace mode.prolog_flag/3 can be used to save flag values so that one can return a flag toits previous state.  For example, ...prolog_flag(debugging,Old,on), % Save in Old and set...prolog_flag(debugging,_,Old),  % Restore from Old...Thus it is possible to:   1. Enable or disable escaping of special characters in I/O operations.   2. Turn on/off trace and debug mode by using prolog_flag/3 or by using      the predicates trace/0, debug/0, notrace/0, and nodebug/0.   3. Set or reset the fileerrors flag by using prolog_flag/3 or by using      the pair of predicates fileerrors/0 and nofileerrors/0.   4. Turn on/off garbage collection by using prolog_flag/3 or by using      the predicates gc/0 and nogc/0.   5. Set the number of bytes that must be reclaimed by a garbage      collection in order to avoid heap expansion (not available on some      systems; see the Xerox Quintus Prolog System-dependent Features      Manual).   6. Enable or disable diagnostic tracing of garbage collections.   7. Set the type-in module (see {manual(ref-12-8)}).  The module/1      command is available to change the type-in module, but the only way      of finding out which module is currently selected is to call      prolog_flag/[2,3].   8. Set the action to be taken on unknown procedures by using      prolog_flag/3 or unknown/2 (see {manual(ref-11-6-9)}).  unknown/2      writes a message to 'user_output' saying what the new state is.  It      is intended for use at the top level.  prolog_flag/3 does not write      a message.  It is intended for use in code.See the Xerox Quintus Prolog System-dependent Features Manual for more detaileddescriptions of the garbage collection flags.