(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "17-Sep-87 13:50:33" {DSK}<LISPFILES>DCOMS>SECURE.\;2 17442        |changes| |to:|  (FNS SECURE)      |previous| |date:| "25-Jun-87 16:58:10" {DSK}<LISPFILES>DCOMS>SECURE.\;1); Copyright (c) 1985, 1986, 1987 by Quintus Computer Systems.  All rights reserved.(PRETTYCOMPRINT SECURECOMS)(RPAQQ SECURECOMS ((DECLARE\: EVAL@LOAD DONTCOPY (MACROS XQP::FLOADBYTE XQP::DATE.INTEGER16                                                         XQP::HASH.UNHASH XQP::MAKE.VERIFICATION                                                         XQP::OK.DATE XQP::OK.OPTIONS XQP::VERIFY))                   (CONSTANTS XQP::GOLDEN.RATIO.HACK)                   (INITVARS XQP::CODE.CACHE)                   (GLOBALVARS XQP::CODE.CACHE PROLOGROOTDIRECTORY)                   (FNS XQP::BIGNUM-TO-FIXP XQP::FIXP-TO-BIGNUM XQP::32BITIPLUS XQP::32BITITIMES                         XQP::64BITIMOD OK XQP::READ.HEX SECURE XQP::SKIP.BLANKS XQP::STILL.OK)                   (PROP MAKEFILE-ENVIRONMENT)))(DECLARE\: EVAL@LOAD DONTCOPY (DECLARE\: EVAL@COMPILE (PUTPROPS XQP::FLOADBYTE MACRO ((N POS SIZE)                                (LOGAND (LRSH N POS)                                       (MASK.1\'S 0 SIZE))))(PUTPROPS XQP::DATE.INTEGER16 MACRO ((GDATE)                                     (IQUOTIENT (IDIFFERENCE (IDATE GDATE)                                                       (CONSTANT (IMOD (IDATE " 1-JAN-80 00:00:00")                                                                       (IDIFFERENCE (IDATE                                                                                  " 2-JAN-80 00:00:00"                                                                                           )                                                                              (IDATE                                                                                  " 1-JAN-80 00:00:00"                                                                                     )))))                                            (CONSTANT (IDIFFERENCE (IDATE " 2-JAN-80 00:00:00")                                                             (IDATE " 1-JAN-80 00:00:00"))))))(PUTPROPS XQP::HASH.UNHASH MACRO ((NUMBER HASHKEY)                                  (PROGN (* * |This| XQP::|implements| XQP::|hashing| |by|                                             XQP::|multiplying| |by| |the| XQP::|golden| XQP::|ratio,|                                             XQP::|taking| |the| XQP::|fractional| XQP::|part,| |and|                                             |then| XQP::|multiplying| |by| XQP::2**32. |The| |hack|                                             |used| |to| XQP::|make| |this| XQP::|work| |is| |to|                                             |multiply| |by| |the| XQP::|fractional| XQP::|part| |of|                                             |the| XQP::|golden| XQP::|ratio| * XQP::2**32\, |and|                                             |take| |the| XQP::|low| XQP::|order| 32 XQP::|bits.|)                                         (LOGXOR NUMBER (XQP::32BITIPLUS (XQP::32BITITIMES                                                                          (XQP::FLOADBYTE HASHKEY 16                                                                                  16)                                                                          XQP::GOLDEN.RATIO.HACK)                                                               (XQP::32BITITIMES (XQP::FLOADBYTE                                                                                  HASHKEY 0 16)                                                                      XQP::GOLDEN.RATIO.HACK))))))(PUTPROPS XQP::MAKE.VERIFICATION MACRO ((X Y)                                        (LET ((1ST X)                                              (2ND Y))                                             (LOGOR (XQP::64BITIMOD 1ST 2ND 5                                                           (CONSTANT (IREMAINDER (EXPT 2 32)                                                                            5)))                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 7                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  7)))                                                          3)                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 13                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  13)))                                                          6)                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 23                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  23)))                                                          10)                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 29                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  29)))                                                          15)                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 61                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  61)))                                                          20)                                                    (LLSH (XQP::64BITIMOD 1ST 2ND 59                                                                 (CONSTANT (IREMAINDER (EXPT 2 32)                                                                                  59)))                                                          26)))))(PUTPROPS XQP::OK.DATE MACRO ((XQP::STOREDDATE)                              (LET ((DATE XQP::STOREDDATE))                                   (OR (EQ DATE (CONSTANT (XQP::DATE.INTEGER16 " 1-DEC-85 00:00:00"))                                           )                                       (ILEQ (XQP::DATE.INTEGER16)                                             DATE)))))(PUTPROPS XQP::OK.OPTIONS MACRO ((XQP::OPTIONBITS)                                 T))(PUTPROPS XQP::VERIFY MACRO ((X)                             (EQP (CADDR X)                                  (XQP::MAKE.VERIFICATION (CAR X)                                         (CADR X)))))))(DECLARE\: EVAL@COMPILE (RPAQQ XQP::GOLDEN.RATIO.HACK -478700649)(CONSTANTS XQP::GOLDEN.RATIO.HACK))(RPAQ? XQP::CODE.CACHE NIL)(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS XQP::CODE.CACHE PROLOGROOTDIRECTORY))(DEFINEQ(XQP::BIGNUM-TO-FIXP  (LAMBDA (X)                                                (* XQP::|pds:| "16-Nov-85 20:35")    (LET ((XQP::LOW32 (IMOD X (CONSTANT (EXPT 2 32)))))         (|if| (IGREATERP XQP::LOW32 (CONSTANT (EXPT 2 31)))             |then| (LOGOR (IDIFFERENCE XQP::LOW32 (CONSTANT (EXPT 2 31)))                           (CONSTANT (LOGNOT (SUB1 (EXPT 2 31)))))           |else| XQP::LOW32))))(XQP::FIXP-TO-BIGNUM  (LAMBDA (FIXP)                                             (* XQP::|pds:| "16-Nov-85 20:10")    (|if| (MINUSP FIXP)        |then| (IPLUS FIXP (CONSTANT (EXPT 2 32)))      |else| FIXP)))(XQP::32BITIPLUS  (LAMBDA (X Y)                                              (* XQP::|pds:| "31-Jan-86 19:43")    (LET ((LOW (IPLUS (XQP::FLOADBYTE X 0 16)                      (XQP::FLOADBYTE Y 0 16))))         (LOGOR (LLSH (XQP::FLOADBYTE (IPLUS (XQP::FLOADBYTE X 16 16)                                             (XQP::FLOADBYTE Y 16 16)                                             (XQP::FLOADBYTE LOW 16 16))                             0 16)                      16)                (XQP::FLOADBYTE LOW 0 16)))))(XQP::32BITITIMES  (LAMBDA (A B)                                              (* XQP::|pds:| "31-Jan-86 19:27")                    (* * |This| |macro| |is| XQP::|executed| |for| XQP::|side-effect.|          XQP::I\t XQP::|multiplies| A |by| XQP::B\, XQP::|yielding| XQP::PROD\, |where|           XQP::A\, XQP::B\, |and| XQP::PROD |are| 32 |bit| XQP::|unsigned|           XQP::|quantities,| |and| |the| |result| |is| XQP::|truncated| XQP::|without|           XQP::|comment.| |Each| |input| |and| XQP::|output| |is| \a 16 |bit|           XQP::|positive| XQP::SMALLP. |The| XQP::|execution| |of| |this| |code| |will|           |not| XQP::|make| |any| FIXP\s |or| XQP::BIGNUM\s.          T\o |call| |this| XQP::|macro,| XQP::|pass| |in| XQP::SMALLP\s |for| |the|           |first| XQP::|four| XQP::|args,| |and| |variables| |for| |the| |last|           XQP::|two;| |on| XQP::|completion,| G |and| H |will| |be| |bound| |to| |the|           |high| |and| XQP::|low| 16 |bits| |of| |the| XQP::|product,|           XQP::|respectively.| XQP::|Gee,| |this| |is| XQP::|almost| XQP::|like|           XQP::|Prolog!|)    (PROG ((A3 (XQP::FLOADBYTE A 24 8))           (B3 (XQP::FLOADBYTE B 24 8))           (A2 (XQP::FLOADBYTE A 16 8))           (B2 (XQP::FLOADBYTE B 16 8))           (A1 (XQP::FLOADBYTE A 8 8))           (B1 (XQP::FLOADBYTE B 8 8))           (A0 (XQP::FLOADBYTE A 0 8))           (B0 (XQP::FLOADBYTE B 0 8))           XQP::RESULTHI XQP::RESULTLO)          (SETQ XQP::RESULTLO (IPLUS (ITIMES A0 B0)                                     (LLSH (IPLUS (ITIMES A1 B0)                                                  (ITIMES A0 B1))                                           8)))          (SETQ XQP::RESULTHI (XQP::FLOADBYTE (IPLUS (XQP::FLOADBYTE XQP::RESULTLO 16 16)                                                     (ITIMES A2 B0)                                                     (ITIMES A1 B1)                                                     (ITIMES A0 B2)                                                     (LLSH (IPLUS (ITIMES A3 B0)                                                                  (ITIMES A2 B1)                                                                  (ITIMES A1 B2)                                                                  (ITIMES A0 B3))                                                           8))                                     0 16))          (SETQ XQP::RESULTLO (XQP::FLOADBYTE XQP::RESULTLO 0 16))          (RETURN (LOGOR (LLSH XQP::RESULTHI 16)                         XQP::RESULTLO)))))(XQP::64BITIMOD  (LAMBDA (X1 X0 Y Z)                                        (* XQP::|pds:| " 1-Feb-86 12:34")                    (* * XQP::|Takes| XQP::X\, \a 64 |bit| XQP::|integer| XQP::|passed| |in| |as|           |two| XQP::|FIXPs,| |and| XQP::|computes| X IMOD XQP::Y.          X1 |is| |the| |high| XQP::|order| 32 |bits| |of| XQP::X\, |and| X0 |is| |the|           XQP::|low| 32 XQP::|bits.| Z |is| XQP::2**32 XQP::|mod| XQP::Y.          XQP::|Works| XQP::|providing| |that| Y < 65535)    (IMOD (IPLUS (IMOD X0 Y)                 (ITIMES (IMOD X1 Y)                        Z))          Y)))(OK  (LAMBDA (X)                                                (* XQP::|pds:| " 1-Feb-86 13:12")    (LET ((XQP::SERIALNUMBER (LOGOR (LLSH (|fetch| (IFPAGE |NSHost1|) |of| |\\InterfacePage|)                                          16)                                    (|fetch| (IFPAGE |NSHost2|) |of| |\\InterfacePage|))))         (LET ((XQP::HASHEDWORD (XQP::HASH.UNHASH (CADR X)                                       XQP::SERIALNUMBER)))              (AND (EQP (CAR X)                        (XQP::HASH.UNHASH XQP::SERIALNUMBER XQP::SERIALNUMBER))                   (XQP::OK.DATE (XQP::FLOADBYTE XQP::HASHEDWORD 16 16))                   (XQP::OK.OPTIONS (XQP::FLOADBYTE XQP::HASHEDWORD 0 16))                   (XQP::VERIFY X))))))(XQP::READ.HEX  (LAMBDA (FILE RDTBL)                                       (* XQP::|pds:| "15-Nov-85 11:14")    (|bind| CH |while| (OR (SYNTAXP (SETQ CH (PEEKCCODE FILE RDTBL))                                  'SEPR RDTBL)                           (SYNTAXP CH 'BREAK RDTBL)) |do| (READCCODE FILE RDTBL))    (|bind| (NUM _ 0)           CH |until| (OR (SYNTAXP (SETQ CH (PEEKCCODE FILE RDTBL))                                 'SEPR RDTBL)                          (SYNTAXP CH 'BREAK RDTBL))       |do| (READCCODE FILE RDTBL)            (|if| (AND (IGEQ CH (CHARCODE 0))                       (ILEQ CH (CHARCODE 9)))                |then| (SETQ NUM (LOGOR (LLSH NUM 4)                                        (IDIFFERENCE CH (CHARCODE 0))))              |elseif| (AND (IGEQ CH (CHARCODE A))                            (ILEQ CH (CHARCODE F)))                |then| (SETQ NUM (LOGOR (LLSH NUM 4)                                        (IDIFFERENCE CH (CONSTANT (IDIFFERENCE (CHARCODE A)                                                                         10)))))              |elseif| (AND (IGEQ CH (CHARCODE \a))                            (ILEQ CH (CHARCODE \f)))                |then| (SETQ NUM (LOGOR (LLSH NUM 4)                                        (IDIFFERENCE CH (CONSTANT (IDIFFERENCE (CHARCODE \a)                                                                         10)))))              |else| (ERROR "Invalid hexadecimal character" CH)) |finally| (RETURN NUM))))(SECURE  (LAMBDA NIL                                                (* \; "Edited 17-Sep-87 13:47 by pds:")    (OR (AND XQP::CODE.CACHE (XQP::STILL.OK XQP::CODE.CACHE))        (LET ((FNAME))             (|if| (NOT (BOUNDP 'PROLOGROOTDIRECTORY))                 |then| (PRINTOUT T                              "You must set up the variable PROLOGROOTDIRECTORY before running Prolog"                                T)                       NIL               |elseif| (NOT (INFILEP (SETQ FNAME (PACKFILENAME.STRING 'BODY PROLOGROOTDIRECTORY                                                         'NAME "codes" 'EXTENSION NIL))))                 |then| (|printout| T "Can't find file " FNAME T)                       NIL               |else| (AND (SETQ XQP::CODE.CACHE (|bind| X (FL _ (OPENFILE FNAME 'INPUT))                                                    |eachtime| (XQP::SKIP.BLANKS FL)                                                    |until| (EOFP FL)                                                    |do| (SETQ X (LIST (XQP::READ.HEX FL)                                                                       (XQP::READ.HEX FL)                                                                       (XQP::READ.HEX FL)))                                                         (|if| (OK X)                                                             |then| (SETQ $$VAL X)                                                                   (GO $$OUT))                                                    |finally| (CLOSEF FL)))                           T))))))(XQP::SKIP.BLANKS  (LAMBDA (FL RDTBL)                                         (* XQP::|pds:| "15-Nov-85 11:38")    (|while| (AND (NOT (EOFP FL))                  (SYNTAXP (PEEKCCODE FL RDTBL)                         'SEPR RDTBL)) |do| (READC FL RDTBL))))(XQP::STILL.OK  (LAMBDA (X)                                                (* XQP::|pds:| " 3-Feb-86 16:22")                    (* * W\e |have| XQP::|previously| XQP::|checked| |this| |key| |and| |it| |was|           |ok| XQP::|then.| XQP::S\o |we| |must| XQP::|make| XQP::|sure| |that| |the|           XQP::|license| XQP::|hasn't| XQP::|expired,| |and| |that| XQP::|he|           XQP::|hasn't| XQP::|moved| |the| SYSOUT |to| XQP::|another,| XQP::|unlicensed,|           XQP::|machine.| |This| |means| |that| |we| |need| |only| |check| |the|           XQP::|serial| |number| |and| XQP::|date,| |and| |can| XQP::|forgo| |the|           XQP::|expensive| XQP::|verification| |of| |the| XQP::|consistancy| |of| |the|           XQP::|code.|)    (LET ((XQP::SERIALNUMBER (LOGOR (LLSH (|fetch| (IFPAGE |NSHost1|) |of| |\\InterfacePage|)                                          16)                                    (|fetch| (IFPAGE |NSHost2|) |of| |\\InterfacePage|))))         (LET ((XQP::HASHEDWORD (XQP::HASH.UNHASH (CADR X)                                       XQP::SERIALNUMBER)))              (AND (EQP (CAR X)                        (XQP::HASH.UNHASH XQP::SERIALNUMBER XQP::SERIALNUMBER))                   (XQP::OK.DATE (XQP::FLOADBYTE XQP::HASHEDWORD 16 16))                   (XQP::OK.OPTIONS (XQP::FLOADBYTE XQP::HASHEDWORD 0 16))))))))(PUTPROPS SECURE COPYRIGHT ("Quintus Computer Systems" 1985 1986 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL (7097 17347 (XQP::BIGNUM-TO-FIXP 7107 . 7538) (XQP::FIXP-TO-BIGNUM 7540 . 7775) (XQP::32BITIPLUS 7777 . 8315) (XQP::32BITITIMES 8317 . 10973) (XQP::64BITIMOD 10975 . 11615) (OK 11617 . 12393) (XQP::READ.HEX 12395 . 13965) (SECURE 13967 . 15641) (XQP::SKIP.BLANKS 15643 . 15921) (XQP::STILL.OK 15923 . 17345)))))STOP