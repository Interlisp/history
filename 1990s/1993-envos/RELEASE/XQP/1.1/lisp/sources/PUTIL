(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(filecreated "15-Oct-87 15:49:07" {dsk}<lispfiles>dcoms>putil.\;6 13771        |changes| |to:|  (fns xqp::prolog.init.tables)      |previous| |date:| " 6-Aug-87 17:26:46" {dsk}<lispfiles>dcoms>putil.\;5); Copyright (c) 1985, 1986, 1987 by Xerox Corporation.  All rights reserved.(prettycomprint putilcoms)(rpaqq putilcoms ((fns \\dogc1)                  (fns xqp::dummy.for.compiler xqp::|MakeUCodeBaseAddr| xqp::|MakeUCodeVirtBaseAddr|                        prolog.init.memory xqp::prolog.init.tables)                  (fns xqp::fill.pc.table)                  (fns xqp::prolog.singlestep)                  (macros xqp::prolog.dummy.goes xqp::prolog.getnextlispbytecode xqp::prologop)                  (initvars (xqp::|membot|))                  (constants xqp::|AReg.pages| xqp::|pages|)                  (vars xqp::prolog.target.op)                  (prop argnames xqp::prologop)                  (prop makefile-environment)                  (declare\: donteval@load doeval@compile dontcopy compilervars (addvars (nlama)                                                                                       (nlaml)                                                                                       (lama)))))(defineq(\\DOGC1  (LAMBDA NIL                                                (* |edited:| "30-Nov-85 14:57")                    (* * \\DOGC1 |with| XQP::|hook| |to| |call| XQP::|Prolog| XQP::|register-trace|           |code|)    (AND (GETD '\\GCSCANPROLOG)         (\\GCSCANPROLOG))    (\\GCSCANSTACK)    (\\GCMAPSCAN)                                            (* XQP::|map| XQP::|thru,|                                                              XQP::|releasing| |entries|)    (\\GCMAPUNSCAN)                                          (* XQP::|map| XQP::|thru,|                                                              XQP::|unmarking| |stack| |entries|)    NIL)))(defineq(XQP::DUMMY.FOR.COMPILER  (LAMBDA NIL                                                (* |hdj| "10-May-85 19:13")    'START))(XQP::|MakeUCodeBaseAddr|  (LAMBDA (XQP::LISPBASE)                                    (* |hdj| "22-May-85 16:26")                    (* * |for| |those| XQP::|ucode| |routines| |that| |need| |addresses| |in| |the|           |form| "bits 8..15,,0..7")    (LOGOR (LOGAND (\\LOLOC XQP::LISPBASE)                  (MASK.1\'S 8 8))           (\\HILOC XQP::LISPBASE))))(XQP::|MakeUCodeVirtBaseAddr|  (LAMBDA (XQP::LISPBASE)                                    (* |edited:| "17-Apr-86 16:35")                    (* * |the| XQP::|microcode| XQP::|assumes| XQP::LISPBASE |is| |on| \a |page|           XQP::|boundary| |and| |is| XQP::|locked| XQP::|down|)                    (* * "return bits [8..15,,0..7]")    (LET ((XQP::VIRTPAGE (|fetch| (POINTER PAGE#) |of| XQP::LISPBASE)))         (LOGAND (MASK.1\'S 0 16)                (LOGOR (LRSH XQP::VIRTPAGE 8)                       (LLSH XQP::VIRTPAGE 8))))))(PROLOG.INIT.MEMORY  (LAMBDA NIL                                                (* \; "Edited  6-Aug-87 16:38 by pds")    (|if| (LITATOM (GETTOPVAL 'XQP::|membot|))        |then| (RESETFORM (CURSOR WAITINGCURSOR)                      (XQP::PROLOG.INIT.TABLES)))    (XQP::|WritePrologPtrAnd0Tag| XQP::|ClockTimeAtomNumber| (LOLOC 'XQP::CLOCK.TIME))                                                             (* \;                                                     "give ucode access to CLOCK.TIME global variable")    (XQP::|WritePrologPtrAnd0Tag| XQP::|VMlim| (XQP::|MakeUCodeBaseAddr|                                                (SETQ XQP::|memtop| (|create|                                                                     POINTER                                                                     PAGE# _                                                                     (IPLUS (|fetch| (POINTER PAGE#)                                                                               |of| XQP::|membot|)                                                                            XQP::|pages|)))))                                                             (* \;                                               "set VMlim to be one page higher than last Prolog page")    (XQP::|WritePrologPtrAnd0Tag| XQP::|LMBase| (XQP::|MakeUCodeVirtBaseAddr| (|fetch| (ARRAYP BASE)                                                                                 |of|                                                                              PROLOG.ENABLE.PUFN.TABLE                                                                                     )))    (XQP::|WritePrologPtrAnd0Tag| XQP::|PUfnTableBase| (XQP::|MakeUCodeVirtBaseAddr|                                                        (|fetch| (ARRAYP BASE) |of| PROLOG.PUFN.TABLE                                                               )))    (XQP::|WritePrologPtrAnd0Tag| XQP::|A0Base| (XQP::|MakeUCodeVirtBaseAddr| XQP::|ABase|))    (XQP::|WritePrologPtrAnd0Tag| XQP::|A1Base| (XQP::|MakeUCodeVirtBaseAddr| (\\ADDBASE XQP::|ABase|                                                                                      WORDSPERPAGE)))    (XQP::|WritePrologPtrAnd0Tag| XQP::|PInit| 0)            (* \;                                                        "tell ucode to turn virtual addresses to real")    (XQP::|WritePrologPtrAnd0Tag| XQP::|PFCont| 0)           (* \;                                                    "initialize the Prolog continuation register to 0")    (|if| (GETD 'QP.PROLOG)        |then| (XQP::FILL.PC.TABLE 'QP.PROLOG PROLOG.PUFN.TABLE))    T))(xqp::prolog.init.tables  (lambda nil                                                (* \; "Edited 15-Oct-87 14:38 by pds")    (declare (globalvars prolog.pufn.table prolog.enable.pufn.table xqp::|membot| xqp::|ABase|))    (promptprint "Grabbing 4mb of virtual memory for Prolog - this will take a while... ")    (setq prolog.pufn.table (array 256 'word 0 0 128))    (setq prolog.enable.pufn.table (array 256 'word 1 0 128))    (|bind| xqp::opnumber |for| op |in| xqp::unimplemented.instructions       |do| (|if| (ileq (setq xqp::opnumber (xqp::op.code op))                        255)                |then|                                       (* \; "turn off ucode for this instr")                      (seta prolog.enable.pufn.table xqp::opnumber 0)                      (|if| (not (gethash (add1 xqp::opnumber)                                        xqp::instruction.harray))                          |then|                             (* \;                                                  "not a singlemode instruction:  turn off both modes")                                (seta prolog.enable.pufn.table (add1 xqp::opnumber)                                      0))))    (setq xqp::|ABase| (setq xqp::|membot| (\\allocpageblock xqp::|pages|)))                    (* * xqp::|Having| |allocated| |the| xqp::|microcode| xqp::|interface|           xqp::|tables| |lock| |them| |in| xqp::|memory|)    (\\lockpages (|fetch| (arrayp base) |of| prolog.pufn.table)           1)    (\\lockpages (|fetch| (arrayp base) |of| prolog.enable.pufn.table)           1)    (\\lockpages xqp::|ABase| xqp::|AReg.pages|)    (promptprint "done."))))(defineq(XQP::FILL.PC.TABLE  (LAMBDA (DEF TABLE)                                        (* \; "Edited 24-Jul-87 12:52 by pds")    (DECLARE (GLOBALVARS XQP::PROLOG.TARGET.OP))    (PROG (CA CODELOC XQP::OPCODEDEF XQP::PROLOG.OP.NUM)          (SETQ CA (MCODEP DEF))          (SETQ CC (\\GET-COMPILED-CODE-BASE DEF))          (|if| (NOT (OR CA CC))              |then| (\\ILLEGAL.ARG DEF))          (|if| (OR (NOT (ARRAYP TABLE))                    (NEQ (ARRAYSIZE TABLE)                         256)                    (NEQ (ARRAYTYP TABLE)                         'SMALLPOSP))              |then| (\\ILLEGAL.ARG TABLE))                    (* |;;| "CODELOC GETS INCREMENTED BY THEPROLOG.GETNEXTLISPBYTECODE MACRO")          (SETQ CODELOC (|if| CA                            |then| (|fetch| (CODEARRAY STARTPC) |of| CA)                          |else| (|fetch| (FNHEADER STARTPC) |of| CC)))          (|bind| (B B1 B2 B3 LEN) |do| (SETQ B (XQP::PROLOG.GETNEXTLISPBYTECODE))                                        (SETQ B1 (AND (ILESSP 0 (SETQ LEN (|fetch| OPNARGS                                                                             |of| (SETQ                                                                                    XQP::OPCODEDEF                                                                                   (\\FINDOP B)))))                                                      (XQP::PROLOG.GETNEXTLISPBYTECODE)))                                        (SETQ B2 (AND (ILESSP 1 LEN)                                                      (XQP::PROLOG.GETNEXTLISPBYTECODE)))                                        (SETQ B3 (AND (ILESSP 2 LEN)                                                      (XQP::PROLOG.GETNEXTLISPBYTECODE)))                                        (|if| (EQ (|fetch| OPCODENAME |of| XQP::OPCODEDEF)                                                  (CAR XQP::PROLOG.TARGET.OP))                                            |then|                     (* |;;| "this is writtenas if somehow it was independent of the exact encoding of the beginningof the code, but its unlikely")                    (* |;;| "")                    (* |;;| "this crufty code on topof the PROLOG.TARGET.OP is done as follows.  PROLOG.TARGET.OP iscurrently RAID followed by SIC.  The RAID call doesn't usually exist innormal code, and thus is a good indicator.  The following SIC is just sothat we can have a byte in the code that PRINTCODE ignores.  This isn'tgreat, but it allows printcode to work.  We could patch this by using adistinguished opcode for PROLOG.TARGET.OP that PRINTCODE would ignorethe following byte, or by having the compiler emit this table in thefirst place.")                                                  (|add| CODELOC (LENGTH (CDR XQP::PROLOG.TARGET.OP))                                                         )                     (* |;;| "Since CC is the raw AllocBlock, we use that as the base of the codeblock and hope everything works.")                                                  (SETQ XQP::PROLOG.OP.NUM                                                   (|if| CA                                                       |then| (CODELT CA CODELOC)                                                     |else| (\\GETBASEBYTE CC CODELOC)))                                                  (SETA TABLE XQP::PROLOG.OP.NUM                                                        (ADD1 (SETQ CODELOC (ADD1 CODELOC)))))             |repeatuntil| (EQ (|fetch| OPCODENAME |of| XQP::OPCODEDEF)                               '-X-))          (RETURN (LIST TABLE (|if| CA                                  |then| CA                                |else| CC)))))))(defineq(XQP::PROLOG.SINGLESTEP  (LAMBDA NIL                                                (* |hdj| " 8-May-85 14:23")    (|printout| T "Single step (type key to continue) >> ")    (\\GETKEY)    (TERPRI))))(declare\: eval@compile (putprops xqp::prolog.dummy.goes macro       (args (let ((n (car args)))                  `(selectq (xqp::dummy.for.compiler)                          (start (go start))                          \,@                          (|for| x |from| 0 |to| n |collect| `(\, (xqp::prolog.gen.op# x)                                                                  (go \, (xqp::prolog.gen.op# x))))                          (\, (xqp::prolog.gen.op# 255)                              (go \, (xqp::prolog.gen.op# 255)))                          (xqp::finished (go xqp::finished))                          nil))))(putprops xqp::prolog.getnextlispbytecode macro (nil (\\getbasebyte cc (prog1 codeloc                                                                              (|add| codeloc 1)))))(putprops xqp::prologop dmacro (args (let ((op# (car args))                                           (xqp::pcincr (cadr args))                                           (action (cddr args)))                                          `((opcodes popdisp)                                            (progn ((opcodes \,@ (mklist xqp::prolog.target.op)                                                           \, op#))                                                   \,@ action \,@ (|if| xqp::pcincr |then|                                                                        (list xqp::pcincr))))))))(rpaq? xqp::|membot| )(declare\: eval@compile (rpaqq xqp::|AReg.pages| 2)(rpaqq xqp::|pages| 8192)(constants xqp::|AReg.pages| xqp::|pages|))(rpaqq xqp::prolog.target.op (raid sic))(putprops xqp::prologop argnames (op# xqp::pcincr . action))(declare\: donteval@load doeval@compile dontcopy compilervars (addtovar nlama )(addtovar nlaml )(addtovar lama ))(putprops putil copyright ("Xerox Corporation" 1985 1986 1987))(declare\: dontcopy  (filemap (nil (1316 2039 (\\dogc1 1326 . 2037)) (2040 7699 (xqp::dummy.for.compiler 2050 . 2188) (xqp::|MakeUCodeBaseAddr| 2190 . 2580) (xqp::|MakeUCodeVirtBaseAddr| 2582 . 3158) (prolog.init.memory 3160 . 5948) (xqp::prolog.init.tables 5950 . 7697)) (7700 11619 (xqp::fill.pc.table 7710 . 11617)) (11620 11846 (xqp::prolog.singlestep 11630 . 11844)))))stop