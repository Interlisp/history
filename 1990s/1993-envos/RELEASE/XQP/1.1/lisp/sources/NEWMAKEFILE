(DEFINE-FILE-INFO PACKAGE "XEROX-QUINTUS-PROLOG" READTABLE "INTERLISP" BASE 10)(FILECREATED "18-Jun-87 14:29:28" {ERIS}<PROLOGCORE>LYRIC>LISP>NEWMAKEFILE.;1 74122        changes to%:  (VARS QP.LISP.LIBRARY.FILES NEWMAKEFILECOMS)                    (FNS LOADWELL)      previous date%: "17-Jun-87 14:53:04" {ERIS}<PROLOGCORE>MORELISP>NEWMAKEFILE.;10)(* "Copyright (c) 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT NEWMAKEFILECOMS)(RPAQQ NEWMAKEFILECOMS        ((FNS DEFAULT.HOSTDIR KEEP.COMMENTS.ADDTOFILE QP.LISP.FILES QP.LOAD.SOURCES)        (VARS QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR QP.DEFAULT.LISP.SOURCE.HOST/DIR               QP.DEFAULT.PROLOG.SOURCE.HOST/DIR)        [INITVARS (QP.DEFAULT.LISP.OBJECT.HOST/DIR (DEFAULT.HOSTDIR 'LISP 'OBJECT '                                                          {DSK}<LISPFILES2>DCOMS>))               (QP.DEFAULT.PROLOG.OBJECT.HOST/DIR (DEFAULT.HOSTDIR 'PROLOG 'OBJECT '                                                         {DSK}<LISPFILES2>DNGS>]        (GLOBALVARS QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR QP.DEFAULT.LISP.SOURCE.HOST/DIR                QP.DEFAULT.LISP.OBJECT.HOST/DIR QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                QP.DEFAULT.PROLOG.OBJECT.HOST/DIR COMPILE.EXT NETWORKOSTYPES)                    (* ;; "If any of these variables change, the file PROLOGBOOT must be remade.")        (VARS QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS QP.GENERATED.LISP.FILES               QP.GENERATED.PROLOG.FILES QP.NON.SYSOUT.RELEASE.FILES QP.XEROX.LISP.FILES               QP.XEROX.LISP.EXTRAS QP.XEROX.NON.SYSOUT.RELEASE.FILES QP.DEVELOPMENT.LISP.FILES               QP.DEVELOPMENT.LISP.LOAD.AFTER QP.LISP.LIBRARY.FILES QP.DEVELOPMENT.LISP.LIBRARY.FILES               QP.PROLOG.USERS.LISP.FILES QP.NO.DCOM.FILES QP.NO.SOURCE.FILES)        (VARS (QP.FILE.GROUP.MENU (create MENU TITLE _ "Choose file group" ITEMS _                                         '((QP.DEVELOPMENT.LISP.FILES 'QP.DEVELOPMENT.LISP.FILES "Non-sysout files that must be loaded before any non-FILEPKG files.  They define read macros and defining forms"                                                  )                                           (QP.RELEASE.LISP.FILES 'QP.RELEASE.LISP.FILES                                                   "A normal part of the XQP release set")                                           (QP.RELEASE.LISP.EXTRAS 'QP.RELEASE.LISP.EXTRAS                                                   "Released files that don't need atom's smashed")                                           (QP.DEVELOPMENT.LISP.LOAD.AFTER '                                                  QP.DEVELOPMENT.LISP.LOAD.AFTER      "Non-sysout files that must/can be loaded AFTER all the release files.  Usually debugging code."                                                  )                                           (QP.NON.SYSOUT.RELEASE.FILES 'QP.NON.SYSOUT.RELEASE.FILES                                     "Files released to Xerox that MUST NOT be part of the XQP sysout"                                                  )                                           (QP.PROLOG.USERS.LISP.FILES 'QP.PROLOG.USERS.LISP.FILES                                                   "Lisp code for the Prolog-users library"))                                          CENTERFLG _ T)))        (GLOBALVARS QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS QP.GENERATED.LISP.FILES                QP.GENERATED.PROLOG.FILES QP.NON.SYSOUT.RELEASE.FILES QP.XEROX.LISP.FILES                QP.XEROX.LISP.EXTRAS QP.XEROX.NON.SYSOUT.RELEASE.FILES QP.DEVELOPMENT.LISP.FILES                QP.DEVELOPMENT.LISP.LOAD.AFTER QP.LISP.LIBRARY.FILES QP.DEVELOPMENT.LISP.LIBRARY.FILES                QP.PROLOG.USERS.LISP.FILES QP.NO.DCOM.FILES QP.NO.SOURCE.FILES QP.LISP.FILES DNGLIST)        (FNS EAT-AND-COUNT-SEMICOLONS EAT-WHITE-SPACE LOADWELL QP.COPY.DNGS QP.COPY.NO.SOURCE.FILES              QP.GENERATE.FILES QP.GET.FILE.DATE QP.LIST.ELEMENT.INDEX QP.LOAD.COMPILED              QP.LOAD.DNGLIST QP.LOAD.DNGS QP.LOAD.PREREQUISITES QP.LOAD.SOURCES QP.LOAD.SYSTEM              QP.MAKE QP.MAKE.PROLOGBOOT QP.MODULE QP.REMAKE QP.UPDATE.ALL)                    (* ;; "This stuff is to make it possible to get comments when loading .LSP files.  Note that QP.NEWADDTOFILE is a redefinition of a function in UTIL.LSP.  This version must be used in order to get comments loaded properly.  Note also that UTIL.LSP supplies its own read macro for ;, which must not be used.")        (INITVARS (TEXTFILERDTBL (COPYREADTABLE T))               (KEEPCOMMENTSFILERDTBL (COPYREADTABLE T)))        (P (* ;;; "Set up read macro chars for TEXTFILERDTBL")           (SETSYNTAX '; '(SPLICE FIRST ESCQUOTE NONIMMEDIATE KILLLINE) TEXTFILERDTBL)           (SETSYNTAX '%' '(MACRO FIRST READQUOTE) TEXTFILERDTBL)           (SETSYNTAX '%` '(MACRO FIRST READBQUOTE) TEXTFILERDTBL)           (SETSYNTAX '%, '(MACRO FIRST READBQUOTECOMMA) TEXTFILERDTBL)           (SETSYNTAX '%# 'OTHER TEXTFILERDTBL)           (* ;;; "Set up read macro chars for KEEPCOMMENTSFILERDTBL")           (SETSYNTAX '; '(MACRO FIRST ESCQUOTE NONIMMEDIATE READ.;.COMMENT) KEEPCOMMENTSFILERDTBL)           (SETSYNTAX '%' '(MACRO FIRST READQUOTE) KEEPCOMMENTSFILERDTBL)           (SETSYNTAX '%` '(MACRO FIRST READBQUOTE) KEEPCOMMENTSFILERDTBL)           (SETSYNTAX '%, '(MACRO FIRST READBQUOTECOMMA) KEEPCOMMENTSFILERDTBL)           (SETSYNTAX '%# 'OTHER KEEPCOMMENTSFILERDTBL))        (FNS KILLLINE QP.KEEP.COMMENTS.ADDTOFILE READ.;.COMMENT)                                                             (* ;                                               "Following are functions for building releases of XQP.")        (FNS QP.CHECK.RELEASE QP.RELEASE QP.FILE.FILEDATES QP.SCCS.DATES QP.SCCS.FILEDATES)        (P (PRINTOUT T T "Once you are satisfied with the value of QP.DEFAULT.PROLOG.SOURCE.HOST/DIR, you should do (QP.LOAD.DNGLIST)."                   T T))))(DEFINEQ(DEFAULT.HOSTDIR  [LAMBDA (LANGUAGE SOURCE/OBJECT DEFAULT)                   (* pds%: "12-Nov-85 17:01")    (CAR (TTYIN (CONCAT "Enter default directory for " (L-CASE LANGUAGE T)                       " "                       (L-CASE SOURCE/OBJECT)                       " code: ")                NIL NIL '(NORAISE) NIL NIL DEFAULT])(KEEP.COMMENTS.ADDTOFILE  [LAMBDA (NAME TYPE)                                        (* ; "Edited 11-Jun-87 16:46 by pds")    (if (AND (BOUNDP 'SOURCE.FILE)             SOURCE.FILE)        then (if [EQ TYPE (CAAR (LAST (GETTOPVAL (FILECOMS SOURCE.FILE]                 then (NCONC1 [CAR (LAST (EVAL (FILECOMS SOURCE.FILE]                             NAME)               else (SETTOPVAL (FILECOMS SOURCE.FILE)                           (NCONC1 (GETTOPVAL (FILECOMS SOURCE.FILE))                                  (MAKENEWCOM NAME TYPE])(QP.LISP.FILES  [LAMBDA NIL                                                (* pds%: "15-Oct-86 13:11")    (APPEND QP.DEVELOPMENT.LISP.FILES QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS            QP.DEVELOPMENT.LISP.LOAD.AFTER])(QP.LOAD.SOURCES  [LAMBDA (FILES HOST.DIR STARTWITH ENDWITH KEEPCOMMENTSFLG) (* ; "Edited 11-Jun-87 12:36 by pds")(* ;;; "Load QP source files.  Default HOST.DIR is QP.DEFAULT.LISP.SOURCE.HOST/DIR.  If HOST.DIR is T, then load from the current connected directory.  Default FILES is QP.LISP.FILES.")(* ;;; "If STARTWITH is supplied, it must be either an integer or an element of the list indicating which element to start loading with.  If ENDWITH is supplied, it must be either an integer or an element of the list indicating which element to stop loading with.  By default, the whole list will be loaded.")    (if (NULL FILES)        then (SETQ FILES (QP.LISP.FILES))      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (SETQ HOST.DIR (DIRECTORYNAME (OR HOST.DIR QP.DEFAULT.LISP.SOURCE.HOST/DIR)                          T))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    [SETQ FILES (LDIFF (NTH FILES STARTWITH)                       (NTH FILES (ADD1 ENDWITH]    (if FILES        then (if (NULL (GETPROP 'EXPORTS.ALL 'FILE))                 then (LOAD 'EXPORTS.ALL))             (QP.LOAD.PREREQUISITES))    (bind FULLNAME for F in FILES eachtime [SETQ FULLNAME (PACKFILENAME.STRING 'BODY HOST.DIR                                                                 'NAME                                                                 (FILENAMEFIELD F 'NAME)                                                                 'EXTENSION                                                                 (FILENAMEFIELD F 'EXTENSION]       join (if (INFILEP FULLNAME)                then [SELECTQ (FILENAMEFIELD F 'EXTENSION)                         ((NIL ILSP)                               [LIST (RESETVAR SCCS.FILE.BEING.LOADED (FILENAMEFIELD F 'NAME)                                     (LOAD FULLNAME NIL NIL (CL:FIND-PACKAGE "XQP"])                         (LSP (LIST (LOADWELL FULLNAME NIL KEEPCOMMENTSFLG)))                         (ERROR "unrecognized file type" (FILENAMEFIELD F 'NAME]              else (PRINTOUT T "can't find " FULLNAME T)                   NIL]))(RPAQQ QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR {ERIS}<PROLOGCORE>NEWLISP>)(RPAQQ QP.DEFAULT.LISP.SOURCE.HOST/DIR "{ERIS}<PrologCore>lispnew>")(RPAQQ QP.DEFAULT.PROLOG.SOURCE.HOST/DIR {ERIS}<PROLOGCORE>DNGS>)(RPAQ? QP.DEFAULT.LISP.OBJECT.HOST/DIR (DEFAULT.HOSTDIR 'LISP 'OBJECT '{DSK}<LISPFILES2>DCOMS>))(RPAQ? QP.DEFAULT.PROLOG.OBJECT.HOST/DIR (DEFAULT.HOSTDIR 'PROLOG 'OBJECT '{DSK}<LISPFILES2>DNGS>))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR QP.DEFAULT.LISP.SOURCE.HOST/DIR        QP.DEFAULT.LISP.OBJECT.HOST/DIR QP.DEFAULT.PROLOG.SOURCE.HOST/DIR        QP.DEFAULT.PROLOG.OBJECT.HOST/DIR COMPILE.EXT NETWORKOSTYPES))(* ;; "If any of these variables change, the file PROLOGBOOT must be remade.")(RPAQQ QP.RELEASE.LISP.FILES        (INSTRS.LSP INTERPRET.LSP VALUES.LSP PROCS.LSP LOAD.LSP PRIM.LSP CODE.LSP CELL.LSP TAGS.LSP               BIND.LSP REGISTERS.LSP SELECT.LSP IO.LSP CHARTYPE.LSP GC.LSP ASSERT.LSP ENV.LSP               ERROR.LSP FINDARITY.LSP #:FINDDEFN FINDPRED.LSP FORMAT.LSP LINK.LSP #:SETUPMENU               STATISTICS.LSP #:TELLEDITOR INTERRUPTS #:SECURE #:TOPLEVEL INDEX.LSP AMEM.LSP CALL.LSP               CUT.LSP FAIL.LSP PUTWRITE.LSP GETREAD.LSP META.LSP LISP.LSP ARITH.LSP SKEL.LSP               #:DYNASSERT #:LOGO2 #:NUKE DONOR.LSP #:PROLOGGC))(RPAQQ QP.RELEASE.LISP.EXTRAS (#:TEDITMODE #:TEXECFIXES))(RPAQQ QP.GENERATED.LISP.FILES (#:ERRORTAB PROLOGBOOT SLOWPROLOG FASTPROLOG))(RPAQQ QP.GENERATED.PROLOG.FILES (errortab.dng versionnumber.dng))(RPAQQ QP.NON.SYSOUT.RELEASE.FILES (#:GEN #:KEYMAKER))(RPAQQ QP.XEROX.LISP.FILES (OPCODES #:PUTIL #:SECURITY))(RPAQQ QP.XEROX.LISP.EXTRAS (FREEMENU XQPINFO XQPM))(RPAQQ QP.XEROX.NON.SYSOUT.RELEASE.FILES (OPCODEHIST OPCODEMENU))(RPAQQ QP.DEVELOPMENT.LISP.FILES (UTIL.LSP BASIC.LSP))(RPAQQ QP.DEVELOPMENT.LISP.LOAD.AFTER (APROPOS.LSP DEBUG.LSP #:INSCODE #:STACKWINDOWS))(RPAQQ QP.LISP.LIBRARY.FILES (TEDIT IL:TEXEC GRAPHER))(RPAQQ QP.DEVELOPMENT.LISP.LIBRARY.FILES (CMLSPECIALFORMS))(RPAQQ QP.PROLOG.USERS.LISP.FILES (#:FBPROLOG))(RPAQQ QP.NO.DCOM.FILES (#:ERRORTAB PROLOGBOOT IL:VALUES))(RPAQQ QP.NO.SOURCE.FILES (OPCODES #:PUTIL #:SECURITY FREEMENU XQPINFO XQPM))(RPAQ QP.FILE.GROUP.MENU (create MENU TITLE _ "Choose file group" ITEMS _                                '((QP.DEVELOPMENT.LISP.FILES 'QP.DEVELOPMENT.LISP.FILES "Non-sysout files that must be loaded before any non-FILEPKG files.  They define read macros and defining forms"                                         )                                  (QP.RELEASE.LISP.FILES 'QP.RELEASE.LISP.FILES                                          "A normal part of the XQP release set")                                  (QP.RELEASE.LISP.EXTRAS 'QP.RELEASE.LISP.EXTRAS                                          "Released files that don't need atom's smashed")                                  (QP.DEVELOPMENT.LISP.LOAD.AFTER 'QP.DEVELOPMENT.LISP.LOAD.AFTER      "Non-sysout files that must/can be loaded AFTER all the release files.  Usually debugging code."                                         )                                  (QP.NON.SYSOUT.RELEASE.FILES 'QP.NON.SYSOUT.RELEASE.FILES                                     "Files released to Xerox that MUST NOT be part of the XQP sysout"                                         )                                  (QP.PROLOG.USERS.LISP.FILES 'QP.PROLOG.USERS.LISP.FILES                                          "Lisp code for the Prolog-users library")) CENTERFLG _ T))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS QP.GENERATED.LISP.FILES        QP.GENERATED.PROLOG.FILES QP.NON.SYSOUT.RELEASE.FILES QP.XEROX.LISP.FILES QP.XEROX.LISP.EXTRAS        QP.XEROX.NON.SYSOUT.RELEASE.FILES QP.DEVELOPMENT.LISP.FILES QP.DEVELOPMENT.LISP.LOAD.AFTER        QP.LISP.LIBRARY.FILES QP.DEVELOPMENT.LISP.LIBRARY.FILES QP.PROLOG.USERS.LISP.FILES        QP.NO.DCOM.FILES QP.NO.SOURCE.FILES QP.LISP.FILES DNGLIST))(DEFINEQ(EAT-AND-COUNT-SEMICOLONS  [LAMBDA (STREAM)                                           (* ; "Edited  5-Jun-87 14:44 by FS")(* ;;; "Counts semicolons, assuming that one semicolon has already been seen and eaten.")    (bind (CNT _ 1) while (EQ (PEEKCCODE STREAM)                              (CHARCODE ;)) do (READCCODE STREAM)                                               (add CNT 1) finally (RETURN CNT])(EAT-WHITE-SPACE  [LAMBDA (STREAM)                                           (* ; "Edited  5-Jun-87 15:02 by FS")(* ;;; "Skips over spaces and tabs, but not over newlines")    (while (OR (EQ (PEEKCCODE STREAM)                   (CHARCODE SPACE))               (EQ (PEEKCCODE STREAM)                   (CHARCODE TAB))) do (READCCODE STREAM])(LOADWELL  [LAMBDA (FILE NOSCCSFLG KEEPCOMMENTSFLG)                   (* ; "Edited 18-Jun-87 11:25 by shih")(* ;;; "Load a Bill-and-Richard-style Lisp file.")    (DECLARE (SPECVARS SOURCE.FILE)           (GLOBALVARS FILELST SCCS.FILE.BEING.LOADED))    (LET     [(BASENAME (FILENAMEFIELD FILE 'NAME]     (RESETLST      (RESETSAVE SCCS.FILE.BEING.LOADED BASENAME)      (RESETSAVE KEEP.COMMENTS KEEPCOMMENTSFLG)(* ;;; "first make sure all necessary development files are loaded")(* ;;; "(bind DEV.BASENAME for FL in QP.DEVELOPMENT.LISP.FILES eachtime (SETQ DEV.BASENAME (FILENAMEFIELD FL 'NAME)) until (EQ DEV.BASENAME BASENAME) unless (MEMB DEV.BASENAME FILELST) do (LOADWELL (PACKFILENAME 'NAME DEV.BASENAME 'EXTENSION (FILENAMEFIELD FL 'EXTENSION) 'BODY FILE) NOSCCSFLG))")      (PRINTOUT T "LOADWELLing " FILE " ...")      [SET (FILECOMS FILE)           `((* ;;; (\, (CONCAT "This file was generated from "(FULLNAME FILE (QUOTE OLD)) ", loaded " (DATE))))]      (PUTPROP BASENAME 'MAKEFILE-ENVIRONMENT '(:PACKAGE "XQP" :READTABLE "OLD-INTERLISP-FILE"))      (ADDFILE BASENAME)      (bind (STREAM _ (OPENSTREAM FILE 'INPUT))            (SOURCE.FILE _ BASENAME)            FORM until (EQ (SETQ FORM (READ STREAM (if KEEPCOMMENTSFLG                                                       then KEEPCOMMENTSFILERDTBL                                                     else TEXTFILERDTBL)))                           'STOP)         do         (if (AND KEEPCOMMENTSFLG (EQ (CAR FORM)                                      '*))             then [SET (FILECOMS FILE)                       (NCONC1 (EVAL (FILECOMS FILE))                              (if (AND (MEMB (CADR FORM)                                             '(; ;; ;;;))                                       (STRINGP (CADDR FORM)))                                  then                       (* ;                                                    "It's already a new-style comment:  keep it as is")                                       FORM                                else `                    (* ;; (\, (APPLY (QUOTE CONCAT) (CDR (for X in          (CDR FORM) join (if (AND (LISTP X) (EQ (CAR X)          (QUOTE *))) then (LIST " " (CADDR X)) else          (LIST " " X)))))))]           elseif (AND KEEPCOMMENTSFLG (LISTP (CAR FORM))                       (MEMB 'PROGN FORM))             then             (for INNERFORM in FORM                do (if (EQ (CAR INNERFORM)                           '*)                       then [SET (FILECOMS FILE)                                 (NCONC1 (EVAL (FILECOMS FILE))                                        (if (AND (MEMB (CADR INNERFORM)                                                       '(; ;; ;;;))                                                 (STRINGP (CADDR INNERFORM)))                                            then             (* ;                                                    "It's already a new-style comment:  keep it as is")                                                 INNERFORM                                          else `                    (* ;; (\, (APPLY (QUOTE CONCAT) (CDR (for X in          (CDR INNERFORM) join (if (AND (LISTP X) (EQ          (CAR X) (QUOTE *))) then (LIST " " (CADDR X)) else          (LIST " " X)))))))]                     elseif (NEQ INNERFORM 'PROGN)                       then (EVAL INNERFORM)))           else (EVAL FORM)) finally (CLOSEF? STREAM))      (printout T "done." T)      (pushnew FILELST BASENAME)      [PUTPROP BASENAME 'COPYRIGHT (LIST "Quintus Computer Systems, Inc" (CAR (\UNPACKDATE]      (PUTPROP BASENAME 'FILE (LIST (CONS (FILECOMS BASENAME)                                          T)))      (if (NOT NOSCCSFLG)          then (PUTPROP BASENAME 'SCCSTYPE 'TEXT))      FILE])(QP.COPY.DNGS  [LAMBDA (FILES FROMDIR TODIR STARTWITH ENDWITH)            (* pds%: "12-May-86 12:17")                    (* * Copy the files on list FILES from FROMDIR to TODIR.          FROMDIR defaults to QP.DEFAULT.PROLOG.SOURCE.HOST/DIR;          TODIR defaults to QP.DEFAULT.PROLOG.OBJECT.HOST/DIR.          If FROMDIR is T, then copy from the current connected directory.          If TODIR is T, then copy to the current connected directory.          FILES defaults to QP.SYSTEM.FILES)                    (* If STARTWITH is supplied, it must be either an integer or an element of the           list indicating which element to start copying with.          If ENDWITH is supplied, it must be either an integer or an element of the list           indicating which element to stop copying with.          By default the whole list will be copied.)    (if (NULL FILES)        then (SETQ FILES DNGLIST)      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (if (NULL FROMDIR)        then (SETQ FROMDIR QP.DEFAULT.PROLOG.SOURCE.HOST/DIR)      elseif (EQ FROMDIR T)        then (SETQ FROMDIR (DIRECTORYNAME T T)))    (if (NULL TODIR)        then (SETQ TODIR QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)      elseif (EQ TODIR T)        then (SETQ TODIR (DIRECTORYNAME T T)))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    (SETQ FILES (NTH FILES STARTWITH))    (printout T T "Copying " (ADD1 (IDIFFERENCE ENDWITH STARTWITH))           " files from " FROMDIR " to " TODIR ":" T T)    (bind SOURCEFILE TEMPFILE (THRUTEMP _ (ASSOC (FILENAMEFIELD (OR FROMDIR (DIRECTORYNAME T T))                                                        'HOST)                                                 NETWORKOSTYPES)) for I from 0       to (IDIFFERENCE ENDWITH STARTWITH) as FILE in FILES eachtime (SETQ SOURCEFILE                                                                     (PACKFILENAME 'BODY FILE                                                                            'BODY FROMDIR))                                                                 (SETQ TEMPFILE (PACKFILENAME                                                                                 'BODY FILE                                                                                 'BODY                                                                                 '{CORE}))       do (if (INFILEP SOURCEFILE)              then (printout T "copying " SOURCEFILE " ...")                   (if THRUTEMP                       then (COPYFILE SOURCEFILE TEMPFILE)                            (COPYFILE TEMPFILE (PACKFILENAME 'BODY FILE 'BODY TODIR))                            (DELFILE TEMPFILE)                     else (COPYFILE SOURCEFILE (PACKFILENAME 'BODY FILE 'BODY TODIR)))                   (printout T "done" T)            else (ERROR "can't find file" SOURCEFILE])(QP.COPY.NO.SOURCE.FILES  [LAMBDA (FILE.OR.LIST FROMDIR TODIR)                       (* pds%: "30-May-86 10:49")                    (* * Copy FILE.OR.LIST from FROMDIR to TODIR.          FILE.OR.LIST may be either a single file name or a list, and defaults to           QP.NO.SOURCE.FILES. FROMDIR defaults to QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR;          TODIR defaults to QP.DEFAULT.LISP.OBJECT.HOST/DIR.)    (DECLARE (GLOBALVARS COMPILE.EXT))    (if (NULL FILE.OR.LIST)        then (SETQ FILE.OR.LIST QP.NO.SOURCE.FILES)      elseif (ATOM FILE.OR.LIST)        then (SETQ FILE.OR.LIST (LIST FILE.OR.LIST)))    (if (NULL FROMDIR)        then (SETQ FROMDIR QP.DEFAULT.LISP.NO.SOURCE.HOST/DIR))    (if (NULL TODIR)        then (SETQ TODIR QP.DEFAULT.LISP.OBJECT.HOST/DIR))   (* pds%: "30-May-86 10:24")    (PRINTOUT T "Copying from " FROMDIR " to " TODIR ":" T)    (for FL in FILE.OR.LIST do (PRINTOUT T "Copying " FL "...")                               (COPYFILE (PACKFILENAME 'NAME FL 'EXTENSION COMPILE.EXT 'BODY FROMDIR)                                      (PACKFILENAME 'NAME FL 'EXTENSION COMPILE.EXT 'BODY TODIR))                               (PRINTOUT T "done" T])(QP.GENERATE.FILES  [LAMBDA (FILEORLIST)                                       (* pds%: "30-May-86 17:37")    (if (NULL FILEORLIST)        then (SETQ FILEORLIST QP.GENERATED.LISP.FILES)      elseif (ATOM FILEORLIST)        then (SETQ FILEORLIST (LIST FILEORLIST)))    (RESETLST [RESETSAVE (/CNDIR QP.DEFAULT.LISP.OBJECT.HOST/DIR)                     `(/CNDIR ,(DIRECTORYNAME T T]           (for FL in FILEORLIST do (PRINTOUT T "Generating " FL "...")                                    (SELECTQ FL                                        ((FASTPROLOG SLOWPROLOG)                                              (FILESLOAD (FROM VALUEOF QP.DEFAULT.LISP.OBJECT.HOST/DIR                                                              )                                                    #:GEN)                                             (PROLOG.GEN.EMULATOR (EQ FL 'SLOWPROLOG)))                                        (PROLOGBOOT (QP.MAKE.PROLOGBOOT))                                        (#:ERRORTAB (COPYFILE (PACKFILENAME 'NAME '#:ERRORTAB                                                                     'BODY                                                                     QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                                                                     )                                                           '#:ERRORTAB)                                                    (LOAD '#:ERRORTAB))                                        (SHOULDNT))                                    (PRINTOUT T "done" T))           NIL])(QP.GET.FILE.DATE  [LAMBDA (DIR FILE)                                         (* pds%: " 9-May-86 16:46")    (if (EQ (CDR (FASSOC (FILENAMEFIELD DIR 'HOST)                        NETWORKOSTYPES))            'UNIX)        then (if (NOT (GETPROP DIR 'DIRFILEDATES))                 then (LET [(FL (OPENFILE (PACKFILENAME 'BODY DIR 'NAME '@FILEDATES)                                       'INPUT]                           (PUTPROP DIR 'DIRFILEDATES (READ FL))                           (CLOSEF? FL)))             [IDATE (CADR (ASSOC FILE (GETPROP DIR 'DIRFILEDATES]      else (GETFILEINFO (PACKFILENAME 'BODY DIR 'NAME FILE)                  'IWRITEDATE])(QP.LIST.ELEMENT.INDEX  [LAMBDA (LIST ELT)                                         (* pds%: "12-Nov-85 18:39")    (for X in LIST as I from 1 until (EQ X ELT) do NIL finally (RETURN (AND (EQ X ELT)                                                                            I])(QP.LOAD.COMPILED  [LAMBDA (FILES HOST/DIR STARTWITH ENDWITH)                 (* pds%: "15-Oct-86 13:13")                    (* * Load QP compiled files. Default HOST/DIR is           QP.DEFAULT.LISP.OBJECT.HOST/DIR Default FILES is QP.SOURCE.FILES.          If HOST/DIR is T, then load from the current connected directory.)    (if (NULL FILES)        then (SETQ FILES (QP.LISP.FILES))      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (if (NULL HOST/DIR)        then (SETQ HOST/DIR QP.DEFAULT.LISP.OBJECT.HOST/DIR)      elseif (EQ HOST/DIR T)        then (SETQ HOST/DIR (DIRECTORYNAME T T)))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    (SETQ FILES (NTH FILES STARTWITH))    (bind FULLNAME for I from 0 to (IDIFFERENCE ENDWITH STARTWITH) as F in FILES       join (SELECTQ (FILENAMEFIELD F 'EXTENSION)                ((NIL LSP)                      (if (INFILEP (SETQ FULLNAME (PACKFILENAME 'BODY HOST/DIR 'NAME                                                        (FILENAMEFIELD F 'NAME)                                                        'EXTENSION COMPILE.EXT)))                         then (LOAD? FULLNAME)                              (LIST FULLNAME)                       else (PRINTOUT T "can't find " FULLNAME)                            NIL))                ((PL pl)                      (if [INFILEP (SETQ FULLNAME (PACKFILENAME 'BODY HOST/DIR 'NAME                                                        (FILENAMEFIELD F 'NAME)                                                        'EXTENSION                                                        'dng]                         then (printout T "Reconsulting " FULLNAME " ...")                              (QP.RECONSULT FULLNAME)                              (printout T "done" T)                              (LIST FULLNAME)                       else (PRINTOUT T "can't find " FULLNAME)                            NIL)                     FILES)                (ERROR "unrecognized file type" (FILENAMEFIELD F 'NAME])(QP.LOAD.DNGLIST  [LAMBDA NIL                                                (* pds%: "23-May-86 13:43")    (LOAD (PACKFILENAME 'NAME '#:DNGFILES 'BODY QP.DEFAULT.PROLOG.SOURCE.HOST/DIR])(QP.LOAD.DNGS  [LAMBDA (FILES HOST.DIR STARTWITH ENDWITH)                 (* pds%: "12-May-86 12:20")                    (* * Reconsult the files on list FILES. Default HOST.DIR is           QP.DEFAULT.PROLOG.OBJECT.HOST/DIR. If HOST.DIR is T, then load from the current           connected directory. FILES defaults to QP.PROLOG.FILES)                    (* If STARTWITH is supplied, it must be either an integer or an element of the           list indicating which element to start loading with.          If ENDWITH is supplied, it must be either an integer or an element of the list           indicating which element to stop loading with.          By default the whole list will be loaded.)    (if (NULL FILES)        then (SETQ FILES DNGLIST)      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (if (NULL HOST.DIR)        then (SETQ HOST.DIR QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)      elseif (EQ HOST.DIR T)        then (SETQ HOST.DIR (DIRECTORYNAME T T)))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    (SETQ FILES (NTH FILES STARTWITH))    (bind FULLNAME for I from 0 to (IDIFFERENCE ENDWITH STARTWITH) as FILE in FILES       join (if (INFILEP (SETQ FULLNAME (PACKFILENAME 'BODY HOST.DIR 'BODY FILE)))                then (printout T "Reconsulting " FULLNAME " ...")                     (QP.RECONSULT FULLNAME)                     (printout T "done" T)                     (LIST FULLNAME)              else (printout T "Can't find " FULLNAME T)                   NIL])(QP.LOAD.PREREQUISITES  [LAMBDA NIL                                                (* ; "Edited 10-Jun-87 09:55 by shih")(* ;;; "Load the files that must be loaded before loading any other sources.")    (APPLY (FUNCTION FILESLOAD)           `((FROM VALUEOF LISPUSERSDIRECTORIES)             ,@QP.DEVELOPMENT.LISP.LIBRARY.FILES             ,@QP.LISP.LIBRARY.FILES             (FROM VALUEOF QP.DEFAULT.LISP.OBJECT.HOST/DIR)             ,@QP.XEROX.LISP.FILES])(QP.LOAD.SOURCES  [LAMBDA (FILES HOST.DIR STARTWITH ENDWITH KEEPCOMMENTSFLG) (* ; "Edited 11-Jun-87 12:36 by pds")(* ;;; "Load QP source files.  Default HOST.DIR is QP.DEFAULT.LISP.SOURCE.HOST/DIR.  If HOST.DIR is T, then load from the current connected directory.  Default FILES is QP.LISP.FILES.")(* ;;; "If STARTWITH is supplied, it must be either an integer or an element of the list indicating which element to start loading with.  If ENDWITH is supplied, it must be either an integer or an element of the list indicating which element to stop loading with.  By default, the whole list will be loaded.")    (if (NULL FILES)        then (SETQ FILES (QP.LISP.FILES))      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (SETQ HOST.DIR (DIRECTORYNAME (OR HOST.DIR QP.DEFAULT.LISP.SOURCE.HOST/DIR)                          T))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    [SETQ FILES (LDIFF (NTH FILES STARTWITH)                       (NTH FILES (ADD1 ENDWITH]    (if FILES        then (if (NULL (GETPROP 'EXPORTS.ALL 'FILE))                 then (LOAD 'EXPORTS.ALL))             (QP.LOAD.PREREQUISITES))    (bind FULLNAME for F in FILES eachtime [SETQ FULLNAME (PACKFILENAME.STRING 'BODY HOST.DIR                                                                 'NAME                                                                 (FILENAMEFIELD F 'NAME)                                                                 'EXTENSION                                                                 (FILENAMEFIELD F 'EXTENSION]       join (if (INFILEP FULLNAME)                then [SELECTQ (FILENAMEFIELD F 'EXTENSION)                         ((NIL ILSP)                               [LIST (RESETVAR SCCS.FILE.BEING.LOADED (FILENAMEFIELD F 'NAME)                                     (LOAD FULLNAME NIL NIL (CL:FIND-PACKAGE "XQP"])                         (LSP (LIST (LOADWELL FULLNAME NIL KEEPCOMMENTSFLG)))                         (ERROR "unrecognized file type" (FILENAMEFIELD F 'NAME]              else (PRINTOUT T "can't find " FULLNAME T)                   NIL])(QP.LOAD.SYSTEM  [LAMBDA (Debug)                                            (* pds%: "23-Jan-86 10:34")                    (* * Load up everything in the default maner.)    (if (EQ 'Y (ASKUSER 60 'Y "Load ALL the LISP code now?  "))        then (QP.LOAD.COMPILED)      elseif (EQ 'Y (ASKUSER 60 'Y "Reload only the files that have changed? "))        then (QP.RELOAD.LISP))    (QP.INITIALIZE.PROLOG)    (if (EQ 'Y (ASKUSER 60 'Y "Load up the .DNG files now?  "))        then (QP.LOAD.DNGS])(QP.MAKE  [LAMBDA (FILES HOST.DIR STARTWITH ENDWITH)                 (* pds%: "15-Oct-86 13:08")                    (* * Make QP source files. Default HOST.DIR is QP.DEFAULT.LISP.OBJECT.HOST/DIR.          Default FILES is QP.LISP.FILES.)                    (* If STARTWITH is supplied, it must be either an integer or an element of the           list indicating which element to start making with.          If ENDWITH is supplied, it must be either an integer or an element of the list           indicating which element to stop making with.          By default the whole list will be made.)    (if (NULL FILES)        then (SETQ FILES (QP.LISP.FILES))      elseif (ATOM FILES)        then (SETQ FILES (LIST FILES)))    (if (NULL HOST.DIR)        then (SETQ HOST.DIR QP.DEFAULT.LISP.OBJECT.HOST/DIR)      elseif (EQ HOST.DIR T)        then (SETQ HOST.DIR (DIRECTORYNAME T T)))    (SETQ STARTWITH (OR (FIXP STARTWITH)                        (AND (ATOM STARTWITH)                             (QP.LIST.ELEMENT.INDEX FILES STARTWITH))                        (AND (NULL STARTWITH)                             1)                        (ERROR "STARTWITH not on list of files" STARTWITH)))    (SETQ ENDWITH (OR (FIXP ENDWITH)                      (AND (ATOM ENDWITH)                           (QP.LIST.ELEMENT.INDEX FILES ENDWITH))                      (AND (NULL ENDWITH)                           (LENGTH FILES))                      (ERROR "ENDWITH not on list of files" ENDWITH)))    [SETQ FILES (LDIFF (NTH FILES STARTWITH)                       (NTH FILES (ADD1 ENDWITH]    (RESETLST     (RESETSAVE (CNDIR HOST.DIR)            (LIST 'CNDIR (DIRECTORYNAME T T)))     (PROG1      [bind BASENAME FULLFILE for F in FILES eachtime (SETQ BASENAME (FILENAMEFIELD F 'NAME))                                                   (SETQ FULLFILE (PACKFILENAME 'BODY HOST.DIR                                                                         'NAME BASENAME 'EXTENSION                                                                          NIL))         collect         (SELECTQ (FILENAMEFIELD F 'EXTENSION)             (LSP (MAKEFILE FULLFILE '(NEW FAST C ST)))             (NIL [if (MEMBER BASENAME QP.GENERATED.LISP.FILES)                      then (MAKEFILE FULLFILE '(NEW FAST C ST))                    else (PRINTOUT T "making " BASENAME "..." T)                         (PRINTOUT T "Changes: " (CDR (GETPROP BASENAME 'FILE))                                T)                         (SCCSIFY BASENAME)                         [if (EQ (GETPROP BASENAME 'SCCSSTATE)                                 'CHECKINGOUT)                             then                     (* He's in the process of checking the file out now.          If we recklessly just make the file, when the file is checked out, its date           won't agree with the "current" date.)                                  (PUTPROP BASENAME 'SCCS.OLD.FILEDATES (GETPROP BASENAME                                                                               'FILEDATES]                         (PROG1 [if (EQ (CDR (ASSOC (FILENAMEFIELD (CDAR (GETPROP BASENAME                                                                                'FILEDATES))                                                           'HOST)                                                    NETWORKOSTYPES))                                        'UNIX)                                    then (MAKEFILE FULLFILE '(NEW C ST ASK))                                  else (MAKEFILE FULLFILE '(RC ST ASK]                                (if (EQ (GETPROP BASENAME 'SCCSTYPE)                                        'FILEPKG)                                    then (SELECTQ (GETPROP BASENAME 'SCCSSTATE)                                             ((CHECKEDOUT CHECKINGOUT NEW)                                                   [ADD.PROCESS `(SCCS.CHECK.IN ',FULLFILE])                                             (PROGN (PRINTOUT PROMPTWINDOW F                                                            " was not checked out of SCCS!" T)                                                    (RINGBELLS])             (ERROR "unrecognized file type" (FILENAMEFIELD F 'EXTENSION]      (if (IGREATERP (LENGTH FILES)                 10)          then                                               (* What a kludge!!!)               (PRINTOUT T "Don't forget to make sure that compiled versions of the following files are in the lisp object directory:"                       T (APPEND QP.GENERATED.LISP.FILES QP.XEROX.LISP.FILES])(QP.MAKE.PROLOGBOOT  [LAMBDA NIL                                                (* pds%: "30-May-86 11:37")                    (* * Set up the COMs for the PROLOGBOOT file, and then make the file.)                    (* * In order to run this function you must have the variable DNGLIST bound.          This is accomplished by loading the file DNGFILES, which is built by Prolog           when making a new system.)    [SETQ PROLOGBOOTCOMS     `(             (* All and only what is needed to build a Xerox Quintus Prolog SYSOUT.)       [INITVARS QP.USE.SLOW.EMULATOR [QP.DEFAULT.LISP.OBJECT.HOST/DIR (CAR (TTYIN                                                              "Enter directory for Lisp object code: "                                                                                    NIL NIL                                                                                   '(NORAISE]              [QP.DEFAULT.PROLOG.OBJECT.HOST/DIR (CAR (TTYIN                                                            "Enter directory for Prolog object code: "                                                              NIL NIL '(NORAISE]              [QP.SETUP.HELP.DIRECTORY (CAR (TTYIN                       "Enter directory for help system files XQPM.FILETITLES and XQPM.INDEX files:  "                                                    NIL NIL '(NORAISE]              [SMASHATOMS? (AND (NOT QP.USE.SLOW.EMULATOR)                                (EQ 'Y (ASKUSER NIL NIL "Smash atoms? "]              (ATOM.SMASHER.ANTIDOTE.FILE (if SMASHATOMS?                                              then [CAR (TTYIN                                    "Enter full PATH and NAME of file to hold atom-smasher antidote: "                                                                NIL NIL '(NORAISE]                                            else 'NOBIND))              [QP.TERMINALFONTDIRECTORIES (TTYIN "Enter name(s) of font directory(ies): " NIL NIL                                                 '(NORAISE]              (QP.LISPUSERSDIRECTORY (CAR (TTYIN                                                 "Enter name of directory to get TEDIT & TEXEC from: "                                                  NIL NIL '(NORAISE]       (P (SETTOPVAL 'OLDDISPLAYFONTDIRECTORIES (GETTOPVAL 'DISPLAYFONTDIRECTORIES))          (SETTOPVAL 'DISPLAYFONTDIRECTORIES QP.TERMINALFONTDIRECTORIES))       (FILES (FROM VALUEOF QP.LISPUSERSDIRECTORY)              %,@ QP.LISP.LIBRARY.FILES)       (FILES (FROM VALUEOF QP.DEFAULT.LISP.OBJECT.HOST/DIR)              %,@              (for FL in (APPEND QP.XEROX.LISP.EXTRAS QP.XEROX.LISP.FILES QP.RELEASE.LISP.EXTRAS                                 QP.RELEASE.LISP.FILES) collect (FILENAMEFIELD FL 'NAME))              #:ERRORTAB)       [P (SETTOPVAL 'DISPLAYFONTDIRECTORIES (GETTOPVAL 'OLDDISPLAYFONTDIRECTORIES]       (P (QP.INITIALIZE.PROLOG)          [RESETLST [RESETSAVE (/CNDIR QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)                           `(/CNDIR ,(DIRECTORYNAME T T]                 %,@                 (for DNG in DNGLIST collect `(QP.RECONSULT (QUOTE %, DNG]          (if QP.USE.SLOW.EMULATOR              then (FILESLOAD (FROM VALUEOF QP.DEFAULT.LISP.OBJECT.HOST/DIR)                          %,@                          (for FL in (APPEND QP.DEVELOPMENT.LISP.FILES QP.DEVELOPMENT.LISP.LOAD.AFTER                                            ) collect (FILENAMEFIELD FL 'NAME))                          SLOWPROLOG)                   (PROLOG.INIT.MEMORY)                   (for I from 0 to 255 do (SETA PROLOG.ENABLE.PUFN.TABLE I 0))                   (SETQ QP.stop T)                   (PROMPTPRINT                           "Using slow emulator, with microcode turned off.  You're ready to go.")            else (FILESLOAD (FROM VALUEOF QP.DEFAULT.LISP.OBJECT.HOST/DIR)                        FASTPROLOG))          (XQPM.SETUP QP.SETUP.HELP.DIRECTORY)          (if SMASHATOMS?              then (QP.SMASH.ATOMS ATOM.SMASHER.ANTIDOTE.FILE                          [QUOTE %, (APPEND (for FL in QP.RELEASE.LISP.FILES collect                                                 (FILENAMEFIELD FL 'NAME))                                           (LIST 'OPCODES '#:PUTIL '#:SECURITY]                          '(ATOM.SMASHER.ANTIDOTE.FILE OLDDISPLAYFONTDIRECTORIES PROLOG.PUFN.TABLE                                   ATOM.SMASHER.ANTIDOTE.FILE QP.DEFAULT.LISP.OBJECT.HOST/DIR                                   QP.DEFAULT.PROLOG.OBJECT.HOST/DIR QP.LISPUSERSDIRECTORY                                   QP.SETUP.HELP.DIRECTORY QP.TERMINALFONTDIRECTORIES                                   QP.USE.SLOW.EMULATOR SMASHATOMS? \GCSCANPROLOG QP.PROLOG))                   (for FL in [QUOTE %, (APPEND (for FL in (APPEND QP.RELEASE.LISP.FILES                                                                   QP.XEROX.LISP.FILES)                                                     collect                                                     (FILENAMEFIELD FL 'NAME))                                               (LIST '#:ERRORTAB 'FASTPROLOG 'PROLOGBOOT]                      do (SMASHFILECOMS FL)                         (DREMOVE FL FILELST)                         (REMPROP FL 'FILEDATES)                         (REMPROP FL 'FILE)                         (REMPROP FL 'COPYRIGHT]    (ADDFILE 'PROLOGBOOT)    (MAKEFILE 'PROLOGBOOT '(NEW C ST))    'PROLOGBOOT])(QP.MODULE  [LAMBDA (NEWMODULE)                                        (* pds%: "16-Jan-86 18:07")                    (* * make NEWMODULE be the current module)    (QP.ABOLISH 'current_module 1 'si)    (EVAL `(ASSEMBLE.CLAUSE (current_module                             1 si)                  5                  (get.Ai.constant 1 %, NEWMODULE)                  (proceed])(QP.REMAKE  [LAMBDA (FILES)                                            (* pds%: " 9-May-86 15:40")    (QP.LOAD.SOURCES FILES QP.DEFAULT.LISP.SOURCE.HOST/DIR)    (QP.MAKE FILES QP.DEFAULT.LISP.OBJECT.HOST/DIR])(QP.UPDATE.ALL  [LAMBDA NIL                                                (* pds%: " 9-May-86 10:58")                    (* * Make sure that all the files in QP.DEFAULT.LISP.OBJECT.HOST/DIR and           QP.DEFAULT.PROLOG.OBJECT.HOST/DIR are the latest available.          Returns non-NIL iff it succeeds.)    (PRINTOUT T "Checking that all files are up-to-date...")    (LET     ((PROBLEMS (QP.CHECK.RELEASE)))     (PRINTOUT T "done." T)     (if PROBLEMS         then (PRINTOUT T "Not all files are up-to-date:" T)              (for PROB in PROBLEMS                 do (PRINTOUT T (CAR PROB)                           ":  "                           (SELECTQ (FILENAMEFIELD (CAR PROB)                                           'EXTENSION)                               ((LSP NIL)                                     (if [NOT (AND (FIXP (CADR PROB))                                                  (FIXP (CADDR PROB))                                                  (FIXP (CADDDR PROB]                                        then "couldn't check all files"                                      elseif (IGREATERP (CADR PROB)                                                    (CADDR PROB))                                        then "SCCS file is newer than file package version"                                      elseif (NOT (EQP (CADDR PROB)                                                       (CADDDR PROB)))                                        then "File package and compiled version don't agree"))                               ((PL pl)                                     (if [NOT (AND (FIXP (CADR PROB))                                                  (FIXP (CADDR PROB]                                        then "couldn't check all files"                                      elseif (IGREATERP (CADR PROB)                                                    (CADDR PROB))                                        then "SCCS source file is newer than .DNG file"))                               (SHOULDNT))                           T))              (PRINTOUT T T)              (if (EQ 'Y (ASKUSER T NIL "Try to recompile the necessary Lisp and Prolog files? "))                  then (LET [(PAIR (bind (LSP _ NIL)                                         (PROLOG _ NIL) for PROB in PROBLEMS                                      do [if (FMEMB (FILENAMEFIELD (CAR PROB)                                                           'EXTENSION)                                                    '(pl PL))                                             then (SETQ PROLOG (NCONC1 PROLOG (CAR PROB)))                                           else (SETQ LSP (NCONC1 LSP (CAR PROB]                                      finally (RETURN (CONS LSP PROLOG]                            (QP.REMAKE (CAR PAIR))                            (if (CDR PAIR)                                then [UNIX (CONCAT (UNIX.DIRECTORYNAME                                                           QP.DEFAULT.PROLOG.SOURCE.HOST/DIR)                                                  "/qc2")                                           (CONS "assert(target(dng))."                                                 (for FL in (CDR PAIR)                                                    collect (CONCAT "cook(" (FILENAMEFIELD                                                                             FL                                                                             'NAME)                                                                   ").")))                                           QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                                           (ITIMES 60 (LENGTH (CDR PAIR]                                     (QP.COPY.DNGS (for FL in (CDR PAIR)                                                      collect (PACKFILENAME 'EXTENSION 'dng                                                                     'BODY FL))                                            QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                                             QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)))                       (PRINTOUT T T "Finished making files, trying again..." T)                       (QP.UPDATE.ALL)                else NIL)       else (PRINTOUT T T T "Everything checks out." T)            T]))(* ;; "This stuff is to make it possible to get comments when loading .LSP files.  Note that QP.NEWADDTOFILE is a redefinition of a function in UTIL.LSP.  This version must be used in order to get comments loaded properly.  Note also that UTIL.LSP supplies its own read macro for ;, which must not be used.")(RPAQ? TEXTFILERDTBL (COPYREADTABLE T))(RPAQ? KEEPCOMMENTSFILERDTBL (COPYREADTABLE T))(* ;;; "Set up read macro chars for TEXTFILERDTBL")(SETSYNTAX '; '(SPLICE FIRST ESCQUOTE NONIMMEDIATE KILLLINE) TEXTFILERDTBL)(SETSYNTAX '%' '(MACRO FIRST READQUOTE) TEXTFILERDTBL)(SETSYNTAX '%` '(MACRO FIRST READBQUOTE) TEXTFILERDTBL)(SETSYNTAX '%, '(MACRO FIRST READBQUOTECOMMA) TEXTFILERDTBL)(SETSYNTAX '%# 'OTHER TEXTFILERDTBL)(* ;;; "Set up read macro chars for KEEPCOMMENTSFILERDTBL")(SETSYNTAX '; '(MACRO FIRST ESCQUOTE NONIMMEDIATE READ.;.COMMENT) KEEPCOMMENTSFILERDTBL)(SETSYNTAX '%' '(MACRO FIRST READQUOTE) KEEPCOMMENTSFILERDTBL)(SETSYNTAX '%` '(MACRO FIRST READBQUOTE) KEEPCOMMENTSFILERDTBL)(SETSYNTAX '%, '(MACRO FIRST READBQUOTECOMMA) KEEPCOMMENTSFILERDTBL)(SETSYNTAX '%# 'OTHER KEEPCOMMENTSFILERDTBL)(DEFINEQ(KILLLINE  [LAMBDA (F R)    (PROG (C)      L   (SETQ C (READC F R))          (COND             ((NEQ C '%)              (GO L)))          (RETURN NIL])(QP.KEEP.COMMENTS.ADDTOFILE  [LAMBDA (NAME TYPE)                                        (* pds%: " 9-May-86 12:26")    (if (AND (BOUNDP 'QP.SOURCE.FILE)             QP.SOURCE.FILE)        then (if [EQ TYPE (CAAR (LAST (GETTOPVAL (FILECOMS QP.SOURCE.FILE]                 then (NCONC1 [CAR (LAST (EVAL (FILECOMS QP.SOURCE.FILE]                             NAME)               else (SETTOPVAL (FILECOMS QP.SOURCE.FILE)                           (NCONC1 (GETTOPVAL (FILECOMS QP.SOURCE.FILE))                                  (MAKENEWCOM NAME TYPE])(READ.;.COMMENT  [LAMBDA (STREAM TABLE)                                     (* ; "Edited  5-Jun-87 17:04 by FS")(* ;;; "Used for the comment-preserving semicolon readmacro.  When called, you have just read a semicolon which starts a comment.  Reads in the comment and returns it as a * comment.  Tries to merge together sequences of semicolon comment lines, and tries to ignore semicolons that are used to make things pretty.")    (RESETLST (RESETSAVE (READMACROS NIL TABLE)                     (LIST (FUNCTION READMACROS)                           T TABLE))           (LET ((SEMICOUNT (EAT-AND-COUNT-SEMICOLONS STREAM)))                `                                            (* (\, (SELECTQ SEMICOUNT                                                             (1 (QUOTE ;)) (2 (QUOTE ;;))                                                             (3 (QUOTE ;;;)) (QUOTE ;;;)))                                                             (\, (APPLY (QUOTE CONCAT)                                                             (CDR (join (EAT-WHITE-SPACE STREAM)                                                             (LIST " " (APPLY (QUOTE CONCAT)                                                             (bind CHAR while (AND                                                             (NEQ (SETQ CHAR (READC STREAM))                                                             (CONSTANT (CHARACTER                                                             (CHARCODE EOL)))) (NOT                                                             (EOFP STREAM))) collect CHAR)))                                                              repeatwhile (PROGN (EAT-WHITE-SPACE                                                              STREAM) (if (EQ (PEEKCCODE STREAM)                                                             (CHARCODE ;)) then (                                                             EAT-AND-COUNT-SEMICOLONS STREAM) T)))))))                ]))(* ; "Following are functions for building releases of XQP.")(DEFINEQ(QP.CHECK.RELEASE  [LAMBDA (SCCSMAJORVERSION)                                 (* pds%: "19-May-86 16:10")                    (* * Checks to make sure that the versions in the QP.DEFAULT.*.OBJECT.HOST/DIR           directories are the more recent than the most recent version of the source of           this file checked into SCCS. SCCSMAJORVERSION is the major SCCS version number           you are interested in for both Lisp and Prolog.          This allows you to increment the major SCCS version and supply the old number           here, thereby ignoring ongoing development.          If SCCSMAJORVERSION is NIL, takes the latest versions of all files.)                    (* * Note%: this is an incomplete implementation, since SCCSMAJORVERSION is           ignored)                    (* * Note%: this is also incomplete because it doesn't verify the correctness           of the generated files.)                    (* * Note%: another serious flaw of this function is that it doesn't verify           that the files in the SCCS parent directory correspond to the latest version           checked into SCCS.)                    (* * Note%: Still another fatal flaw in this function is that it doesn't           indicate when a file needs to be recompiled because a macro or defining form on           ANOTHER file has changed.)                    (* * Let's face it%: this function is not to be trusted.)    (DECLARE (GLOBALVARS COMPILE.EXT))    (LET* [(LISPFILES (LDIFFERENCE (APPEND QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS                                           QP.NON.SYSOUT.RELEASE.FILES)                             QP.GENERATED.LISP.FILES))           (PROLOGFILES (LDIFFERENCE DNGLIST QP.GENERATED.PROLOG.FILES))           [LISPTEXTFILES (for FL in LISPFILES collect FL when (EQ (FILENAMEFIELD FL 'EXTENSION)                                                                   'LSP]           [LISPFILEPKGFILES (for FL in LISPFILES collect FL when (NULL (FILENAMEFIELD FL                                                                               'EXTENSION]           [LISPTEXTBASENAMES (for FL in LISPTEXTFILES collect (FILENAMEFIELD FL 'NAME]           [LISPFILEPKGBASENAMES (for FL in LISPFILEPKGFILES collect (FILENAMEFIELD FL 'NAME]           (PROLOGSOURCENAMES (for DNG in PROLOGFILES collect (PACKFILENAME 'EXTENSION 'pl                                                                     'BODY DNG)))           (TEXTSCCS (QP.SCCS.DATES LISPTEXTFILES QP.DEFAULT.LISP.SOURCE.HOST/DIR SCCSMAJORVERSION))           [TEXTSOURCE (for FL in LISPTEXTBASENAMES collect (QP.FILE.FILEDATES (PACKFILENAME                                                                                'BODY                                                                       QP.DEFAULT.LISP.OBJECT.HOST/DIR                                                                                'NAME FL 'EXTENSION                                                                                 NIL]           [TEXTCOMPILED (for FL in LISPTEXTBASENAMES                            collect (QP.FILE.FILEDATES (PACKFILENAME 'BODY                                                               QP.DEFAULT.LISP.OBJECT.HOST/DIR                                                              'NAME FL 'EXTENSION                                                              (if (MEMBER FL QP.NO.DCOM.FILES)                                                                  then NIL                                                                else COMPILE.EXT))                                           (NOT (MEMBER FL QP.NO.DCOM.FILES]           (FILEPKGSCCS (QP.SCCS.FILEDATES LISPFILEPKGFILES QP.DEFAULT.LISP.SOURCE.HOST/DIR                                SCCSMAJORVERSION))           [FILEPKGSOURCE (for FL in LISPFILEPKGBASENAMES collect (QP.FILE.FILEDATES                                                                   (PACKFILENAME 'BODY                                                                       QP.DEFAULT.LISP.OBJECT.HOST/DIR                                                                          'NAME FL 'EXTENSION NIL]           [FILEPKGCOMPILED (for FL in LISPFILEPKGBASENAMES                               collect (QP.FILE.FILEDATES (PACKFILENAME 'BODY                                                                  QP.DEFAULT.LISP.OBJECT.HOST/DIR                                                                 'NAME FL 'EXTENSION                                                                 (if (MEMBER FL QP.NO.DCOM.FILES)                                                                     then NIL                                                                   else COMPILE.EXT))                                              (NOT (MEMBER FL QP.NO.DCOM.FILES]           (PROLOGSCCS (QP.SCCS.DATES PROLOGSOURCENAMES QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                               SCCSMAJORVERSION))           (PROLOGCOMPILED (for FL in PROLOGFILES collect (GETFILEINFO (PACKFILENAME 'BODY                                                                     QP.DEFAULT.PROLOG.OBJECT.HOST/DIR                                                                              'BODY FL)                                                                 'IWRITEDATE]          (APPEND (for FL in LISPTEXTFILES as SCCS in TEXTSCCS as SRC in TEXTSOURCE as COMPILED                     in TEXTCOMPILED unless (AND (FIXP SCCS)                                                 (FIXP SRC)                                                 (FIXP COMPILED)                                                 (LEQ SCCS SRC)                                                 (EQP SRC COMPILED))                     collect (LIST FL SCCS SRC COMPILED))                 (for FL in LISPFILEPKGFILES as SCCS in FILEPKGSCCS as SRC in FILEPKGSOURCE                    as COMPILED in FILEPKGCOMPILED unless (AND (FIXP SCCS)                                                               (FIXP SRC)                                                               (FIXP COMPILED)                                                               (LEQ SCCS SRC)                                                               (EQP SRC COMPILED))                    collect (LIST FL SCCS SRC COMPILED))                 (for FL in PROLOGSOURCENAMES as SCCS in PROLOGSCCS as COMPILED in PROLOGCOMPILED                    unless (AND (FIXP SCCS)                                (FIXP COMPILED)                                (ILESSP SCCS COMPILED)) collect (LIST FL SCCS COMPILED])(QP.RELEASE  [LAMBDA (SOURCEINTO DCOMINTO DNGINTO)                      (* pds%: "19-May-86 16:06")                    (* * Make a XQP release. Sources, i.e. file package sources, go into           SOURCEINTO, which should be host and directory;          DCOMs go into DCOMINTO, and DNGs into DNGINTO.          The default for all three is {FLOPPY}. When writing to floppy, the system will           pause to allow you to swap floppies.)    (if (NULL DCOMINTO)        then (SETQ DCOMINTO '{FLOPPY}))    (if (NULL SOURCEINTO)        then (SETQ SOURCEINTO '{FLOPPY}))    (if (NULL DNGINTO)        then (SETQ DNGINTO '{FLOPPY}))                    (* * First check to make sure it's okay to make a release now.)    (PRINTOUT T "Checking that all files are up-to-date...")    (LET     ((PROBLEMS (QP.CHECK.RELEASE)))     (PRINTOUT T "done." T)     (if PROBLEMS         then (PRINTOUT T "Not all files are up-to-date:" T)              (for PROB in PROBLEMS                 do (PRINTOUT T (CAR PROB)                           ":  "                           (SELECTQ (FILENAMEFIELD (CAR PROB)                                           'EXTENSION)                               ((LSP NIL)                                     (if [NOT (AND (FIXP (CADR PROB))                                                  (FIXP (CADDR PROB))                                                  (FIXP (CADDDR PROB]                                        then "couldn't check all files"                                      elseif (IGREATERP (CADR PROB)                                                    (CADDR PROB))                                        then "SCCS file is newer than file package version"                                      elseif (NOT (EQP (CADDR PROB)                                                       (CADDDR PROB)))                                        then "File package and compiled version don't agree"))                               ((PL pl)                                     (if [NOT (AND (FIXP (CADR PROB))                                                  (FIXP (CADDR PROB]                                        then "couldn't check all files"                                      elseif (IGREATERP (CADR PROB)                                                    (CADDR PROB))                                        then "SCCS source file is newer than .DNG file"))                               (SHOULDNT))                           T))              (PRINTOUT T T)              (if (EQ 'Y (ASKUSER T NIL "Try to recompile the necessary Lisp and Prolog files? "))                  then (LET [(PAIR (bind (LSP _ NIL)                                         (PROLOG _ NIL) for PROB in PROBLEMS                                      do [if (FMEMB (FILENAMEFIELD (CAR PROB)                                                           'EXTENSION)                                                    '(pl PL))                                             then (SETQ PROLOG (NCONC1 PROLOG (CAR PROB)))                                           else (SETQ LSP (NCONC1 LSP (CAR PROB]                                      finally (RETURN (CONS LSP PROLOG]                            (QP.REMAKE (CAR PAIR))                            (if (CDR PAIR)                                then [UNIX (CONCAT (UNIX.DIRECTORYNAME                                                           QP.DEFAULT.PROLOG.SOURCE.HOST/DIR)                                                  "/qc2")                                           (CONS "assert(target(dng))."                                                 (for FL in (CDR PAIR)                                                    collect (CONCAT "cook(" (FILENAMEFIELD                                                                             FL                                                                             'NAME)                                                                   ").")))                                           QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                                           (ITIMES 60 (LENGTH (CDR PAIR]                                     (QP.COPY.DNGS (for FL in (CDR PAIR)                                                      collect (PACKFILENAME 'EXTENSION 'dng                                                                     'BODY FL))                                            QP.DEFAULT.PROLOG.SOURCE.HOST/DIR                                             QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)))                       (PRINTOUT T T "Finished making files, ready to try again." T)                       (RINGBELLS)                       (if (MOUSECONFIRM "Try making release again?")                           then (QP.RELEASE SOURCEINTO DCOMINTO DNGINTO))                else (ERROR "Can't construct release now"))       else (PRINTOUT T T T "Everything checks out." T "Making release...." T T)            (LET* ([FILES (for FL in (APPEND QP.RELEASE.LISP.FILES QP.RELEASE.LISP.EXTRAS                                             QP.GENERATED.LISP.FILES QP.NON.SYSOUT.RELEASE.FILES                                             QP.XEROX.LISP.FILES QP.XEROX.LISP.EXTRAS                                             QP.XEROX.NON.SYSOUT.RELEASE.FILES)                             collect (FILENAMEFIELD FL 'NAME]                   (UNIQUEFILES (INTERSECTION FILES FILES))                   (SOURCES (LDIFFERENCE UNIQUEFILES QP.NO.SOURCE.FILES)))                  (if (EQ SOURCEINTO '{FLOPPY})                      then (RINGBELLS)                           (MOUSECONFIRM                                   "Insert floppy for Lisp sources; hit mouse button when ready"))                  (bind (LEN _ (LENGTH SOURCES)) for FL in SOURCES as I from 1                     do (PRINTOUT T "Copying " FL " (" I "/" LEN ")...")                        (COPYFILE (PACKFILENAME 'NAME FL 'BODY QP.DEFAULT.LISP.OBJECT.HOST/DIR)                               (PACKFILENAME 'NAME FL 'BODY SOURCEINTO))                        (PRINTOUT T "done" T))                  (if (EQ DCOMINTO '{FLOPPY})                      then (RINGBELLS)                           (MOUSECONFIRM "Insert floppy for Lisp .DCOMs; hit mouse button when ready"                                  ))                  (bind (LEN _ (LENGTH UNIQUEFILES)) for FL in UNIQUEFILES as I from 1                     do (LET [(EXTENSION (if (MEMB FL QP.NO.DCOM.FILES)                                             then NIL                                           else 'DCOM]                             (PRINTOUT T "Copying " FL (if EXTENSION                                                           then ".DCOM ("                                                         else " (")                                    I "/" LEN ")...")                             (COPYFILE (PACKFILENAME 'NAME FL 'EXTENSION EXTENSION 'BODY                                               QP.DEFAULT.LISP.OBJECT.HOST/DIR)                                    (PACKFILENAME 'NAME FL 'EXTENSION EXTENSION 'BODY DCOMINTO)))                        (PRINTOUT T "done" T)))            (if (EQ DNGINTO '{FLOPPY})                then (RINGBELLS)                     (MOUSECONFIRM "Insert floppy for Prolog .DNGs; hit mouse button when ready"))            (bind (LEN _ (LENGTH DNGLIST)) for FL in DNGLIST as I from 1               do (PRINTOUT T "Copying " FL " (" I "/" LEN ")...")                  (COPYFILE (PACKFILENAME 'BODY FL 'BODY QP.DEFAULT.PROLOG.OBJECT.HOST/DIR)                         (PACKFILENAME 'BODY FL 'BODY DNGINTO))                  (PRINTOUT T "done" T])(QP.FILE.FILEDATES  [LAMBDA (FILE COMPILEDFLG)                                 (* pds%: " 9-May-86 16:41")                    (* * Return the FILECREATED date from FILE.          This should be CADR of the first SEXPR on FILE.)    (LET* [(STREAM (OPENSTREAM FILE 'INPUT))           (EXPR (if COMPILEDFLG                     then (READ STREAM FILERDTBL)                          (READ STREAM FILERDTBL)                   else (READ STREAM FILERDTBL]          (CLOSEF? STREAM)          (if (EQ (CAR EXPR)                  'FILECREATED)              then (IDATE (CADR EXPR))            else (ERROR "Not a file package file" FILE])(QP.SCCS.DATES  [LAMBDA (FILES SCCSDIR MAJORVERSION)                       (* pds%: " 6-May-86 12:28")                    (* * Returns a list of IDATES, one per file on FILES, of the latest check-in to           SCCS before version MAJORVERSION for that file.)                    (* * Note%: MAJORVERSION is ignored for now, since it is hard to implement it           properly.)    (SETQ MAJORVERSION NIL)    (LET ((RESULT (UNIX (LIST (CONCAT "foreach fl " FILES)                              (CONCAT "echo -n %"$fl %";(egrep %"^d D " (OR MAJORVERSION "")                                     "%" SCCS/s.$fl | head -1 | colrm 1 5)")                              "end")                        NIL SCCSDIR 600 T)))         (bind (PTR _ RESULT) for FILE in FILES eachtime (if (NULL (SETQ PTR (MEMB FILE PTR)))                                                             then (SHOULDNT                                                                          "Error in SCCS processing")                                                           else (pop PTR))            collect (if (FLOATP (CAR PTR))                        then (LET ((DATE (CADR PTR))                                   (TIME (CADDR PTR)))                                  (IDATE (CONCAT (SUBSTRING DATE 4 5)                                                " "                                                (SUBSTRING DATE 7 8)                                                " "                                                (SUBSTRING DATE 1 2)                                                " " TIME)))                      else NIL])(QP.SCCS.FILEDATES  [LAMBDA (FILES SCCSDIR MAJORVERSION)                       (* pds%: " 6-May-86 15:03")                    (* * Returns a list of IDATES, one per file on FILES, of the latest FILECREATED           date checked in to SCCS before version MAJORVERSION for that file.)                    (* * Note%: MAJORVERSION is ignored for now, since it is hard to implement it           properly.)    (SETQ MAJORVERSION NIL)    (LET ((RESULT (UNIX (LIST (CONCAT "foreach fl " FILES)                                                 "echo -n %"$fl %";(egrep %"^\(FILECREATED %" SCCS/s.$fl | tail -1 | colrm 1 15)"                               "end")                        NIL SCCSDIR 600 T)))         (bind (PTR _ RESULT) for FILE in FILES eachtime (if (NULL (SETQ PTR (MEMB FILE PTR)))                                                             then (SHOULDNT                                                                          "Error in SCCS processing"))                                                      (pop PTR)            collect (if PTR                        then (IDATE (CAR PTR]))(PRINTOUT T T "Once you are satisfied with the value of QP.DEFAULT.PROLOG.SOURCE.HOST/DIR, you should do (QP.LOAD.DNGLIST)."        T T)(PUTPROPS NEWMAKEFILE COPYRIGHT ("Xerox Corporation" 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (6046 10022 (DEFAULT.HOSTDIR 6056 . 6408) (KEEP.COMMENTS.ADDTOFILE 6410 . 6986) (QP.LISP.FILES 6988 . 7231) (QP.LOAD.SOURCES 7233 . 10020)) (14140 51145 (EAT-AND-COUNT-SEMICOLONS 14150 . 14597) (EAT-WHITE-SPACE 14599 . 14971) (LOADWELL 14973 . 19015) (QP.COPY.DNGS 19017 . 22639) (QP.COPY.NO.SOURCE.FILES 22641 . 23919) (QP.GENERATE.FILES 23921 . 25543) (QP.GET.FILE.DATE 25545 . 26242) (QP.LIST.ELEMENT.INDEX 26244 . 26562) (QP.LOAD.COMPILED 26564 . 29300) (QP.LOAD.DNGLIST 29302 . 29503) (QP.LOAD.DNGS 29505 . 31714) (QP.LOAD.PREREQUISITES 31716 . 32207) (QP.LOAD.SOURCES 32209 . 34996) (QP.LOAD.SYSTEM 34998 . 35547) (QP.MAKE 35549 . 40346) (QP.MAKE.PROLOGBOOT 40348 . 45962) (QP.MODULE 45964 . 46362) (QP.REMAKE 46364 . 46596) (QP.UPDATE.ALL 46598 . 51143)) (52302 55155 (KILLLINE 52312 . 52475) (QP.KEEP.COMMENTS.ADDTOFILE 52477 . 53063) (READ.;.COMMENT 53065 . 55153)) (55226 73901 (QP.CHECK.RELEASE 55236 . 62261) (QP.RELEASE 62263 . 70308) (QP.FILE.FILEDATES 70310 . 70996) (QP.SCCS.DATES 70998 . 72704) (QP.SCCS.FILEDATES 72706 . 73899)))))STOP