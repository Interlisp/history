%   Module : lineio%   Author : Richard A. O'Keefe%   Updated: 3/26/87%   Purpose: read and write lines as lists of character codes%   Adapted from shared code written by the same author; all changes%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved.:- module(lineio, [	get_line/1,	get_line/2,	get_line/3,		% for library(prompt)	put_chars/1,	put_line/1,	skip_line/0   ]).:- use_module(library(ctypes), [	is_endfile/1,	is_endline/1   ]).:- mode	get_line(?),	get_line(?, ?),	get_line(+, -, ?),	put_chars(+),	put_line(+).sccs_id('"@(#)87/03/26 lineio.pl	98.1"').%   get_line(Chars)%   reads a line from the current input stream, and returns the characters in%   the list Chars.  It does NOT return the line terminating character, so it%   is useful for portable programming.  If the terminator was the end of the%   file, it simply fails.  In the case later calls will abort.get_line(Chars) :-	get0(Ch),	get_line(Ch, Line, Terminator),	is_endfile(EofCh),	Terminator \== EofCh,	Chars = Line.%   get_line(Chars, Terminator)%   reads a line from the current input stream, and returns the characters in%   the list Chars, and the line terminating character in Terminator.  If the%   terminator was end of file, it just returns it like always.  When you use%   this routine, the last line will often be ignored if not properly ended.get_line(Chars, Terminator) :-	get0(Ch),	get_line(Ch, Line, Terminator),	Chars = Line.get_line(Ch, [], Terminator) :-	is_endline(Ch),	!,	Terminator = Ch.get_line(Ch, [Ch|Line], Terminator) :-	get0(Next),	get_line(Next, Line, Terminator).put_line([]) :- !,      nl.put_line([Ch|Line]) :-      put(Ch),      put_line(Line).put_chars([]).put_chars([Ch|Chars]) :-	put(Ch),	put_chars(Chars).%   skip_line%   skips to the end of the current line.  It is happy with 26 as the end of%   the line, which get_line(_) would not be, but get_line(_,_) would.skip_line :-	repeat,	    get0(Ch),	    is_endline(Ch),	!.