(DEFINE-FILE-INFO PACKAGE "IL" READTABLE "INTERLISP" BASE 10)(FILECREATED "11-Jul-88 21:00:47" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>PLAYERS>TRAVELER.;5| 19821        changes to%:  (METHODS Traveler.TakeTurn Traveler.GoToStoppingPlace Traveler.FindStoppingPlace                            Traveler.BuyGas)                    (VARS TRAVELERCOMS)                    (CLASSES Traveler)      previous date%: "15-Sep-87 12:52:31" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>PLAYERS>TRAVELER.;2|)(* "Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT TRAVELERCOMS)(RPAQQ TRAVELERCOMS ((DECLARE%: DONTCOPY (PROP MAKEFILE-ENVIRONMENT TRAVELER))                     (* Copyright (c)                        1983 by Xerox Corporation.)                     (* * File for a Traveler. -- A very simple automatic player for TRUCKIN.)                     (* TRUCKIN is a mini-expert system for teaching knowledge representation                         techniques in the Loops programming system. Truckin provides a simple                         simulation environment for novice Loops users in which small bodies of                         knowledge can be created and tested interactively. Knowledge in Truckin is in                         the form of rules for controlling a game piece to "maximize profit.")                     (CLASSES * TRAVELERCLASSES)                     (METHODS Traveler.BuyGas Traveler.FindStoppingPlace Traveler.GoToStoppingPlace                             Traveler.TakeTurn)                     (FNS)                     (INSTANCES)))(DECLARE%: DONTCOPY (PUTPROPS TRAVELER MAKEFILE-ENVIRONMENT (:PACKAGE "IL" :READTABLE "INTERLISP" :BASE 10)))(* Copyright (c) 1983 by Xerox Corporation.)(* * File for a Traveler. -- A very simple automatic player for TRUCKIN.)(* TRUCKIN is a mini-expert system for teaching knowledge representation techniques in the Loops programming system. Truckin provides a simple simulation environment for novice Loops users in which small bodies of knowledge can be created and tested interactively. Knowledge in Truckin is in the form of rules for controlling a game piece to "maximize profit.")(RPAQQ TRAVELERCLASSES (Traveler))(DEFCLASSES Traveler)(DEFCLASS Traveler   (MetaClass PlayerMeta doc "A Traveler is a player who tours back and forth between UnionHall and AlicesRestaurant, buying gasoline and getting weighed as needed. Example of a very simple automated playerthat does not compete very knowledgeably to win."           Edited%:                                           (* mjs%: "18-FEB-83 10:53"))   (Supers Player)   (InstanceVariables (destination NIL doc                              "Current destination. Either AlicesRestaurant or the UnionHall.")          (direction NIL doc "Forward or Backward direction of travel on the highway.")          (stoppingPlace NIL doc "Place to stop enroute to destination.")))(\BatchMethodDefs)(METH Traveler  BuyGas NIL      "Method implementing a RuleSet" (method Traveler.BuyGas RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 2)) methodClass RuleSet UID (LKX0.%:F5.o28.E6A . 2))            (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 10)))            (name #,($A Traveler.BuyGas NIL RememberName))            (compiledRules Traveler.BuyGas)            (workSpace Traveler)            (tempVars (spaceInTank fuelAffordable fuelAvailable qty))            (taskVars NIL)            (debugVars NIL)            (numRules 2)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions (LC))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH Traveler  FindStoppingPlace NIL      "Method implementing a RuleSet" (method Traveler.FindStoppingPlace RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3)) methodClass RuleSet UID (LKX0.%:F5.o28.E6A . 3))            (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 11)))            (name #,($A Traveler.FindStoppingPlace NIL RememberName))            (compiledRules Traveler.FindStoppingPlace)            (workSpace Traveler)            (tempVars (wStation gasStation))            (taskVars NIL)            (debugVars NIL)            (numRules 5)            (controlStructure DO1)            (whileCondition NIL)            (compilerOptions (T))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH Traveler  GoToStoppingPlace NIL      "Method implementing a RuleSet" (method Traveler.GoToStoppingPlace RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 9)) methodClass RuleSet UID (LKX0.%:F5.o28.E6A . 9))            (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 12)))            (name #,($A Traveler.GoToStoppingPlace NIL RememberName))            (compiledRules Traveler.GoToStoppingPlace)            (workSpace Traveler)            (tempVars NIL)            (taskVars NIL)            (debugVars NIL)            (numRules 2)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions NIL)            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH Traveler  TakeTurn NIL      "Method implementing a RuleSet" (method Traveler.TakeTurn RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1)) methodClass RuleSet UID (LKX0.%:F5.o28.E6A . 1))            (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 13)))            (name #,($A Traveler.TakeTurn NIL RememberName))            (compiledRules Traveler.TakeTurn)            (workSpace Traveler)            (tempVars NIL)            (taskVars NIL)            (debugVars NIL)            (numRules 4)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions NIL)            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(DEFINST RuleSetNode ((LKX0.%:F5.o28.E6A . 10))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 2)) Source #,($& RuleSetSource (LKX0.%:F5.o28.E6A . 14))))(DEFINST RuleSetNode ((LKX0.%:F5.o28.E6A . 11))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3)) Source #,($& RuleSetSource (LKX0.%:F5.o28.E6A . 15))))(DEFINST RuleSetNode ((LKX0.%:F5.o28.E6A . 12))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 9)) Source #,($& RuleSetSource (LKX0.%:F5.o28.E6A . 16))))(DEFINST RuleSetNode ((LKX0.%:F5.o28.E6A . 13))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1)) Source #,($& RuleSetSource (LKX0.%:F5.o28.E6A . 17))))(DEFINST RuleSetSource ((LKX0.%:F5.o28.E6A . 14))         (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 10)))         (created "11-Jul-88 19:32:21")         (creator "BANE")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleList (#,($& Rule (LKX0.%:F5.o28.E6A . 36)) #,($& Rule (LKX0.%:F5.o28.E6A . 37)))))(DEFINST RuleSetSource ((LKX0.%:F5.o28.E6A . 15))         (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 11)))         (created "11-Jul-88 19:32:30")         (creator "BANE")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleList (#,($& Rule (LKX0.%:F5.o28.E6A . 31)) #,($& Rule (LKX0.%:F5.o28.E6A . 32)) #,($& Rule (LKX0.%:F5.o28.E6A . 33)) #,($& Rule (LKX0.%:F5.o28.E6A . 34)) #,($& Rule (LKX0.%:F5.o28.E6A . 35)))))(DEFINST RuleSetSource ((LKX0.%:F5.o28.E6A . 16))         (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 12)))         (created "11-Jul-88 19:32:39")         (creator "BANE")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleList (#,($& Rule (LKX0.%:F5.o28.E6A . 38)) #,($& Rule (LKX0.%:F5.o28.E6A . 39)))))(DEFINST RuleSetSource ((LKX0.%:F5.o28.E6A . 17))         (perspectiveNode #,($& RuleSetNode (LKX0.%:F5.o28.E6A . 13)))         (created "11-Jul-88 19:32:09")         (creator "BANE")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleList (#,($& Rule (LKX0.%:F5.o28.E6A . 40)) #,($& Rule (LKX0.%:F5.o28.E6A . 41)) #,($& Rule (LKX0.%:F5.o28.E6A . 42)) #,($& Rule (LKX0.%:F5.o28.E6A . 43)))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 36))         (source "(* Buy gasoline as limited by various constraints.)     THEN spaceInTank_truck::MaxFuel-truck:fuel	          fuelAvailable_truck:location:qty          fuelAffordable_truck:cashBox/(PricePerUnit truck:location)          qty_(MIN spaceInTank fuelAffordable fuelAvailable);")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 2))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 37))         (source "(* Now appropriate quantity has been computed)    IF qty>0     THEN  (_ \PlayerInterface Buy self qty );")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 2))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 31))         (source "(* Return as a value the next place to stop enroute to destination.)IF truck:fuel=0 THEN stoppingPlace_(AnyRoadStop $UnionHall);")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 32))         (source "IF wStation_(NearestRoadStop (RoadStops $WeighStation .Range1 direction 'Room))   (Distance wStation)<(Distance destination) THEN stoppingPlace_wStation;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 33))         (source " IF gasStation_(FurthestRoadStop (RoadStops $GasStation .Range1 direction 'Room))  (Distance gasStation)<(Distance destination)THEN stoppingPlace_gasStation;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 34))         (source       "IF (Distance destination)<=.Range1 (RoomToParkP destination) THEN stoppingPlace_destination;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 35))         (source "-> stoppingPlace_(NthRoadStop maxMove direction NIL 'Room);")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 5)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 3))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 38))         (source "(* Ask to go to a stopping place returned by FindStoppingPlace)	-> .FindStoppingPlace (_ \PlayerInterface Move self stoppingPlace);")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 9))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 39))         (source " (* Check if real truck location is a gas station.  Don't     use stoppingPlace, since chosen it may not have been reached     because of cops or robbers)	IF (ISA truck:location $GasStation)	 THEN .BuyGas;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 9))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 40))         (source "(* Top Level RuleSet for Traveler.   Travel between UnionHall a randomly chosen AlicesRestaurant)	IF ~destination	 THEN destination_(AnyRoadStop $AlicesRestaurant)	     direction_'Forward;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 41))         (source "  	(* No destination if at start)	IF (_ truck:location InstOf $UnionHall)	 THEN destination_(AnyRoadStop $AlicesRestaurant)	     direction_'Forward;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 42))         (source "	(* Choose an Alices to go to.)	IF (_ truck:location InstOf $AlicesRestaurant)	 THEN destination_(AnyRoadStop $UnionHall)	     direction_'Backward;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1))))(DEFINST Rule ((LKX0.%:F5.o28.E6A . 43))         (source "	(* Set destination to UnionHall)	 THEN .GoToStoppingPlace;")         (edited " 8-Jul-88 20:54:55")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LKX0.%:F5.o28.E6A . 1))))(Method ((Traveler BuyGas) self) "Method implementing a RuleSet"   (PROG (^value spaceInTank fuelAffordable fuelAvailable qty)     ^firstRules         [SETQ ^value (PROGN [SETQ spaceInTank (DIFFERENCE (GetClassValue (GetValue self 'truck)                                                                  'MaxFuel)                                                      (GetValue (GetValue self 'truck)                                                             'fuel]                             (SETQ fuelAvailable (GetValue (GetValue (GetValue self 'truck)                                                                  'location)                                                        'qty))                             [SETQ fuelAffordable (QUOTIENT (GetValue (GetValue self 'truck)                                                                   'cashBox)                                                         (PricePerUnit (GetValue (GetValue                                                                                  self                                                                                  'truck)                                                                              'location]                             (SETQ qty (MIN spaceInTank fuelAffordable fuelAvailable]         [COND            ((GREATERP qty 0)             (SETQ ^value (_ PlayerInterface Buy self qty)]     QUIT     ^lastRules         (RETURN ^value)))(Method ((Traveler FindStoppingPlace) self) "Method implementing a RuleSet"   (PROG (^value wStation gasStation)     ^firstRules         [COND            [(EQ (GetValue (GetValue self 'truck)                        'fuel)                 0)             (SETQ ^value (PROGN (PROGN                      (* Rule Tracing Code)                                        (TraceRHS 'Traveler.FindStoppingPlace NIL 1)                                        (_ (GetObjFromUID '(LKX0.%:F5.o28.E6A . 31))                                           Print))                                 (PutValue self 'stoppingPlace (AnyRoadStop ($ UnionHall]            [[AND [SETQ wStation (NearestRoadStop (RoadStops ($ WeighStation)                                                         (_ self Range1)                                                         (GetValue self 'direction)                                                         'Room]                  (LESSP (Distance wStation)                         (Distance (GetValue self 'destination]             (SETQ ^value (PROGN (PROGN                      (* Rule Tracing Code)                                        (TraceRHS 'Traveler.FindStoppingPlace NIL 2)                                        (_ (GetObjFromUID '(LKX0.%:F5.o28.E6A . 32))                                           Print))                                 (PutValue self 'stoppingPlace wStation]            [[AND [SETQ gasStation (FurthestRoadStop (RoadStops ($ GasStation)                                                            (_ self Range1)                                                            (GetValue self 'direction)                                                            'Room]                  (LESSP (Distance gasStation)                         (Distance (GetValue self 'destination]             (SETQ ^value (PROGN (PROGN                      (* Rule Tracing Code)                                        (TraceRHS 'Traveler.FindStoppingPlace NIL 3)                                        (_ (GetObjFromUID '(LKX0.%:F5.o28.E6A . 33))                                           Print))                                 (PutValue self 'stoppingPlace gasStation]            [[AND (LEQ (Distance (GetValue self 'destination))                       (_ self Range1))                  (RoomToParkP (GetValue self 'destination]             (SETQ ^value (PROGN (PROGN                      (* Rule Tracing Code)                                        (TraceRHS 'Traveler.FindStoppingPlace NIL 4)                                        (_ (GetObjFromUID '(LKX0.%:F5.o28.E6A . 34))                                           Print))                                 (PutValue self 'stoppingPlace (GetValue self 'destination]            ((AND)             (SETQ ^value (PROGN (PROGN                      (* Rule Tracing Code)                                        (TraceRHS 'Traveler.FindStoppingPlace NIL 5)                                        (_ (GetObjFromUID '(LKX0.%:F5.o28.E6A . 35))                                           Print))                                 (PutValue self 'stoppingPlace (NthRoadStop (GetValue self                                                                                   'maxMove)                                                                      (GetValue self 'direction)                                                                      NIL                                                                      'Room]     QUIT     ^lastRules         (RETURN ^value)))(Method ((Traveler GoToStoppingPlace) self) "Method implementing a RuleSet"   (PROG (^value)     ^firstRules         [SETQ ^value (PROGN (_ self FindStoppingPlace)                             (_ PlayerInterface Move self (GetValue self 'stoppingPlace))]         [COND            ((ISA (GetValue (GetValue self 'truck)                         'location)                  ($ GasStation))             (SETQ ^value (_ self BuyGas)]     QUIT     ^lastRules         (RETURN ^value)))(Method ((Traveler TakeTurn) self) "Method implementing a RuleSet"   (PROG (^value)     ^firstRules         [COND            ((NOT (GetValue self 'destination))             (SETQ ^value (PROGN (PutValue self 'destination (AnyRoadStop ($ AlicesRestaurant)))                                 (PutValue self 'direction 'Forward]         [COND            ((_ (GetValue (GetValue self 'truck)                       'location)                InstOf                ($ UnionHall))             (SETQ ^value (PROGN (PutValue self 'destination (AnyRoadStop ($ AlicesRestaurant)))                                 (PutValue self 'direction 'Forward]         [COND            ((_ (GetValue (GetValue self 'truck)                       'location)                InstOf                ($ AlicesRestaurant))             (SETQ ^value (PROGN (PutValue self 'destination (AnyRoadStop ($ UnionHall)))                                 (PutValue self 'direction 'Backward]         (SETQ ^value (_ self GoToStoppingPlace))     QUIT     ^lastRules         (RETURN ^value)))(\UnbatchMethodDefs)(PUTPROPS TRAVELER COPYRIGHT ("Xerox Corporation" 1987 1988))(DECLARE%: DONTCOPY  (FILEMAP (NIL)))STOP