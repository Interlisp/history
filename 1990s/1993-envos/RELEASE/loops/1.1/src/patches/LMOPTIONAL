(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "INTERLISP")(FILECREATED "28-Oct-88 21:39:29" |{POGO:AISNORTH:XEROX}<LOOPSCORE>PATCHES>LMOPTIONAL.;1| 40531        |changes| |to:|  (VARS LMOPTIONALCOMS)                       (FNS M\yUPDATE/MENU/IMAGE))(PRETTYCOMPRINT LMOPTIONALCOMS)(RPAQQ LMOPTIONALCOMS       ((* |;;;| "Patches courtesy of Tom Lipkis @ Savoir")                (* |;;| "Improves window management for menus (they create circular garbage)")        (COMS               (* |;;| "Set DSPRIGHTMARGIN high for wide scrollable menus")              (FNS M\yUPDATE/MENU/IMAGE)              (DECLARE\: DONTEVAL@LOAD DOCOPY (P (MOVD? 'UPDATE/MENU/IMAGE '|OldUPDATE/MENU/IMAGE|)                                                 (MOVD 'M\yUPDATE/MENU/IMAGE 'UPDATE/MENU/IMAGE))))                (* |;;| "Various patches to improve browser performance; these need ColumnateMenuItems, which I need to get from Tom yet")        (FNS |LatticeBrowserExpandFn| |MakeMethodMenu| |NiceMenu| |SelectFile|)        (INITVARS (|SelectFileMenu| NIL))        (METHODS |Class.MakeEditSource| |LatticeBrowser.GetNodeList| |Window.ItemMenu|)        (VARIABLES |EditClassMethodsFlg|)        (ADVISE LAYOUTGRAPH)                (* |;;| "These look fairly random; I'll talk to Tom bout them...")        (FNS |GetSuperClassValue| INSTALL-METHOD-FN)))(* |;;;| "Patches courtesy of Tom Lipkis @ Savoir")(* |;;| "Improves window management for menus (they create circular garbage)")(* |;;| "Set DSPRIGHTMARGIN high for wide scrollable menus")(DEFINEQ(M\yUPDATE/MENU/IMAGE  (LAMBDA (MNU SCREEN)                                   (* \; "Edited 21-Jun-88 13:42 by TAL")    (DECLARE (GLOBALVARS MENUFONT MENUSUBITEMMARK))      (* \;                                                        "recomputes the menu image from its labels.")    (PROG (NUMCOLS NUMROWS WIDTH HEIGHT DSP BLK COLWIDTH ROWHEIGHT BITSPERPIXEL MENUITEMS NITEMS                  BORDER OUTLINE FONT TITLEFONT TITLEHEIGHT TITLEWIDTH WINDOW TITLE ANYSUBITEMS?                  CENTER?)          (COND             ((NULL SCREEN)              (COND                 ((|type?| WINDOW (|fetch| (MENU IMAGE) |of| MNU))                  (SETQ SCREEN (|fetch| (WINDOW SCREEN) |of| (|fetch| (MENU IMAGE)                                                                        |of| MNU))))                 (T (SETQ SCREEN LASTSCREEN)))))          (SETQ MENUITEMS (|fetch| (MENU ITEMS) |of| MNU))          (SETQ CENTER? (|fetch| (MENU CENTERFLG) |of| MNU))                                                             (* \; "check the font.")          (COND             ((FONTP (SETQ FONT (AND (|fetch| (MENU MENUFONT) |of| MNU)                                     (\\COERCEFONTDESC (|fetch| (MENU MENUFONT) |of| MNU)                                            'DISPLAY T)))))             (T (SETQ FONT (COND                              ((FONTP MENUFONT))                              (T (SETQ MENUFONT (FONTCREATE 'HELVETICA 10)))))                                                             (* \; "keep font in the menu")                (|replace| (MENU MENUFONT) |of| MNU |with| FONT)))          (COND             ((SETQ TITLE (|fetch| (MENU TITLE) |of| MNU))                                                             (* \; "set the title font")              (SETQ TITLEFONT (MENUTITLEFONT MNU SCREEN))              (SETQ TITLEHEIGHT (FONTPROP TITLEFONT 'HEIGHT))              (SETQ TITLEWIDTH (STRINGWIDTH TITLE TITLEFONT)))             (T (SETQ TITLEHEIGHT 0)                (SETQ TITLEWIDTH 0)))                        (* \;                                                          "calculate the number of columns and rows")          (SETQ NITEMS (LENGTH MENUITEMS))          (COND             ((SETQ NUMCOLS (NUMBERP (|fetch| (MENU MENUCOLUMNS) |of| MNU)))              (SETQ NUMROWS (COND                               ((NUMBERP (|fetch| (MENU MENUROWS) |of| MNU)))                               (T (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NUMCOLS))))))             ((SETQ NUMROWS (NUMBERP (|fetch| (MENU MENUROWS) |of| MNU)))              (SETQ NUMCOLS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                         NUMROWS))))             (T (SETQ NUMCOLS 1)                (SETQ NUMROWS NITEMS)))     (* |;;| "set BORDER to the size of the outline around each menu item and OUTLINE to the size of the outline around the whole menu.")          (SETQ BORDER (OR (FIXP (|fetch| (MENU MENUBORDERSIZE) |of| MNU))                           (|replace| (MENU MENUBORDERSIZE) |of| MNU |with| 0)))          (SETQ OUTLINE (OR (FIXP (|fetch| (MENU MENUOUTLINESIZE) |of| MNU))                            (|replace| (MENU MENUOUTLINESIZE) |of| MNU                               |with| (IMAX BORDER 1))))          (SETQ ANYSUBITEMS? (|for| I |in| (|fetch| (MENU ITEMS) |of| MNU)                                |when| (\\MENUSUBITEMS MNU I) |do| (RETURN T)))          (COND             ((IGREATERP (SETQ COLWIDTH (|fetch| (MENU ITEMWIDTH) |of| MNU))                     5000)              (* |;;| "If ITEMWIDTH is greater than 5000, it was probably default clipping region.  if no columnwidth is given {common case}, calculate it from the items widths.")              (SETQ COLWIDTH (IPLUS (MAXMENUITEMWIDTH MNU T)                                    (ITIMES (ADD1 BORDER)                                           2)                                    (COND                                       (ANYSUBITEMS? (BITMAPWIDTH MENUSUBITEMMARK))                                       (T 0))))              (COND                 ((IGREATERP (IPLUS TITLEWIDTH 2)                         (ITIMES COLWIDTH NUMCOLS))          (* \;                                                            "adjust column width to cover title.")                  (SETQ COLWIDTH (IQUOTIENT (IPLUS TITLEWIDTH (SUB1 NUMCOLS))                                        NUMCOLS))))              (|replace| (MENU ITEMWIDTH) |of| MNU |with| COLWIDTH)))          (COND             ((ILESSP (SETQ ROWHEIGHT (|fetch| (MENU ITEMHEIGHT) |of| MNU))                     5000)              ROWHEIGHT)             (T (SETQ ROWHEIGHT (IPLUS (MAXMENUITEMHEIGHT MNU)                                       (ITIMES BORDER 2)))                (|replace| (MENU ITEMHEIGHT) |of| MNU |with| ROWHEIGHT)))          (SETQ WIDTH (IPLUS (ITIMES COLWIDTH NUMCOLS)                             (ITIMES OUTLINE 2)))          (SETQ HEIGHT (IPLUS (ITIMES NUMROWS ROWHEIGHT)                              (ITIMES OUTLINE 2)                              TITLEHEIGHT))          (COND             ((AND (IGREATERP HEIGHT (|fetch| (SCREEN SCHEIGHT) |of| SCREEN))                   (NULL (|fetch| (MENU MENUCOLUMNS) |of| MNU))                   (NULL (|fetch| (MENU MENUROWS) |of| MNU)))              (* |;;| "it is too large to fit on the screen and menu is defaulting the number of columns and rows If the user specified either the number of rows or columns, assume they knew what they were doing.")              (PROG (NITEMSTOFIT)                            (* \;                                                          "menu is defaulting the number of columns")                    (SETQ NITEMSTOFIT (IQUOTIENT (IDIFFERENCE (|fetch| (SCREEN SCHEIGHT)                                                                 |of| SCREEN)                                                        TITLEHEIGHT)                                             ROWHEIGHT))                    (SETQ NUMCOLS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NITEMSTOFIT)))                    (SETQ NUMROWS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NUMCOLS)))                    (SETQ WIDTH (IPLUS (ITIMES COLWIDTH NUMCOLS)                                       (ITIMES OUTLINE 2)))                    (SETQ HEIGHT (IPLUS (ITIMES NUMROWS ROWHEIGHT)                                        (ITIMES OUTLINE 2)                                        TITLEHEIGHT))               (* |;;| "changing the items field is suspect since conceivably the user might be depending upon it.  At least the fact that MENUCOLUMNS is NIL keeps it from happening twice if it gets called again.")                    (|replace| (MENU ITEMS) |of| MNU |with| (SETQ MENUITEMS                                                                         (\\MAKE.ITEMS.VERT.ORDER                                                                          MENUITEMS NUMROWS NUMCOLS))                           )))             ((AND (NULL (|fetch| (MENU MENUCOLUMNS) |of| MNU))                   (|fetch| (MENU MENUROWS) |of| MNU))              (* |;;| "user wants a certain number of rows but doesn't care about the columns, switch to vertical order so the blanks items appear in the last row.")              (|replace| (MENU ITEMS) |of| MNU |with| (SETQ MENUITEMS                                                                   (\\MAKE.ITEMS.VERT.ORDER MENUITEMS                                                                          NUMROWS NUMCOLS)))))          (|replace| (MENU MENUCOLUMNS) |of| MNU |with| NUMCOLS)          (|replace| (MENU MENUROWS) |of| MNU |with| NUMROWS)          (SETQ BITSPERPIXEL (|fetch| (BITMAP BITMAPBITSPERPIXEL) |of| (|fetch|                                                                                (SCREEN SCDESTINATION                                                                                       ) |of|                                                                                         SCREEN)))          (SETQ BLK (COND                       ((AND (SETQ BLK (COND                                          ((|type?| BITMAP (SETQ BLK (|fetch| (MENU IMAGE)                                                                            |of| MNU)))                                           BLK)                                          ((|type?| WINDOW BLK)                                                             (* \;                                               "if it is a window, make sure it is not active, then")                                           (CLOSEW BLK)                                           (|fetch| (WINDOW SAVE) |of| BLK))))                             (EQ (|fetch| (BITMAP BITMAPWIDTH) |of| BLK)                                 WIDTH)                             (EQ (|fetch| (BITMAP BITMAPHEIGHT) |of| BLK)                                 HEIGHT)                             (EQ (|fetch| (BITMAP BITMAPBITSPERPIXEL) |of| BLK)                                 BITSPERPIXEL))              (* \; "reuse current image bitmap")                        BLK)                       (T                                    (* \; "create a new one")                          (BITMAPCREATE WIDTH HEIGHT BITSPERPIXEL))))          (BITBLT NIL NIL NIL BLK 0 0 WIDTH HEIGHT 'TEXTURE 'REPLACE BLACKSHADE)                                                             (* \; "Draw box by nested BitBlts")                                                             (* \; "leave outline")          (BITBLT NIL NIL NIL BLK OUTLINE OUTLINE (IDIFFERENCE WIDTH (ITIMES OUTLINE 2))                 (IDIFFERENCE HEIGHT (IPLUS TITLEHEIGHT (ITIMES OUTLINE 2)))                 'TEXTURE                 'REPLACE WHITESHADE)          (SETQ DSP (DSPCREATE BLK))          (DSPXOFFSET OUTLINE DSP)          (DSPYOFFSET OUTLINE DSP)          (DSPRIGHTMARGIN MAX.SMALLP DSP)                    (* \;                                                         "Avoid wraparound in wide scrollable menus")          (|replace| (REGION LEFT) |of| (|fetch| (MENU MENUGRID) |of| MNU)             |with| 0)          (|replace| (REGION BOTTOM) |of| (|fetch| (MENU MENUGRID) |of| MNU)             |with| 0)          (GRID (|fetch| (MENU MENUGRID) |of| MNU)                NUMCOLS NUMROWS BORDER DSP)          (DSPOPERATION 'INVERT DSP)                         (* \;           "calculate the offset from the top of the item box to the base line of the printed item.")          (COND             (TITLE                                          (* \;                                                            "if there is a title, display it")                    (DSPFONT TITLEFONT DSP)                    (\\SHOWMENULABEL TITLE (|create| REGION                                                  LEFT _ BORDER                                                  BOTTOM _ (IDIFFERENCE (IPLUS HEIGHT BORDER)                                                                  (IPLUS TITLEHEIGHT (ITIMES OUTLINE                                                                                            2)))                                                  WIDTH _ WIDTH                                                  HEIGHT _ TITLEHEIGHT)                           MNU DSP CENTER?)                    (SETQ HEIGHT (IDIFFERENCE HEIGHT TITLEHEIGHT))))          (PROG (ITEMREGION MAJOR#)                (SETQ ITEMREGION (|create| REGION                                        LEFT _ BORDER                                        BOTTOM _ (IDIFFERENCE (IPLUS HEIGHT BORDER)                                                        (IPLUS ROWHEIGHT (ITIMES OUTLINE 2)))                                        WIDTH _ (IDIFFERENCE (IDIFFERENCE (|fetch| (REGION WIDTH)                                                                             |of|                                                                             (|fetch|                                                                              (MENU MENUGRID)                                                                                |of| MNU))                                                                    (ITIMES BORDER 2))                                                       (COND                                                          (ANYSUBITEMS?                                                              (* \;                                           "the subitem mark goes outside of the normal title space")                                                                 (BITMAPWIDTH MENUSUBITEMMARK))                                                          (T 0)))                                        HEIGHT _ (IDIFFERENCE ROWHEIGHT (ITIMES BORDER 2))))                (SETQ MAJOR# 1)                (DSPFONT FONT DSP)            LP  (COND                   (MENUITEMS (\\SHOWMENULABEL (CAR MENUITEMS)                                     ITEMREGION MNU DSP CENTER?)                          (SETQ MENUITEMS (CDR MENUITEMS))                          (COND                             ((EQ MAJOR# NUMCOLS)            (* \; "advance to the next row")                              (SETQ MAJOR# 1)                              (|replace| (REGION BOTTOM) |of| ITEMREGION                                 |with| (IDIFFERENCE (|fetch| (REGION BOTTOM) |of|                                                                                            ITEMREGION                                                                )                                                   ROWHEIGHT))                              (|replace| (REGION LEFT) |of| ITEMREGION |with| BORDER))                             (T (SETQ MAJOR# (ADD1 MAJOR#))                                (|replace| (REGION LEFT) |of| ITEMREGION                                   |with| (IPLUS (|fetch| (REGION LEFT) |of| ITEMREGION)                                                     COLWIDTH))))                          (GO LP))))          (COND             ((NULL (|fetch| (MENU MENUOFFSET) |of| MNU))              (* |;;| "set offset so cursor will be be in middle of the menu on first display if it is to move with the cursor.  If it is fixed offset, initialize it to 0")              (|replace| (MENU MENUOFFSET) |of| MNU                 |with| (COND                               ((|fetch| (MENU CHANGEOFFSETFLG) |of| MNU)                                (|create| POSITION                                       XCOORD _ (IQUOTIENT WIDTH 2)                                       YCOORD _ (IQUOTIENT HEIGHT 2)))                               (T (|create| POSITION                                         XCOORD _ 0                                         YCOORD _ 0))))))     (* |;;|    "The following avoids extra windows for fixed menus, but not sure how it interacts with Lyric.")     (* |;;| "(COND ((AND (type? WINDOW (SETQ WINDOW (fetch (MENU IMAGE) of MNU))) (EQ (fetch (WINDOW SCREEN) of WINDOW) SCREEN)) (* menu has a window, replace its save image.) (replace (WINDOW SAVE) of WINDOW with BLK) (replace (WINDOW WBORDER) of WINDOW with OUTLINE) (* tell the window about its border) (ADVISEWDS WINDOW)) (T (replace (MENU IMAGE) of MNU with BLK))) (RETURN BLK)")          (COND             ((AND (|type?| WINDOW (SETQ WINDOW (|fetch| (MENU IMAGE) |of| MNU)))                   (EQ (|fetch| (WINDOW SCREEN) |of| WINDOW)                       SCREEN))                              (* \;                                                        "menu has a window, replace its save image.")              (|replace| (WINDOW SAVE) |of| WINDOW |with| BLK))             (T (|replace| (MENU IMAGE) |of| MNU |with| (SETQ WINDOW (CREATEWFROMIMAGE                                                                                  BLK SCREEN)))))                                                             (* \;                                                            "tell the window about its border")          (|replace| (WINDOW WBORDER) |of| WINDOW |with| OUTLINE)          (ADVISEWDS WINDOW)                                 (* \;                "snap circular link between the display stream created for printing and its stream.")          (RETURN (|fetch| (WINDOW SAVE) |of| (|fetch| (MENU IMAGE) |of| MNU)))))))(DECLARE\: DONTEVAL@LOAD DOCOPY (MOVD? 'UPDATE/MENU/IMAGE '|OldUPDATE/MENU/IMAGE|)(MOVD 'M\yUPDATE/MENU/IMAGE 'UPDATE/MENU/IMAGE))(* |;;| "Various patches to improve browser performance; these need ColumnateMenuItems, which I need to get from Tom yet")(DEFINEQ(|LatticeBrowserExpandFn|  (LAMBDA (|window|)                                     (* \; "Edited 14-Jun-88 12:54 by TAL")    (* |;;| "When a browser window is expanded, it should be recomputed")    (LET ((|self| (WINDOWPROP |window| '|LoopsWindow|)))         (AND |UpdateClassBrowsers?| (_ |self| |RecomputeInPlace|)))))(|MakeMethodMenu|  (LAMBDA (|class| |xPos| |yPos|)                        (* \; "Edited 13-Jun-88 19:00 by TAL")         (* * |Puts| |up| \a |menu| |for| |editing| |the| |selectors| |of| \a |given|        |class.|)    (COND       ((LITATOM |class|)        (SETQ |class| ($! |class|))))    (LET* (|columns| (|selectors| (SORT (_ |class| |ListAttribute| '|Methods|)))                 (|menu| (AND |selectors| (SETQ |columns| (ADD1 (IQUOTIENT (FLENGTH |selectors|)                                                                       35)))                              (|create| MENU                                     ITEMS _ (|ColumnateMenuItems| |selectors| |columns|)                                     MENUCOLUMNS _ |columns|                                     WHENSELECTEDFN _ '|MethodMenuWhenSelectedFn|                                     TITLE _ (CONCAT "Edit methods for " (|ClassName| |class|)))))                 (|window| (AND |menu| (ADDMENU |menu| NIL (AND |xPos|                                                                (|create|                                                                 POSITION                                                                 XCOORD _ (IDIFFERENCE                                                                           |xPos|                                                                           (|fetch| (MENU                                                                                            IMAGEWIDTH                                                                                              )                                                                              |of| |menu|))                                                                 YCOORD _ (IDIFFERENCE                                                                           |yPos|                                                                           (|fetch| (MENU                                                                                           IMAGEHEIGHT                                                                                              )                                                                              |of| |menu|))))))))         (* * |place| |relative| |to| |the| |upper| |right| |hand| |corner|)          (AND |window| (WINDOWPROP |window| '|Class| |class|))          |window|)))(|NiceMenu|  (LAMBDA (|items| |title|)                              (* \; "Edited 13-Jun-88 18:56 by TAL")    (COND       ((NULL |items|)        (PROMPTPRINT "No items for " |title|)        NIL)       (T (LET ((|columns| (ADD1 (IQUOTIENT (FLENGTH |items|)                                        35))))               (MENU (|create| MENU                            CHANGEOFFSETFLG _ T                            ITEMS _ (|ColumnateMenuItems| |items| |columns|)                            TITLE _ |title|                            MENUCOLUMNS _ |columns|)))))))(|SelectFile|  (LAMBDA |prompts|                                      (* \; "Edited 14-Jun-88 16:30 by TAL")    (* |;;| "Select a file name, or specify a new one.  Return NIL if no file selected.  Create a COMS list and add to FILELST if it is new.")    (DECLARE (GLOBALVARS |SelectFileMenu| |SelectFileMenuItems|))    (APPLY 'PROMPTPRINT (|for| I |from| 1 |to| |prompts| |collect| (ARG |prompts| I))           )    (LET (|columns|)         (PROG (|fileVar| |fullFileName|                      (|file| (MENU (COND                                       ((AND (|type?| MENU |SelectFileMenu|)                                             (EQUAL |SelectFileMenuItems| FILELST))                                        |SelectFileMenu|)                                       (T (SETQ |columns| (ADD1 (IQUOTIENT (FLENGTH FILELST)                                                                       35)))                                          (SETQ |SelectFileMenuItems| (APPEND FILELST))                                          (SETQ |SelectFileMenu|                                           (|create| MENU                                                  TITLE _ "File List"                                                  ITEMS _                                                  (|ColumnateMenuItems|                                                   (NCONC1 (SORT (APPEND FILELST))                                                          '(|*newFile*| '|*newFile*|                                                                   "Create a new file"                                                                  (SUBITEMS |*newFile*| |*loadFile*|                                                                         |*hiddenFile*|)))                                                   |columns|)                                                  MENUCOLUMNS _ |columns|)))))))               (SELECTQ |file|                   (|*newFile*| (|if| (NULL (SETQ |file| (U-CASE (|PromptRead|                                                                          "Please type in file name: "                                                                            ))))                                    |then| (CLRPROMPT)                                          (PROMPTPRINT "No file entered.")                                          (RETURN))                                (SETQ |fileVar| (FILECOMS |file|))                                (COND                                   ((BOUNDP |fileVar|)       (* \; "Check if filecoms exists")                                    (OR (MOUSECONFIRM (CONCAT |fileVar|                                                       " has a value. Do  you want the value smashed?"                                                             )                                               "Trying to create fileComs for new file")                                        (RETURN (PROMPTPRINT "No File Created")))))                                (SETTOPVAL |fileVar| (COPY `((,COMMENTFLG \;                                                                    ,(CONCAT "File created by "                                                                            (USERNAME NIL T)))                                                             (CLASSES)                                                             (METHODS)                                                             (FNS)                                                             (VARS)                                                             (INSTANCES))))                                (ADDFILE |file|)                                (RETURN |file|))                   (|*loadFile*| (|if| (NULL (SETQ |file| (U-CASE (|PromptRead|                                                                  "Please type in file name to load: "                                                                             ))))                                     |then| (CLRPROMPT)                                           (PROMPTPRINT "No file entered.")                                           (RETURN))                                 (SETQ |fullFileName| (OR (FINDFILE (PACKFILENAME 'BODY |file|                                                                           'EXTENSION                                                                           'LCOM))                                                          (FINDFILE (PACKFILENAME 'BODY |file|                                                                           'EXTENSION                                                                           'DFASL))                                                          (FINDFILE (PACKFILENAME 'BODY |file|                                                                           'EXTENSION ""))))                                 (|if| |fullFileName|                                     |then| (LOAD |fullFileName|)                                           (RETURN (ROOTFILENAME |fullFileName| T))                                   |else| (CLRPROMPT)                                         (PROMPTPRINT "No such file")                                         (RETURN)))                   (|*hiddenFile*|                         (SETQ |file|                         (MENU (|create| MENU                                      ITEMS _                                      (OR (|for| |file| |in| LOADEDFILELST                                             |when| (AND (NOT (FMEMB (ROOTFILENAME |file| T)                                                                         FILELST))                                                             (BOUNDP (FILECOMS |file|)))                                             |collect| (ROOTFILENAME |file| T))                                          (PROGN (PROMPTPRINT "No hidden files.")                                                 (RETURN))))))                        (|if| |file|                            |then| (|push| FILELST |file|)                                  (RETURN |file|)                          |else| (RETURN)))                   (RETURN |file|)))))))(RPAQ? |SelectFileMenu| NIL)(|\\BatchMethodDefs|)(METH |Class|  |MakeEditSource| NIL      "Make a source for editing the class" (|category| (|Object|)))(METH |LatticeBrowser|  |GetNodeList| (|browseList| |goodList|)      "Compute the node data structures of the tree starting at browseList. If goodList is given, only include elements of it. If goodList=T make it be browseList." (|category| (|LatticeBrowser|)))(METH |Window|  |ItemMenu| (|items| |title|)      "Create a simple (one level) menu which will not overflow height of screen" (|category| (                                                                                             |Window|                                                                                               )))(|Method| ((|Class| |MakeEditSource|) |self|)            (* \; "smL 14-May-86 14:56")   "Make a source for editing the class"   (DECLARE (GLOBALVARS |EditClassMethodsFlg|))   (LIST* (CONS '|MetaClass| (|GetSourceMeta| |self|))          (CONS '|Supers| (|GetSourceSupers| |self|))          (CONS '|ClassVariables| (|GetSourceCVs| |self|))          (CONS '|InstanceVariables| (|GetSourceIVs| |self|))          (COND             (|EditClassMethodsFlg| (LIST (CONS '|MethodFns|                                                (SORT (|for| I |from| 0 |by| 2                                                         |bind| |sel|                                                               (|sels| _ (|fetch| |selectors|                                                                            |of| |self|))                                                               (|meths| _ (|fetch| (|class|                                                                                        |methods|)                                                                             |of| |self|))                                                         |first| (|if| (NULL |sels|)                                                                         |then| (RETURN NIL))                                                         |eachtime| (SETQ |sel| (|\\GetNthEntry|                                                                                     |sels| I))                                                         |until| (NULL |sel|)                                                         |collect| (|\\GetNthEntry| |meths| I))))                                          )))))(|Method| ((|LatticeBrowser| |GetNodeList|) |self| |browseList| |goodList|)                                                             (* \; "smL 21-Mar-85 14:09")   "Compute the node data structures of the tree starting at browseList. If goodList is given, only include elements of it. If goodList=T make it be browseList."   (DECLARE (GLOBALVARS WHITESHADE))   (COND      ((EQ |goodList| T)       (SETQ |goodList| |browseList|)))   (PROG (|subs| |pair| |node| (|oldNodes| (|fetch| GRAPHNODES |of| (WINDOWPROP (@ |window|)                                                                                   'GRAPH)))                (|objList| (CONS)))    (* |;;| "first make objList which is a list of pairs (object  . objName).  objName will be used as a title for a node in the browser.  This structure will be replaced by a graphNode when it is processed.  The nodeID of the graphNode will be the object, and the label will be the name.")         (|for| |objOrName| |in| |browseList| |do| (AND (SETQ |pair|                                                                     (_ |self| |ObjNamePair|                                                                               |objOrName|))                                                                    (NOT (FASSOC (CAR |pair|)                                                                                (CAR |objList|)))                                                                    (TCONC |objList| |pair|)))    (* |;;| "Now MAP ON list so pair can be replaced by graphNode")         (|for| |pair| |name| |obj| |subObjs| |on| (CAR |objList|)            |when| (NLISTP (SETQ |name| (CDAR |pair|)))            |do| (SETQ |subObjs| (CONS))                  (|for| |sub| |objPair| |obj1| |in| (_ |self| |GetSubs| (SETQ |obj|                                                                                  (CAAR |pair|)))                     |do|                            (* |;;| "ObjNamePair returns NIL for destroyed objects.  include only members of goodList in subs if given.  Add to objList only once")                           (SETQ |obj1| (COND                                           ((EQ (CAR |sub|)                                                '|Link Parameters|)                                            (CADR |sub|))                                           (T |sub|)))                           (COND                              ((SETQ |objPair| (_ |self| |ObjNamePair| |obj1|))                               (COND                                  ((NOT (FASSOC |obj1| (CAR |objList|)))                                   (TCONC |objList| |objPair|)))                               (TCONC |subObjs| |sub|))))                  (RPLACA |pair| (SETQ |node| (OR (FASSOC |obj| |oldNodes|)                                                  (|create| GRAPHNODE                                                         NODEID _ |obj|                                                         NODEBORDER _                                                         (PROGN (LIST (ADD1 (@ |::BoxLineWidth|))                                                                      WHITESHADE)                                                             (* \;                                                            "This makes graphs too big -- TAL")                                                                NIL)))))                  (|replace| TONODES |of| |node| |with| (CAR |subObjs|))                  (|replace| NODELABEL |of| |node| |with| |name|)                  (|replace| NODEFONT |of| |node| |with| (@ |browseFont|))                  (|replace| NODEWIDTH |of| |node| |with| NIL)                  (|replace| NODEHEIGHT |of| |node| |with| NIL))         (RETURN (CAR |objList|))))(|Method| ((|Window| |ItemMenu|) |self| |items| |title|) (* \; "dgb: 21-Apr-84 09:31")   "Create a simple (one level) menu which will not overflow height of screen"   (LET ((|columns| (ADD1 (IQUOTIENT (ITIMES (FONTHEIGHT MENUFONT)                                            (LENGTH |items|))                                 750))))        (|create| MENU               ITEMS _ (|ColumnateMenuItems| |items| |columns|)               MENUCOLUMNS _ |columns|               TITLE _ |title|               CHANGEOFFSETFLG _ T)))(|\\UnbatchMethodDefs|)(CL:DEFVAR |EditClassMethodsFlg| NIL   "Include method list in class editor if T")(XCL:REINSTALL-ADVICE 'LAYOUTGRAPH :BEFORE '((:LAST (COND                                                       ((NULL PERSONALD)                                                        (SETQ PERSONALD -2))))))(READVISE LAYOUTGRAPH)(* |;;| "These look fairly random; I'll talk to Tom bout them...")(DEFINEQ(|GetSuperClassValue|  (LAMBDA (|self| |varName| |propName| |activeVal|)      (* \; "Edited 14-Jun-88 15:47 by TAL")    (LET* ((|class| (COND                       ((|type?| |instance| |self|)                        (|Class| |self|))                       (T |self|)))           (|superList| (|for| |sup| |on| (CONS |class| (|Supers| |class|))                           |do| (|if| (AND (_ (CAR |sup|)                                                      |HasCV| |varName|)                                                   (|HasAV| (|GetCVHere| (CAR |sup|)                                                                   |varName| |propName|)                                                          |activeVal|))                                        |then| (RETURN (CDR |sup|))))))          (|for| \c |in| |superList| |bind| |value|             |do| (|if| (AND (_ \c |HasCV| |varName|)                                     (NOT (|NotSetValue| (SETQ |value| (|GetCVHere| \c |varName|                                                                               |propName|)))))                          |then| (RETURN (|ExtractRealValue| \c |varName| |value| |propName|                                                    'CV))) |finally| (RETURN |NotSetValue|)))))(INSTALL-METHOD-FN  (LAMBDA (|class-name| |selector| |fn-name| |args| |doc|)                                                             (* \; "Edited 21-Jun-88 17:22 by TAL")    (LET* ((|class| ($! |class-name|))           (|methObj| (|GetMethodObj| |class| |selector| T))           |whereisClasses|)          (|AddMethod| |class| |selector| |fn-name|)          (|change| (@ |methObj| |method|)                 |fn-name|)          (|change| (@ |methObj| |args|)                 |args|)          (|change| (@ |methObj| |doc|)                 |doc|)          (|if| (NOT (|\\Loading-File?|))              |then| (SETQ LASTWORD |fn-name|)                     (* |;;| "TAL - Removed (COND ((AND (NULL (WHEREIS fn-name 'METHODS)) (SETQ whereisClasses (WHEREIS class-name 'CLASSES))) (ADDTOFILE fn-name 'METHODS (CAR whereisClasses))))"))          (* |;;| "JRB - Removed (MARKASCHANGED fn-name 'METHODS 'DEFINED); I think in the world of METHOD-FNS this marking is not needed (this DOES worry me, though).")          (UNMARKASCHANGED |fn-name| 'FNS)          (UNMARKASCHANGED |fn-name| 'INSTANCES)          |fn-name|))))(PRETTYCOMPRINT LMOPTIONALCOMS)(RPAQQ LMOPTIONALCOMS       ((* |;;;| "Patches courtesy of Tom Lipkis @ Savoir")                (* |;;| "Improves window management for menus (they create circular garbage)")        (COMS               (* |;;| "Set DSPRIGHTMARGIN high for wide scrollable menus")              (FNS M\yUPDATE/MENU/IMAGE)              (DECLARE\: DONTEVAL@LOAD DOCOPY (P (MOVD? 'UPDATE/MENU/IMAGE '|OldUPDATE/MENU/IMAGE|)                                                 (MOVD 'M\yUPDATE/MENU/IMAGE 'UPDATE/MENU/IMAGE))))                (* |;;| "Various patches to improve browser performance; these need ColumnateMenuItems, which I need to get from Tom yet")        (FNS |LatticeBrowserExpandFn| |MakeMethodMenu| |NiceMenu| |SelectFile|)        (INITVARS (|SelectFileMenu| NIL))        (METHODS |Class.MakeEditSource| |LatticeBrowser.GetNodeList| |Window.ItemMenu|)        (VARIABLES |EditClassMethodsFlg|)        (ADVISE LAYOUTGRAPH)                (* |;;| "These look fairly random; I'll talk to Tom bout them...")        (FNS |GetSuperClassValue| INSTALL-METHOD-FN)        (DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)                                                                             (NLAML)                                                                             (LAMA |SelectFile|)))))(DECLARE\: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDTOVAR NLAMA )(ADDTOVAR NLAML )(ADDTOVAR LAMA |SelectFile|))(DECLARE\: DONTCOPY  (FILEMAP (NIL (1609 18919 (M\yUPDATE/MENU/IMAGE 1619 . 18917)) (19189 28937 (|LatticeBrowserExpandFn| 19199 . 19540) (|MakeMethodMenu| 19542 . 22005) (|NiceMenu| 22007 . 22595) (|SelectFile| 22597 . 28935)) (36421 38959 (|GetSuperClassValue| 36431 . 37780) (INSTALL-METHOD-FN 37782 . 38957)))))STOP