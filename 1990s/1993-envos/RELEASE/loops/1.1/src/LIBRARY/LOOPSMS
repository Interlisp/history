(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "27-Apr-93 16:48:06" |{DSK}<new>loops>library-src>LOOPSMS.;4| 32319        |changes| |to:|  (TEMPLATES _! SEND |ApplyMethod|)      |previous| |date:| " 6-Feb-93 16:07:01" |{DSK}<new>loops>library-src>LOOPSMS.;3|); Copyright (c) 1985, 1986, 1987, 1988, 1990, 1992, 1993 by Venue & Xerox Corporation.  All rights reserved.(PRETTYCOMPRINT LOOPSMSCOMS)(RPAQQ LOOPSMSCOMS ((* |;;;| "Tailor MasterScope to understand Loops constructs") (* |;;;| "Load MasterScope, since its a library module.") (P (COND ((EQ MAKESYSNAME (QUOTE :LYRIC)) (* |;;| "Nuke the FILEDATES properties so we're sure the Lyric compiled Medley versions are loaded.") (REMPROP (QUOTE MASTERSCOPE) (QUOTE FILEDATES)) (REMPROP (QUOTE MSANALYZE) (QUOTE FILEDATES)) (REMPROP (QUOTE MSPARSE) (QUOTE FILEDATES)))) (FILESLOAD (FROM VALUEOF LOOPSLIBRARYDIRECTORY) MASTERSCOPE MSPARSE)) (COMS (* |;;;| "The verb SEND") (P (MSADDRELATION (QUOTE (SEND SENDS SENDING SENT)) (QUOTE (SENDNOTSELF SENDSELF))) (MSADDMODIFIER (QUOTE SEND) (QUOTE SELF) (QUOTE SENDSELF)) (MSADDMODIFIER (QUOTE SEND) (QUOTE NOTSELF) (QUOTE SENDNOTSELF))) (ADDVARS (DESCRIBELST ("sends msgs to self: " (GETRELATION FN (QUOTE (SEND SELF)))) ("sends msgs:  " (GETRELATION FN (QUOTE (SEND NOTSELF)))))) (* |;;;| "Need templates for _Apply") (TEMPLATES |DefineClass| |DeleteCIV| |DeleteCV| |DeleteIV| _ _! _IV |_New| |_Process| |_Process!| |_Proto| |_Super| SEND |_SuperFringe| |_Super?| |_Try| |\\BindMethodInfo| |AddCIV| |AddCV| |AddIV| |ApplyMethod|)) (COMS (* |;;;| "The verbs IMPLEMENT, SPECIALIZE and OVERRIDE") (FNS |LoopsMethodMSGETDEF| |MethodOverrides?|) (P (MSADDRELATION (QUOTE (IMPLEMENT IMPLEMENTS IMPLEMENTING IMPLEMENTED))) (SETSYNONYM (QUOTE (SPECIALIZES &)) (QUOTE (@ (|MethodOverrides?| X) IMPLEMENTS 1))) (SETSYNONYM (QUOTE (SPECIALIZING &)) (QUOTE (@ (|MethodOverrides?| X) IMPLEMENTS 1))) (SETSYNONYM (QUOTE (OVERRIDES &)) (QUOTE (@ (|MethodOverrides?| X T) IMPLEMENTS 1))) (SETSYNONYM (QUOTE (OVERRIDING &)) (QUOTE (@ (|MethodOverrides?| X T) IMPLEMENTS 1))))) (COMS (* |;;;| "The verb GET") (P (MSADDRELATION (QUOTE (GET GETS GETTING GOTTEN)) (QUOTE (GETNOTSELF GETSELF))) (MSADDMODIFIER (QUOTE GET) (QUOTE IV) (QUOTE (GETNOTSELF GETSELF))) (MSADDMODIFIER (QUOTE GET) (QUOTE SELF) (QUOTE GETSELF)) (MSADDMODIFIER (QUOTE GET) (QUOTE NOTSELF) (QUOTE GETNOTSELF)) (SETSYNONYM (QUOTE GOT) (QUOTE GOTTEN))) (ADDVARS (DESCRIBELST ("gets IVs of self: " (GETRELATION FN (QUOTE (GET SELF)))) ("gets IVs:  " (GETRELATION FN (QUOTE (GET NOTSELF)))))) (TEMPLATES |GetClassIV| |GetIVHere| |GetValue| |GetValueOnly| |GetClassIVHere|) (P (ADDTEMPLATEWORD (QUOTE GETCVSELF)) (ADDTEMPLATEWORD (QUOTE GETCVNOTSELF)) (MSADDMODIFIER (QUOTE GET) (QUOTE CV) (QUOTE (GETCVSELF GETCVNOTSELF))) (MSADDMODIFIER (QUOTE GET) (QUOTE CVSELF) (QUOTE GETCVSELF)) (MSADDMODIFIER (QUOTE GET) (QUOTE CVNOTSELF) (QUOTE GETCVNOTSELF))) (TEMPLATES |GetCVHere| |GetClassValue| |GetClassValueOnly|) (ADDVARS (DESCRIBELST ("gets CVs of self: " (GETRELATION FN (QUOTE (GET CVSELF)))) ("gets CVs:  " (GETRELATION FN (QUOTE (GET CVNOTSELF))))))) (COMS (* |;;;| "The verb PUT") (P (MSADDRELATION (QUOTE (PUT PUTS PUTTING PUT)) (QUOTE (PUTNOTSELF PUTSELF))) (MSADDMODIFIER (QUOTE PUT) (QUOTE IV) (QUOTE (PUTNOTSELF PUTSELF))) (MSADDMODIFIER (QUOTE PUT) (QUOTE SELF) (QUOTE PUTSELF)) (MSADDMODIFIER (QUOTE PUT) (QUOTE NOTSELF) (QUOTE PUTNOTSELF))) (ADDVARS (DESCRIBELST ("puts IVs of self: " (GETRELATION FN (QUOTE (PUT SELF)))) ("puts IVs:  " (GETRELATION FN (QUOTE (PUT NOTSELF)))))) (TEMPLATES |PutClassIV| |PutValue| |PutValueOnly|) (P (ADDTEMPLATEWORD (QUOTE PUTCVSELF)) (ADDTEMPLATEWORD (QUOTE PUTCVNOTSELF)) (MSADDMODIFIER (QUOTE PUT) (QUOTE CV) (QUOTE (PUTCVSELF PUTCVNOTSELF))) (MSADDMODIFIER (QUOTE PUT) (QUOTE CVSELF) (QUOTE PUTCVSELF)) (MSADDMODIFIER (QUOTE PUT) (QUOTE CVNOTSELF) (QUOTE PUTCVNOTSELF))) (TEMPLATES |PutClassValue| |PutClassValueOnly| |PutCVHere|) (ADDVARS (DESCRIBELST ("puts CVs of self: " (GETRELATION FN (QUOTE (PUT CVSELF)))) ("puts CVs:  " (GETRELATION FN (QUOTE (PUT CVNOTSELF))))))) (COMS (* |;;;| "...  USE THE IV/CV/OBJECT/MSG ...") (P (MSADDTYPE (QUOTE IV) (QUOTE (PUTNOTSELF PUTSELF GETNOTSELF GETSELF)) (QUOTE (IVS))) (MSADDTYPE (QUOTE CV) (QUOTE (PUTCVNOTSELF PUTCVSELF GETCVNOTSELF GETCVSELF)) (QUOTE (CVS))) (ADDTEMPLATEWORD (QUOTE OBJECT)) (MSADDTYPE (QUOTE OBJECT) (QUOTE (OBJECT)) (QUOTE (OBJECTS))) (MSADDTYPE (QUOTE MSG) (QUOTE (SENDNOTSELF SENDSELF)) (QUOTE (MESSAGE SELECTOR MSGS MESSAGES SELECTORS)))) (TEMPLATES $ $!)) (COMS (* |;;;| "Extend the CHECK MasterScope command to verify certain constraints in Loops") (FNS |CheckLoopsFiles|) (METHODS |Class.MSCheck| |Method.MSCheck|) (ADDVARS (MSCHECKFNS |CheckLoopsFiles|))) (COMS (* |;;;| "A hook that lets method objects check their MasterScope data") (FNS |LoopsAnalyzeHook|) (METHODS |Method.CheckMSData|) (ADDVARS (ANALYZEUSERFNS |LoopsAnalyzeHook|))) (COMS (* |;;;| "Teach MasterScope how to analyze Classes and Methods") (FNS |AnalyzeClass| |AnalyzeMethod|) (METHODS |Class.MSAnalyze| |Method.MSAnalyze|) (P (MSADDANALYZE (QUOTE CLASSES) (QUOTE CLASS)) (MSADDANALYZE (QUOTE METHODS) (QUOTE METHOD) (QUOTE METHOD-FNS) (QUOTE |LoopsMethodMSGETDEF|)))) (* |;;;| "Definer for Masterscope method templates and templates for some system methods") (DEFINE-TYPES METHOD-TEMPLATES) (FUNCTIONS DEF-METHOD-TEMPLATE) (VARIABLES *LOOPS-METHOD-TEMPLATES*) (FNS |QuotedArg?| |LoopsSELFp| |_PutGetTemplate| GET-METHOD-TEMPLATE MUNG-CV-TEMPLATE NAME-OBJECT-TEMPLATE PUT-METHOD-TEMPLATE) (METHOD-TEMPLATES |AddCV| |AddIV| |Copy| |CopyCV| |CopyIV| |CreateClass| |DeleteIV| |Get| |New| |NewWithValues| |Put| |Rename| |SetName| |UnSetName|)))(* |;;;| "Tailor MasterScope to understand Loops constructs")(* |;;;| "Load MasterScope, since its a library module.")(COND ((EQ MAKESYSNAME (QUOTE :LYRIC)) (* |;;| "Nuke the FILEDATES properties so we're sure the Lyric compiled Medley versions are loaded.") (REMPROP (QUOTE MASTERSCOPE) (QUOTE FILEDATES)) (REMPROP (QUOTE MSANALYZE) (QUOTE FILEDATES)) (REMPROP (QUOTE MSPARSE) (QUOTE FILEDATES))))(FILESLOAD (FROM VALUEOF LOOPSLIBRARYDIRECTORY) MASTERSCOPE MSPARSE)(* |;;;| "The verb SEND")(MSADDRELATION (QUOTE (SEND SENDS SENDING SENT)) (QUOTE (SENDNOTSELF SENDSELF)))(MSADDMODIFIER (QUOTE SEND) (QUOTE SELF) (QUOTE SENDSELF))(MSADDMODIFIER (QUOTE SEND) (QUOTE NOTSELF) (QUOTE SENDNOTSELF))(ADDTOVAR DESCRIBELST ("sends msgs to self: " (GETRELATION FN (QUOTE (SEND SELF)))) ("sends msgs:  " (GETRELATION FN (QUOTE (SEND NOTSELF)))))(* |;;;| "Need templates for _Apply")(SETTEMPLATE (QUOTE |DefineClass|) (QUOTE (@ EXPR (BQUOTE (|if| (|QuotedArg?| (CAR EXPR)) |then| (QUOTE (NIL OBJECT)) |else| (QUOTE EVAL))) (BQUOTE (|if| (|QuotedArg?| (CADR EXPR)) |then| (QUOTE (NIL (|..| OBJECT))) |else| (QUOTE EVAL))) EVAL . PPE)))(SETTEMPLATE (QUOTE |DeleteCIV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CADR EXPR)) |then| (QUOTE (NIL PUTNOTSELF)) |else| (QUOTE EVAL))) PROP . PPE)))))(SETTEMPLATE (QUOTE |DeleteCV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CAR EXPR)) |then| (QUOTE (NIL PUTCVNOTSELF)) |else| (QUOTE EVAL))) PROP)))))(SETTEMPLATE (QUOTE |DeleteIV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CADR EXPR)) |then| (|if| (|LoopsSELFp| (CAR EXPR)) |then| (QUOTE (NIL PUTSELF)) |else| (QUOTE (NIL PUTNOTSELF))) |else| (QUOTE EVAL))) PROP . PPE)))))(SETTEMPLATE (QUOTE _) (QUOTE (@ EXPR (|_PutGetTemplate| EXPR))))(SETTEMPLATE (QUOTE _!) (QUOTE (BOTH (NIL EVAL) (@ (BQUOTE ((\\\, (CAR EXPR)) (\\\, (COND ((AND (LISTP (CADR EXPR)) (EQ (QUOTE QUOTE) (CAR (CADR EXPR)))) (CADR (CADR EXPR))) (T (QUOTE *UNKNOWN*)))) (\\\,@ (CDDR EXPR)))) (GETTEMPLATE (QUOTE _))))))(SETTEMPLATE (QUOTE _IV) (QUOTE (@ EXPR (COND ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL GETSELF |..| EVAL))) (T (QUOTE (EVAL GETNOTSELF |..| EVAL)))))))(SETTEMPLATE (QUOTE |_New|) (QUOTE (@ EXPR (GETTEMPLATE (QUOTE _)))))(SETTEMPLATE (QUOTE |_Process|) (QUOTE (@ EXPR (GETTEMPLATE (QUOTE _)))))(SETTEMPLATE (QUOTE |_Process!|) (QUOTE (@ EXPR (GETTEMPLATE (QUOTE _!)))))(SETTEMPLATE (QUOTE |_Proto|) (QUOTE (@ EXPR (GETTEMPLATE (QUOTE _)))))(SETTEMPLATE (QUOTE |_Super|) (QUOTE (@ EXPR (COND ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL SENDSELF |..| EVAL))) (T (QUOTE (EVAL SENDNOTSELF |..| EVAL)))))))(SETTEMPLATE (QUOTE SEND) (QUOTE (@ EXPR (GETTEMPLATE (QUOTE _!)))))(SETTEMPLATE (QUOTE |_SuperFringe|) (QUOTE (@ EXPR (|_PutGetTemplate| EXPR))))(SETTEMPLATE (QUOTE |_Super?|) (QUOTE (@ EXPR (|_PutGetTemplate| EXPR))))(SETTEMPLATE (QUOTE |_Try|) (QUOTE (@ EXPR (|_PutGetTemplate| EXPR))))(SETTEMPLATE (QUOTE |\\BindMethodInfo|) (QUOTE (! NIL NIL EVAL)))(SETTEMPLATE (QUOTE |AddCIV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CADR EXPR)) |then| (QUOTE (NIL PUTNOTSELF)) |else| (QUOTE EVAL))) EVAL (PROP EVAL) . PPE)))))(SETTEMPLATE (QUOTE |AddCV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CAR EXPR)) |then| (QUOTE (NIL PUTCVNOTSELF)) |else| (QUOTE EVAL))) EVAL)))))(SETTEMPLATE (QUOTE |AddIV|) (QUOTE (@ EXPR (BQUOTE (EVAL (\\\, (|if| (|QuotedArg?| (CADR EXPR)) |then| (|if| (|LoopsSELFp| (CAR EXPR)) |then| (QUOTE (NIL PUTSELF)) |else| (QUOTE (NIL PUTNOTSELF))) |else| (QUOTE EVAL))) EVAL PROP . PPE)))))(SETTEMPLATE (QUOTE |ApplyMethod|) (QUOTE (BOTH (EVAL EVAL EVAL (\\\, (COND ((|QuotedArg?| (CADDDR EXPR)) (QUOTE (NIL OBJECT))) (T (QUOTE EVAL)))) . PPE) (@ (BQUOTE ((\\\, (CAR EXPR)) (\\\, (CADR EXPR)))) (GETTEMPLATE (QUOTE _!))))))(* |;;;| "The verbs IMPLEMENT, SPECIALIZE and OVERRIDE")(DEFINEQ(|LoopsMethodMSGETDEF|  (lambda (name type source options)                     (* \; "Edited  8-Jun-88 17:01 by JAMES.PA")    (let* ((methbody (cdr (remove-comments (getdef name 'method-fns source options))))           clp?           (name&args (|if| (eq (car methbody)                                ':function-type)                            |then|                            (|pop| methbody)                            (setq clp? (eq (|pop| methbody)                                           ':cl))                            (|pop| methbody)                            |else|                            (|pop| methbody))))                    (* |;;| "If the source can be found, this will return something of the form:")                    (* |;;| "(Method ((class-name selector) arg1 arg2...) body1...)")                    (* |;;| "Masterscope wants to analyze something of the form:")                    (* |;;| "(LAMBDA (ARGS) BODY...) or (CL:LAMBDA (ARGS) BODY...) depending on whether :FUNCTION-TYPE is specified")          (and methbody `(,(|if| clp? |then| 'cl:lambda |else| 'lambda) ,(cdr name&args) ,@methbody))          )))(|MethodOverrides?|  (lambda (|meth| |noSendSuper?|)                            (* |smL| " 9-Apr-87 16:33")                    (* * |Does| |this| |method| |override| \a |super| |method?|)    (let ((|methObj| ($! |meth|)))         (and |methObj| (_ |methObj| |InstOf!| '|Method|)              (|for| |class| |in| (_ ($! (@ |methObj| |className|))                                     |ListAttribute|                                     '|Supers|)                     |thereis|                               (* |gee,| |is| |there| |any| |super|                                                              |method| |at| |all?|)                     (and (|type?| |class| ($! |class|))                          (|FetchMethod| ($! |class|)                                 (@ |methObj| |selector|))))              (let ((|specialize?| (or (testrelation |meth| '(call) '|_Super|)                                       (testrelation |meth| '(call) '|_SuperFringe|)                                       (testrelation |meth| '(call) '|_Super?|))))                                                             (* |does| |this| |override| |or|                                                              |specialize?|)                   (|if| |noSendSuper?| |then| (not |specialize?|)                         |else| |specialize?|)))))))(MSADDRELATION (QUOTE (IMPLEMENT IMPLEMENTS IMPLEMENTING IMPLEMENTED)))(SETSYNONYM (QUOTE (SPECIALIZES &)) (QUOTE (@ (|MethodOverrides?| X) IMPLEMENTS 1)))(SETSYNONYM (QUOTE (SPECIALIZING &)) (QUOTE (@ (|MethodOverrides?| X) IMPLEMENTS 1)))(SETSYNONYM (QUOTE (OVERRIDES &)) (QUOTE (@ (|MethodOverrides?| X T) IMPLEMENTS 1)))(SETSYNONYM (QUOTE (OVERRIDING &)) (QUOTE (@ (|MethodOverrides?| X T) IMPLEMENTS 1)))(* |;;;| "The verb GET")(MSADDRELATION (QUOTE (GET GETS GETTING GOTTEN)) (QUOTE (GETNOTSELF GETSELF)))(MSADDMODIFIER (QUOTE GET) (QUOTE IV) (QUOTE (GETNOTSELF GETSELF)))(MSADDMODIFIER (QUOTE GET) (QUOTE SELF) (QUOTE GETSELF))(MSADDMODIFIER (QUOTE GET) (QUOTE NOTSELF) (QUOTE GETNOTSELF))(SETSYNONYM (QUOTE GOT) (QUOTE GOTTEN))(ADDTOVAR DESCRIBELST ("gets IVs of self: " (GETRELATION FN (QUOTE (GET SELF)))) ("gets IVs:  " (GETRELATION FN (QUOTE (GET NOTSELF)))))(SETTEMPLATE (QUOTE |GetClassIV|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetIVHere|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetValue|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetValueOnly|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetClassIVHere|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETNOTSELF) PROP . PPE)))))))(ADDTEMPLATEWORD (QUOTE GETCVSELF))(ADDTEMPLATEWORD (QUOTE GETCVNOTSELF))(MSADDMODIFIER (QUOTE GET) (QUOTE CV) (QUOTE (GETCVSELF GETCVNOTSELF)))(MSADDMODIFIER (QUOTE GET) (QUOTE CVSELF) (QUOTE GETCVSELF))(MSADDMODIFIER (QUOTE GET) (QUOTE CVNOTSELF) (QUOTE GETCVNOTSELF))(SETTEMPLATE (QUOTE |GetCVHere|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETCVSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETCVNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetClassValue|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETCVSELF) PROP . PPE))) (T (QUOTE (EVAL (NIL GETCVNOTSELF) PROP . PPE)))))))(SETTEMPLATE (QUOTE |GetClassValueOnly|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL GETCVSELF) PROP . PPE))) T (QUOTE (EVAL (NIL GETCVNOTSELF) PROP . PPE))))))(ADDTOVAR DESCRIBELST ("gets CVs of self: " (GETRELATION FN (QUOTE (GET CVSELF)))) ("gets CVs:  " (GETRELATION FN (QUOTE (GET CVNOTSELF)))))(* |;;;| "The verb PUT")(MSADDRELATION (QUOTE (PUT PUTS PUTTING PUT)) (QUOTE (PUTNOTSELF PUTSELF)))(MSADDMODIFIER (QUOTE PUT) (QUOTE IV) (QUOTE (PUTNOTSELF PUTSELF)))(MSADDMODIFIER (QUOTE PUT) (QUOTE SELF) (QUOTE PUTSELF))(MSADDMODIFIER (QUOTE PUT) (QUOTE NOTSELF) (QUOTE PUTNOTSELF))(ADDTOVAR DESCRIBELST ("puts IVs of self: " (GETRELATION FN (QUOTE (PUT SELF)))) ("puts IVs:  " (GETRELATION FN (QUOTE (PUT NOTSELF)))))(SETTEMPLATE (QUOTE |PutClassIV|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTNOTSELF) EVAL PROP . PPE)))))))(SETTEMPLATE (QUOTE |PutValue|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTNOTSELF) EVAL PROP . PPE)))))))(SETTEMPLATE (QUOTE |PutValueOnly|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTNOTSELF) EVAL PROP . PPE)))))))(ADDTEMPLATEWORD (QUOTE PUTCVSELF))(ADDTEMPLATEWORD (QUOTE PUTCVNOTSELF))(MSADDMODIFIER (QUOTE PUT) (QUOTE CV) (QUOTE (PUTCVSELF PUTCVNOTSELF)))(MSADDMODIFIER (QUOTE PUT) (QUOTE CVSELF) (QUOTE PUTCVSELF))(MSADDMODIFIER (QUOTE PUT) (QUOTE CVNOTSELF) (QUOTE PUTCVNOTSELF))(SETTEMPLATE (QUOTE |PutClassValue|) (QUOTE (! NIL @ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTCVSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTCVNOTSELF) EVAL PROP . PPE)))))))(SETTEMPLATE (QUOTE |PutClassValueOnly|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTCVSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTCVNOTSELF) EVAL PROP . PPE)))))))(SETTEMPLATE (QUOTE |PutCVHere|) (QUOTE (@ EXPR (COND ((NOT (AND (LISTP (CADR EXPR)) (EQ (CAADR EXPR) (QUOTE QUOTE)))) (QUOTE (EVAL EVAL EVAL PROP . PPE))) ((|LoopsSELFp| (CAR EXPR)) (QUOTE (EVAL (NIL PUTCVSELF) EVAL PROP . PPE))) (T (QUOTE (EVAL (NIL PUTCVNOTSELF) EVAL PROP . PPE)))))))(ADDTOVAR DESCRIBELST ("puts CVs of self: " (GETRELATION FN (QUOTE (PUT CVSELF)))) ("puts CVs:  " (GETRELATION FN (QUOTE (PUT CVNOTSELF)))))(* |;;;| "...  USE THE IV/CV/OBJECT/MSG ...")(MSADDTYPE (QUOTE IV) (QUOTE (PUTNOTSELF PUTSELF GETNOTSELF GETSELF)) (QUOTE (IVS)))(MSADDTYPE (QUOTE CV) (QUOTE (PUTCVNOTSELF PUTCVSELF GETCVNOTSELF GETCVSELF)) (QUOTE (CVS)))(ADDTEMPLATEWORD (QUOTE OBJECT))(MSADDTYPE (QUOTE OBJECT) (QUOTE (OBJECT)) (QUOTE (OBJECTS)))(MSADDTYPE (QUOTE MSG) (QUOTE (SENDNOTSELF SENDSELF)) (QUOTE (MESSAGE SELECTOR MSGS MESSAGES SELECTORS)))(SETTEMPLATE (QUOTE $) (QUOTE (OBJECT . PPE)))(SETTEMPLATE (QUOTE $!) (QUOTE (EVAL . PPE)))(* |;;;| "Extend the CHECK MasterScope command to verify certain constraints in Loops")(DEFINEQ(|CheckLoopsFiles|  (lambda (|files|)                                          (* |smL| "14-Feb-86 16:45")                    (* * |Verify| |that| |all| |methods| |defined| |on| |the| |files| |are|           |somehow| |kosher|)    (|for| |file| |in| |files| |do| (|for| |method| |in| (filecomslst |file| 'methods)                                           |do|                                           (_ ($! |method|)                                              |MSCheck| |file| nil))           (|for| |class| |in| (filecomslst |file| 'classes)                  |do|                  (_ ($! |class|)                     |MSCheck| |file| nil))))))(|\\BatchMethodDefs|)(METH |Class|  |MSCheck| (|onFile| |outputFile|)      "Use MasterScope to check the consistancy of the class" (|category| (|Masterscope| |Class|)))(METH |Method|  |MSCheck| (|onFile| |outputFile|)      "Check that the method is kosher" (|category| (|Masterscope| |Method|)))(|Method| ((|Class| |MSCheck|) |self| |onFile| |outputFile|) (* \; "smL 11-Apr-86 14:45") (* |;;;| "Use MasterScope to check the consistancy of the class") (LET ((|comments| NIL) (|className| (_ |self| |ClassName|)) (|localIVs| (_ |self| |ListAttribute| (QUOTE IV\s))) (|localCVs| (_ |self| |ListAttribute| (QUOTE CV\s)))) (|for| |iv| |in| (LDIFFERENCE |localIVs| (MASTERSCOPE (BQUOTE (WHAT IV IN (QUOTE (\\\, |localIVs|)) IS USED BY ANY)))) |do| (|push| |comments| (CONCAT "IV " |iv| " defined but not used by any"))) (|for| |cv| |in| (LDIFFERENCE (LDIFFERENCE |localCVs| (MASTERSCOPE (BQUOTE (WHAT CV IN (QUOTE (\\\, |localCVs|)) IS USED BY ANY)))) (MASTERSCOPE (BQUOTE (WHAT IV IN (QUOTE (\\\, |localCVs|)) IS USED BY ANY)))) |do| (|push| |comments| (CONCAT "CV " |cv| " defined but not used by any"))) (|if| |comments| |then| (|printout| |outputFile| T .FONT BOLDFONT |className| .FONT DEFAULTFONT ": ") (|for| |comment| |in| |comments| |do| (|printout| |outputFile| .TAB 15 |comment| T)) |className| |else| NIL)))(|Method| ((|Method| |MSCheck|) |self| |onFile| |outputFile|) (* \; "smL 11-Apr-86 15:06") (* |;;;| "Check that the method is kosher") (LET ((|comments| NIL) (|methodName| (@ |method|)) (|argList| (ARGLIST (@ |method|))) (|methodClass| ($! (@ |className|)))) (MASTERSCOPE (BQUOTE (ANALYZE (QUOTE (\\\, |methodName|))))) (* |check| |to| |make| |sure| |that| |the| |first| |arg| |is| |self|) (|if| (NEQ (CAR |argList|) (QUOTE |self|)) |then| (|push| |comments| "first arg is not self")) (* |check| |that| |the| |first| |arg| |doesn't| |get| |smashed|) (|if| (MEMB (CAR |argList|) (GETRELATION |methodName| (QUOTE (SMASH)))) |then| (|push| |comments| (|if| (EQ (CAR |argList|) (QUOTE |self|)) |then| "smashes self" |else| (CONCAT "smashes " (CAR |argList|) " [its first arg]")))) (* |look| |for| |msgs| |sent| |to| |self| |that| |are| |not| |defined| |in| |the| |class|) (LET ((|funnyMsgs| (LDIFFERENCE (GETRELATION |methodName| (QUOTE ((SEND SELF)))) (_ |methodClass| |ListAttribute!| (QUOTE |Methods|) NIL T)))) (|if| (NULL |funnyMsgs|) |then| NIL |elseif| (EQLENGTH |funnyMsgs| 1) |then| (|push| |comments| (CONCAT "sends " (CAR |funnyMsgs|) " to self, but the msg is not defined in the class")) |else| (|push| |comments| (CONCAT "sends " |funnyMsgs| " to self, but the msgs are not defined in the class")))) (* |look| |for| |ivs| |of| |self| |used| |but| |not| |defined| |in| |the| |class| - NOTE |that| |this| |includes| CV\s |as| IV\s |because| |of| |the| |new| |:allocation| |stuff|) (LET ((|funnyIVs| (LDIFFERENCE (LDIFFERENCE (UNION (GETRELATION |methodName| (QUOTE ((GET SELF)))) (GETRELATION |methodName| (QUOTE ((PUT SELF))))) (_ |methodClass| |ListAttribute!| (QUOTE IV\s) NIL T)) (_ |methodClass| |ListAttribute!| (QUOTE CV\s) NIL T)))) (|if| (NULL |funnyIVs|) |then| NIL |elseif| (EQLENGTH |funnyIVs| 1) |then| (|push| |comments| (CONCAT " uses the IV " (CAR |funnyIVs|) " that is not defined in the class")) |else| (|push| |comments| (CONCAT " uses the IVs " |funnyIVs| " that are not defined in the class")))) (LET ((|funnyCVs| (LDIFFERENCE (UNION (GETRELATION |methodName| (QUOTE ((GET CVSELF)))) (GETRELATION |methodName| (QUOTE ((PUT CVSELF))))) (_ |methodClass| |ListAttribute!| (QUOTE CV\s) NIL T)))) (|if| (NULL |funnyCVs|) |then| NIL |elseif| (EQLENGTH |funnyCVs| 1) |then| (|push| |comments| (CONCAT " uses the CV " (CAR |funnyCVs|) " that is not defined in the class")) |else| (|push| |comments| (CONCAT " uses the CVs " |funnyCVs| " that are not defined in the class")))) (|if| |comments| |then| (|printout| |outputFile| T .FONT BOLDFONT |methodName| .FONT DEFAULTFONT ": ") (|for| |comment| |in| (REVERSE |comments|) |do| (|printout| |outputFile| .TAB 15 |comment| T)) |methodName| |else| NIL)))(|\\UnbatchMethodDefs|)(ADDTOVAR MSCHECKFNS |CheckLoopsFiles|)(* |;;;| "A hook that lets method objects check their MasterScope data")(DEFINEQ(|LoopsAnalyzeHook|  (lambda (|fnName| |def| |data|)                            (* |smL:| "11-Nov-85 12:26")                    (* * |When| |the| |method| |is| |analyzed| |by| |MasterScope,| |try| |to|           |send| \a |message| |to| |the| |method| |object| |so| |it| |can| |check| |the|           |data|)    (let ((|methObj| ($! |fnName|)))         (|if| (and |methObj| (_ |methObj| |InstOf!| '|Method|))               |then|                                        (* |The| |methObj| |should| |return|                                                              |the| (|possibly| |altered|) |data|)               (_ |methObj| |CheckMSData| |data|)               |else| |data|)))))(|\\BatchMethodDefs|)(METH |Method|  |CheckMSData| (|alist|)      "The method function is being analyzed. Check the resulting data and return the (possibly modified) data" (|category| (|Masterscope| |Method|)))(|Method| ((|Method| |CheckMSData|) |self| |alist|) (* \; "smL 10-Feb-86 12:44") (* |;;;| "The method function is being analyzed. Check the resulting data and return the (possibly modified) data") (LET ((|selector| (@ |selector|)) (|implements| (ASSOC (QUOTE IMPLEMENT) |alist|))) (|if| (NULL |implements|) |then| (NCONC1 |alist| (LIST (QUOTE IMPLEMENT) |selector|)) |elseif| (NOT (MEMB |selector| (CDR |implements|))) |then| (NCONC1 |implements| |selector|))) |alist|)(|\\UnbatchMethodDefs|)(ADDTOVAR ANALYZEUSERFNS |LoopsAnalyzeHook|)(* |;;;| "Teach MasterScope how to analyze Classes and Methods")(DEFINEQ(|AnalyzeClass|  (lambda (|className| |reanalyze?|)                         (* |smL:| "12-Nov-85 13:13")                    (* * |Analyze| |the| |class| |for| |MasterScope|)    (let ((|class| ($! |className|)))         (|if| (and |class| (_ |class| |InstOf!| '|Class|))               |then|               (_ |class| |MSAnalyze| |reanalyze?|)))))(|AnalyzeMethod|  (lambda (|methodName| |reanalyze?|)                        (* |smL:| "12-Nov-85 13:13")                    (* * |Analyze| |the| |Loops| |method| |for| |MasterScope|)    (let ((|methodObj| ($! |methodName|)))         (|if| (and |methodObj| (_ |methodObj| |InstOf!| '|Method|))               |then|               (_ |methodObj| |MSAnalyze| |reanalyze?|))))))(|\\BatchMethodDefs|)(METH |Class|  |MSAnalyze| (|reanalyze?|)      "Analyze the class for MasterScope" (|category| (|Masterscope| |Class|)))(METH |Method|  |MSAnalyze| (|reanalyze?|)      "Analyze the method for MasterScope" (|category| (|Masterscope| |Method|)))(|Method| ((|Class| |MSAnalyze|) |self| |reanalyze?|) (* \; "smL: 12-Nov-85 13:10") (* |;;;| "Analyze the class for MasterScope") NIL)(|Method| ((|Method| |MSAnalyze|) |self| |reanalyze?|) (* \; "smL  5-Dec-85 10:30") (* |;;;| "Analyze the method for MasterScope") NIL)(|\\UnbatchMethodDefs|)(MSADDANALYZE (QUOTE CLASSES) (QUOTE CLASS))(MSADDANALYZE (QUOTE METHODS) (QUOTE METHOD) (QUOTE METHOD-FNS) (QUOTE |LoopsMethodMSGETDEF|))(* |;;;| "Definer for Masterscope method templates and templates for some system methods")(DEF-DEFINE-TYPE METHOD-TEMPLATES "Functions to generate Masterscope templates for LOOPS methods")(DEFDEFINER (DEF-METHOD-TEMPLATE (:PROTOTYPE (LAMBDA (METHOD) (* |;;| "The mondo-weird quoting below is to keep the back-quoted structure from expanding too early.") (BQUOTE (DEF-METHOD-TEMPLATE (\\\, METHOD) (|self| |message| "other-arguments") (LET ((|self?| (|LoopsSELFp| |self|))) (\\\, (LIST (QUOTE BQUOTE) (QUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) "rest of template"))))))))) (:UNDEFINER (LAMBDA (METHOD) (REMHASH METHOD *LOOPS-METHOD-TEMPLATES*)))) METHOD-TEMPLATES (METHOD &REST REST) (BQUOTE (CL:SETF (CL:GETHASH (QUOTE (\\\, METHOD)) *LOOPS-METHOD-TEMPLATES*) (\\\, (|if| (AND (NULL (CDR REST)) (CL:SYMBOLP (CAR REST))) |then| (BQUOTE (QUOTE (\\\, (CAR REST)))) |else| (BQUOTE (CL:FUNCTION (LAMBDA (\\\,@ REST)))))))))(CL:DEFVAR *LOOPS-METHOD-TEMPLATES* (CL:MAKE-HASH-TABLE))(DEFINEQ(|QuotedArg?|  (lambda (thing)                                            (* \; "Edited  2-Dec-87 13:13 by jrb:")    (and (listp thing)         (eq (car thing)             'quote))))(|LoopsSELFp|  (lambda (instance-name)                                    (* |edited:| " 6-Oct-87 13:06")    (or (eq instance-name 'self)        (eq instance-name '|self|))))(|_PutGetTemplate|(LAMBDA (EX) (* \; "Edited 11-Apr-88 15:08 by jrb:") (* |;;;| "If the method is something special like Get, Put, or a naming method, return an appropriately munged template.") (LET ((|template-function| (GET-METHOD-TEMPLATE (CADR EX)))) (|if| |template-function| |then| (APPLY |template-function| EX) |else| (BQUOTE (EVAL (\\\, (|if| (|LoopsSELFp| (CAR EX)) |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) |..| EVAL))))))(GET-METHOD-TEMPLATE(LAMBDA (MESSAGE) (CL:GETHASH MESSAGE *LOOPS-METHOD-TEMPLATES*)))(MUNG-CV-TEMPLATE(LAMBDA (|self| |message| |varName| |newValue|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |varName|) |then| (QUOTE (NIL PUTCVNOTSELF)) |else| (QUOTE EVAL))) EVAL)))))(NAME-OBJECT-TEMPLATE(LAMBDA (|self| |message| |name|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |name|) |then| (QUOTE (NIL OBJECT)) |else| (QUOTE EVAL))) . PPE)))))(PUT-METHOD-TEMPLATE(LAMBDA (|self| |message| |varName| |newValue| |propName|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |varName|) |then| (|if| |self?| |then| (QUOTE (NIL PUTSELF)) |else| (QUOTE (NIL PUTNOTSELF))) |else| (QUOTE EVAL))) RESULT PROP . PPE))))))(DEF-METHOD-TEMPLATE |AddCV| MUNG-CV-TEMPLATE)(DEF-METHOD-TEMPLATE |AddIV| PUT-METHOD-TEMPLATE)(DEF-METHOD-TEMPLATE |Copy| NAME-OBJECT-TEMPLATE)(DEF-METHOD-TEMPLATE |CopyCV| MUNG-CV-TEMPLATE)(DEF-METHOD-TEMPLATE |CopyIV| (|self| |message| |ivName| |toClass|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |ivName|) |then| (QUOTE (NIL PUTNOTSELF)) |else| (QUOTE EVAL))) (\\\, (|if| (|QuotedArg?| |toClass|) |then| (QUOTE (NIL OBJECT)) |else| (QUOTE EVAL)))))))(DEF-METHOD-TEMPLATE |CreateClass| (|self| |message| |name| |supers|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |name|) |then| (QUOTE (NIL OBJECT)) |else| (QUOTE EVAL))) (\\\, (|if| (|QuotedArg?| |supers|) |then| (QUOTE (NIL (|..| OBJECT))) |else| (QUOTE EVAL))) . PPE))))(DEF-METHOD-TEMPLATE |DeleteIV| (|self| |message| |varName| |propName|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |varName|) |then| (|if| |self?| |then| (QUOTE (NIL PUTSELF)) |else| (QUOTE (NIL PUTNOTSELF))) |else| (QUOTE EVAL))) PROP . PPE))))(DEF-METHOD-TEMPLATE |Get| (|self| |message| |varName| |propName|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |varName|) |then| (|if| |self?| |then| (QUOTE (NIL GETSELF)) |else| (QUOTE (NIL GETNOTSELF))) |else| (QUOTE EVAL))) PROP . PPE))))(DEF-METHOD-TEMPLATE |New| NAME-OBJECT-TEMPLATE)(DEF-METHOD-TEMPLATE |NewWithValues| (|self| |message| |valDescriptionList|) (LET ((|self?| (|LoopsSELFp| |self|))) (BQUOTE (EVAL (\\\, (|if| |self?| |then| (QUOTE SENDSELF) |else| (QUOTE SENDNOTSELF))) (\\\, (|if| (|QuotedArg?| |valDescriptionList|) |then| (QUOTE (NIL |..| (PUTNOTSELF NIL PROP NIL))) |else| (QUOTE EVAL))) . PPE))))(DEF-METHOD-TEMPLATE |Put| PUT-METHOD-TEMPLATE)(DEF-METHOD-TEMPLATE |Rename| NAME-OBJECT-TEMPLATE)(DEF-METHOD-TEMPLATE |SetName| NAME-OBJECT-TEMPLATE)(DEF-METHOD-TEMPLATE |UnSetName| NAME-OBJECT-TEMPLATE)(PUTPROPS LOOPSMS COPYRIGHT ("Venue & Xerox Corporation" 1985 1986 1987 1988 1990 1992 1993))(DECLARE\: DONTCOPY  (FILEMAP (NIL (9649 12231 (|LoopsMethodMSGETDEF| 9659 . 10851) (|MethodOverrides?| 10853 . 12229)) (19023 19716 (|CheckLoopsFiles| 19033 . 19714)) (23919 24659 (|LoopsAnalyzeHook| 23929 . 24657)) (25496 26276 (|AnalyzeClass| 25506 . 25875) (|AnalyzeMethod| 25877 . 26274)) (28031 29938 (|QuotedArg?| 28041 . 28240) (|LoopsSELFp| 28242 . 28431) (|_PutGetTemplate| 28433 . 28883) (GET-METHOD-TEMPLATE 28885 . 28975) (MUNG-CV-TEMPLATE 28977 . 29276) (NAME-OBJECT-TEMPLATE 29278 . 29559) (PUT-METHOD-TEMPLATE 29561 . 29936)))))STOP