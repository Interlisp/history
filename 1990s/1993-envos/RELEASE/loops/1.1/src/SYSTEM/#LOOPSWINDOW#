(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED "15-Aug-90 13:53:16" {DSK}<usr>local>lde>SOURCES>loops>SYSTEM>LOOPSWINDOW.;2 60968        changes to%:  (VARS LOOPSWINDOWCOMS)      previous date%: "15-Mar-88 16:39:11" {DSK}<usr>local>lde>SOURCES>loops>SYSTEM>LOOPSWINDOW.;1)(* ; "Copyright (c) 1983, 1984, 1985, 1986, 1987, 1988, 1990 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT LOOPSWINDOWCOMS)(RPAQQ LOOPSWINDOWCOMS       ((CLASSES LispWindowAV IconWindow LoopsIcon NonRectangularWindow Window)        (METHODS IconWindow.GetMenuItems LispWindowAV.GetWrappedValue LispWindowAV.InitLispWindow                LispWindowAV.PutWrappedValue LoopsIcon.BrowseObject LoopsIcon.CleanUpFile                LoopsIcon.EditFileComs LoopsIcon.FileBrowse LoopsIcon.SupersBrowse                NonRectangularWindow.AfterMove NonRectangularWindow.CreateWindow                NonRectangularWindow.EditIcon NonRectangularWindow.EditMask                NonRectangularWindow.Invert NonRectangularWindow.Shape NonRectangularWindow.Update                Window.AfterMove Window.AfterReshape Window.AttachLispWindow Window.Blink Window.Bury               Window.ButtonEventFn Window.ChoiceMenu Window.Clear Window.ClearMenuCache                Window.ClearPromptWindow Window.Close Window.ClosePromptWindow Window.CreateWindow                Window.CursorInside? Window.Destroy Window.DetachLispWindow Window.GetMenuItems                Window.GetPromptWindow Window.GetProp Window.Hardcopy Window.HardcopyToFile                Window.HardcopyToPrinter Window.HasLispWindow Window.Invert Window.ItemMenu                Window.LeftChoice Window.LeftSelection Window.MiddleChoice Window.MiddleSelection                Window.MousePackage Window.MouseReadtable Window.Move Window.Move1 Window.Open                Window.Open? Window.Paint Window.PromptEval Window.PromptForList                Window.PromptForString Window.PromptForWord Window.PromptPrint Window.PromptRead                Window.Repaint Window.RightButtonFn Window.RightSelection Window.ScrollWindow                Window.SetOuterRegion Window.SetProp Window.SetRegion Window.Shade Window.Shape                Window.Shape1 Window.Shape? Window.Shrink Window.Snap Window.TitleSelection                Window.ToTop Window.Update Window.WhenMenuItemHeld)        (P (METASHIFT T))        (FUNCTIONS CopyDown? MetaDown? MoveDown?)        (VARS (DefaultLoopsTTYWindow PROMPTWINDOW))        (FNS Don'tCloseIfBusy EVAL.IN.TTY.CONTEXT EVAL.IN.TTY.CONTEXT1 Window.WhenHeldFn              WindowAfterMoveFn WindowButtonEventFn WindowCloseFn WindowReshapeFn WindowRightButtonFn)        (BITMAPS BlackLoopsIconBM LoopsIconShadow)        (* ;;; "SavedValue stuff")        (FNS PutSavedValue SavedValue)))(DEFCLASSES LispWindowAV IconWindow LoopsIcon NonRectangularWindow Window)(DEFCLASS LispWindowAV   (MetaClass Class doc "Ensure that the local state is a Lisp window, with a WINDOWPROP pointer back to the instance - See the window IV of the class Window"          Edited%:                                       (* smL "19-May-86 17:15"))   (Supers LocalStateActiveValue))(DEFCLASS IconWindow   (MetaClass Class doc "An icon window that appears as an irregular shaped image on the screen - See the ICONW Library utility"          Edited%:                                       (* smL "18-Sep-86 13:20"))   (Supers NonRectangularWindow)   (InstanceVariables (RightButtonItems (Move)                             doc "Menu items for right button.")          (MiddleButtonItems NIL doc "Menu items for middle button.")          (LeftButtonItems (Move)                 doc "Menu items for left button.")          (ShiftMiddleButtonItems NIL doc "Menu items for middle with shift key.")          (ShiftLeftButtonItems (Move)                 doc "Menu items for left with shift key.")))(DEFCLASS LoopsIcon   (MetaClass Class Edited%:                             (* smL "21-Aug-86 15:42")          doc "This is the default metaClass for all classes")   (Supers NonRectangularWindow)   (ClassVariables (RightButtonItems (Close Move))          [MiddleButtonItems (("Browse File" (FileBrowse (("Browse File" FileBrowse)                                                          ("Edit FileComs" EditFileComs)                                                          ("Cleanup File" CleanUpFile]          [LeftButtonItems (("Browse Class" (BrowseObject (("Browse Class" BrowseObject)                                                           ("Browse Supers" SupersBrowse]          (Prototype #,($& LoopsIcon (JNW0.%:F5.C38.O\; . 61)) doc "CV added by LANNING"))   (InstanceVariables (savedValue NIL doc "value used by inspector on saving")          (icon NIL bitMap BlackLoopsIconBM doc "This will allow a bitmap to be stored in the instance If the bitMap property is set to an atom whose value is a bitMap, then that bitMap will be used"                )          (mask NIL bitMap LoopsIconShadow doc "This will allow a mask bitmap to be stored in the instance If the bitMap property is set to an atom whose value is a bitMap, then that bitMap will be used"                )))(DEFCLASS NonRectangularWindow   (MetaClass Class Edited%:                             (* smL "21-Aug-86 14:34")          doc "This is the default metaClass for all classes")   (Supers Window)   (InstanceVariables (icon NIL bitMap NIL doc "This will allow a bitmap to be stored in the instance If the bitMap property is set to an atom whose value is a bitMap, then that bitMap will be used"                            )          (mask NIL bitMap NIL doc "This will allow a mask bitmap to be stored in the instance If the bitMap property is set to an atom whose value is a bitMap, then that bitMap will be used"                )))(DEFCLASS Window   (MetaClass Class Edited%:                             (* smL " 8-Apr-87 17:35")          doc "A Loops object which represents a window")   (Supers Object)   (ClassVariables (TitleItems NIL doc "special items to be done if in title part of window")          (LeftButtonItems ((Update 'Update "Update window to agree with object IVs"))                 doc "Items to be done if Left button is selected in main window")          (ShiftLeftButtonItems NIL doc                  "Items to be done if Left button is selected in main window with SHIFT key down.")          (MiddleButtonItems NIL doc "Items to be done if Middle button is selected in main window")          (ShiftMiddleButtonItems NIL doc                  "Items to be done if Middle button is selected in main window with SHIFT key down.")          (RightButtonItems ((Close (Close (Close Destroy)))                             Snap Paint Clear Bury Repaint (Hardcopy (Hardcopy (HardcopyToFile                                                                                     HardcopyToPrinter                                                                                      )))                             Move Shape Shrink)                 doc "Items to be done if Right button is selected"))   (InstanceVariables (left NIL doc "left position of window")          (bottom NIL doc "bottom position of window")          (width 12 doc "outer width of window, including border")          (height 12 doc "outer height of window, including border")          (window #,($AV LispWindowAV ((YIV0.C=N5.W_7 . 10))) DontSave (Value)                 doc "Holds real window. Ensured to be window by GetLispWindow PutLispWindow")          (title NIL doc "If not NIL will be put in title of window")          (menus T DontSave Any Title NIL LeftButtonItems NIL MiddleButtonItems NIL TitleItems NIL                  doc "Cache For Saved Menus. Will Cache Menus only if value is T")))(\BatchMethodDefs)(METH IconWindow  GetMenuItems (itemType)      (* Get item list for menu. Check for shift keys.)      (category (Window)))(METH LispWindowAV  GetWrappedValue (containingObj varName propName type)      (* * Fetch the value wrapped in the active value)      (category (ActiveValue)))(METH LispWindowAV  InitLispWindow (containingObj varName window propName type position)      (* * Initialize the Lisp window)      (category (LispWindowAV)))(METH LispWindowAV  PutWrappedValue (containingObj varName newValue propName type)      (* * Replace the value wrapped in the active value)      (category (ActiveValue)))(METH LoopsIcon  BrowseObject NIL      (* Put up a browser starting on selected object)      (category (LoopsIcon)))(METH LoopsIcon  CleanUpFile NIL      (* * Do a CLEANUP of the selected file)      (category (LoopsIcon)))(METH LoopsIcon  EditFileComs NIL      (* Edit the COMS for the selected file)      (category (LoopsIcon)))(METH LoopsIcon  FileBrowse NIL      (* Browse selected file)      (category (LoopsIcon)))(METH LoopsIcon  SupersBrowse NIL      (* Put up a browser starting on selected object)      (category (LoopsIcon)))(METH NonRectangularWindow  AfterMove NIL      (* * The window has been moved. Update the left and bottom)      (category (Window)))(METH NonRectangularWindow  CreateWindow NIL      (* Check if we have icon and mask, create an ICONW)      (category (Window)))(METH NonRectangularWindow  EditIcon NIL      (* Edit and restore icon for this window)      (category (NonRectangularWindow)))(METH NonRectangularWindow  EditMask NIL      (* Should put you in a bitmap editor on the mask. If mask is NIL then it will create a bitmap          copy of icon -- if it exists)      (category (NonRectangularWindow)))(METH NonRectangularWindow  Invert NIL      (* * Invert the icon window)      (category (Window)))(METH NonRectangularWindow  Shape (newRegion noUpdateFlg)      (* Specialization)      (category (Window)))(METH NonRectangularWindow  Update NIL      (* * Make sure the real Lisp window is where the Loops window thinks it is)      (category (Window)))(METH Window  AfterMove NIL      (* * The window has been moved. Update the left and bottom)      (category (Window)))(METH Window  AfterReshape (oldBitmapImage oldRegion oldScreenRegion)      (* * The window has been reshaped)      (category (Window)))(METH Window  AttachLispWindow (window)      NIL (category (Window)))(METH Window  Blink (numBlinks)      (* Turn Window inverted, dismiss for 200, and return it to normal)      (category (Window)))(METH Window  Bury NIL      (* Calls BURYW on window)      (category (Window)))(METH Window  ButtonEventFn NIL      "Called when there is a button event in a Loops Window" (category (Window)))(METH Window  ChoiceMenu (itemCV)      (* Create a menu which allows subitems to be displayed. Cache it in the menus field of the          browser under the property name itemCV)      (category (Window)))(METH Window  Clear NIL      (* Calls CLEARW on window)      (category (Window)))(METH Window  ClearMenuCache NIL      (* Delete Menus saved on menus)      (category (Window)))(METH Window  ClearPromptWindow NIL      (* * Clear my prompt window)      (category (Window)))(METH Window  Close NIL      NIL (category (Window)))(METH Window  ClosePromptWindow NIL      (* * Get rid of the prompt window, if we have one)      (category (Window)))(METH Window  CreateWindow NIL      NIL (category (Window)))(METH Window  CursorInside? NIL      (* Returns T if the cursor is inside the window now.)      (category (Window)))(METH Window  Destroy NIL      (* * Remove ButtonFns and close window on Destroying)      (category (Object)))(METH Window  DetachLispWindow NIL      (* * Forget about the current lisp window)      (category (Window)))(METH Window  GetMenuItems (itemCV)      (* Get item list for menu)      (category (Window)))(METH Window  GetPromptWindow (lines fontDef)      (* * Return the current prompt window)      (category (Window)))(METH Window  GetProp (prop)      (* get property from window)      (category (Window)))(METH Window  Hardcopy NIL      (* * Hardcopy the window)      (category (Window)))(METH Window  HardcopyToFile NIL      (* * Make a hardcopy of the window into a file)      (category (Window)))(METH Window  HardcopyToPrinter NIL      (* * Sends an image of the window to a printer of your choosing)      (category (Window)))(METH Window  HasLispWindow NIL      (* Checks if a Lisp window has ever been created for this Loops Window)      (category (Window)))(METH Window  Invert NIL      (* Inverts the window.)      (category (Window)))(METH Window  ItemMenu (items title)      (* Create a simnple (one level)         menu which will not overflow height of screen)      (category (Window)))(METH Window  LeftChoice NIL      (* * Get the choices from the LeftButtonItems)      (category (Window)))(METH Window  LeftSelection NIL      (* Make choice for Left Button down)      (category (Window)))(METH Window  MiddleChoice NIL      (* * Make choice for Middle Button down)      (category (Window)))(METH Window  MiddleSelection NIL      (* Do MiddleButtonItems on selection)      (category (Window)))(METH Window  MousePackage NIL      "Returns the package to be bound during interactions with windows" (category (Window)))(METH Window  MouseReadtable NIL      "Returns the readtable to be bound during interactions with windows" (category (Window)))(METH Window  Move (xOrPos y)      (* * Move the window)      (category (Window)))(METH Window  Move1 (xOrPos y)      (* * Move the window)      (category (Window)))(METH Window  Open NIL      (* * Open the window)      (category (Window)))(METH Window  Open? NIL      "Predicate on whether a window is open" (category (Window)))(METH Window  Paint NIL      (* Calls paint on window)      (category (Window)))(METH Window  PromptEval (msg)      (* * Prompt the user for some input, using an attached prompt window. Evaluate the input...)      (category (Window)))(METH Window  PromptForList (promptStr initialString)      NIL (category (Window)))(METH Window  PromptForString (promptStr initialStr)      NIL (category (Window)))(METH Window  PromptForWord (promptStr initialWord)      (* * Prompt user in prompt window for a word.)      (category (Window)))(METH Window  PromptPrint (prompt)      (* * Prints out a prompt in an attached prompt window)      (category (Window)))(METH Window  PromptRead (msg)      (* * Prompt the user for some input, using an attached prompt window)      (category (Window)))(METH Window  Repaint (reg alwaysFlg)      (* Calls Update on window)      (category (Window)))(METH Window  RightButtonFn NIL      (* Call Right Selection for options)      (category (Window)))(METH Window  RightSelection NIL      (* Do RightButtonItems on selection.)      (category (Window)))(METH Window  ScrollWindow (dspX dspY windowX windowY)      NIL (category (Window)))(METH Window  SetOuterRegion (region noUpdateFlg)      NIL (category (Window)))(METH Window  SetProp (prop value)      (* * set value in real window)      (category (Window)))(METH Window  SetRegion (region noUpdateFlg)      (* * Make Loops Window have region parameters)      (category (Window)))(METH Window  Shade (shade)      "Shades window" (category (Window)))(METH Window  Shape (newRegion noUpdateFlg)      (* * Shapes outside of region to specified shape.)      (category (Window)))(METH Window  Shape1 (newRegion noUpdateFlg)      (* * Shapes outside of region to specified shape.)      (category (Window)))(METH Window  Shape? NIL      (* Returns the current region for window)      (category (Window)))(METH Window  Shrink (towhat iconPos expandFn)      (* * Shrink the window)      (category (Window)))(METH Window  Snap NIL      (* Takes snapshot of screen)      (category (Window)))(METH Window  TitleSelection NIL      (* Do TitleItems if selected in title area)      (category (Window)))(METH Window  ToTop NIL      (* Open window and then bring it to top)      (category (Window)))(METH Window  Update NIL      (* * make the Lisp window be consistent with ivs)      (category (Window)))(METH Window  WhenMenuItemHeld (item menu key)      (* * What to do when the menu item is held)      (category (Window)))(Method ((IconWindow GetMenuItems) self itemType)        (* ; "gsf: 23-Oct-84 13:38")   "Get item list for menu. Check for shift keys."   (GetValue self itemType))(Method ((LispWindowAV GetWrappedValue) self containingObj varName propName type)                                                             (* ; "smL  9-May-86 10:25")   "Fetch the value wrapped in the active value"   [LET ((localState (_Super )))        (COND           ((WINDOWP localState)            localState)           (T                                                (* replace the local state with a                                                            window)              (_ self PutWrappedValue containingObj varName (_ containingObj CreateWindow)                      propName type)])(Method ((LispWindowAV InitLispWindow) self containingObj varName window propName type position)                                                             (* ; "smL 11-Sep-86 13:51")   "Initialize the Lisp window"   (if position       then (MOVEW window position))   (WINDOWPROP window 'LoopsWindow containingObj)   (_ containingObj SetOuterRegion (WINDOWPROP window 'REGION)            'NoUpdate)   (WINDOWPROP window 'RIGHTBUTTONFN 'WindowRightButtonFn)   (WINDOWPROP window 'BUTTONEVENTFN 'WindowButtonEventFn)   (WINDOWPROP window 'AFTERMOVEFN 'WindowAfterMoveFn)   (WINDOWPROP window 'RESHAPEFN 'WindowReshapeFn)   window)(Method ((LispWindowAV PutWrappedValue) self containingObj varName newValue propName type)                                                             (* ; "smL 14-May-86 18:59")   "Replace the value wrapped in the active value"   (if (WINDOWP newValue)       then (_ self InitLispWindow containingObj varName newValue propName type)             (_Super )     else (ERROR newValue "should be window")))(Method ((LoopsIcon BrowseObject) self)                  (* ; "smL 28-Dec-85 10:04")   "Put up a browser starting on selected object"   [PROG ((name (PromptRead "Please tell me the name of the root object")))         (COND            (name (Browse name))            (T (PROMPTPRINT "No object name given"])(Method ((LoopsIcon CleanUpFile) self)                   (* ; "smL 11-Jun-86 16:29")   "Do a CLEANUP of the selected file"   (EVAL.IN.TTY.CONTEXT    '[PROGN (FILES?)            (LET* [[dirtyFiles (SORT (for file in FILELST                                        when (CDR (GETPROP (ROOTFILENAME file T)                                                             'FILE)) collect (ROOTFILENAME file T                                                                                        ]                   (file (AND dirtyFiles (MENU (create MENU                                                      ITEMS _ dirtyFiles                                                      TITLE _ "Which file?"]                  (if file                      then (APPLY* (FUNCTION CLEANUP)                                      file]    "Cleanup"))(Method ((LoopsIcon EditFileComs) self)                  (* ; "smL 11-Jun-86 16:29")   "Edit the COMS for the selected file"   (EVAL.IN.TTY.CONTEXT '[LET ((file (SelectFile)))                                  (if (AND file (BOUNDP (FILECOMS file)))                                      then (APPLY* (FUNCTION DV)                                                      (FILECOMS file]          "Edit Filecoms"))(Method ((LoopsIcon FileBrowse) self)                    (* ; "dgb: 19-Sep-84 14:11")   "Browse selected file"   (PROG ((file (SelectFile)))         (AND file (_ (_New ($ FileBrowser)                            BrowseFile file)                      Move))))(Method ((LoopsIcon SupersBrowse) self)                  (* ; "smL  2-Jan-86 16:39")   "Put up a browser starting on selected object"   [LET ((name (PromptRead "Please tell me the name of the root object")))        (COND           (name (_New ($ SupersBrowser)                       Browse name))           (T (PROMPTPRINT "No object name given"])(Method ((NonRectangularWindow AfterMove) self)          (* ; "smL 21-Aug-86 15:37")   "The window has been moved. Update the left and bottom"   (PROG1 (_Super )       (if (OPENWP (@ window))           then                                          (* This is a hack to get the icon to                                                            repaint)                 (_ self Close)                 (_ self Open))))(Method ((NonRectangularWindow CreateWindow) self)       (* ; "smL 21-Aug-86 14:35")   "Check if we have icon and mask, create an ICONW"   [COND      ((NOT (type? BITMAP (@ icon)))       (COND          [(@ icon%:,bitMap)           (_@ icon (BITMAPCOPY (EVALV (@ icon%:,bitMap))))]          (T (_ self EditIcon)]   [COND      ((NOT (type? BITMAP (@ mask)))       (COND          [(@ mask%:,bitMap)           (_@ mask (BITMAPCOPY (EVALV (@ mask%:,bitMap))))]          (T (_ self EditMask)]   [ICONW (@ icon)          (@ mask)          (AND (@ left)               (@ bottom)               (create POSITION                      XCOORD _ (@ left)                      YCOORD _ (@ bottom)])(Method ((NonRectangularWindow EditIcon) self)           (* ; "smL 21-Aug-86 14:35")   "Edit and restore icon for this window"   (_@ icon (EDITBM (@ icon))))(Method ((NonRectangularWindow EditMask) self)           (* ; "smL 21-Aug-86 14:36")   "Should put you in a bitmap editor on the mask. If mask is NIL then it will create a bitmap copy of icon -- if it exists"   (_@ mask [EDITBM (COND                       ((type? BITMAP (@ mask))                        (@ mask))                       (T (COND                             ((type? BITMAP (@ icon))                              (BITMAPCOPY (@ icon)]))(Method ((NonRectangularWindow Invert) self)             (* ; "smL 21-Aug-86 16:05")   "Invert the icon window"   (LET* [(w (@ window))          (newImage (BITMAPCOPY (WINDOWPROP w 'ICONIMAGE]         (BLTSHADE BLACKSHADE newImage NIL NIL NIL NIL 'INVERT)         (WINDOWPROP w 'ICONIMAGE newImage)         (BITBLT (WINDOWPROP w 'ICONMASK)                NIL NIL newImage NIL NIL NIL NIL 'INVERT 'ERASE)         (\ICONW.REPAINTFN w)))(Method ((NonRectangularWindow Shape) self newRegion noUpdateFlg)                                                             (* ; "smL 21-Aug-86 14:36")   "Specialization"   (LoopsHelp "Can't shape an ICONW!"))(Method ((NonRectangularWindow Update) self)             (* ; "smL 21-Aug-86 14:37")   "Make sure the real Lisp window is where the Loops window thinks it is"(* ;;; "NOTE: Should do something to make sure that the icon image is correct, in case the bitmaps have been changed.")   (MOVEW (@ window)          (@ left)          (@ bottom)))(Method ((Window AfterMove) self)                        (* ; "smL 10-Apr-86 16:10")   "The window has been moved. Update the left and bottom"   (LET [(region (WINDOWPROP (@ window)                        'REGION]        (change (@ left)               (fetch LEFT of region))        (change (@ bottom)               (fetch BOTTOM of region))))(Method ((Window AfterReshape) self oldBitmapImage oldRegion oldScreenRegion)                                                             (* ; "smL 10-Apr-86 16:12")   "The window has been reshaped"   (LET [(region (WINDOWPROP (@ window)                        'REGION]        (change (@ left)               (fetch LEFT of region))        (change (@ bottom)               (fetch BOTTOM of region))        (change (@ width)               (fetch WIDTH of region))        (change (@ height)               (fetch HEIGHT of region))        (RESHAPEBYREPAINTFN (@ window)               oldBitmapImage oldRegion oldScreenRegion)))(Method ((Window AttachLispWindow) self window)          (* ; "smL 10-Apr-86 14:42")   "Give this Loops window a lisp window, and fill in the IVs from the lisp window"   (OR (WINDOWP window)       (ERROR "Non-WINDOW in AttachLispWindow" window))   (if (_ self HasLispWindow)       then (_ self DetatchLispWindow))   [LET [(region (WINDOWPROP window 'REGION]        (change (@ window)               window)        (change (@ bottom)               (fetch BOTTOM of region))        (change (@ left)               (fetch LEFT of region))        (change (@ height)               (fetch HEIGHT of region))        (change (@ width)               (fetch WIDTH of region))        (change (@ title)               (WINDOWPROP window 'TITLE])(Method ((Window Blink) self numBlinks)                  (* ; "mjs: 24-Oct-84 08:21")   "Turn Window inverted, dismiss for 200, and return it to normal"   (SETQ numBlinks (OR numBlinks 1))   (for from 1 to numBlinks do (DISMISS 250)                                              (_ self Invert)                                              (DISMISS 250)                                              (_ self Invert)))(Method ((Window Bury) self)                             (* ; "dgb: 26-JAN-83 10:51")   "Calls BURYW on window"   (BURYW (@ window)))(Method ((Window ButtonEventFn) self)                    (* ; "smL  2-Jan-86 16:41")   "Called when there is a button event in a Loops Window"   [LET ((window (@ window))         (*PACKAGE* (_ self MousePackage))         (*READTABLE* (_ self MouseReadtable)))        (OR [ERSETQ (COND                       ((NULL (INSIDEP (DSPCLIPPINGREGION NIL window)                                     (LASTMOUSEX window)                                     (LASTMOUSEY window)))                        (_ self TitleSelection))                       ((MOUSESTATE LEFT)                        (_ self LeftSelection))                       ((MOUSESTATE MIDDLE)                        (_ self MiddleSelection)]            (PROGN (RINGBELLS)                   (PROMPTPRINT "Error under Mouse Process"])(Method ((Window ChoiceMenu) self itemCV)                (* ; "smL 29-Dec-85 13:54")   "Create a menu which allows subitems to be displayed. Cache it in the menus field of the browser under the property name itemCV"   (PROG (items (menu (GetValue self 'menus itemCV)))         (COND            ((type? MENU menu)             (RETURN menu))            ((NLISTP (SETQ items (_ self GetMenuItems itemCV)))             (RETURN NIL)))         (SETQ menu (create MENU                           ITEMS _ items                           WHENSELECTEDFN _ 'SubItemSelection                           SUBITEMFN _ 'DualSubItems                           WHENHELDFN _ 'Window.WhenHeldFn                           CHANGEOFFSETFLG _ T                           CENTERFLG _ T))                   (* Cache menu if menus is T)         (AND (@ menus)              (PutValue self 'menus menu itemCV))         (RETURN menu)))(Method ((Window Clear) self)                            (* ; "dgb: 26-JAN-83 10:51")   "Calls CLEARW on window"   (CLEARW (@ window)))(Method ((Window ClearMenuCache) self)                   (* ; "smL 11-Apr-86 14:46")   "Delete Menus saved on menus"   (for prop in (_ self ListAttribute 'IVPROPS 'menus) do (PutValue self 'menus                                                                              NoValueFound prop))   self)(Method ((Window ClearPromptWindow) self)                (* ; "smL 13-Aug-86 18:33")   "Clear my prompt window"   (CLEARW (_ self GetPromptWindow)))(Method ((Window Close) self)                            (* ; "smL 13-Aug-86 18:53")   "Close the window, and the prompt window if there is one.  Don't close if browser is waiting on input to its prompt window"   (CLOSEW (@ window)))(Method ((Window ClosePromptWindow) self)                (* ; "smL 13-Aug-86 19:03")   "Get rid of the prompt window, if we have one"   (LET ((pWindow (GETPROMPTWINDOW (@ window)                         NIL NIL T)))        (AND pWindow (CLOSEW pWindow))))(Method ((Window CreateWindow) self)                     (* ; "smL 10-Apr-86 14:32")   "Create the Lisp window for this window but don't open it."   (_@ window (CREATEW (CREATEREGION (OR (@ left)                                         LASTMOUSEX)                              (OR (@ bottom)                                  LASTMOUSEY)                              (OR (@ width)                                  25)                              (OR (@ height)                                  25))                     (@ title)                     NIL T)))(Method ((Window CursorInside?) self)                    (* ; "mjs: 23-Oct-84 17:21")   "Returns T if the cursor is inside the window now."   (EQ (@ window)       (WHICHW)))(Method ((Window Destroy) self)                          (* ; "smL 13-Aug-86 19:04")   "Remove ButtonFns and close window on Destroying"   (LET [(w (AND (_ self HasLispWindow)                 (@ window)]        (COND           (w (WINDOWPROP w 'LoopsWindow NIL)              (WINDOWPROP w 'RightButtonFn NIL)              (WINDOWPROP w 'ButtonEventFn NIL)              (CLOSEW w)))        (_Super )))(Method ((Window DetachLispWindow) self)                 (* ; "smL  8-Apr-87 17:25")   "Forget about the current lisp window"   (LET ((val (GetValueOnly self 'window NIL)))        (if (WINDOWP val)            then (change (@ window)                            NIL)                  (WINDOWPROP val 'LoopsWindow NIL)                  (WINDOWPROP val 'RIGHTBUTTONFN NIL)                  (WINDOWPROP val 'BUTTONEVENTFN NIL)                  NIL          elseif (type? annotatedValue val)            then (bind (av _ val)                            wrappedValue while (type? annotatedValue (SETQ wrappedValue                                                                              (_AV av                                                                                   GetWrappedValueOnly)                                                                              ))                        do (SETQ av wrappedValue) finally (if (WINDOWP wrappedValue)                                                                      then (_AV av                                                                                   PutWrappedValueOnly                                                                                       NIL)                                                                            (WINDOWPROP wrappedValue                                                                                   'LoopsWindow NIL)                                                                            (WINDOWPROP wrappedValue                                                                                   'RIGHTBUTTONFN NIL                                                                                   )                                                                            (WINDOWPROP wrappedValue                                                                                   'BUTTONEVENTFN NIL                                                                                   )))          else NIL)))(Method ((Window GetMenuItems) self itemCV)              (* ; "gsf: 23-Oct-84 12:36")   "Get item list for menu"   (GetClassValue self itemCV))(Method ((Window GetPromptWindow) self lines fontDef)    (* ; "smL  8-Apr-87 15:43")   "Return the current prompt window"   (LET [(w (GETPROMPTWINDOW (@ window)                   (OR lines 2)                   (FONTCREATE fontDef]        (if fontDef            then (DSPFONT (FONTCREATE fontDef)                            w))        w))(Method ((Window GetProp) self prop)                     (* ; "dgb: 19-JAN-83 19:48")   "get property from window"   (WINDOWPROP (@ window)          prop))(Method ((Window Hardcopy) self)                         (* ; "smL 26-Feb-86 17:25")   "Hardcopy the window"   (HARDCOPYIMAGEW (@ window)))(Method ((Window HardcopyToFile) self)                   (* ; "smL 26-Feb-86 17:26")   "Make a hardcopy of the window into a file"   (HARDCOPYIMAGEW.TOFILE (@ window)))(Method ((Window HardcopyToPrinter) self)                (* ; "smL 26-Feb-86 17:27")   "Sends an image of the window to a printer of your choosing"   (HARDCOPYIMAGEW.TOPRINTER (@ window)))(Method ((Window HasLispWindow) self)                    (* ; "smL 24-Sep-85 18:34")   "Checks if a Lisp window has ever been created for this Loops Window"   [LET [(w (GetIVHere self 'window]        (AND (NEQ NotSetValue w)             (OR (WINDOWP w)                 (AND (type? annotatedValue w)                      (WINDOWP (GetLocalState (fetch annotatedValue of w)                                      self                                      'window])(Method ((Window Invert) self)                           (* ; "mjs: 23-Oct-84 17:19")   "Inverts the window."   (BITBLT NIL NIL NIL (@ window)          NIL NIL NIL NIL 'TEXTURE 'INVERT BLACKSHADE))(Method ((Window ItemMenu) self items title)             (* ; "dgb: 21-Apr-84 09:31")   "Create a simnple (one level) menu which will not overflow height of screen"   (create MENU          ITEMS _ items          MENUCOLUMNS _ (ADD1 (IQUOTIENT (ITIMES (FONTHEIGHT MENUFONT)                                                (LENGTH items))                                     750))          TITLE _ title          CHANGEOFFSETFLG _ T))(Method ((Window LeftChoice) self)                       (* ; "smL  8-Apr-87 17:10")   "Get the choices from the LeftButtonItems"   (DECLARE (SPECVARS windowForMenu))   (GETMOUSESTATE)   [PROG [(windowForMenu self)          (menu (_ self ChoiceMenu (COND                                      ((AND (MetaDown?)                                            (_ self GetMenuItems 'ShiftLeftButtonItems))                                       'ShiftLeftButtonItems)                                      (T 'LeftButtonItems)))]         (RETURN (AND menu (MENU menu])(Method ((Window LeftSelection) self)                    (* ; "dgb: 17-Apr-84 15:19")   "Make choice for Left Button down"   [PROG ((choice (_ self LeftChoice)))         (RETURN (AND choice (_! self choice)])(Method ((Window MiddleChoice) self)                     (* ; "smL  8-Apr-87 17:11")   "Make choice for Middle Button down"   (DECLARE (SPECVARS windowForMenu))   (GETMOUSESTATE)   [PROG [(windowForMenu self)          (menu (_ self ChoiceMenu (COND                                      ((AND (MetaDown?)                                            (_ self GetMenuItems 'ShiftMiddleButtonItems))                                       'ShiftMiddleButtonItems)                                      (T 'MiddleButtonItems)))]         (RETURN (AND menu (MENU menu])(Method ((Window MiddleSelection) self)                  (* ; "dgb: 17-Apr-84 15:23")   "Do MiddleButtonItems on selection"   [PROG ((choice (_ self MiddleChoice)))         (RETURN (AND choice (_! self choice)])(Method ((Window MousePackage) self)   "Returns the package to be bound during interactions with windows"   (CL:FIND-PACKAGE "INTERLISP"))(Method ((Window MouseReadtable) self)   "Returns the readtable to be bound during interactions with windows"   (FIND-READTABLE 'INTERLISP))(Method ((Window Move) self xOrPos y)                    (* ; "smL 11-Sep-86 13:24")   "Move the window"   (_ self Move1 [OR xOrPos (LET* [(entire-region (WINDOWREGION (@ window)))                                   (pos (GETBOXPOSITION (fetch WIDTH of entire-region)                                               (fetch HEIGHT of entire-region)                                               (fetch LEFT of entire-region)                                               (fetch BOTTOM of entire-region]                                  (create POSITION                                         XCOORD _ (PLUS (fetch XCOORD of pos)                                                        (DIFFERENCE (@ left)                                                               (fetch LEFT of entire-region))                                                        )                                         YCOORD _ (PLUS (fetch YCOORD of pos)                                                        (DIFFERENCE (@ bottom)                                                               (fetch BOTTOM of entire-region                                                                      ]           y))(Method ((Window Move1) self xOrPos y)                   (* ; "smL 13-Aug-86 19:10")   "Move the window"   [LET [(needsUpdate? (OR (NOT (_ self HasLispWindow))                           (NOT (SUBREGIONP (CONSTANT (CREATEREGION 0 0 SCREENWIDTH SCREENHEIGHT))                                       (WINDOWPROP (@ window)                                              'REGION]        (PROG1 (MOVEW (@ window)                      xOrPos y)                              (* The left and right IVs are                                                            updated by the message AfterMove)            (COND               (needsUpdate? (_ self Update))))])(Method ((Window Open) self)                             (* ; "smL 13-Aug-86 19:11")   "Open the window"   (if (OPENWP (@ window))       then NIL     else (_ self Update)           (OPENW (@ window))))(Method ((Window Open?) self) "Predicate on whether a window is open"   (OPENWP (@ window)))(Method ((Window Paint) self)                            (* ; "dgb: 26-JAN-83 10:50")   "Calls paint on window"   (PAINTW (@ window)))(Method ((Window PromptEval) self msg)                   (* ; "smL 13-Aug-86 18:42")   "Prompt the user for some input, using an attached prompt window. Evaluate the input..."   (LET ((pWindow (_ self GetPromptWindow)))        (CLEARW pWindow)        (PromptEval msg pWindow T)))(Method ((Window PromptForList) self promptStr initialString)                                                             (* ; "smL  8-Apr-87 16:44")   "Prompt user in prompt window for a list of words."   (LET ((pWindow (_ self GetPromptWindow))         (mainWindow (@ window))         result)        (RESETFORM (TTYDISPLAYSTREAM pWindow)               (CLEARW pWindow)               (WINDOWPROP mainWindow 'PROCESS (WINDOWPROP pWindow 'PROCESS))               (WINDOWADDPROP mainWindow 'CLOSEFN 'Don'tCloseIfBusy 'FIRST)               (CL:UNWIND-PROTECT                   (SETQ result (TTYIN promptStr NIL NIL '(NORAISE)                                       NIL NIL initialString))                   (WINDOWPROP mainWindow 'PROCESS NIL)))        result))(Method ((Window PromptForString) self promptStr initialStr)                                                             (* ; "smL 13-Aug-86 18:42")   "Prompt user in prompt window for a string."   (LET ((pWindow (_ self GetPromptWindow))         (mainWindow (@ window))         result)        (RESETFORM (TTYDISPLAYSTREAM pWindow)               (CLEARW pWindow)               (WINDOWPROP mainWindow 'PROCESS (WINDOWPROP pWindow 'PROCESS))               (WINDOWADDPROP mainWindow 'CLOSEFN 'Don'tCloseIfBusy 'FIRST)               (CL:UNWIND-PROTECT                   (SETQ result (TTYIN promptStr NIL NIL '(STRING NORAISE)                                       NIL NIL initialStr))                   (WINDOWPROP mainWindow 'PROCESS NIL)))        result))(Method ((Window PromptForWord) self promptStr initialWord)                                                             (* ; "smL  8-Apr-87 16:43")   "Prompt user in prompt window for a word."   (CAR (_ self PromptForList promptStr initialWord)))(Method ((Window PromptPrint) self prompt)               (* ; "smL 13-Aug-86 18:46")   "Prints out a prompt in an attached prompt window"   (PRIN1 prompt (_ self GetPromptWindow)))(Method ((Window PromptRead) self msg)                   (* ; "smL 13-Aug-86 19:15")   "Prompt the user for some input, using an attached prompt window"   (LET ((pWindow (_ self GetPromptWindow)))        (CLEARW pWindow)        (PromptRead msg pWindow T)))(Method ((Window Repaint) self reg alwaysFlg)            (* ; "dgb: 26-JAN-83 23:46")   "Calls Update on window"   (_ self Update))(Method ((Window RightButtonFn) self)                    (* ; "dgb: 21-Apr-84 09:01")   "Call Right Selection for options"   (_ self RightSelection))(Method ((Window RightSelection) self)                   (* ; "dgb: 17-Apr-84 15:46")   "Do RightButtonItems on selection."   [PROG [choice (menu (_ self ChoiceMenu 'RightButtonItems)]         (SETQ choice (AND menu (MENU menu)))         (RETURN (AND choice (_! self choice)])(Method ((Window ScrollWindow) self dspX dspY windowX windowY)                                                             (* ; "smL 10-Apr-86 14:58")   "scroll the window to set the point dspX,dspY in the given window position -- default is the lower left corner. If any x or y is a FIXP, it is treated as a absolute position. If FLOATP, it is treated as a relative position. Return the position of the new lower left corner."   (LET [(visibleRegion (DSPCLIPPINGREGION NIL (@ window)))         (extent (OR (WINDOWPROP (@ window)                            'EXTENT)                     (WINDOWPROP (@ window)                            'REGION]                         (* figure out what to do with                                                            default and relative offsets)        (SETQ windowX (if (NULL windowX)                          then 0                        elseif (FLOATP windowX)                          then [FIX (TIMES windowX (WINDOWPROP (@ window)                                                              'WIDTH]                        else windowX))        (SETQ windowY (if (NULL windowY)                          then 0                        elseif (FLOATP windowY)                          then [FIX (TIMES windowY (WINDOWPROP (@ window)                                                              'HEIGHT]                        else windowY))        (SETQ dspX (if (NULL dspX)                       then (fetch LEFT of visibleRegion)                     elseif (FLOATP dspX)                       then (FIX (TIMES dspX (fetch WIDTH of extent)))                     else dspX))        (SETQ dspY (if (NULL dspY)                       then (IMINUS (fetch BOTTOM of visibleRegion))                     elseif (FLOATP dspY)                       then (FIX (TIMES dspY (fetch HEIGHT of extent)))                     else dspY))        (SCROLLW (@ window)               (IPLUS windowX (IDIFFERENCE (fetch LEFT of visibleRegion)                                     dspX))               (IPLUS windowY (IDIFFERENCE (fetch BOTTOM of visibleRegion)                                     dspY)))                 (* return the resulting position)        (SETQ visibleRegion (DSPCLIPPINGREGION NIL (@ window)))        (create POSITION               XCOORD _ (fetch LEFT of visibleRegion)               YCOORD _ (fetch BOTTOM of visibleRegion))))(Method ((Window SetOuterRegion) self region noUpdateFlg)(* ; "smL 16-Apr-86 13:21")   "Make Loops Window have region parameters"   (* ;; "JRB - Send Update only if things are changing")   (LET (newRegion?)        (if (NOT (EQ (@ left)                         (fetch LEFT of region)))            then (_@ left (fetch LEFT of region))                  (SETQ newRegion? T))        (if (NOT (EQ (@ bottom)                         (fetch BOTTOM of region)))            then (_@ bottom (fetch BOTTOM of region))                  (SETQ newRegion? T))        (if (NOT (EQ (@ width)                         (fetch WIDTH of region)))            then (_@ width (fetch WIDTH of region))                  (SETQ newRegion? T))        (if (NOT (EQ (@ height)                         (fetch HEIGHT of region)))            then (_@ height (fetch HEIGHT of region))                  (SETQ newRegion? T))        (if (AND newRegion? (NOT noUpdateFlg))            then (_ self Update))        region))(Method ((Window SetProp) self prop value)               (* ; "smL  8-Apr-87 17:17")   "set value in real window"   (PROG1 (WINDOWPROP (@ window)                 prop value)       (SELECTQ prop           (TITLE (change (@ title)                         value))           NIL)))(Method ((Window SetRegion) self region noUpdateFlg)     (* ; "smL 16-Apr-86 13:22")   "Make Loops Window have region parameters"   (_ self SetOuterRegion [CREATEREGION (fetch LEFT of region)                                 (fetch BOTTOM of region)                                 (WIDTHIFWINDOW (fetch WIDTH of region)                                        (WINDOWPROP (@ window)                                               'BORDER))                                 (HEIGHTIFWINDOW (fetch HEIGHT of region)                                        (@ title)                                        (WINDOWPROP (@ window)                                               'BORDER]           noUpdateFlg))(Method ((Window Shade) self shade) "Shades window"   (AND (_ self Open?)        (DSPFILL NIL (OR shade GRAYSHADE1)               'PAINT               (@ window))))(Method ((Window Shape) self newRegion noUpdateFlg)      (* ; "smL 11-Sep-86 13:41")   "Shapes outside of region to specified shape."   (_ self Shape1 [OR newRegion (GETREGION NIL NIL (WINDOWPROP (@ window)                                                          'REGION]           noUpdateFlg))(Method ((Window Shape1) self newRegion noUpdateFlg)     (* ; "smL  8-Apr-87 17:35")   "Shapes outside of region to specified shape."   (_ self SetOuterRegion newRegion noUpdateFlg))(Method ((Window Shape?) self)                           (* ; "dgb: 26-JAN-83 11:21")   "Returns the current region for window"   (WINDOWPROP (@ window)          'REGION))(Method ((Window Shrink) self towhat iconPos expandFn)   (* ; "smL  9-Sep-86 13:09")   "Shrink the window"   (LET    ((icon (SHRINKW (@ window)                  towhat iconPos expandFn)))    [WINDOWPROP     icon     'RIGHTBUTTONFN     (FUNCTION (LAMBDA (icon)                 (LET                  [(item                    (MENU                     (LOADTIMECONSTANT                      (create                       MENU                       CENTERFLG _ T                       ITEMS _ (for command in IconWindowMenuCommands                                  collect (if (EQ 'Close (CAR command))                                                  then [APPEND                                                            command                                                            `((SUBITEMS ,command (Destroy                                                                                  'DESTROY                                                          "Destroy the icon and its associated window"                                                                                  ]                                                else command]                  (SELECTQ item                      (NIL NIL)                      (DESTROY (_ (WINDOWPROP (WINDOWPROP icon 'ICONFOR)                                         'LoopsWindow)                                  Destroy)                               (CLOSEW icon))                      (APPLY* item icon]    icon))(Method ((Window Snap) self)                             (* ; "sm:  9-SEP-83 14:27")   "Takes snapshot of screen"   (SNAPW))(Method ((Window TitleSelection) self)                   (* ; "dgb: 17-Apr-84 15:35")   "Do TitleItems if selected in title area"   (PROG (menu choice)         (SETQ choice (OR (AND (SETQ menu (_ self ChoiceMenu 'TitleItems))                               (MENU menu))                          (RETURN NIL)))         (RETURN (_! self choice))))(Method ((Window ToTop) self)                            (* ; "dgb: 26-Apr-84 08:20")   "Open window and then bring it to top"   (TOTOPW (@ window)))(Method ((Window Update) self)                           (* ; "smL 29-Sep-86 11:56")   "make the Lisp window be consistent with ivs"   [LET* [(window (@ window))          (region (AND (@ width)                       (@ height)                       (create REGION                              LEFT _ (OR (@ left)                                         (change (@ left)                                                LASTMOUSEX))                              BOTTOM _ (OR (@ bottom)                                           (change (@ bottom)                                                  LASTMOUSEY))                              WIDTH _ (@ width)                              HEIGHT _ (@ height)]         [COND            ([AND region (NOT (EQUAL region (WINDOWPROP window 'REGION]                                                             (* The shape has changed.                                                           -                                                           This is complicated because of                                                            ATTACHEDWINDOWS.)             (LET* [(attachedWindows (WINDOWPROP (@ window)                                            'ATTACHEDWINDOWS))                    (attachmentSpecs (for w in attachedWindows                                        collect (LIST (WINDOWPROP w 'DOWINDOWCOMFN)                                                          (WINDOWPROP w 'WHEREATTACHED)                                                          (WINDOWPROP w 'PASSTOMAINCOMS]                   (for w in attachedWindows do (DETACHWINDOW w))                   (SHAPEW window region)                   (for w in attachedWindows as spec in attachmentSpecs                      do (ATTACHWINDOW w (@ window)                                    (CAADR spec)                                    (CDADR spec))                            (WINDOWPROP w 'DOWINDOWCOMFN (CAR spec))                            (WINDOWPROP w 'PASSTOMAINCOMS (CADDR spec]         (AND [NOT (EQUAL (@ title)                          (WINDOWPROP window 'TITLE]              (WINDOWPROP window 'TITLE (@ title)])(Method ((Window WhenMenuItemHeld) self item menu key)   (* ; "smL  8-Apr-87 17:13")   "What to do when the menu item is held"   (PROMPTPRINT (OR [COND                       ((NLISTP item)                        (* Get method documentation from                                                            object or browser)                        (GetMethod (Class self)                               item                               'doc))                       ((CDDR item)                        (CADDR item))                       ((NLISTP (CADR item))                        (GetMethod (Class self)                               (CADR item)                               'doc))                       ((GetMethod (Class self)                               (CAADR item)                               'doc]                    "When released this item will be selected")))(\UnbatchMethodDefs)(METASHIFT T)(DEFMACRO CopyDown? ()            (* * Is the Copy button down?)   '(OR (KEYDOWNP 'COPY)        (SHIFTDOWNP '1SHIFT)))(DEFMACRO MetaDown? ()            (* * Is the Meta button down?)   '(SHIFTDOWNP 'META))(DEFMACRO MoveDown? ()            (* * Is the Meta button down?)   '(OR (KEYDOWNP 'MOVE)        (SHIFTDOWNP 'CTRL)))(RPAQ DefaultLoopsTTYWindow PROMPTWINDOW)(DEFINEQ(Don'tCloseIfBusy  [LAMBDA (window)                                           (* ; "Edited 17-Nov-87 10:18 by jrb:")    (if (WINDOWPROP window 'PROCESS)        then (PROMPTPRINT "Browser is busy, can't close")             'DON'T])(EVAL.IN.TTY.CONTEXT  [LAMBDA (form procName)                                    (* ; "Edited 22-Jun-87 09:37 by smL")(* ;;; "Evaluate the form in the current TTY process, if that process is in a TTY wait in a BREAK, otherwise evaluate it in a new process.")    (PROCESS.EVAL (TTY.PROCESS)           (LIST (FUNCTION EVAL.IN.TTY.CONTEXT1)                 (KWOTE form)                 (KWOTE procName])(EVAL.IN.TTY.CONTEXT1  [LAMBDA (form procName)    (DECLARE (LOCALVARS . T))                                (* ; "Edited 22-Jun-87 09:37 by smL")                    (* ;; "Subfunction of EVAL.IN.TTY.CONTEXT")    (if [AND (STKPOS 'EXEC-READ-LINE)             [EQ 'EXEC (STKNTHNAME -4 (STKPOS 'EXEC-READ-LINE]             (EQ 'DEBUGGER (STKNTHNAME -3 (STKPOS 'EXEC]        then (EVAL form)      else (ADD.PROCESS `(PROGN (TTYDISPLAYSTREAM DefaultLoopsTTYWindow)                                ,form) 'NAME procName])(Window.WhenHeldFn  [LAMBDA (item menu key)                                    (* smL "29-Dec-85 15:28")                    (* Send to window the message to respond to time out on menu)    (DECLARE (SPECVARS windowForMenu))    (_ windowForMenu WhenMenuItemHeld item menu key)])(WindowAfterMoveFn  [LAMBDA (window)                                           (* smL "10-Apr-86 16:16")                    (* * The SimpleWindow AFTERMOVEFN)    (LET [(w (WINDOWPROP window 'LoopsWindow]         (AND w (_ w AfterMove)])(WindowButtonEventFn  [LAMBDA (window)                                           (* ; "Edited 28-Feb-88 21:35 by bane")                    (* ;; "if there's something in the WINDOW's process slot, its prompt window is waiting on input, so don't do anything and let the TTY jump back to the prompt window.")                    (* ;;           "HACK: allow the button event anyway if the shift is down (thus allowing shift-selection).")    (LET [(windowForMenu (WINDOWPROP window 'LoopsWindow]         (DECLARE (SPECVARS windowForMenu))         (if (OR (NULL (WINDOWPROP window 'PROCESS))                 (AND (MOUSESTATE LEFT)                      (CopyDown?)))             then (if [OR (NOT windowForMenu)                          (AND (_ windowForMenu InstOf! 'NonRectangularWindow)                               (ZEROP (BITMAPBIT (@ windowForMenu mask)                                             (LASTMOUSEX window)                                             (LASTMOUSEY window]                      then NIL                    else (TOTOPW window)                         (_ windowForMenu ButtonEventFn)])(WindowCloseFn  [LAMBDA (window)                                           (* dgb%: "18-Apr-84 07:37")                                                             (* Remove link back to LoopsWindow)    (WINDOWPROP window 'LoopsWindow NIL])(WindowReshapeFn  [LAMBDA (window oldBitmapImage oldRegion)                  (* smL " 9-May-86 10:07")                    (* * The RESHAPEFN for a Window)    (LET [(w (WINDOWPROP window 'LoopsWindow]         (AND w (_ w AfterReshape oldBitmapImage oldRegion)])(WindowRightButtonFn  [LAMBDA (window)                                           (* smL "11-Sep-86 13:49")    (LET [(windowForMenu (WINDOWPROP window 'LoopsWindow]         (DECLARE (SPECVARS windowForMenu))         (if [OR (NOT windowForMenu)                 (AND (_ windowForMenu InstOf! 'NonRectangularWindow)                      (ZEROP (BITMAPBIT (@ windowForMenu mask)                                    (LASTMOUSEX window)                                    (LASTMOUSEY window]             then NIL           else (TOTOPW window)                (_ windowForMenu RightButtonFn)]))(RPAQQ BlackLoopsIconBM #*(64 64)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AJJH@@@@@@@@@@@AB@@BH@@@@@@@@@@B@@@@F@@@@@@@@@AH@OO@AH@@@@@@@@B@OOOO@D@@@@@@@@HGOOOOLC@@@@@@@A@OOOOOO@H@@@@@@BAOGKAAOHD@@@@@@DGOGJOFONB@@@@@@@COGJOFOOA@@@@@@IIOGKCAOOH@@@@@ACMOGKMGOOLH@@@@BCLOGKMGOOLF@@@@@GNO@JCGOOHB@@@@DONGOOOOONFC@@@@HOOGOOOOLMOAH@@@IOOKOOOOJCOIL@@@ANOIOOONCOOHC@@ACMGLGOOHOMML@H@CCKKOCOOAOMMLLD@OCHCOHONDONKLOBAOCKKOJGHNONKLOICLGKJOK@CNGOFNCHGHGOOOCOOOGOONALOBGOOOGOOOCOONDNOFGOIOOOOOKOONFNOBGOIOOOOOOOONFNGHGOIOANCJGHONDNGLAOIN@LAHCBGNALCO@AINDLIIICN@CLAOOAINDLIIIHNAOI@OOOINDLIIINGOOB@COOHB@LAHCBGOLD@@AOHCANCHGHON@H@B@AOOOOOIOOH@N@@AI@@AOOOIN@@AH@@@HN@@@@@I@@GH@@@@DOON@@@OAOOB@@@@DGMOOOOOOCNB@@@@BCKOAKOOOKLD@@@@@CCNNKNOOILH@@@@@HGNNKOOOLHH@@@@@@ONNHNOOOA@@@@@@@GNNKFOONC@@@@@@AANNKFOOHD@@@@@@@HOAHNOO@H@@@@@@@DCOOJOLC@@@@@@@@B@OOHO@D@@@@@@@@AH@OO@AH@@@@@@@@@F@@@@F@@@@@@@@@@CN@@GH@@@@@@@@@@@AOOH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@)(RPAQQ LoopsIconShadow)(* ;;; "SavedValue stuff")(DEFINEQ(PutSavedValue  [LAMBDA (value)                                            (* smL " 5-Sep-86 12:41")                    (* * Store away the saved value)    (change (@ (_ ($ LoopsIcon)                  Prototype)               savedValue)           value)    (SETTOPVAL 'IT value)    value])(SavedValue  [LAMBDA NIL                                                (* ; "Edited 18-Nov-87 13:37 by jrb:")                    (* * Get the value stored by (SavedValue))    (GetValueOnly (_ ($ LoopsIcon)                     Prototype)           'savedValue]))(PUTPROPS LOOPSWINDOW COPYRIGHT ("Venue & Xerox Corporation" 1983 1984 1985 1986 1987 1988 1990))(DECLARE%: DONTCOPY  (FILEMAP (NIL (53899 58064 (Don'tCloseIfBusy 53909 . 54164) (EVAL.IN.TTY.CONTEXT 54166 . 54590) (EVAL.IN.TTY.CONTEXT1 54592 . 55148) (Window.WhenHeldFn 55150 . 55453) (WindowAfterMoveFn 55455 . 55713) (WindowButtonEventFn 55715 . 56893) (WindowCloseFn 56895 . 57153) (WindowReshapeFn 57155 . 57437) (WindowRightButtonFn 57439 . 58062)) (60229 60847 (PutSavedValue 60239 . 60559) (SavedValue 60561 . 60845)))))STOP