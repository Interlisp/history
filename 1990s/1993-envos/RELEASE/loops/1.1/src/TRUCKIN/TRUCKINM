(DEFINE-FILE-INFO PACKAGE "IL" READTABLE "INTERLISP" BASE 10)(FILECREATED "18-Jul-88 19:26:05" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>TRUCKINM.;5| 263325       changes to%:  (CLASSES TruckinSimulator)      previous date%: "17-Dec-87 17:29:42" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>TRUCKINM.;4|)(* "Copyright (c) 1985, 1987, 1988 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT TRUCKINMCOMS)(RPAQQ TRUCKINMCOMS        ((DECLARE%: DONTCOPY (PROP MAKEFILE-ENVIRONMENT TRUCKINM))                                                             (* ;                                                              "Copyright (c) 1983 Xerox Corporation")                                                             (* ;                                                    "Classes for MultiMachineTruckin Knowledge System")                                                             (* ;                            "Programmed by LoopsDesignTeam in June 1983.0 Maintained by Sanjay Mittal")                                                             (* ;                                               "This version of Truckin supersedes the older versions")        (CLASSES BWTruckin ColorTruckin DisplayTruckinS GameCommInterface GameDecisionMaker                GamePlayerInterface GameSimulator MainCommInterface MasterTruckin MoveTruckinDM                MoveTruckinPI NoDisplayTruckinS RemoteMasterComm RemoteSlaveComm SlaveTruckin                TimeTruckinDM TimeTruckinPI Truckin TruckinBoard TruckinCommInterface                TruckinDecisionMaker TruckinPlayerInterface TruckinSimulator)        (FNS RemoteMasterComm.StartWorldProcess RemoteSlaveComm.StartWorldProcess SlaveTruckin)        (VARS GameBrowse (GameProcRestFlg T)              (PlayerProcRestFlg 'HARDRESET))        (METHODS BWTruckin.InitializeGameWindow ColorTruckin.CreateGameBoard                ColorTruckin.InitializeGameWindow ColorTruckin.MakeDriveBitMaps                DisplayTruckinS.NewGame DisplayTruckinS.ReUseGame GameCommInterface.NewInstance                GameDecisionMaker.NewInstance GamePlayerInterface.ChangeGameParameters                GamePlayerInterface.NewInstance GameSimulator.NewInstance MainCommInterface.AddBandit                MainCommInterface.AddPlayer MainCommInterface.AddPlayerRequest                MainCommInterface.BeginGameRequest MainCommInterface.BreakCargo                MainCommInterface.BuyMade MainCommInterface.BuyRequest MainCommInterface.GameOver                MainCommInterface.GasFill MainCommInterface.MaxMove MainCommInterface.MoveMade                MainCommInterface.MoveRequest MainCommInterface.NewGame                MainCommInterface.NewGameRequest MainCommInterface.ParkedAtAlice                MainCommInterface.ReUseGame MainCommInterface.ReUseGameRequest                MainCommInterface.RemovePlayer MainCommInterface.RemovePlayerRequest                MainCommInterface.SellMade MainCommInterface.SellRequest                MainCommInterface.SetInitialParameters MainCommInterface.SetUp                MainCommInterface.SpoilCargo MainCommInterface.StartGame                MainCommInterface.WorldProcess MoveTruckinDM.InitializeGameParameters                MoveTruckinDM.MoveBandits MoveTruckinPI.BeginGame MoveTruckinPI.RunGame                NoDisplayTruckinS.AttachBoard NoDisplayTruckinS.DrivePlayer NoDisplayTruckinS.UpdateRS                RemoteMasterComm.AddBandit RemoteMasterComm.AddPlayer                RemoteMasterComm.AddPlayerRequest RemoteMasterComm.BeginGameRequest                RemoteMasterComm.BreakCargo RemoteMasterComm.BuyMade RemoteMasterComm.BuyRequest                RemoteMasterComm.GameOver RemoteMasterComm.GasFill                RemoteMasterComm.InterimWorldProcess RemoteMasterComm.MaxMove                RemoteMasterComm.MoveMade RemoteMasterComm.MoveRequest RemoteMasterComm.NewGame                RemoteMasterComm.NewGameRequest RemoteMasterComm.ParkedAtAlice                RemoteMasterComm.ReUseGame RemoteMasterComm.ReUseGameRequest                RemoteMasterComm.RemovePlayer RemoteMasterComm.RemovePlayerRequest                RemoteMasterComm.SellMade RemoteMasterComm.SellRequest                RemoteMasterComm.SetInitialParameters RemoteMasterComm.SetUp                RemoteMasterComm.SpoilCargo RemoteMasterComm.StartGame                RemoteMasterComm.StartInterimWorldProcess RemoteMasterComm.WorldProcess                RemoteSlaveComm.AddBandit RemoteSlaveComm.AddPlayer RemoteSlaveComm.AddPlayerRequest                RemoteSlaveComm.BeginGameRequest RemoteSlaveComm.BreakCargo RemoteSlaveComm.BuyMade                RemoteSlaveComm.BuyRequest RemoteSlaveComm.GameOver RemoteSlaveComm.GasFill                RemoteSlaveComm.InterimWorldProcess RemoteSlaveComm.MaxMove RemoteSlaveComm.MoveMade                RemoteSlaveComm.MoveRequest RemoteSlaveComm.NewGame RemoteSlaveComm.NewGameRequest                RemoteSlaveComm.ParkedAtAlice RemoteSlaveComm.ReUseGame                RemoteSlaveComm.ReUseGameRequest RemoteSlaveComm.RemovePlayer                RemoteSlaveComm.RemovePlayerRequest RemoteSlaveComm.SellMade                RemoteSlaveComm.SellRequest RemoteSlaveComm.SetInitialParameters RemoteSlaveComm.SetUp                RemoteSlaveComm.SpoilCargo RemoteSlaveComm.StartGame                RemoteSlaveComm.StartInterimWorldProcess RemoteSlaveComm.WorldProcess                TimeTruckinDM.ChargeTime TimeTruckinDM.CheckAlice                TimeTruckinDM.InitializeGameParameters TimeTruckinDM.MoveBandits                TimeTruckinDM.RedoGameParameters TimeTruckinDM.ReplenishQty TimeTruckinPI.BeginGame                TimeTruckinPI.RunGame TruckinBoard.AssignRoadStops TruckinBoard.AttachToGame                TruckinBoard.CreateGameBoard TruckinBoard.DisplayGameBoard TruckinBoard.DrawRoadMarks                TruckinBoard.InitializeRoadStops TruckinBoard.MakeDriveBitMaps TruckinBoard.NewBoard                TruckinBoard.PlaceRoadStops TruckinBoard.ReInitializeRoadStops TruckinBoard.ReUseBoard                TruckinBoard.RemovePlayer TruckinCommInterface.CleanGameWorld                TruckinCommInterface.CreateDecisionMaker TruckinCommInterface.CreateGateWay                TruckinCommInterface.CreatePlayerInterface TruckinCommInterface.CreateSimulator                TruckinCommInterface.NewInstance TruckinCommInterface.SetInitialParameters                TruckinCommInterface.StartWorldProcess TruckinCommInterface.TellMe                TruckinDecisionMaker.AddBandit TruckinDecisionMaker.AddPlayer                TruckinDecisionMaker.AddPlayerRequest TruckinDecisionMaker.AttachSimulator                TruckinDecisionMaker.BeginGameRequest TruckinDecisionMaker.BuyMade                TruckinDecisionMaker.BuyRequest TruckinDecisionMaker.ChangeGameParameters                TruckinDecisionMaker.CheckAlice TruckinDecisionMaker.ForcedMove                TruckinDecisionMaker.GameOver TruckinDecisionMaker.GiveAliceBonus                TruckinDecisionMaker.InitializeGameParameters TruckinDecisionMaker.MonitorGame                TruckinDecisionMaker.MonitorProcess TruckinDecisionMaker.MoveBandits                TruckinDecisionMaker.MoveCheckingHazards TruckinDecisionMaker.MoveMade                TruckinDecisionMaker.MoveRequest TruckinDecisionMaker.MoveTruck                TruckinDecisionMaker.NewGameRequest TruckinDecisionMaker.ReUseGameRequest                TruckinDecisionMaker.RedoGameParameters TruckinDecisionMaker.RemovePlayer                TruckinDecisionMaker.RemovePlayerRequest TruckinDecisionMaker.ReplenishQty                TruckinDecisionMaker.SellMade TruckinDecisionMaker.SellRequest                TruckinDecisionMaker.StartGame TruckinDecisionMaker.StartMonitorProcess                TruckinDecisionMaker.UpdateAlice TruckinPlayerInterface.AddPlayer                TruckinPlayerInterface.AddPlayerRequest TruckinPlayerInterface.BeginGame                TruckinPlayerInterface.Buy TruckinPlayerInterface.BuyMade                TruckinPlayerInterface.ChargeTime TruckinPlayerInterface.CheckLocalPlayers                TruckinPlayerInterface.ContinueGame TruckinPlayerInterface.CreatePlayerProcess                TruckinPlayerInterface.DeletePlayerProcesses TruckinPlayerInterface.Move                TruckinPlayerInterface.MoveMade TruckinPlayerInterface.NewGame                TruckinPlayerInterface.NewGameRequest TruckinPlayerInterface.PlayerRequestComplete                TruckinPlayerInterface.ReUseGame TruckinPlayerInterface.RemovePlayer                TruckinPlayerInterface.RemovePlayerRequest TruckinPlayerInterface.RunNextPlayer                TruckinPlayerInterface.ScheduleNextPlayer TruckinPlayerInterface.SelectPlayers                TruckinPlayerInterface.Sell TruckinPlayerInterface.SellMade                TruckinPlayerInterface.StartGame TruckinPlayerInterface.StartPlayerProcesses                TruckinPlayerInterface.SuspendPlayer TruckinPlayerInterface.WakePlayer                TruckinSimulator.AddBandit TruckinSimulator.AddPlayer TruckinSimulator.AttachBoard                TruckinSimulator.BreakCargo TruckinSimulator.BuyMade TruckinSimulator.ClockProcess                TruckinSimulator.DrivePlayer TruckinSimulator.GameOver TruckinSimulator.GasFill                TruckinSimulator.GiveAliceBonus TruckinSimulator.Initialize TruckinSimulator.MaxMove                TruckinSimulator.MoveMade TruckinSimulator.NewGame TruckinSimulator.ParkedAtAlice                TruckinSimulator.ReUseGame TruckinSimulator.RedoGameParameters                TruckinSimulator.RemovePlayer TruckinSimulator.SellMade TruckinSimulator.SetUpGauges                TruckinSimulator.SpoilCargo TruckinSimulator.StartClockProcess                TruckinSimulator.StartGame TruckinSimulator.UnattachBoard TruckinSimulator.UpdateRS                TruckinSimulator.WhoWon)))(DECLARE%: DONTCOPY (PUTPROPS TRUCKINM MAKEFILE-ENVIRONMENT (:PACKAGE "IL" :READTABLE "INTERLISP" :BASE 10)))(* ; "Copyright (c) 1983 Xerox Corporation")(* ; "Classes for MultiMachineTruckin Knowledge System")(* ; "Programmed by LoopsDesignTeam in June 1983.0 Maintained by Sanjay Mittal")(* ; "This version of Truckin supersedes the older versions")(DEFCLASSES BWTruckin ColorTruckin DisplayTruckinS GameCommInterface GameDecisionMaker        GamePlayerInterface GameSimulator MainCommInterface MasterTruckin MoveTruckinDM MoveTruckinPI        NoDisplayTruckinS RemoteMasterComm RemoteSlaveComm SlaveTruckin TimeTruckinDM TimeTruckinPI        Truckin TruckinBoard TruckinCommInterface TruckinDecisionMaker TruckinPlayerInterface        TruckinSimulator)(DEFCLASS BWTruckin   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 17:31"))   (Supers TruckinBoard)   (ClassVariables (CopyCV NIL)))(DEFCLASS ColorTruckin   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 17:32"))   (Supers TruckinBoard)   (ClassVariables (numRows 4 doc "number of RoadStops arranged vertically on the game board.")          (numColumns 7 doc "number of RoadStops arranged horizontally on the game board.")          (colorP T doc "This indicates that the display will be on the color screen")          (CopyCV NIL)))(DEFCLASS DisplayTruckinS   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 17:10"))   (Supers TruckinSimulator)   (ClassVariables (CopyCV (Icon))          (Icon ?)))(DEFCLASS GameCommInterface   (MetaClass GameClass Edited%:                             (* edited%: "12-JUL-83 11:36")          doc "General class for Game Communications")   (Supers GameObject)   (ClassVariables (CopyCV NIL))   (InstanceVariables (simulator NIL doc "instance of GameSimulator")          (playerInterface NIL doc "instance of PlayerInterface")          (broadcastList NIL doc "list of objects which will get copies of incoming messages")          (machineID NIL doc "unique ID for identifying different machines in the multiMC Truckin")          (worldProcess NIL doc "handle of the WorldProcess")          (interimWP NIL doc "handle of Interim World Process")))(DEFCLASS GameDecisionMaker   (MetaClass GameClass Edited%:                             (* sm%: "30-JUN-83 18:53")          doc "Makes all decisions in the game")   (Supers GameObject)   (ClassVariables (CopyCV NIL))   (InstanceVariables (gameParameters DMParameters doc                              "class for changing game parameters at DecisionMaker level")))(DEFCLASS GamePlayerInterface   (MetaClass GameClass Edited%:                             (* sm%: "30-JUN-83 15:34")          doc "All players's messages go to this class")   (Supers GameObject)   (ClassVariables (CopyCV NIL))   (InstanceVariables (localPlayers NIL doc "list of players locally connected to this interface")          (suspendedPlayers NIL doc "list of players suspended pending completion of their requests")          ))(DEFCLASS GameSimulator   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 15:33")          doc "Handles the game simulation and keeps the game world in sync")   (Supers GameObject)   (ClassVariables (CopyCV (Icon))          (Icon ?)))(DEFCLASS MainCommInterface   (MetaClass GameClass Edited%:                             (* sm%: " 8-JUL-83 15:34"))   (Supers TruckinCommInterface)   (ClassVariables (CopyCV NIL))   (InstanceVariables (decisionMaker NIL DefaultClass TimeTruckinDM doc                              "instance of GameDecisionMaker")          (gameStarted NIL)))(DEFCLASS MasterTruckin   (MetaClass GameClass Edited%:                             (* sm%: "10-JUL-83 20:51"))   (Supers RemoteMasterComm)   (ClassVariables (CopyCV NIL)))(DEFCLASS MoveTruckinDM   (MetaClass GameClass Edited%:                             (* sm%: "29-JUN-83 10:17"))   (Supers TruckinDecisionMaker)   (ClassVariables (CopyCV NIL)          (PlayerInterface MoveTruckinPI doc                  "name of class of this type associated with this DecisionMaker"))   (InstanceVariables (aliceStay 3 doc "how many moves can stay at Alices")          (banditFreq 5 doc "how often bandits move")          (numMovesRemaining 200 DefaultGauge DigiMeter GaugeLimit (0 200)                 GaugePos                 (852 . 465)                 SetByUser NIL doc "number of moves remaining in the game. SetByUser is used to flag that value is not to be reinitialized"                 )          (replenishFreq 40 doc "how often gas is replenished")))(DEFCLASS MoveTruckinPI   (MetaClass GameClass Edited%:                             (* sm%: "29-JUN-83 10:16"))   (Supers TruckinPlayerInterface)   (ClassVariables (CopyCV NIL)          (DecisionMaker MoveTruckinDM doc "name of associated DecisionMaker class")))(DEFCLASS NoDisplayTruckinS   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 17:10"))   (Supers TruckinSimulator)   (ClassVariables (CopyCV (Icon))          (Icon ?)))(DEFCLASS RemoteMasterComm   (MetaClass GameClass Edited%:                             (* sm%: " 8-JUL-83 12:16"))   (Supers TruckinCommInterface)   (ClassVariables (CopyCV NIL))   (InstanceVariables (decisionMaker NIL DefaultClass TimeTruckinDM doc                              "instance of GameDecisionMaker")          (postman NIL DefaultClass MasterGateway doc "instance of Master GateWay")          (gameStarted NIL)))(DEFCLASS RemoteSlaveComm   (MetaClass GameClass Edited%:                             (* sm%: " 8-JUL-83 12:14"))   (Supers TruckinCommInterface)   (ClassVariables (CopyCV (Icon))          (Icon ?))   (InstanceVariables (postman NIL DefaultClass SlaveGateway doc "instance of Slave GateWay")          (gameStarted NIL doc "set to T when StartGame msg received")))(DEFCLASS SlaveTruckin   (MetaClass GameClass Edited%:                             (* sm%: "10-JUL-83 20:51"))   (Supers RemoteSlaveComm)   (ClassVariables (CopyCV (Icon))          (Icon ?)))(DEFCLASS TimeTruckinDM   (MetaClass GameClass Edited%:                             (* sm%: " 4-AUG-83 13:14"))   (Supers TruckinDecisionMaker)   (ClassVariables (MinMoveTime 1 doc "min time everyone is charged")          (MaxMoveTime 30 doc "max time per move, after which player yanked from game")          (AliceBonus 2 doc "cashBox multiplied by this for reaching Alice")          (CopyCV NIL)          (PlayerInterface TimeTruckinPI doc                  "name of class of this type associated with this DecisionMaker"))   (InstanceVariables (aliceStay 3 MaxTime 30 AliceFactor 8 doc     "aliceStay - max conseq turns at Alice. MaxTime - Max time allowed at Alice during a conseq stay"                             )          (gameParameters TDMTParameters)          (banditFreq 50 LastTime 3000 BanditFactor 15 doc "freq of bandits move")          (replenishFreq 300 LastTime 3000 ReplenishFactor 30 doc "how freq are gas stations filled")          ))(DEFCLASS TimeTruckinPI   (MetaClass GameClass Edited%:                             (* sm%: "29-JUN-83 10:16"))   (Supers TruckinPlayerInterface)   (ClassVariables (CopyCV NIL)          (DecisionMaker TimeTruckinDM doc "name of associated DecisionMaker class")))(DEFCLASS Truckin   (MetaClass GameClass Edited%:                             (* sm%: "10-JUL-83 20:50"))   (Supers MainCommInterface)   (ClassVariables (CopyCV NIL)))(DEFCLASS TruckinBoard   (MetaClass GameClass Edited%:                             (* sm%: "27-JUN-83 17:31"))   (Supers GameBoard)   (ClassVariables (numRows 6 doc "number of RoadStops arranged vertically on the game board.")          (numColumns 11 doc "number of RoadStops arranged horizontally on the game board.")          (colorP NIL doc "This indicates that this is not a colordisplay")          (CopyCV NIL))   (InstanceVariables (roadStops NIL doc "List of RoadStops on gameBoard.")))(DEFCLASS TruckinCommInterface   (MetaClass GameClass Edited%:                             (* sm%: " 8-JUL-83 15:35")          doc "Class for handling Truckin Communications on a single machine")   (Supers GameCommInterface)   (ClassVariables (CopyCV NIL)          (InitializeIVs (gameStarted)))   (InstanceVariables (simulator NIL DefaultClass DisplayTruckinS)          (playerInterface NIL DefaultClass TimeTruckinPI)          (gameStarted NIL)))(DEFCLASS TruckinDecisionMaker   (MetaClass GameClass Edited%:                             (* dgb%: "11-JUL-83 13:35"))   (Supers GameDecisionMaker)   (ClassVariables (CopyCV (PlayerInterface))          (PlayerInterface NIL doc "name of class of this type associated with this DecisionMaker")          (InitializeIVs (bandits timeLeft players playerNames beginTime endTime timeLeft lastMoved                                 loseTurn gameDuration startsAfter))          (AliceBonus 2))   (InstanceVariables (gameParameters TruckinDMParameters)          (gameSeed NIL doc "random number generator seed used for creating game")          (simulator NIL doc "instance of GameSimulator used by DecisionMaker")          (alices NIL doc "actual AlicesRestaurant's on board")          (bandits NIL nextTime NIL doc "list of bandits currently on board. nextTime is a list of locs to be used for placing bandits in next turn"                 )          (lastMoved NIL doc "last player who issued Move command")          (loseTurn NIL doc "List of players that lose the next turn.")          (players NIL doc "List of the players for this simulation.")          (playerNames NIL doc "list of names of players already in game")          (roadStops NIL doc "same roadStops as in (gameBoard roadStops)")          (unionHall NIL doc "actual instance of UnionHall on board")          (beginTime 0 doc "real clock time when game begins")          (endTime 0 doc "real clock time when game ends")          (gameDuration 15 doc "duration of game: endTime-beginTime")          (startsAfter 0 doc "mins from now when game starts")          (timeLeft 1800 DefaultGauge SSDigiMeter DefaultLimit (0 1800)                 GaugePos                 (852 . 465))))(DEFCLASS TruckinPlayerInterface   (MetaClass GameClass Edited%:                             (* sm%: "10-JUL-83 21:59"))   (Supers GamePlayerInterface)   (ClassVariables (CopyCV (DecisionMaker))          (DecisionMaker NIL doc "name of associated DecisionMaker class")          (InitializeIVs (endTime beginTime unchargedTime lastMoved loseTurn localPlayers                                 suspendedPlayers runningPlayer playerMenuWindow))          (MinMoveTime 1)          (MaxMoveTime 30))   (InstanceVariables (localPlayers NIL doc "list of players locally controlled by this PI")          (suspendedPlayers NIL doc "players suspended pending response from DM")          (unchargedTime 0)          (roadStops NIL)          (lastMoved NIL)          (loseTurn NIL)          (beginTime 0)          (endTime 0)          (runningPlayer NIL doc "player currently running")          (playerMenuWindow NIL position (650 . 720)                 doc "Window for Menu to interrupt player processes")))(DEFCLASS TruckinSimulator   (MetaClass GameClass Edited%:                             (* ; "Edited 18-Jul-88 10:59 by jrb:"))   (Supers GameSimulator)   (ClassVariables (CopyCV NIL)          (InitializeIVs (gameRunningFlg bandits players unchargedTime beginTime endTime barChart                                 clock))          (AliceBonus 2))   (InstanceVariables (barChart NIL doc "barchart for players cash")          (gameBoard NIL doc DefaultClass BWTruckin          (* instance of GameBoard))          (gameRunningFlg NIL doc                  "this flag is set to T when game starts and back to NIL when it ends")          (roadStops NIL doc "same roadStops as in (gameBoard roadStops)")          (alices NIL doc "actual AlicesRestaurant's on board")          (bandits NIL nextTime NIL doc "list of bandits currently on board. nextTime is a list of locs to be used for placing bandits in next turn"                 )          (gameParameters TruckinParameters doc "pointer to gameParameters object")          (players NIL doc "List of the players for this simulation.")          (unchargedTime 0 doc "time not charged because used by Execs or Breaks")          (unionHall NIL doc "actual instance of UnionHall on board")          (beginTime 0)          (endTime 0)          (timeLeft 1800 DefaultGauge DigiMeter GaugeLimit (0 2000)                 GaugePos                 (852 . 465))          (clock NIL doc "gauge attached to timeLeft")))(DEFINEQ(RemoteMasterComm.StartWorldProcess  [LAMBDA (self)                                             (* edited%: "12-JUL-83 12:27")                                                             (* Starts world process)    (PROG (hand)          (DEL.PROCESS (FIND.PROCESS 'WorldProcess))          (SETQ hand (ADD.PROCESS (LIST '_ self 'WorldProcess)                            'NAME                            'WorldProcess                            'RESTARTABLE T))          (_@ worldProcess hand)          (_@ gameStarted T)          (GameControlMenu)          (RETURN hand])(RemoteSlaveComm.StartWorldProcess  [LAMBDA (self)                                             (* edited%: "12-JUL-83 12:26")                                                             (* Starts world process)    (PROG (hand)          (DEL.PROCESS (FIND.PROCESS 'WorldProcess))          (SETQ hand (ADD.PROCESS (LIST '_ self 'WorldProcess)                            'NAME                            'WorldProcess                            'RESTARTABLE T))          (_@ worldProcess hand)          (_@ gameStarted T)          (GameControlMenu)          (RETURN hand])(SlaveTruckin  [LAMBDA (displayFlg)                                       (* sm%: "16-SEP-83 15:05")                                                             (* Sets up the Slave M/c with or                                                              without display)    (_ ($ SlaveTruckin)       New NIL NIL (COND                      (displayFlg NIL)                      (T 'NoDisplayTruckinS)))    (SETQ debugMode NIL)    (SETQ PlayerProcRestFlg 'HARDRESET]))(RPAQQ GameBrowse (GameBoard GameSimulator GameDecisionMaker GameCommInterface GamePlayerInterface))(RPAQQ GameProcRestFlg T)(RPAQQ PlayerProcRestFlg HARDRESET)(\BatchMethodDefs)(METH BWTruckin  InitializeGameWindow NIL      "Clears window and puts in proper background" (category (BWTruckin)))(METH ColorTruckin  CreateGameBoard (region title)      "Creates a new Window for the gameBoard." (category (ColorTruckin)))(METH ColorTruckin  InitializeGameWindow (region)      "Initializes gamewindow and puts in proper background" (category (ColorTruckin)))(METH ColorTruckin  MakeDriveBitMaps NIL      "Creates Bit maps for Trucks" (category (ColorTruckin)))(METH DisplayTruckinS  NewGame (seed board)      "Generates a new game based on seed and board specified by DecisionMaster" (category (                                                                                      DisplayTruckinS                                                                                            )))(METH DisplayTruckinS  ReUseGame (seed)      "Sends message to GameBoard to reuse" (category (DisplayTruckinS)))(METH GameCommInterface  NewInstance (gameType boardType displayType dlist)      "Any specialization must return self" (category (Object)))(METH GameDecisionMaker  NewInstance NIL      "Any specialization must return self" (category (Object)))(METH GamePlayerInterface  ChangeGameParameters NIL      "Changes gameParameters via inspector" (category (GamePlayerInterface)))(METH GamePlayerInterface  NewInstance NIL      "later may set gameMaster to self too" (category (Object)))(METH GameSimulator  NewInstance NIL      "Any specialization must return self" (category (Object)))(METH MainCommInterface  AddBandit (name)      "Add bandit to game" (category (MainCommInterface)))(METH MainCommInterface  AddPlayer (reqID name type truck deniedFlg)      "Forwards to PI, Simulator, and DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  AddPlayerRequest (reqID name type truck)      "Forwards to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  BeginGameRequest NIL      "Request for starting game - forwarded to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  BreakCargo (playerName cargoPos)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  BuyMade (playerName roadPosition reqQty qty reason penaltyAmt fragility lifetime)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  BuyRequest (player roadPosition qty)      "Forwards to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  GameOver NIL      "Sent to Simulator" (category (MainCommInterface)))(METH MainCommInterface  GasFill (prev new qty pr)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  MaxMove (player maxMove)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  MoveMade (playerName fromStop toStop reason penaltyAmount missTurns)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  MoveRequest (player from to reason)      "Forwards to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  NewGame (seed boardType gameType)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  NewGameRequest (board)      "Forwards to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  ParkedAtAlice (player time)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  ReUseGame (seed)      "Forwards to Simulator and other recipients" (category (MainCommInterface)))(METH MainCommInterface  ReUseGameRequest NIL      "Forwards to DecisionMaker for reusing existing game board" (category (MainCommInterface)))(METH MainCommInterface  RemovePlayer (playerName reason)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  RemovePlayerRequest (player reason)      "Request to remove player" (category (MainCommInterface)))(METH MainCommInterface  SellMade (playerName roadPosition reqQty qty cargoPos reason penaltyAmt)      "Forwards to Simulator, DecisionMaker, PlayerInterface" (category (MainCommInterface)))(METH MainCommInterface  SellRequest (player roadPosition commodityIndex qty)      "Forwards to DecisionMaker" (category (MainCommInterface)))(METH MainCommInterface  SetInitialParameters NIL      "Sets initial parameters" (category (MainCommInterface)))(METH MainCommInterface  SetUp (game board display)      "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (category (                                                                                    MainCommInterface                                                                                            )))(METH MainCommInterface  SpoilCargo (playerName cargoPos)      "Forwards to Simulator" (category (MainCommInterface)))(METH MainCommInterface  StartGame (begTime endTime)      "Forwards to simulator, PI, DM, and then starts WorldProcess" (category (MainCommInterface)))(METH MainCommInterface  WorldProcess NIL      "This is the World Process" (category (MainCommInterface)))(METH MoveTruckinDM  InitializeGameParameters NIL      "Per smL suggestion initializing by smashing #,NotSetValue - used to be (GetInitialValue self (QUOTE numMovesRemaining))"      (category (MoveTruckinDM)))(METH MoveTruckinDM  MoveBandits NIL      "randomly moves bandits around on the board before each turn" (category (MoveTruckinDM)))(METH MoveTruckinPI  BeginGame (players moves)      "Used to be just a function" (category (TruckinPlayerInterface)))(METH MoveTruckinPI  RunGame (players)      "This is the main loop that runs the game" (category (MoveTruckinPI)))(METH NoDisplayTruckinS  AttachBoard (gameBoard)      "Attaches gameBoard to game" (category (NoDisplayTruckinS)))(METH NoDisplayTruckinS  DrivePlayer (curLoc finalLoc player)      "Noop for NoDisplay case" (category (NoDisplayTruckinS)))(METH NoDisplayTruckinS  UpdateRS (roadStop)      "Does not ask roadStop to display" (category (NoDisplayTruckinS)))(METH RemoteMasterComm  AddBandit (name)      "Add bandit to game" (category (RemoteMasterComm)))(METH RemoteMasterComm  AddPlayer (reqID name type truck deniedFlg)      "Forwards to PI, Simulator, and DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  AddPlayerRequest (reqID name type truck)      "Forwards to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  BeginGameRequest NIL      "Request for starting game - forwarded to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  BreakCargo (playerName cargoPos)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  BuyMade (playerName roadPosition reqQty qty reason penaltyAmt fragility lifetime)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  BuyRequest (player roadPosition qty)      "Forwards to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  GameOver NIL      "Sent to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  GasFill (prev new qty pr)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  InterimWorldProcess NIL      "Interim world process" (category (RemoteMasterComm)))(METH RemoteMasterComm  MaxMove (player maxMove)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  MoveMade (playerName fromStop toStop reason penaltyAmount missTurns)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  MoveRequest (player from to reason)      "Forwards to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  NewGame (seed boardType gameType)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  NewGameRequest (board)      "Forwards to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  ParkedAtAlice (player time)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  ReUseGame (seed)      "Forwards to Simulator and other recipients" (category (RemoteMasterComm)))(METH RemoteMasterComm  ReUseGameRequest NIL      "Forwards to DecisionMaker for reusing existing game board" (category (RemoteMasterComm)))(METH RemoteMasterComm  RemovePlayer (playerName reason)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  RemovePlayerRequest (player reason)      "Request to remove player" (category (RemoteMasterComm)))(METH RemoteMasterComm  SellMade (playerName roadPosition reqQty qty cargoPos reason penaltyAmt)      "Forwards to Simulator, DecisionMaker, PlayerInterface" (category (RemoteMasterComm)))(METH RemoteMasterComm  SellRequest (player roadPosition commodityIndex qty)      "Forwards to DecisionMaker" (category (RemoteMasterComm)))(METH RemoteMasterComm  SetInitialParameters NIL      "Sets initial parameters" (category (RemoteMasterComm)))(METH RemoteMasterComm  SetUp (game board display)      "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (category (                                                                                     RemoteMasterComm                                                                                            )))(METH RemoteMasterComm  SpoilCargo (playerName cargoPos)      "Forwards to Simulator" (category (RemoteMasterComm)))(METH RemoteMasterComm  StartGame (begTime endTime)      "Forwards to simulator, PI, DM, and then starts WorldProcess" (category (RemoteMasterComm)))(METH RemoteMasterComm  StartInterimWorldProcess NIL      "Starts Interim World Process" (category (RemoteMasterComm)))(METH RemoteMasterComm  WorldProcess NIL      "This is the World Process." (category (RemoteMasterComm)))(METH RemoteSlaveComm  AddBandit (name)      "Add bandit to game" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  AddPlayer (reqID name type truck deniedFlg)      "Forwards to PI, Simulator, and DecisionMaker" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  AddPlayerRequest (reqID name type truck)      "Forwards to DecisionMaker" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  BeginGameRequest NIL      "Blocks it." (category (RemoteSlaveComm)))(METH RemoteSlaveComm  BreakCargo (playerName cargoPos)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  BuyMade (playerName roadPosition reqQty qty reason penaltyAmt fragility lifetime)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  BuyRequest (player roadPosition qty)      "Forwards to DecisionMaker" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  GameOver NIL      "Sent to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  GasFill (prev new qty pr)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  InterimWorldProcess NIL      "Interim world process" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  MaxMove (player maxMove)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  MoveMade (playerName fromStop toStop reason penaltyAmount missTurns)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  MoveRequest (player from to reason)      "Forwards to DecisionMaker" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  NewGame (seed boardType gameType)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  NewGameRequest (board)      "Blocks it" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  ParkedAtAlice (player time)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  ReUseGame (seed)      "Forwards to Simulator and other recipients" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  ReUseGameRequest NIL      "Blocks it" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  RemovePlayer (playerName reason)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  RemovePlayerRequest (player reason)      "Request to remove player" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  SellMade (playerName roadPosition reqQty qty cargoPos reason penaltyAmt)      "Forwards to Simulator, DecisionMaker, PlayerInterface" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  SellRequest (player roadPosition commodityIndex qty)      "Forwards to DecisionMaker" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  SetInitialParameters NIL      "Sets initial parameters" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  SetUp (game board display)      "Ignores game and board ARGS" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  SpoilCargo (playerName cargoPos)      "Forwards to Simulator" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  StartGame (begTime endTime)      "Forwards to simulator, PI, DM, and then starts WorldProcess" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  StartInterimWorldProcess NIL      "Starts Interim World Process" (category (RemoteSlaveComm)))(METH RemoteSlaveComm  WorldProcess NIL      "This is the World Process" (category (RemoteSlaveComm)))(METH TimeTruckinDM  ChargeTime (player clockTime)      "if clockTime is NIL, MinMoveTime is charged" (category (TimeTruckinDM)))(METH TimeTruckinDM  CheckAlice (player)      "check AlicesRestaurant's before each turn" (category (TimeTruckinDM)))(METH TimeTruckinDM  InitializeGameParameters NIL      "Initializes critical variables for new game to run" (category (TimeTruckinDM)))(METH TimeTruckinDM  MoveBandits NIL      "randomly moves bandits around on the board before each turn" (category (TimeTruckinDM)))(METH TimeTruckinDM  RedoGameParameters NIL      "Change game parameters based on players in the game" (category (TimeTruckinDM)))(METH TimeTruckinDM  ReplenishQty NIL      "Checks if time to replenish" (category (TimeTruckinDM)))(METH TimeTruckinPI  BeginGame (players moves time)      "Used to be just a function" (category (TruckinPlayerInterface)))(METH TimeTruckinPI  RunGame (players)      "This is the main loop that runs the game" (category (TimeTruckinPI)))(METH TruckinBoard  AssignRoadStops NIL      "Assign RoadStops to the current GameBoard" (category (TruckinBoard)))(METH TruckinBoard  AttachToGame (game)      "returns previous game (if any) to which attached" (category (TruckinBoard)))(METH TruckinBoard  CreateGameBoard (region title)      "Creates a new Window for the gameBoard." (category (TruckinBoard)))(METH TruckinBoard  DisplayGameBoard NIL      "Displays the gameBoard. ReAllocates gameBoard window if needed." (category (TruckinBoard)))(METH TruckinBoard  DrawRoadMarks NIL      NIL (category (TruckinBoard)))(METH TruckinBoard  InitializeRoadStops (seed)      "Initializes RoadStop qty and pr" (category (TruckinBoard)))(METH TruckinBoard  MakeDriveBitMaps NIL      "Creates Bit maps for Trucks" (category (TruckinBoard)))(METH TruckinBoard  NewBoard (seed)      "Creates and displays a new game board" (category (TruckinBoard)))(METH TruckinBoard  PlaceRoadStops NIL      "Place the RoadStops onto the GameBoard." (category (TruckinBoard)))(METH TruckinBoard  ReInitializeRoadStops (seed)      "Reinitializes roadstops" (category (TruckinBoard)))(METH TruckinBoard  ReUseBoard (seed)      "Reuses game board: displaying afresh" (category (TruckinBoard)))(METH TruckinBoard  RemovePlayer (player)      "Sent to game board so it can remove player from board" (category (TruckinBoard)))(METH TruckinCommInterface  CleanGameWorld NIL      "Cleans up the game world after game over" (category (TruckinCommInterface)))(METH TruckinCommInterface  CreateDecisionMaker (game)      "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (category (                                                                                 TruckinCommInterface                                                                                            )))(METH TruckinCommInterface  CreateGateWay (machineName postalAddress)      "creates a gateway and links it" (category (TruckinCommInterface)))(METH TruckinCommInterface  CreatePlayerInterface (gameType)      "Create a PlayerInterface (if needed) matching gameType" (category (TruckinCommInterface)))(METH TruckinCommInterface  CreateSimulator (display)      "Creates a new simulator" (category (TruckinCommInterface)))(METH TruckinCommInterface  NewInstance NIL      "Used to be just a function" (category (Object)))(METH TruckinCommInterface  SetInitialParameters NIL      "Sets initial parameters" (category (TruckinCommInterface)))(METH TruckinCommInterface  StartWorldProcess NIL      "Starts world process" (category (TruckinCommInterface)))(METH TruckinCommInterface  TellMe (obj)      "Adds obj to broadcastList" (category (TruckinCommInterface)))(METH TruckinDecisionMaker  AddBandit (name)      "Add bandit to list" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  AddPlayer (reqID name type truck deniedFlg)      "If player added, do initial placing for him" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  AddPlayerRequest (reqID name type truck)      "Decides if a new player can be added or not" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  AttachSimulator (sim)      "Attaches local simulator by copying relevant info" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  BeginGameRequest NIL      "Starts the game" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  BuyMade (player roadPosition reqQty qty reason penaltyAmt fragility lifetime)      "Dummy for now" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  BuyRequest (player roadPosition qty)      "message sent to DecisionMaker to BUY qty at roadPosition" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  ChangeGameParameters NIL      "Changes gameParameters via inspector" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  CheckAlice NIL      "check AlicesRestaurant's before each turn" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  ForcedMove (player curLoc maxMilePost reason)      "determines the loc to move currentPlayer as a forced move close to maxMilePost" (category                                                                                        (                                                                                 TruckinDecisionMaker                                                                                         )))(METH TruckinDecisionMaker  GameOver NIL      "Sent when game is over" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  GiveAliceBonus (atAlice)      "Dummy method" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  InitializeGameParameters NIL      "Initializes critical variables for new game to run" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MonitorGame (gameOverFlg)      "Monitors the game to move bandits, replenish qty, check alice, and signal game end."      (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MonitorProcess NIL      "Monitors the game to move bandits, replenish qty, check alice, and signal game end"      (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MoveBandits NIL      "randomly moves bandits around on the board before each turn" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MoveCheckingHazards (player curLoc newLoc reason)      "moves truck checking for hazards along the way. Called by GameMaster.MoveTruck" (category                                                                                        (                                                                                 TruckinDecisionMaker                                                                                         )))(METH TruckinDecisionMaker  MoveMade (player fromStop toStop reason penaltyAmount missTurns)      "update commodity status affected by moves" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MoveRequest (player from to reason)      "reason, if given is used for system generated requests and is not charged as a move to player"      (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  MoveTruck (player curLoc newLoc reason)      "reason - if NIL then move asked by user. else is the reason for the move, where the actual loc will be different from the original request"      (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  NewGameRequest (board)      "board - type of gameBoard needed (BW, Color etc)" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  ReUseGameRequest NIL      "Generates a new seed for reusing existing game" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  RedoGameParameters NIL      "Dummy. Needed if some game parameters need to be changed after the players are known"      (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  RemovePlayer (player reason)      "removes player from game" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  RemovePlayerRequest (player reason)      "Request to remove player" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  ReplenishQty NIL      "replenish GasStations qty" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  SellMade (player roadPosition reqQty qty cargoPos reason penaltyAmt)      "Dummy for now" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  SellRequest (player roadPosition commodityIndex qty)      "commodityIndex - index into cargo of player" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  StartGame NIL      "(_ self StartMonitorProcess) (_ self RedoGameParameters)" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  StartMonitorProcess NIL      "Start the monitor process" (category (TruckinDecisionMaker)))(METH TruckinDecisionMaker  UpdateAlice (player)      "Decides when parked at Alice" (category (TruckinDecisionMaker)))(METH TruckinPlayerInterface  AddPlayer (reqID name type truck deniedFlg)      "New player being added to game" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  AddPlayerRequest (playerName playerType truckType)      "If playerName is an instance of Player, then used with other two args extracted from it"      (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  BeginGame (players moves)      "Starts a new game. Players is either the number of players or a list of Player objects. If players is NIL, but the gameMaster has previous players, it uses those."      (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  Buy (player qty)      "message sent by currentPlayer to BUY qty at its current location" (category (                                                                               TruckinPlayerInterface                                                                                    )))(METH TruckinPlayerInterface  BuyMade (player roadPosition reqQty qty reason penaltyAmt fragility lifetime)      "check if for local player" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  ChargeTime (player clockTime)      "if clockTime is NIL, MinMoveTime is charged" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  CheckLocalPlayers NIL      "Should be needed only in abnormal situations, e.g., machine crashes or manual deletion of a player's process"      (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  ContinueGame (noRedrawFlg)      "to resume a game in the middle." (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  CreatePlayerProcess (player staySuspendFlg)      "marks player to stay suspended if staySuspendFlg is non-NIL" (category (TruckinPlayerInterface                                                                               )))(METH TruckinPlayerInterface  DeletePlayerProcesses NIL      "Deletes players processes after the game" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  Move (player newLoc)      "sent by to move to newLoc" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  MoveMade (player fromStop toStop reason penaltyAmount missTurns)      "check if for local player" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  NewGame (seed boardType gameType)      "Adds roadStops locally" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  NewGameRequest (board)      "board - type of GameBoard desired" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  PlayerRequestComplete (player reason)      "if player passed as arg, set wakeReason" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  ReUseGame NIL      "Received when the current board is used for a new game" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  RemovePlayer (player reason)      "New method template" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  RemovePlayerRequest (player reason)      "Request to remove player" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  RunNextPlayer NIL      "This is one of the few methods which need to be changed to get different strategies for scheduling players"      (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  ScheduleNextPlayer NIL      "Decides who to run next -" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  SelectPlayers (players)      "Asks user to select players" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  Sell (player commodity qty)      "commodity is either an instance of commodity or a class of commodity. In the latter case, the game master will try to find the proper instance if any from the cargo of the truck"      (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  SellMade (player roadPosition reqQty qty cargoPos reason penaltyAmt)      "check if for local player" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  StartGame (begTime endTime)      "Put in code to : wait till begTime; spawn processes for each player;" (category (                                                                               TruckinPlayerInterface                                                                                        )))(METH TruckinPlayerInterface  StartPlayerProcesses NIL      "starts players in separate processes" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  SuspendPlayer (player staySuspend)      "Suspends player after a Buy/Move/Sell request" (category (TruckinPlayerInterface)))(METH TruckinPlayerInterface  WakePlayer (player)      "Wakes player so it can be run at next BLOCK" (category (TruckinPlayerInterface)))(METH TruckinSimulator  AddBandit (name)      "Add bandit to game" (category (TruckinSimulator)))(METH TruckinSimulator  AddPlayer (reqID name type truck deniedFlg)      "Adds player to its list - assumes player created by PlayerInterface" (category (                                                                                     TruckinSimulator                                                                                       )))(METH TruckinSimulator  AttachBoard (gameBoard)      "Attaches gameBoard to game" (category (TruckinSimulator)))(METH TruckinSimulator  BreakCargo (player commodIndex)      "Sent by a commodity when it breaks" (category (TruckinSimulator)))(METH TruckinSimulator  BuyMade (player roadPosition reqQty qty reason penalty fragility lifetime)      "Indicates a definite BUY to be made, or reasons for not carrying out a BuyRequest"      (category (TruckinSimulator)))(METH TruckinSimulator  ClockProcess NIL      "Monitors game clock" (category (TruckinSimulator)))(METH TruckinSimulator  DrivePlayer (curLoc finalLoc player)      "Drives player from curLoc to finalLoc" (category (TruckinSimulator)))(METH TruckinSimulator  GameOver NIL      "Game Over" (category (TruckinSimulator)))(METH TruckinSimulator  GasFill (prevStop gsStop qty pr)      "Spl cases: If prevStop =0 then start at UnionHall. If gsStop=0 then end at UnionHall"      (category (TruckinSimulator)))(METH TruckinSimulator  GiveAliceBonus (atAlice)      "Give bonus for reaching Alices" (category (TruckinSimulator)))(METH TruckinSimulator  Initialize NIL      "Initializes" (category (GameObject)))(METH TruckinSimulator  MaxMove (player maxMove)      "Puts maxMove in player" (category (TruckinSimulator)))(METH TruckinSimulator  MoveMade (player from to reason penaltyAmt missTurn)      "Current set of reasons: Bandit, WeighStation, NoFuel, UnionHall, OffBoardBeg, OffBoardEnd, ConsecMoves, IllegalLoc, MoreThanAllowed, AlreadyThere, NoRoom, LowFuel"      (category (TruckinSimulator)))(METH TruckinSimulator  NewGame (seed board)      "Generates a new game based on seed and board specified by DecisionMaster" (category (                                                                                     TruckinSimulator                                                                                            )))(METH TruckinSimulator  ParkedAtAlice (player time)      "Marks when player parked at alice" (category (TruckinSimulator)))(METH TruckinSimulator  ReUseGame (seed)      "Sends message to GameBoard to reuse" (category (TruckinSimulator)))(METH TruckinSimulator  RedoGameParameters NIL      "Change anything after all game info is known - prior to game start" (category (                                                                                     TruckinSimulator                                                                                      )))(METH TruckinSimulator  RemovePlayer (player reason)      "Sent to game board so it can remove player from board" (category (TruckinSimulator)))(METH TruckinSimulator  SellMade (player roadPosition reqQty qty cargoPosition reason penalty)      "Performs an actual Sell, once all checking is done" (category (TruckinSimulator)))(METH TruckinSimulator  SetUpGauges NIL      "Sets up gauges" (category (TruckinSimulator)))(METH TruckinSimulator  SpoilCargo (player commodIndex)      "Sent by commodity when it spoils" (category (TruckinSimulator)))(METH TruckinSimulator  StartClockProcess NIL      "Starts the clock process" (category (TruckinSimulator)))(METH TruckinSimulator  StartGame (begTime endTime)      "SetsUp IVs for time left etc and starts game clock process" (category (TruckinSimulator)))(METH TruckinSimulator  UnattachBoard NIL      "Removes game board" (category (TruckinSimulator)))(METH TruckinSimulator  UpdateRS (roadStop)      "Sent when any RoadStop's data changes" (category (TruckinSimulator)))(METH TruckinSimulator  WhoWon NIL      "summarizes the game results" (category (TruckinSimulator)))(Method ((BWTruckin InitializeGameWindow) self)              (* ; "sm: 29-JUN-83 15:52") "Clears window and puts in proper background" (CLEARW (@ gameWindow))                                               (BITBLT NIL NIL NIL (@ gameWindow)                                                      NIL NIL NIL NIL 'TEXTURE 'REPLACE boardShade))(Method ((ColorTruckin CreateGameBoard) self region title)   (* ; "sm:  5-JUL-83 18:37") "Creates a new Window for the gameBoard." (PROG (screen)                                                 [COND                                                    ((OR (NULL (COLORDISPLAYP))                                                         (NULL (SETQ screen (COLORSCREENBITMAP)))                                                         (NEQ 4 (fetch (BITMAP BITMAPBITSPERPIXEL)                                                                   of screen)))                                                     (COLORDISPLAY T 4)                                                     (SETQ screen (COLORSCREENBITMAP]                                                 (SETQ gameWindow (DSPCREATE screen))                                                 (_@ gameWindow gameWindow)                                                 (_ self InitializeGameWindow region)                                                 (_ self MakeDriveBitMaps)                                                 (RETURN gameWindow)))(Method ((ColorTruckin InitializeGameWindow) self region)    (* ; "sm:  5-JUL-83 18:37") "Initializes gamewindow and puts in proper background"   (PROG NIL         (SETQ gameWindow (@ gameWindow))         (BITBLT NIL NIL NIL gameWindow NIL NIL NIL NIL 'TEXTURE 'REPLACE borderColor)         (DSPXOFFSET (IQUOTIENT (IDIFFERENCE 640 (fetch (REGION WIDTH) of region))                            2)                gameWindow)         (DSPYOFFSET (IQUOTIENT (IDIFFERENCE 480 (fetch (REGION HEIGHT) of region))                            2)                gameWindow)         (DSPCLIPPINGREGION (create REGION                                   LEFT _ 0                                   BOTTOM _ 0                                   WIDTH _ (fetch (REGION WIDTH) of region)                                   HEIGHT _ (fetch (REGION HEIGHT) of region))                gameWindow)         (BITBLT NIL NIL NIL gameWindow NIL NIL NIL NIL 'TEXTURE 'REPLACE roadColor)         (RETURN gameWindow)))(Method ((ColorTruckin MakeDriveBitMaps) self)               (* ; "sm: 27-JUN-83 17:33") "Creates Bit maps for Trucks" (MakeDriveBitMaps 4))(Method ((DisplayTruckinS NewGame) self seed board)          (* ; "sm: 28-JUN-83 09:13") "Generates a new game based on seed and board specified by DecisionMaster" (_Super self NewGame seed                                                                                          board)                                                                            (_ (@ gameBoard)                                                                               DisplayGameBoard))(Method ((DisplayTruckinS ReUseGame) self seed)              (* ; "sm:  1-JUL-83 18:14") "Sends message to GameBoard to reuse" (_Super self ReUseGame seed)                                       (_ (@ gameBoard)                                          DisplayGameBoard))(Method ((GameCommInterface NewInstance) self gameType boardType displayType dlist)                                                              (* ; "dgb: 22-SEP-83 15:16")                                                             (* ;                                                              "Received when new instance is created") "Any specialization must return self" (_Super self NewInstance)       (SETQ Communicator self)                              (* ; "gameType - type of Game")                                                             (* ;                                                        "boardType - type of board, e.g., BW or Color")                                                             (* ;                                              "displayType - type of display, e.g., Display or Silent")                                                             (* ; "dlist - broadcastList")       (_@ broadcastList dlist)       (_ self SetUp gameType boardType displayType)       self)(Method ((GameDecisionMaker NewInstance) self)               (* ; "dgb: 22-SEP-83 15:17")                                                             (* ;                                                              "Received when new instance is created") "Any specialization must return self" (_Super self NewInstance))(Method ((GamePlayerInterface ChangeGameParameters) self)    (* ; "sm: 29-JUN-83 13:45") "Changes gameParameters via inspector" (PROG (gp)                                              (SETQ gp (GetItHere self 'gameParameters))                                              (COND                                                 ((EQ gp NotSetValue)                                                  (SETQ gp (_ (GetObjectRec (@ gameParameters))                                                              New))                                                  (_@ gameParameters gp)))                                              (PROMPT                                            "Change Game Parameters by using the displayed Inspector."                                                      "When done, click DONE")                                              (_ gp SetUp)                                              (while (NOT GameParaSet) do (TOTOPW GameParamW)                                                                          (TOTOPW GameCommandW)                                                                          (DISMISS 500))                                              (RETURN T)))(Method ((GamePlayerInterface NewInstance) self)             (* ; "dgb: 22-SEP-83 15:15")                                                             (* ; "Does initialization when created")                                                             (* ;                                                              "Any specialization must return self") "later may set gameMaster to self too" (_Super self NewInstance) (SETQ gameMaster self))(Method ((GameSimulator NewInstance) self)                   (* ; "dgb: 22-SEP-83 15:17")                                                             (* ;                                                              "Received when new instance is created") "Any specialization must return self" (_Super self NewInstance))(Method ((MainCommInterface AddBandit) self name)            (* ; "sm: 10-JUL-83 18:38") "Add bandit to game" (_ (@ simulator)                         AddBandit name)                      (_ (@ decisionMaker)                         AddBandit name)                      (MailOut self (LIST 'AddBandit name)))(Method ((MainCommInterface AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "sm: 10-JUL-83 18:40") "Forwards to PI, Simulator, and DecisionMaker" (_ (@ playerInterface)                                                   AddPlayer reqID name type truck deniedFlg)                                                (_ (@ simulator)                                                   AddPlayer reqID name type truck deniedFlg)                                                (MailOut self (LIST 'AddPlayer reqID name type truck                                                                     deniedFlg))                                                (_ (@ decisionMaker)                                                   AddPlayer reqID name type truck deniedFlg))(Method ((MainCommInterface AddPlayerRequest) self reqID name type truck)                                                              (* ; "sm: 30-JUN-83 17:33") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                AddPlayerRequest reqID name type truck))(Method ((MainCommInterface BeginGameRequest) self)          (* ; "sm:  1-JUL-83 17:13") "Request for starting game - forwarded to DecisionMaker" (_ (@ decisionMaker)                                                             BeginGameRequest))(Method ((MainCommInterface BreakCargo) self playerName cargoPos)                                                              (* ; "sm: 10-JUL-83 18:41") "Forwards to Simulator" (_ (@ simulator)                            BreakCargo playerName cargoPos)                         (MailOut self (LIST 'BreakCargo (GetObjectRec playerName)                                             cargoPos)))(Method ((MainCommInterface BuyMade) self playerName roadPosition reqQty qty reason penaltyAmt                                           fragility lifetime)                                                              (* ; "sm: 10-JUL-83 18:42") "Forwards to Simulator" (_ (@ simulator)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (_ (@ decisionMaker)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (_ (@ playerInterface)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (MailOut self (LIST 'BuyMade (GetObjectRec playerName)                                             roadPosition reqQty qty reason penaltyAmt fragility                                              lifetime)))(Method ((MainCommInterface BuyRequest) self player roadPosition qty)                                                              (* ; "sm:  5-JUL-83 17:22") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                BuyRequest                                (GetObjectRec player)                                roadPosition qty))(Method ((MainCommInterface GameOver) self)                  (* ; "sm: 12-JUL-83 22:09") "Sent to Simulator" (_ (@ simulator)                        GameOver)                     (MailOut self (LIST 'GameOver))                     (_@ gameStarted NIL))(Method ((MainCommInterface GasFill) self prev new qty pr)   (* ; "sm: 10-JUL-83 18:44") "Forwards to Simulator" (_ (@ simulator)                            GasFill prev new qty pr)                         (MailOut self (LIST 'GasFill prev new qty pr)))(Method ((MainCommInterface MaxMove) self player maxMove)    (* ; "sm: 10-JUL-83 18:45") "Forwards to Simulator" (_ (@ simulator)                            MaxMove player maxMove)                         (MailOut self (LIST 'MaxMove (GetObjectRec player)                                             maxMove)))(Method ((MainCommInterface MoveMade) self playerName fromStop toStop reason penaltyAmount missTurns)                                                              (* ; "sm: 13-JUL-83 09:17") "Forwards to Simulator" (_ (@ simulator)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (_ (@ decisionMaker)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (_ (@ playerInterface)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (MailOut self (LIST 'MoveMade (GetObjectRec playerName)                                             fromStop toStop reason penaltyAmount missTurns))                         (_ (@ decisionMaker)                            UpdateAlice                            (GetObjectRec playerName)))(Method ((MainCommInterface MoveRequest) self player from to reason)                                                              (* ; "sm:  5-JUL-83 17:21") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                MoveRequest                                (GetObjectRec player)                                from to reason))(Method ((MainCommInterface NewGame) self seed boardType gameType)                                                              (* ; "sm: 10-JUL-83 18:47") "Forwards to Simulator" (_ (@ simulator)                            NewGame seed boardType gameType)                         (_ self CreatePlayerInterface gameType)                         (_ (@ playerInterface)                            NewGame seed boardType gameType)                         (MailOut self (LIST 'NewGame seed boardType gameType)))(Method ((MainCommInterface NewGameRequest) self board)      (* ; "sm: 29-JUN-83 13:12") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                NewGameRequest board))(Method ((MainCommInterface ParkedAtAlice) self player time) (* ; "sm: 10-JUL-83 18:48") "Forwards to Simulator" (_ (@ simulator)                            ParkedAtAlice player time)                         (MailOut self (LIST 'ParkedAtAlice (GetObjectRec player)                                             time)))(Method ((MainCommInterface ReUseGame) self seed)            (* ; "sm: 10-JUL-83 19:20") "Forwards to Simulator and other recipients" (_ (@ simulator)                                                 ReUseGame seed)                                              (_ (@ playerInterface)                                                 ReUseGame)                                              (MailOut self (LIST 'ReUseGame seed)))(Method ((MainCommInterface ReUseGameRequest) self)          (* ; "sm: 29-JUN-83 14:21") "Forwards to DecisionMaker for reusing existing game board" (_ (@ decisionMaker)                                                                ReUseGameRequest))(Method ((MainCommInterface RemovePlayer) self playerName reason)                                                              (* ; "sm: 10-JUL-83 19:21") "Forwards to Simulator" (_ (@ simulator)                            RemovePlayer playerName reason)                         (_ (@ playerInterface)                            RemovePlayer playerName reason)                         (MailOut self (LIST 'RemovePlayer (GetObjectRec playerName)                                             reason)))(Method ((MainCommInterface RemovePlayerRequest) self player reason)                                                              (* ; "sm: 10-JUL-83 21:03") "Request to remove player" (_ (@ decisionMaker)                               RemovePlayerRequest player reason))(Method ((MainCommInterface SellMade) self playerName roadPosition reqQty qty cargoPos reason                                            penaltyAmt)       (* ; "sm: 10-JUL-83 19:22") "Forwards to Simulator, DecisionMaker, PlayerInterface" (_ (@ simulator)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (_ (@ decisionMaker)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (_ (@ playerInterface)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (MailOut self                                                                (LIST 'SellMade (GetObjectRec                                                                                        playerName)                                                                      roadPosition reqQty qty                                                                       cargoPos reason penaltyAmt)))(Method ((MainCommInterface SellRequest) self player roadPosition commodityIndex qty)                                                              (* ; "sm:  5-JUL-83 17:22") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                SellRequest                                (GetObjectRec player)                                roadPosition commodityIndex qty))(Method ((MainCommInterface SetInitialParameters) self)      (* ; "sm: 10-JUL-83 20:16") "Sets initial parameters" (_@ (@ decisionMaker)                               startsAfter 0))(Method ((MainCommInterface SetUp) self game board display)  (* ; "sm: 10-JUL-83 19:37")                                                             (* ;                                                              "Sets up the Standard configuration") "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (_ self                                                                                   CreateDecisionMaker                                                                                     game)       (_ self CreateSimulator display)       (_ self SetInitialParameters)                         (* ;                                               "sends a request to DecisionMaker to create a new game")       (_ (@ decisionMaker)          NewGameRequest board))(Method ((MainCommInterface SpoilCargo) self playerName cargoPos)                                                              (* ; "sm: 10-JUL-83 19:22") "Forwards to Simulator" (_ (@ simulator)                            SpoilCargo playerName cargoPos)                         (MailOut self (LIST 'SpoilCargo (GetObjectRec playerName)                                             cargoPos)))(Method ((MainCommInterface StartGame) self begTime endTime) (* ; "sm: 10-JUL-83 19:23") "Forwards to simulator, PI, DM, and then starts WorldProcess" (_ (@ simulator)                                                                  StartGame begTime endTime)                                                               (_ (@ playerInterface)                                                                  StartGame begTime endTime)                                                               (_ (@ decisionMaker)                                                                  StartGame begTime endTime)                                                             (* ; "start the WorldProcess")                                                               (_ self StartWorldProcess)                                                               (MailOut self (LIST 'StartGame begTime                                                                                    endTime)))(Method ((MainCommInterface WorldProcess) self)              (* ; "sm: 16-SEP-83 17:17") "This is the World Process" (PROG ([endTime (SETUPTIMER.DATE (GDATE (IPLUS (@ Simulator endTime)                                                                            1]                                    cTime pendReq)           (* Wait till it is 2 secs before game)                                   [BLOCK NIL (SETUPTIMER (IntervalToEvent (@ Simulator beginTime)]                                                             (* ask PI to start User Processes)                                                             (* (_ (@ playerInterface)                                                              StartPlayerProcesses))                                   (_ (@ decisionMaker)                                      RedoGameParameters)                                   (_ (@ simulator)                                      RedoGameParameters)    (* Start the loop for checking                                                              messages from PI)                                   (PutValue (@ simulator)                                          'timeLeft                                          (IDIFFERENCE (@ (@ simulator)                                                          endTime)                                                 (IDATE)))                                   (_@ (@ playerInterface)                                       runningPlayer NIL)                                   (_ (@ playerInterface)                                      CheckLocalPlayers)                                   (until (TIMEREXPIRED? endTime 'SECONDS)                                      do (_ (@ playerInterface)                                            ScheduleNextPlayer)                                         (BLOCK)                     (* this will enable the Scheduler to consider all players next time around.          Needed only for Single Mc case)                                         (for x in (@ (@ playerInterface)                                                      suspendedPlayers)                                            do (_@ x staySuspend NIL))                                         (_ (@ decisionMaker)                                            MonitorGame))    (* Game is over)                                   (_ (@ decisionMaker)                                      MonitorGame T)                                   (_@ gameStarted NIL)                                   (_ self CleanGameWorld)                                   (RETURN 'Done)))(Method ((MoveTruckinDM InitializeGameParameters) self)      (* ; "edited: 25-Aug-87 10:55")                                                             (* ;                                                  "Initializes critical variables for new game to run") "Per smL suggestion initializing by smashing #,NotSetValue - used to be (GetInitialValue self (QUOTE numMovesRemaining))" (_Super self InitializeGameParameters) (COND    ((EQ (@ self numMovesRemaining SetByUser)         T)     (PutValue self 'numMovesRemaining NIL 'SetByUser))    (T (_@ numMovesRemaining #,NotSetValue))) (WriteGameStatus (DATE)        "  New Simulation! "        (CONCAT "Total Moves: " (@ numMovesRemaining))))(Method ((MoveTruckinDM MoveBandits) self)                   (* ; "sm: 27-JUN-83 10:55") "randomly moves bandits around on the board before each turn" (COND                                                                  ((ZEROP (IMOD (@ numMovesRemaining)                                                                                (@ banditFreq)))                    (* Only move once in a while if you are a bandit)                                                                   (_Super self MoveBandits))))(Method ((MoveTruckinPI BeginGame) self players moves) "Used to be just a function"   (* ;;; "Starts a new game. Players is either the number of players or a list of Player objects. If players is NIL, but the gameMaster has previous players, it uses those.")   [COND      ((NUMBERP moves)       (_@ numMovesRemaining moves)       (PutValue self 'numMovesRemaining T 'SetByUser]   (_Super self BeginGame players))(Method ((MoveTruckinPI RunGame) self players)               (* ; "sm: 27-JUN-83 11:03") "This is the main loop that runs the game"   [while (GREATERP (@ numMovesRemaining)                 0) bind playerRet      do (PROGN (WaitIfControlKey "Beginning of Game Loop")                (COND                   ((ZEROP (IMOD (@ numMovesRemaining)                                 (@ replenishFreq)))                    (_ self ReplenishQty)))                [COND                   ((ZEROP (IMOD (@ numMovesRemaining)                                 10))                    (WriteGameStatus NIL "Moves Remaining: " (@ numMovesRemaining)]                (_ self CheckAlice)                (_ self MoveBandits)                (_@ numMovesRemaining (SUB1 (@ numMovesRemaining)))                (for x in (@ players)                   do (PROGN (SETQ currentPlayer (_@ currentPlayer x))                             (_@ unchargedTime 0)                             (SETQ forcedStop NIL)           (* update commodity status affected by                                                              moves)                             (for y in (@ (@ x truck)                                          cargo) do (DoFringeMethods y 'UpdateStatus))                             (COND                                ((FMEMB x (@ loseTurn))                                 (WriteGameStatus (CONCAT (@ x driver)                                                         " lost his turn"))                                 (_@ loseTurn (REMOVE x (@ loseTurn)))                                 (_@ lastMoved NIL))                                (T (SETQ maxMove (RAND 1 (@@ (@ x truck)                                                             MaxDist)))                                                             (* (WriteGameStatus (@ x driver)                                                              " can MOVE max " maxMove))                                   [COND                                      (debugMode (_ x TakeTurn))                                      (T (SETQ playerRet (ERSETQ (_ x TakeTurn)))                                         (COND                                            ((NULL playerRet)                                             (_ self RemovePlayer x "Player crashed on a Bug")]                                   (_@ lastMoved NIL)])(Method ((NoDisplayTruckinS AttachBoard) self gameBoard)     (* ; "dgb: 11-JUL-83 13:05") "Attaches gameBoard to game" (_Super self AttachBoard gameBoard)                              (SETQ gameWindow NIL))(Method ((NoDisplayTruckinS DrivePlayer) self curLoc finalLoc player)                                                              (* ; "dgb: 11-JUL-83 12:40") "Noop for NoDisplay case" self)(Method ((NoDisplayTruckinS UpdateRS) self roadStop)         (* ; "sm: 28-JUN-83 09:46")                                                             (* ;                                                              "Sent when any RoadStop's data changes") "Does not ask roadStop to display" roadStop)(Method ((RemoteMasterComm AddBandit) self name)             (* ; "sm:  7-JUL-83 13:22") "Add bandit to game" (PROG (msg)                            (_ (@ simulator)                               AddBandit name)                            (_ (@ decisionMaker)                               AddBandit name)                            (SETQ msg (LIST 'AddBandit name))                            (SendOut self msg)                            (MailOut self msg)))(Method ((RemoteMasterComm AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "sm: 10-JUL-83 11:20") "Forwards to PI, Simulator, and DecisionMaker" (PROG (msg)                                                      (_ (@ playerInterface)                                                         AddPlayer reqID name type truck deniedFlg)                                                      (_ (@ simulator)                                                         AddPlayer reqID name type truck deniedFlg)                                                      (SETQ msg (LIST 'AddPlayer reqID name type                                                                       truck deniedFlg))                                                      (SendOut self msg)                                                      (MailOut self msg)                                                      (_ (@ decisionMaker)                                                         AddPlayer reqID name type truck deniedFlg)))(Method ((RemoteMasterComm AddPlayerRequest) self reqID name type truck)                                                              (* ; "sm:  7-JUL-83 12:48") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                AddPlayerRequest reqID name type truck))(Method ((RemoteMasterComm BeginGameRequest) self)           (* ; "sm:  7-JUL-83 12:48") "Request for starting game - forwarded to DecisionMaker" (_ (@ decisionMaker)                                                             BeginGameRequest))(Method ((RemoteMasterComm BreakCargo) self playerName cargoPos)                                                              (* ; "sm:  7-JUL-83 13:38") "Forwards to Simulator" (PROG (msg)                               (_ (@ simulator)                                  BreakCargo                                  (GetObjectRec playerName)                                  cargoPos)                               (SendOut self (LIST 'BreakCargo (GetObjectName playerName)                                                   cargoPos))                               (MailOut self (LIST 'BreakCargo (GetObjectRec playerName)                                                   cargoPos))))(Method ((RemoteMasterComm BuyMade) self playerName roadPosition reqQty qty reason penaltyAmt                                          fragility lifetime) (* ; "sm:  7-JUL-83 13:39") "Forwards to Simulator" (_ (@ simulator)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (_ (@ decisionMaker)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (_ (@ playerInterface)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (SendOut self (LIST 'BuyMade (GetObjectName playerName)                                             roadPosition reqQty qty reason penaltyAmt fragility                                              lifetime))                         (MailOut self (LIST 'BuyMade (GetObjectRec playerName)                                             roadPosition reqQty qty reason penaltyAmt fragility                                              lifetime)))(Method ((RemoteMasterComm BuyRequest) self player roadPosition qty)                                                              (* ; "sm:  7-JUL-83 12:48") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                BuyRequest                                (GetObjectRec player)                                roadPosition qty))(Method ((RemoteMasterComm GameOver) self)                   (* ; "sm: 12-JUL-83 22:09") "Sent to Simulator" (_ (@ simulator)                        GameOver)                     (SendOut self (LIST 'GameOver))                     (MailOut self (LIST 'GameOver))                     (_@ gameStarted NIL))(Method ((RemoteMasterComm GasFill) self prev new qty pr)    (* ; "sm:  7-JUL-83 13:41") "Forwards to Simulator" (PROG (msg)                               (_ (@ simulator)                                  GasFill prev new qty pr)                               (SETQ msg (LIST 'GasFill prev new qty pr))                               (SendOut self msg)                               (MailOut self msg)))(Method ((RemoteMasterComm InterimWorldProcess) self)        (* ; "sm:  8-JUL-83 15:41") "Interim world process" (until (@ gameStarted) do (COND                                                      ((_ (@ postman)                                                          ReceiveP)                                                       (ReceiveIn self)))                                                   (BLOCK))                         (DEL.PROCESS (THIS.PROCESS)))(Method ((RemoteMasterComm MaxMove) self player maxMove)     (* ; "sm: 10-JUL-83 18:46") "Forwards to Simulator" (_ (@ simulator)                            MaxMove                            (GetObjectRec player)                            maxMove)                         (SendOut self (LIST 'MaxMove (COND                                                         ((LITATOM player)                                                          player)                                                         (T (GetObjectName player)))                                             maxMove))                         (MailOut self (LIST 'MaxMove (GetObjectRec player)                                             maxMove)))(Method ((RemoteMasterComm MoveMade) self playerName fromStop toStop reason penaltyAmount missTurns)                                                              (* ; "sm: 13-JUL-83 09:17") "Forwards to Simulator" (_ (@ simulator)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (_ (@ decisionMaker)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (_ (@ playerInterface)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (SendOut self (LIST 'MoveMade (GetObjectName playerName)                                             fromStop toStop reason penaltyAmount missTurns))                         (MailOut self (LIST 'MoveMade (GetObjectRec playerName)                                             fromStop toStop reason penaltyAmount missTurns))                         (_ (@ decisionMaker)                            UpdateAlice                            (GetObjectRec playerName)))(Method ((RemoteMasterComm MoveRequest) self player from to reason)                                                              (* ; "sm:  7-JUL-83 12:49") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                MoveRequest                                (GetObjectRec player)                                from to reason))(Method ((RemoteMasterComm NewGame) self seed boardType gameType)                                                              (* ; "sm:  7-JUL-83 13:49") "Forwards to Simulator" (PROG (msg)                               (_ (@ simulator)                                  NewGame seed boardType gameType)                               (_ self CreatePlayerInterface gameType)                               (_ (@ playerInterface)                                  NewGame seed boardType gameType)                               (SETQ msg (LIST 'NewGame seed boardType gameType))                               (SendOut self msg)                               (MailOut self msg)))(Method ((RemoteMasterComm NewGameRequest) self board)       (* ; "sm:  7-JUL-83 12:49") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                NewGameRequest board))(Method ((RemoteMasterComm ParkedAtAlice) self player time)  (* ; "sm:  7-JUL-83 13:54") "Forwards to Simulator" (_ (@ simulator)                            ParkedAtAlice                            (GetObjectRec player)                            time)                         (SendOut self (LIST 'ParkedAtAlice (GetObjectName player)                                             time))                         (MailOut self (LIST 'ParkedAtAlice (GetObjectRec player)                                             time)))(Method ((RemoteMasterComm ReUseGame) self seed)             (* ; "sm:  7-JUL-83 13:55") "Forwards to Simulator and other recipients" (_ (@ simulator)                                                 ReUseGame seed)                                              (_ (@ playerInterface)                                                 ReUseGame)                                              (SendOut self (LIST 'ReUseGame seed))                                              (MailOut self (LIST 'ReUseGame seed)))(Method ((RemoteMasterComm ReUseGameRequest) self)           (* ; "sm:  7-JUL-83 12:49") "Forwards to DecisionMaker for reusing existing game board" (_ (@ decisionMaker)                                                                ReUseGameRequest))(Method ((RemoteMasterComm RemovePlayer) self playerName reason)                                                              (* ; "sm:  7-JUL-83 14:00") "Forwards to Simulator" (_ (@ simulator)                            RemovePlayer                            (GetObjectRec playerName)                            reason)                         (_ (@ playerInterface)                            RemovePlayer                            (GetObjectRec playerName)                            reason)                         (SendOut self (LIST 'RemovePlayer (GetObjectName playerName)                                             reason))                         (MailOut self (LIST 'RemovePlayer (GetObjectRec playerName)                                             reason)))(Method ((RemoteMasterComm RemovePlayerRequest) self player reason)                                                              (* ; "sm: 10-JUL-83 21:10") "Request to remove player" (_ (@ decisionMaker)                               RemovePlayerRequest                               (GetObjectRec player)                               reason))(Method ((RemoteMasterComm SellMade) self playerName roadPosition reqQty qty cargoPos reason                                           penaltyAmt)        (* ; "sm:  7-JUL-83 14:09") "Forwards to Simulator, DecisionMaker, PlayerInterface" (_ (@ simulator)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (_ (@ decisionMaker)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (_ (@ playerInterface)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (SendOut self                                                                (LIST 'SellMade (GetObjectName                                                                                        playerName)                                                                      roadPosition reqQty qty                                                                       cargoPos reason penaltyAmt))                                                         (MailOut self                                                                (LIST 'SellMade (GetObjectRec                                                                                        playerName)                                                                      roadPosition reqQty qty                                                                       cargoPos reason penaltyAmt)))(Method ((RemoteMasterComm SellRequest) self player roadPosition commodityIndex qty)                                                              (* ; "sm:  7-JUL-83 12:49") "Forwards to DecisionMaker" (_ (@ decisionMaker)                                SellRequest                                (GetObjectRec player)                                roadPosition commodityIndex qty))(Method ((RemoteMasterComm SetInitialParameters) self)       (* ; "sm: 10-JUL-83 20:19") "Sets initial parameters" (_@ (@ decisionMaker)                               startsAfter 10)                           (SETQ debugMode NIL))(Method ((RemoteMasterComm SetUp) self game board display)   (* ; "sm: 10-JUL-83 19:37")                                                             (* ;                                                              "Sets up the Standard configuration") "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (_ self                                                                                   CreateDecisionMaker                                                                                     game)       (_ self CreateSimulator display)       (_ self CreateGateWay)       (_ self SetInitialParameters)       (_ self StartInterimWorldProcess)                     (* ;                                               "sends a request to DecisionMaker to create a new game")       (_ (@ decisionMaker)          NewGameRequest board))(Method ((RemoteMasterComm SpoilCargo) self playerName cargoPos)                                                              (* ; "sm: 26-JUL-83 09:53") "Forwards to Simulator" (_ (@ simulator)                            SpoilCargo                            (GetObjectRec playerName)                            cargoPos)                        (* ;                          "SpoilCargo is generated locally on each machine so should not be broadcast")                                                             (* ;                        "(SendOut self (LIST (QUOTE SpoilCargo) (GetObjectName playerName) cargoPos))")                         (MailOut self (LIST 'SpoilCargo (GetObjectRec playerName)                                             cargoPos)))(Method ((RemoteMasterComm StartGame) self begTime endTime)  (* ; "sm:  7-JUL-83 14:38") "Forwards to simulator, PI, DM, and then starts WorldProcess" (_ (@ simulator)                                                                  StartGame begTime endTime)                                                             (* ; "start the WorldProcess")                                                               (_ self StartWorldProcess)                                                               (_ (@ playerInterface)                                                                  StartGame begTime endTime)                                                               (_ (@ decisionMaker)                                                                  StartGame begTime endTime)                                                               (SendOut self (LIST 'StartGame begTime                                                                                    endTime))                                                               (MailOut self (LIST 'StartGame begTime                                                                                    endTime)))(Method ((RemoteMasterComm StartInterimWorldProcess) self)   (* ; "sm:  8-AUG-83 15:52") "Starts Interim World Process" (DEL.PROCESS 'InterimWorldProc)                                (_@ gameStarted NIL)                                (_@ interimWP (ADD.PROCESS (LIST '_ self 'InterimWorldProcess)                                                     'NAME                                                     'InterimWorldProc                                                     'RESTARTABLE GameProcRestFlg)))(Method ((RemoteMasterComm WorldProcess) self)               (* ; "sm: 16-SEP-83 17:16") "This is the World Process." (PROG ([endTime (SETUPTIMER.DATE (GDATE (@ Simulator endTime)]                                     [begTime (SETUPTIMER (IntervalToEvent (@ Simulator beginTime)]                                     cTime pendReq)          (* Wait till it is 5 secs before game)                                    (until (TIMEREXPIRED? begTime 'MS)                                       do (COND                                             ((_ (@ postman)                                                 ReceiveP)                                              (ReceiveIn self)))                                          (BLOCK))           (* ask PI to start User Processes)                                                             (* (_ (@ playerInterface)                                                              StartPlayerProcesses))                                    (_ (@ decisionMaker)                                       RedoGameParameters)                                    (_ (@ simulator)                                       RedoGameParameters)   (* Start the loop for checking                                                              messages from PI)                                    (PutValue (@ simulator)                                           'timeLeft                                           (IDIFFERENCE (@ (@ simulator)                                                           endTime)                                                  (IDATE)))                                    (_@ (@ playerInterface)                                        runningPlayer NIL)                                    (_ (@ playerInterface)                                       CheckLocalPlayers)                                    (until (TIMEREXPIRED? endTime 'SECONDS)                                       do (_ (@ playerInterface)                                             ScheduleNextPlayer)                                          (BLOCK)                                          (_ (@ decisionMaker)                                             MonitorGame)                                          (BLOCK)                                          (COND                                             ((_ (@ postman)                                                 ReceiveP)                                              (ReceiveIn self)))                                          (BLOCK))           (* Game is over)                                    (_ (@ decisionMaker)                                       MonitorGame T)                                    (_@ gameStarted NIL)                                    (_ self CleanGameWorld)                                    (RETURN 'Done)))(Method ((RemoteSlaveComm AddBandit) self name)              (* ; "sm:  7-JUL-83 13:22") "Add bandit to game" (PROG (msg)                            (_ (@ simulator)                               AddBandit name)                            (SETQ msg (LIST 'AddBandit name))                            (MailOut self msg)))(Method ((RemoteSlaveComm AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "sm:  7-JUL-83 13:25") "Forwards to PI, Simulator, and DecisionMaker" (PROG (msg)                                                      (_ (@ playerInterface)                                                         AddPlayer reqID name type truck deniedFlg)                                                      (_ (@ simulator)                                                         AddPlayer reqID name type truck deniedFlg)                                                      (SETQ msg (LIST 'AddPlayer reqID name type                                                                       truck deniedFlg))                                                      (MailOut self msg)))(Method ((RemoteSlaveComm AddPlayerRequest) self reqID name type truck)                                                              (* ; "sm:  7-JUL-83 13:26") "Forwards to DecisionMaker" (SendOut self (LIST 'AddPlayerRequest reqID name type truck)))(Method ((RemoteSlaveComm BeginGameRequest) self)            (* ; "mjs:  2-AUG-83 11:29") "Blocks it." (printout TTY "You cannot start a game from the Slave Machine!!" T)              (printout TTY "Wait till the Master Machine sends a StartGame to your machine" T))(Method ((RemoteSlaveComm BreakCargo) self playerName cargoPos)                                                              (* ; "sm:  7-JUL-83 13:33") "Forwards to Simulator" (PROG (msg)                               (_ (@ simulator)                                  BreakCargo                                  (GetObjectRec playerName)                                  cargoPos)                               (MailOut self (LIST 'BreakCargo (GetObjectRec playerName)                                                   cargoPos))))(Method ((RemoteSlaveComm BuyMade) self playerName roadPosition reqQty qty reason penaltyAmt                                         fragility lifetime)  (* ; "sm:  7-JUL-83 13:35") "Forwards to Simulator" (_ (@ simulator)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (_ (@ playerInterface)                            BuyMade                            (GetObjectRec playerName)                            roadPosition reqQty qty reason penaltyAmt fragility lifetime)                         (MailOut self (LIST 'BuyMade (GetObjectRec playerName)                                             roadPosition reqQty qty reason penaltyAmt fragility                                              lifetime)))(Method ((RemoteSlaveComm BuyRequest) self player roadPosition qty)                                                              (* ; "sm: 10-JUL-83 14:42") "Forwards to DecisionMaker" (SendOut self (LIST 'BuyRequest (COND                                                                ((LITATOM player)                                                                 player)                                                                (T (GetObjectName player)))                                                 roadPosition qty)))(Method ((RemoteSlaveComm GameOver) self)                    (* ; "sm: 12-JUL-83 22:10") "Sent to Simulator" (_ (@ simulator)                        GameOver)                     (MailOut self (LIST 'GameOver))                     (_@ gameStarted NIL))(Method ((RemoteSlaveComm GasFill) self prev new qty pr)     (* ; "sm:  7-JUL-83 13:41") "Forwards to Simulator" (PROG (msg)                               (_ (@ simulator)                                  GasFill prev new qty pr)                               (SETQ msg (LIST 'GasFill prev new qty pr))                               (MailOut self msg)))(Method ((RemoteSlaveComm InterimWorldProcess) self)         (* ; "sm:  8-JUL-83 15:41") "Interim world process" (until (@ gameStarted) do (COND                                                      ((_ (@ postman)                                                          ReceiveP)                                                       (ReceiveIn self)))                                                   (BLOCK))                         (DEL.PROCESS (THIS.PROCESS)))(Method ((RemoteSlaveComm MaxMove) self player maxMove)      (* ; "sm: 10-JUL-83 18:45") "Forwards to Simulator" (_ (@ simulator)                            MaxMove                            (GetObjectRec player)                            maxMove)                         (MailOut self (LIST 'MaxMove (COND                                                         ((LITATOM player)                                                          player)                                                         (T (GetObjectName player)))                                             maxMove)))(Method ((RemoteSlaveComm MoveMade) self playerName fromStop toStop reason penaltyAmount missTurns)                                                              (* ; "sm:  7-JUL-83 13:45") "Forwards to Simulator" (_ (@ simulator)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (_ (@ playerInterface)                            MoveMade                            (GetObjectRec playerName)                            fromStop toStop reason penaltyAmount missTurns)                         (MailOut self (LIST 'MoveMade (GetObjectRec playerName)                                             fromStop toStop reason penaltyAmount missTurns)))(Method ((RemoteSlaveComm MoveRequest) self player from to reason)                                                              (* ; "sm: 10-JUL-83 14:43") "Forwards to DecisionMaker" (SendOut self (LIST 'MoveRequest (COND                                                                 ((LITATOM player)                                                                  player)                                                                 (T (GetObjectName player)))                                                 from to reason)))(Method ((RemoteSlaveComm NewGame) self seed boardType gameType)                                                              (* ; "sm: 12-JUL-83 21:07") "Forwards to Simulator" (_ (@ simulator)                            NewGame seed boardType gameType)                         (_ self CreatePlayerInterface gameType)                         (_ (@ playerInterface)                            NewGame seed boardType gameType)                         (MailOut self (LIST 'NewGame seed boardType gameType)))(Method ((RemoteSlaveComm NewGameRequest) self board)        (* ; "mjs:  2-AUG-83 11:29") "Blocks it" (printout TTY "Requests for new games can only be generated at the" " Master Machine" T))(Method ((RemoteSlaveComm ParkedAtAlice) self player time)   (* ; "sm:  7-JUL-83 13:54") "Forwards to Simulator" (_ (@ simulator)                            ParkedAtAlice                            (GetObjectRec player)                            time)                         (MailOut self (LIST 'ParkedAtAlice (GetObjectRec player)                                             time)))(Method ((RemoteSlaveComm ReUseGame) self seed)              (* ; "sm:  7-JUL-83 13:55") "Forwards to Simulator and other recipients" (_ (@ simulator)                                                 ReUseGame seed)                                              (_ (@ playerInterface)                                                 ReUseGame)                                              (MailOut self (LIST 'ReUseGame seed)))(Method ((RemoteSlaveComm ReUseGameRequest) self)            (* ; "mjs:  2-AUG-83 11:29") "Blocks it" (printout TTY "Request to ReUse existing board can be given" T                     " ONLY at the Master Machine" T))(Method ((RemoteSlaveComm RemovePlayer) self playerName reason)                                                              (* ; "sm:  7-JUL-83 14:00") "Forwards to Simulator" (_ (@ simulator)                            RemovePlayer                            (GetObjectRec playerName)                            reason)                         (_ (@ playerInterface)                            RemovePlayer                            (GetObjectRec playerName)                            reason)                         (MailOut self (LIST 'RemovePlayer (GetObjectRec playerName)                                             reason)))(Method ((RemoteSlaveComm RemovePlayerRequest) self player reason)                                                              (* ; "dgb: 15-JUL-83 00:31") "Request to remove player" (SendOut self (LIST 'RemovePlayerRequest (GetObjectName player)                                                reason)))(Method ((RemoteSlaveComm SellMade) self playerName roadPosition reqQty qty cargoPos reason                                          penaltyAmt)         (* ; "sm:  7-JUL-83 14:09") "Forwards to Simulator, DecisionMaker, PlayerInterface" (_ (@ simulator)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (_ (@ playerInterface)                                                            SellMade                                                            (GetObjectRec playerName)                                                            roadPosition reqQty qty cargoPos reason                                                             penaltyAmt)                                                         (MailOut self                                                                (LIST 'SellMade (GetObjectRec                                                                                        playerName)                                                                      roadPosition reqQty qty                                                                       cargoPos reason penaltyAmt)))(Method ((RemoteSlaveComm SellRequest) self player roadPosition commodityIndex qty)                                                              (* ; "sm: 10-JUL-83 14:43") "Forwards to DecisionMaker" (SendOut self (LIST 'SellRequest (COND                                                                 ((LITATOM player)                                                                  player)                                                                 (T (GetObjectName player)))                                                 roadPosition commodityIndex qty)))(Method ((RemoteSlaveComm SetInitialParameters) self)        (* ; "sm: 10-JUL-83 20:19") "Sets initial parameters" (SETQ debugMode T)                           (SETQ timeTrace T))(Method ((RemoteSlaveComm SetUp) self game board display)    (* ; "sm: 10-JUL-83 19:37")                                                             (* ;                                                              "Sets up the Standard configuration") "Ignores game and board ARGS" (_ self CreateSimulator display)       (_ self CreateGateWay)       (_ self SetInitialParameters)       (_ self StartInterimWorldProcess))(Method ((RemoteSlaveComm SpoilCargo) self playerName cargoPos)                                                              (* ; "sm:  7-JUL-83 14:32") "Forwards to Simulator" (_ (@ simulator)                            SpoilCargo                            (GetObjectRec playerName)                            cargoPos)                         (MailOut self (LIST 'SpoilCargo (GetObjectRec playerName)                                             cargoPos)))(Method ((RemoteSlaveComm StartGame) self begTime endTime)   (* ; "sm: 12-JUL-83 21:07") "Forwards to simulator, PI, DM, and then starts WorldProcess" (_ (@ simulator)                                                                  StartGame begTime endTime)                                                             (* ; "start the WorldProcess")                                                               (_ self StartWorldProcess)                                                               (_ (@ playerInterface)                                                                  StartGame begTime endTime)                                                               (MailOut self (LIST 'StartGame begTime                                                                                    endTime))                                                               (_ (@ playerInterface)                                                                  SelectPlayers))(Method ((RemoteSlaveComm StartInterimWorldProcess) self)    (* ; "sm:  8-AUG-83 15:52") "Starts Interim World Process" (DEL.PROCESS 'InterimWorldProc)                                (_@ gameStarted NIL)                                (_@ interimWP (ADD.PROCESS (LIST '_ self 'InterimWorldProcess)                                                     'NAME                                                     'InterimWorldProc                                                     'RESTARTABLE GameProcRestFlg)))(Method ((RemoteSlaveComm WorldProcess) self)                (* ; "sm: 16-SEP-83 17:17") "This is the World Process" (PROG ([endTime (SETUPTIMER.DATE (GDATE (@ Simulator endTime)]                                    [begTime (SETUPTIMER (IntervalToEvent (@ Simulator beginTime)]                                    cTime pendReq)           (* Wait till it is 5 secs before game)                                   (until (TIMEREXPIRED? begTime 'MS)                                      do (COND                                            ((_ (@ postman)                                                ReceiveP)                                             (ReceiveIn self)))                                         (BLOCK))            (* ask PI to start User Processes)                                                             (* (_ (@ playerInterface)                                                              StartPlayerProcesses))                                   (_ (@ simulator)                                      RedoGameParameters)    (* Start the loop for checking                                                              messages from PI)                                   (PutValue (@ simulator)                                          'timeLeft                                          (IDIFFERENCE (@ (@ simulator)                                                          endTime)                                                 (IDATE)))                                   (_@ (@ playerInterface)                                       runningPlayer NIL)                                   (_ (@ playerInterface)                                      CheckLocalPlayers)                                   (until (TIMEREXPIRED? endTime 'SECONDS)                                      do (_ (@ playerInterface)                                            ScheduleNextPlayer)                                         (BLOCK)                                         (for x in (@ (@ playerInterface)                                                      suspendedPlayers)                                            when (SETQ pendReq (@ x pendingRequest))                                            do (_@ x pendingRequest NIL)                                               (PutValue x 'pendingRequest (IDATE)                                                      'whenSent)                                               (PutValue x 'pendingRequest pendReq 'inProcess)                                               (ApplyMethod self (CAR pendReq)                                                      (CDR pendReq)))                                         (COND                                            ((_ (@ postman)                                                ReceiveP)                                             (ReceiveIn self)))                                         (BLOCK))                                   (while (@ gameStarted) do (COND                                                                ((_ (@ postman)                                                                    ReceiveP)                                                                 (ReceiveIn self)))                                                             (BLOCK))                                   (_ self CleanGameWorld)                                   (RETURN 'Done)))(Method ((TimeTruckinDM ChargeTime) self player clockTime)   (* ; "sm: 28-JUN-83 10:06")                                                             (* ;                                                  "Calculates the actual time to be charged to player") "if clockTime is NIL, MinMoveTime is charged" (PROG (time charge)                                                     [COND                                                        ((NULL clockTime)                                                         (SETQ charge (@@ MinMoveTime)))                                                        (T [SETQ time (IDIFFERENCE                                                                       clockTime                                                                       (IPLUS (@ unchargedTime)                                                                              (@@ player Handicap]                                                           [SETQ charge                                                            (SETQ time                                                             (FIX (QUOTIENT (PLUS 500                                                                                  (TIMES time                                                                                         HandicapRatio                                                                                         ))                                                                         1000]                                                           (COND                                                              ((LESSP time (@@ MinMoveTime))                                                               (SETQ charge (@@ MinMoveTime)))                                                              ((GREATERP time (@@ MaxMoveTime))                                                             (* player exceeded limit.                                                             Yank from game)                                                               (_ self RemovePlayer player                                                                       (CONCAT "Too much time taken "                                                                               charge))                                                               (SETQ charge 0]                                                     (_@ player timeUsed (IPLUS charge                                                                                (@ player timeUsed)))                                                     (_@ timeRemaining (IDIFFERENCE (@ timeRemaining)                                                                              charge))                                                     (AND debugTimeTrace                                                          (WriteGameStatus (CONCAT "Time Used: by "                                                                                  (@ player driver))                                                                 (CONCAT "Clock(ms) " clockTime)                                                                 (CONCAT "Used(sec)" time)))                                                     (AND timeTrace (WriteGameStatus                                                                            "Time Charged to: "                                                                           (@ player driver)                                                                           (CONCAT " " charge " sec")                                                                           ))                                                     (RETURN charge)))(Method ((TimeTruckinDM CheckAlice) self player)             (* ; "sm: 13-JUL-83 09:44") "check AlicesRestaurant's before each turn"   [for x in (@ alices) bind parked      do (for loc in '(parkingPlace1 parkingPlace2)            do (PROG (time msg reason)                     (COND                        ((SETQ parked (GetValue x loc))                         (COND                            ([OR (AND NIL                    (* This condition is blocked out)                                      (GREATERP (GetValue x loc 'howLong)                                             3)                                      (SETQ msg "Stayed at Alices more than 3 turns")                                      (SETQ reason 'AliceTurn))                                 (AND (GREATERP (GetValue x loc 'howLong)                                             0)                                      (GREATERP [SETQ time (IDIFFERENCE (IDATE)                                                                  (GetValue x loc 'timeParked]                                             (@ self aliceStay MaxTime))                                      (SETQ msg (CONCAT "Spent too much time at Alice: " time))                                      (SETQ reason 'AliceTime]                                                             (* stayed there too long)                             (COND                                ((_ (@ unionHall)                                    RoomToPark?)                                 (BrokenRules parked msg NIL 1 "Forcibly moved to UnionHall")                                 (_ self MoveRequest parked (FindLocIndex x (@ roadStops))                                         (FindLocIndex (@ unionHall)                                                (@ roadStops))                                         reason))                                (T                           (* UnionHall is temporarily filled)                                   (BrokenRules parked msg NIL 1                                           "Will be moved to UnionHall next turn"])(Method ((TimeTruckinDM InitializeGameParameters) self)      (* ; "sm:  8-JUL-83 11:06") "Initializes critical variables for new game to run" (_Super self InitializeGameParameters)                                                      (PutValue self 'replenishFreq (@ beginTime)                                                             'LastTime)                                                      (PutValue self 'banditFreq (@ beginTime)                                                             'LastTime))(Method ((TimeTruckinDM MoveBandits) self)                   (* ; "sm:  5-JUL-83 12:05") "randomly moves bandits around on the board before each turn" [PROG ((ctime (IDATE)))                                                                     (COND                                                                        ((IGREATERP                                                                          (IDIFFERENCE ctime                                                                                 (@ self banditFreq                                                                                          LastTime))                                                                          (@ banditFreq))                                                                         (PutValue self 'banditFreq                                                                                 ctime 'LastTime)                    (* Only move once in a while if you are a bandit)                                                                         (_Super self MoveBandits)])(Method ((TimeTruckinDM RedoGameParameters) self)            (* ; "sm:  4-AUG-83 13:16") "Change game parameters based on players in the game" (PROG NIL                                                             (_Super self RedoGameParameters)                                                             [PutValue self 'banditFreq                                                                    (ITIMES (@@ MinMoveTime)                                                                           (LENGTH (@ players))                                                                           (GetValue self                                                                                  'banditFreq                                                                                  'BanditFactor]                                                             (* (PutValue self (QUOTE replenishFreq)                                                             (ITIMES (@@ MinMoveTime)                                                             (LENGTH (@ players))                                                             (GetValue self (QUOTE replenishFreq)                                                             (QUOTE ReplenishFactor)))))                                                             (PutValue self 'replenishFreq                                                                     NotSetValue)                                                             (RETURN NIL)))(Method ((TimeTruckinDM ReplenishQty) self)                  (* ; "sm:  5-JUL-83 12:06") "Checks if time to replenish" [PROG ((ctime (IDATE)))                                     (COND                                        ((IGREATERP (IDIFFERENCE ctime (@ self replenishFreq LastTime)                                                           )                                                (@ replenishFreq))                                         (PutValue self 'replenishFreq ctime 'LastTime)                                         (_Super self ReplenishQty)])(Method ((TimeTruckinPI BeginGame) self players moves time) "Used to be just a function"   (COND      ((NUMBERP moves)       (_@ avgNumMoves moves)))   [COND      ((NUMBERP time)       (_@ timeRemaining time)       (PutValue self 'timeRemaining T 'SetByUser]   (_Super self BeginGame players))(Method ((TimeTruckinPI RunGame) self players)               (* ; "sm: 27-JUN-83 11:02") "This is the main loop that runs the game" (while (GREATERP (@ timeRemaining)                                                          0) bind currPlayer begTime chargeTime                                                                   playerRet                                               do (WaitIfControlKey "Beginning of Game Loop")                                                  [COND                                                     ((ZEROP (IMOD (@ timeRemaining)                                                                   10))                                                      (WriteGameStatus NIL "Time Remaining: "                                                             (@ timeRemaining)]                                                  (_ self ReplenishQty)                                                  (_ self MoveBandits)                                                  [for p bind (minTimeSoFar _ 10000000)                                                     in (@ players)                                                     do (COND                                                           ((ILESSP (@ p timeUsed)                                                                   minTimeSoFar)                                                            (SETQ currPlayer p)                                                            (SETQ minTimeSoFar (@ p timeUsed)]                                                  (_@ currentPlayer (SETQ currentPlayer currPlayer))                                                  (SETQ forcedStop NIL)                                                              (* update commodity status affected by                                                              moves)                                                  (for y in (@ (@ currPlayer truck)                                                               cargo)                                                     do (DoFringeMethods y 'UpdateStatus))                                                  (_@ unchargedTime 0)                                                  [COND                                                     ((FMEMB currPlayer (@ loseTurn))                                                      (WriteGameStatus (CONCAT (@ currPlayer driver)                                                                              " lost his turn"))                                                      (SETQ chargeTime (_ self ChargeTime currPlayer)                                                       )                                                      (_@ loseTurn (REMOVE currPlayer (@ loseTurn)))                                                      (_@ lastMoved NIL))                                                     (T (SETQ maxMove (RAND 1 (@@ (@ currPlayer                                                                                     truck)                                                                                  MaxDist)))                                                             (* (WriteGameStatus (@ x driver)                                                              " can MOVE max " maxMove))                                                        (SETQ begTime (CLOCK))                                                        [COND                                                           (debugMode (_ currPlayer TakeTurn))                                                           (T (SETQ playerRet (ERSETQ (_ currPlayer                                                                                         TakeTurn)))                                                              (COND                                                                 ((NULL playerRet)                                                                  (_ self RemovePlayer currPlayer                                                                           "Player crashed on a Bug")]                                                        (_@ lastMoved NIL)                                                        (SETQ chargeTime (_ self ChargeTime                                                                                  currPlayer                                                                                 (IDIFFERENCE (CLOCK)                                                                                        begTime))]                                                  (_@ currPlayer movesMade (ADD1 (@ currPlayer                                                                                           movesMade)))                                                  (_ self UpdateAlice currPlayer chargeTime)                                                  (_ self CheckAlice currPlayer)))(Method ((TruckinBoard AssignRoadStops) self)                (* ; "sm: 27-JUN-83 18:08") "Assign RoadStops to the current GameBoard" (PROG ((numStopsWanted (ITIMES (@@ numRows)                                                                           (@@ numColumns)))                                                    numStopsKnown stops rs stillNeeded                                                    (availRS (APPEND (SetRoadStops)))                                                    count)   (* generate dummy board)                                                   (for i from 1 to numStopsWanted                                                      do (SETQ stops (CONS NIL stops)))                                                             (* install BoardPattern)                                                   (SubstituteStop stops 1 (_New ($ UnionHall)))                                                   (for x in BoardPattern                                                      do (SubstituteStop stops (FindRandomNIL stops)                                                                (_ ($ AlicesRestaurant)                                                                   New)))                                                   (for x in MustStops                                                      do (SubstituteStop stops (FindRandomNIL stops)                                                                (_ (GetObjectRec x)                                                                   New)))                                                   (SETQ stillNeeded (for x in stops                                                                        count (NULL x)))                                                   (SETQ availRS (FillerRoadStops (DefaultMustStops))                                                    )                                                   (SETQ numStopsKnown (FLENGTH availRS))                                                   [for i from stillNeeded to 10 by -1                                                      do [SETQ rs (CAR (NTH availRS (RAND 1                                                                                         numStopsKnown                                                                                          ]                                                         [COND                                                            ((ILEQ i numStopsKnown)                                                             (SETQ availRS (DREMOVE rs availRS))                                                             (SETQ numStopsKnown (FLENGTH availRS]                                                         (SubstituteStop stops (FindRandomNIL stops)                                                                (_New (GetClassRec rs))]                                                   [for i from 9 to 1 by -1                                                      do [SETQ rs (CAR (NTH availRS (RAND 1                                                                                         numStopsKnown                                                                                          ]                                                         [COND                                                            ((ILEQ i numStopsKnown)                                                             (SETQ availRS (DREMOVE rs availRS))                                                             (SETQ numStopsKnown (FLENGTH availRS]                                                         (SubstituteStop stops (FindFirstNIL stops)                                                                (_New (GetClassRec rs))]                                                   (SETQ StopsNotUsed availRS)                                                   (RETURN (_@ roadStops stops))))(Method ((TruckinBoard AttachToGame) self game)              (* ; "sm: 28-JUN-83 09:33")                                                             (* ; "attaches self to game") "returns previous game (if any) to which attached" (PROG (prevGame)                                                          (SETQ prevGame (@ simulator))                                                          (COND                                                             ((GetObjectRec prevGame)                                                              (_ prevGame UnattachBoard)))                                                          (PutValue self 'simulator game)                                                          (RETURN prevGame)))(Method ((TruckinBoard CreateGameBoard) self region title)   (* ; "sm:  5-JUL-83 18:38") "Creates a new Window for the gameBoard." (PROG NIL                                                 (SETQ gameWindow (CREATEW region title))                                                 (_@ gameWindow gameWindow)                                                 (_ self InitializeGameWindow)                                                 (_ self MakeDriveBitMaps)                                                 (RETURN gameWindow)))(Method ((TruckinBoard DisplayGameBoard) self)               (* ; "sm: 29-JUN-83 15:51") "Displays the gameBoard. ReAllocates gameBoard window if needed."   (PROG (region (xMargin 2)                (xExtra 10)                (yExtra 20)                width height (k 0)                (date (DATE)))                    (* * Initialize and display the gameWindow if needed.)         (SETQ gameWindow (@ gameWindow))         (COND            [(NOT gameWindow)                                (* New window if needed.)             [SETQ width (IPLUS xExtra (ITIMES (@@ numColumns)                                              (@@ ($ RoadStop)                                                  Width]             [SETQ height (IPLUS yExtra (ITIMES (@@ numRows)                                               (IPLUS (@@ ($ RoadStop)                                                          Height)                                                      (@@ ($ Player)                                                          Height]             (SETQ region (create REGION                                 LEFT _ 10                                 BOTTOM _ 10                                 WIDTH _ width                                 HEIGHT _ height))             (_@ windowRegion region)             (SETQ gameWindow (_ self CreateGameBoard region (CONCAT "TRUCKIN Knowledge System.    Created by: DANIEL BOBROW, SANJAY MITTAL, and MARK STEFIK.    Copyright (c) "                                                                    (CONCAT "19"                                                                           (SUBSTRING date 8 9))                                                                    " Xerox Corp" "     " (DATE)))]            (T (_ self InitializeGameWindow)))         (_ self DrawRoadMarks)         (for roadStop in (@ roadStops) do (_ roadStop Display))         (RETURN self)))(Method ((TruckinBoard DrawRoadMarks) self) (DrawRoadMarks self) )(Method ((TruckinBoard InitializeRoadStops) self seed)       (* ; "sm: 28-JUN-83 09:35") "Initializes RoadStop qty and pr" (RANDSET seed)                                   (for x in (@ roadStops) do (_ x Initialize)))(Method ((TruckinBoard MakeDriveBitMaps) self)               (* ; "sm: 27-JUN-83 18:09") "Creates Bit maps for Trucks" (MakeDriveBitMaps 1))(Method ((TruckinBoard NewBoard) self seed)                  (* ; "sm:  5-JUL-83 18:40") "Creates and displays a new game board" (RANDSET seed)      (* ; "Display the board")                                         (SETQ gameWindow NIL)                                         (_ self Initialize)                                         (_ self AssignRoadStops)                                                             (* ; "Pick Road Stops")                                                             (* ; "(_ self DisplayGameBoard)")                                                             (* ; "Place RoadStops on the board")                                         (_ self PlaceRoadStops)                                                             (* ;                                                "Generate initial qty and pr for applicable roadStops")                                         (_ self InitializeRoadStops (RANDSET))                                         self)(Method ((TruckinBoard PlaceRoadStops) self)                 (* ; "sm: 27-JUN-83 18:09") "Place the RoadStops onto the GameBoard." [PROG ((numRows (@@ numRows))                                                  (numColumns (@@ numColumns))                                                  (roadStops (@ roadStops))                                                  (milePost 0)                                                  roadStop x y xIncr yIncr prev)                    (* * Compute the x and y initial values and increments.)                                                 (SETQ yIncr (IPLUS (@@ ($ RoadStop)                                                                        Height)                                                                    (@@ ($ Player)                                                                        Height)))                                                 (SETQ xIncr (@@ ($ RoadStop)                                                                 Width))                                                 (SETQ y (ITIMES numRows yIncr))                    (* * Place the RoadStops on the board.)                                                 (for row from numRows to 1 by -2                                                    do (SETQ x 0)                                                       (SETQ y (IDIFFERENCE y yIncr))                                                       (for col from 1 to numColumns                                                          do (SETQ roadStop (pop roadStops))                                                             (COND                                                                (prev (_@ prev next roadStop)))                                                             (_@ roadStop prev prev)                                                             (SETQ prev roadStop)                                                             (SETQ milePost (ADD1 milePost))                                                             (_ roadStop Place x y milePost                                                                      'Right)                                                             (SETQ x (IPLUS x xIncr)))                                                       (SETQ x (IDIFFERENCE x xIncr))                                                       (SETQ y (IDIFFERENCE y yIncr))                                                       (for col from numColumns to 1 by -1                                                          do (SETQ roadStop (pop roadStops))                                                             (_@ prev next roadStop)                                                             (_@ roadStop prev prev)                                                             (SETQ prev roadStop)                                                             (SETQ milePost (ADD1 milePost))                                                             (_ roadStop Place x y milePost                                                                      'Left)                                                             (SETQ x (IDIFFERENCE x xIncr])(Method ((TruckinBoard ReInitializeRoadStops) self seed)     (* ; "sm: 29-JUN-83 14:34") "Reinitializes roadstops" (RANDSET seed)                           (for x in (@ roadStops) do (_ x ReInitialize)))(Method ((TruckinBoard ReUseBoard) self seed)                (* ; "sm:  5-JUL-83 18:40") "Reuses game board: displaying afresh" (_ self Initialize)                                        (_ self ReInitializeRoadStops (RANDSET))                                        self)(Method ((TruckinBoard RemovePlayer) self player)            (* ; "sm: 27-JUN-83 18:09") "Sent to game board so it can remove player from board" (PROG ((truck (@ player truck))                                                                loc)                                                               (SETQ loc (@ truck location))                                                               (COND                                                                  (loc (_ loc Unpark player)))                                                               (RETURN player)))(Method ((TruckinCommInterface CleanGameWorld) self)         (* ; "sm: 16-SEP-83 17:17") "Cleans up the game world after game over" (_ (@ playerInterface)                                               DeletePlayerProcesses)                                            (AND GameControlWindow (CLOSEW GameControlWindow)))(Method ((TruckinCommInterface CreateDecisionMaker) self game)                                                              (* ; "sm:  5-JUL-83 18:41")                                                             (* ; "Creates a new DecisionMaker") "ARGS: If NIL, then default. If T, then ask user, else use the passed arg" (PROG (dm gameClass)       [COND          [(AND (SETQ gameClass (GetClassRec game))                (_ gameClass Subclass 'TruckinDecisionMaker)]          [(NULL game)           (SETQ gameClass (GetClassRec (GetValue self 'decisionMaker 'DefaultClass]          (T (SETQ gameClass (GetClassRec (INMENU "Select the game" (_ ($ TruckinDecisionMaker)                                                                       List                                                                       'Subs)]       (SETQ dm (_ gameClass New))       (SETQ DecisionMaker dm)       (_@ decisionMaker dm)       (RETURN dm)))(Method ((TruckinCommInterface CreateGateWay) self machineName postalAddress)                                                              (* ; "sm: 12-JUL-83 18:51") "creates a gateway and links it" (PROG (gclass newP machineID)                                        (OR machineName (SETQ machineName (INTTY                                                                   "Give me a name for your machine: "                                                                                  NIL                                                               "An atom which identifies your machine"                                                                                  T)))                                        (OR postalAddress (SETQ postalAddress                                                           (INTTY                                                     "What is the address of the postMaster machine? "                                                                   NIL                                                   "An integer which is the PupAddress of the machine"                                                                   T)))                                        [SETQ gclass (GetClassRec (GetValue self 'postman                                                                         'DefaultClass]                                        (SETQ newP (_ gclass New))                                        (SETQ Postman newP)                                        (_@ postman newP)    (* Link to PostMaster)                                        (SETQ machineID (_ Postman GetPostalBox machineName                                                                  postalAddress))                                        (_@ machineID machineID)                                        (RETURN Postman)))(Method ((TruckinCommInterface CreatePlayerInterface) self gameType)                                                              (* ; "sm: 10-JUL-83 20:22") "Create a PlayerInterface (if needed) matching gameType"   (PROG (currentPI cpiClass piClass newPI)                    (* currently not checking for any prior PI.          My do so later if needed)         [SETQ piClass (GetClassRec (GetClassValue (GetObjectRec gameType)                                           'PlayerInterface]         [COND            ((NULL piClass)                                  (* no matching PlayerInterface class                                                              found. ask user)             (SETQ piClass (GetClassRec (INMENU (CONCAT "Select PlayerInterface for game type: "                                                        gameType)                                               (_ ($ TruckinPlayerInterface)                                                  List!                                                  'Subs)]         (SETQ newPI (_ piClass New))         (_@ playerInterface newPI)         (SETQ PI (SETQ PlayerInterface newPI))         (RETURN PlayerInterface)))(Method ((TruckinCommInterface CreateSimulator) self display)                                                              (* ; "sm:  9-SEP-83 15:02") "Creates a new simulator" (PROG (sim gameClass)                                 [COND                                    [(AND (SETQ gameClass (GetClassRec display))                                          (_ gameClass Subclass 'TruckinSimulator)]                                    [(NULL display)                                     (SETQ gameClass (GetClassRec (GetValue self 'simulator                                                                         'DefaultClass]                                    (T (SETQ gameClass (GetClassRec (INMENU "Select the game"                                                                           (_ ($ TruckinSimulator)                                                                              List                                                                              'Subs)]                                 (SETQ sim (_ gameClass New))                                 (SETQ Simulator sim)                                 (RETURN (_@ simulator sim))))(Method ((TruckinCommInterface NewInstance) self) "Used to be just a function" (_Super self                                                                                           NewInstance)                                                                               self)(Method ((TruckinCommInterface SetInitialParameters) self)   (* ; "sm: 10-JUL-83 19:36") "Sets initial parameters" self)(Method ((TruckinCommInterface StartWorldProcess) self)      (* ; "sm:  8-AUG-83 15:50") "Starts world process" (PROG (hand)                              (DEL.PROCESS (FIND.PROCESS 'WorldProcess))                              (SETQ hand (ADD.PROCESS (LIST '_ self 'WorldProcess)                                                'NAME                                                'WorldProcess                                                'RESTARTABLE GameProcRestFlg))                              (_@ worldProcess hand)                              (_@ gameStarted T)                              (GameControlMenu)                              (RETURN hand)))(Method ((TruckinCommInterface TellMe) self obj)             (* ; "mjs:  2-AUG-83 11:30") "Adds obj to broadcastList" (COND                                ([AND (GetObjectRec obj)                                      (NOT (FMEMB (GetObjectRec obj)                                                  (@ broadcastList)]                                 (_@ broadcastList (CONS (GetObjectRec obj)                                                         (@ broadcastList)))                                 (printout TTY obj                                         " is now on the broadcast list. Welcome to the game!!" T))))(Method ((TruckinDecisionMaker AddBandit) self name)         (* ; "sm: 30-JUN-83 19:30") "Add bandit to list" (_@ bandits (CONS (GetObjectRec name)                                        (@ bandits))))(Method ((TruckinDecisionMaker AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "mjs:  2-AUG-83 11:30") "If player added, do initial placing for him" (PROG (player locs nextLoc)                                                             (* Check if request denied)                                                     (COND                                                        (deniedFlg (RETURN NIL)))                                                     (SETQ player (GetObjectRec name))                                                     (COND                                                        ((FMEMB player (@ players))                                                         (printout TTY                                                             "Shouldnt happen!! Attempt to add player"                                                                "already in game (in Decision Maker) "                                                                 name T)                                                         (HELPCHECK "Adding player already in game!")                                                         (RETURN NIL)))                                                     (_@ players (CONS player (@ players)))                                                             (* position the player on the board)                                                     (SETQ locs (@ roadStops))                                                     (SETQ nextLoc (CAR locs))                                                     (SETQ locs (CDR locs))                                                 LOOP                                                     (COND                                                        ((_ nextLoc RoomToPark?)                                                         (_ Communicator MoveMade player 0                                                                  (@ nextLoc milePost)                                                                  'InitialPlacing))                                                        (T (SETQ nextLoc (CAR locs))                                                           (SETQ locs (CDR locs))                                                           (GO LOOP)))                                                     (RETURN player)))(Method ((TruckinDecisionMaker AddPlayerRequest) self reqID name type truck)                                                              (* ; "sm: 10-JUL-83 20:48") "Decides if a new player can be added or not"   [PROG (player locs nextLoc)                               (* Check if another object of name)         (SETQ player (GetObjectRec name))         (RETURN (COND                    ([OR [AND player (NOT (_ player InstOf! 'Player)]                         (AND player (FMEMB name (@ playerNames)]                                                             (* conflict in player request)                     (_ Communicator AddPlayer reqID name type truck 'NameConflict))                    (T (_@ playerNames (CONS player (@ playerNames)))                       (_ Communicator AddPlayer reqID name type truck NIL)])(Method ((TruckinDecisionMaker AttachSimulator) self sim)    (* ; "sm: 28-JUN-83 11:45") "Attaches local simulator by copying relevant info" (_@ simulator sim)                                                     (_@ roadStops (@ (@ simulator)                                                                      roadStops)))(Method ((TruckinDecisionMaker BeginGameRequest) self)       (* ; "sm:  5-JUL-83 18:56") "Starts the game" (PROG (move nextLoc locs)                         (_ self ChangeGameParameters)                         (_@ alices (for x in (@ roadStops) when (_ x InstOf! 'AlicesRestaurant)                                       collect x))                         (_@ unionHall (CAR (@ roadStops)))                         [COND                            ((AND banditCount (GREATERP banditCount 0))                             (for banditIndex from 1 to (IMIN banditCount (FLENGTH banditNames))                                do (_ Communicator AddBandit (CAR (NTH banditNames banditIndex)))]                         (_@ beginTime (IPLUS (IDATE)                                              (ITIMES (@ startsAfter)                                                     60)))                         (_@ endTime (IPLUS (@ beginTime)                                            (ITIMES (@ gameDuration)                                                   60)))                         (_ self InitializeGameParameters)                         (_ Communicator StartGame (@ beginTime)                                  (@ endTime))                         (RETURN T)))(Method ((TruckinDecisionMaker BuyMade) self player roadPosition reqQty qty reason penaltyAmt                                              fragility lifetime)                                                              (* ; "sm:  1-JUL-83 09:37") "Dummy for now" self)(Method ((TruckinDecisionMaker BuyRequest) self player roadPosition qty)                                                              (* ; "sm:  6-JUL-83 13:42") "message sent to DecisionMaker to BUY qty at roadPosition"   [PROG (truck loc commodity intendedLoc (ctime (IDATE)))   (* check if truck at a producer                                                              roadstop)         (SETQ truck (@ player truck))         (SETQ loc (@ truck location))         (SETQ intendedLoc (CAR (NTH (@ roadStops)                                     roadPosition)))         [COND            ((GREATERP ctime (@ Simulator endTime))             (RETURN (_ Communicator BuyMade player roadPosition qty 0 'GameOver)]         [COND            ((NOT (EQ loc intendedLoc))                      (* player not where he thought he was)             (RETURN (_ Communicator BuyMade player roadPosition qty 0 'IncorrectLoc)]         [COND            ([NOT (AND (GetObjectRec loc)                       (_ loc InstOf! 'Producer)]             (RETURN (_ Communicator BuyMade player roadPosition qty 0 'NotProducer)]                                                             (* Update game status window.)                                                             (* (WriteGameStatus (@ currentPlayer                                                              driver) " Buys " (CONCAT qty " "                                                             (GetObjectName (@@ loc Commodity))                                                              " units")))                                                             (* check if qty is available at                                                              RoadStop)         [COND            ((ZEROP qty)             (RETURN (_ Communicator BuyMade player roadPosition qty 0 'Zero)]         [COND            ((AND qty (GREATERP qty (@ loc qty)))             (RETURN (_ Communicator BuyMade player roadPosition qty 0 'MoreThanAvailable 0.01)]                                                             (* transfer ownership)         (SETQ commodity (_ (@@ loc Commodity)                            New                            (@ loc pr)                            (COND                               (qty qty)                               (T (@ loc qty)))                            loc))         (RETURN (COND                    [(_ commodity CanTransfer player NIL qty)                     (_ Communicator BuyMade player roadPosition qty (@ commodity qty)                              NIL NIL (COND                                         ((_ commodity InstOf! 'FragileCommodity)                                          (@ commodity fragility))                                         (T NIL))                              (COND                                 ((_ commodity InstOf! 'PerishableCommodity)                                  (@ commodity lifetime))                                 (T NIL)))]                    (T                                       (* there was some error during                                                              transaction)                       (_ Communicator BuyMade player roadPosition qty 0 FCTReason FCTPenalty)])(Method ((TruckinDecisionMaker ChangeGameParameters) self)   (* ; "sm:  5-JUL-83 17:33") "Changes gameParameters via inspector" (PROG (gp)                                              (SETQ gp (GetItHere self 'gameParameters))                                              (COND                                                 ((EQ gp NotSetValue)                                                  (SETQ gp (_ (GetObjectRec (@ gameParameters))                                                              New))                                                  (_@ gameParameters gp)))                                              (PROMPT                                            "Change Game Parameters by using the displayed Inspector."                                                      "When done, click DONE")                                              (_ gp SetUp)                                              (while (NOT GameParaSet) do (TOTOPW GameParamW)                                                                          (TOTOPW GameCommandW)                                                                          (DISMISS 500))                                              (_ gp StorePara)                                              (RETURN T)))(Method ((TruckinDecisionMaker CheckAlice) self)             (* ; "sm: 27-JUN-83 10:56") "check AlicesRestaurant's before each turn"   [for x in (@ alices)      do (for loc in '(parkingPlace1 parkingPlace2)            do (PROGN (COND                         ((GetValue x loc)                          (PutValue x loc (ADD1 (GetValue x loc 'howLong))                                 'howLong)                          (COND                             ((GREATERP (GetValue x loc 'howLong)                                     3)                      (* stayed there too long)                              (SETQ currentPlayer (GetValue x loc))                              (COND                                 ((_ (@ unionHall)                                     RoomToPark?)                                  (BrokenRules currentPlayer "Stayed at Alices more than 3 turns" NIL                                          1 "Forcibly moved to UnionHall")                                  (_ self MoveRequest currentPlayer (FindLocIndex x (@ roadStops))                                          (FindLocIndex (@ unionHall)                                                 (@ roadStops))                                          'AliceTurn))                                 (T                          (* UnionHall is temporarily filled)                                    (BrokenRules currentPlayer "Stayed at Alices more than 3 turns"                                            NIL 1 "Will be moved to UnionHall next turn"])(Method ((TruckinDecisionMaker ForcedMove) self player curLoc maxMilePost reason)                                                              (* ; "sm: 28-JUN-83 09:57") "determines the loc to move currentPlayer as a forced move close to maxMilePost"   (PROG ((cmile (@ curLoc milePost))          newLoc)         [SETQ newLoc (COND                         ((GREATERP cmile maxMilePost)                          (for i from maxMilePost to cmile                             thereis (_ (CAR (NTH (@ roadStops)                                                  i))                                        RoomToPark?)))                         (T (for i from maxMilePost to cmile by -1                               thereis (_ (CAR (NTH (@ roadStops)                                                    i))                                          RoomToPark?)]         [COND            ((NULL newLoc)                                   (* no room to park anywhere)             (RETURN (_ Communicator MoveMade player cmile cmile 'NoRoom)]         (SETQ newLoc (CAR (NTH (@ roadStops)                                newLoc)))         (RETURN (_ self MoveTruck player curLoc newLoc reason))))(Method ((TruckinDecisionMaker GameOver) self)               (* ; "sm:  6-JUL-83 13:13") "Sent when game is over" (_ Communicator GameOver))(Method ((TruckinDecisionMaker GiveAliceBonus) self atAlice) (* ; "sm: 27-JUN-83 10:56") "Dummy method" self)(Method ((TruckinDecisionMaker InitializeGameParameters) self)                                                              (* ; "sm:  8-JUL-83 11:07") "Initializes critical variables for new game to run" (AND gameStatusWindow (CLEARW gameStatusWindow)                                                           )                                                      (COND                                                         (truckinLogHandle (CLOSEF? truckinLogHandle)                                                                ))                                                      (COND                                                         [truckinLogFlg (SETQ truckinLogHandle                                                                         (OPENFILE truckinLogFile                                                                                'OUTPUT]                                                         (T (SETQ truckinLogHandle NIL)))                                                      (_@ lastMoved NIL)                                                      (_@ loseTurn NIL))(Method ((TruckinDecisionMaker MonitorGame) self gameOverFlg)                                                              (* ; "dgb: 15-JUL-83 00:16") "Monitors the game to move bandits, replenish qty, check alice, and signal game end."   [PROG ((ctime (IDATE)))         (COND            (gameOverFlg (_ self GameOver))            ((IGREATERP ctime (@ Simulator endTime)))            (T (_ self MoveBandits)               (_ self ReplenishQty)               (_ self CheckAlice)])(Method ((TruckinDecisionMaker MonitorProcess) self)         (* ; "sm:  5-JUL-83 15:00") "Monitors the game to move bandits, replenish qty, check alice, and signal game end"   (PROG (begTime endTime cTime)         (SETQ endTime (SETUPTIMER (@ Simulator endTime)                              NIL NIL 'SECONDS))         [BLOCK NIL (SETUPTIMER (IntervalToEvent (@ Simulator beginTime)]         (until (TIMEREXPIRED? endTime 'SECONDS) do (_ self MoveBandits)                                                    (_ self ReplenishQty)                                                    (_ self CheckAlice)                                                    (BLOCK))         (_ self GameOver)         (RETURN 'GameOver)))(Method ((TruckinDecisionMaker MoveBandits) self)            (* ; "mjs:  4-AUG-83 10:27") "randomly moves bandits around on the board before each turn"   (PROG ((maxLoc (FLENGTH (@ roadStops)))          loc curLoc banditLoc direction truck cmile dmile)         (WriteGameStatus NIL "Watch out!! The Bandits are Moving")         [for x in (@ bandits)            do (PROGN (SETQ truck (@ x truck))                      (SETQ direction (@ x direction))                      (SETQ curLoc (@ truck location))                      [SETQ banditLoc (COND                                         ((NULL (GetObjectRec curLoc))                                          (RAND 1 maxLoc))                                         (T (@ curLoc milePost)]                      [COND                         ((AND (EQ direction 'F)                               (GREATERP (IPLUS banditLoc banditMoveRange)                                      maxLoc))                          (_@ x direction 'B))                         ((AND (EQ direction 'B)                               (LESSP (IDIFFERENCE banditLoc banditMoveRange)                                      1))                          (_@ x direction 'F)]                      [SETQ loc (CAR (NTH (@ roadStops)                                          (COND                                             [(RandomRoomAvailable [COND                                                                      ((EQ direction 'F)                                                                       banditLoc)                                                                      (T (IMAX 1 (IDIFFERENCE                                                                                         banditLoc                                                                                       banditMoveRange                                                                                        ]                                                     (COND                                                        ((EQ direction 'B)                                                         banditLoc)                                                        (T (IMIN maxLoc (IPLUS banditLoc                                                                                banditMoveRange]                                             (T (RandomRoomAvailable 1 maxLoc]                      [SETQ cmile (COND                                     ((NULL curLoc)                                      0)                                     (T (FindLocIndex curLoc (@ roadStops)]                      (SETQ dmile (FindLocIndex loc (@ roadStops)))                      (WriteGameStatus (@ x driver)                             " Moves to "                             (@@ loc RoadSign))                      (_ Communicator MoveMade x cmile dmile 'BanditMove)]         (RETURN T)))(Method ((TruckinDecisionMaker MoveCheckingHazards) self player curLoc newLoc reason)                                                              (* ; "sm: 28-JUN-83 09:59") "moves truck checking for hazards along the way. Called by GameMaster.MoveTruck"   [PROG (cmile (dmile (@ newLoc milePost))                whoStopped rs forcedIndex dist fuelNeeded (truck (@ player truck)))         [COND            ((NOT (EQ curLoc (@ truck location)))             (INTTYL "Bug in MoveCheckingHazards" NIL "Type return to continue.")             (SETQ curLoc (@ truck location)]         (SETQ cmile (@ curLoc milePost))         (SETQ dist (IDIFFERENCE (IMAX cmile dmile)                           (IMIN cmile dmile)))              (* check for WeighStations and Bandits)         [SETQ forcedIndex (for i from cmile to dmile by (COND                                                            ((GREATERP cmile dmile)                                                             -1)                                                            (T 1))                              when (AND (NOT (EQUAL i cmile))                                        (NOT (EQUAL i dmile)))                              eachtime (SETQ rs (CAR (NTH (@ gameMaster roadStops)                                                          i)))                              thereis (SETQ whoStopped (_ rs GoingPast player dist)]         (COND            (forcedIndex (SETQ newLoc (CAR (NTH (@ roadStops)                                                forcedIndex)))                   (SETQ dmile forcedIndex)))         (RETURN (_ Communicator MoveMade player cmile dmile (OR whoStopped reason))])(Method ((TruckinDecisionMaker MoveMade) self player fromStop toStop reason penaltyAmount missTurns)                                                              (* ; "sm: 26-JUL-83 09:45")                                                             (* ;                                      "Generates new MaxMove for player and checks for Alice overstay") "update commodity status affected by moves" [COND                                                ((_ player InstOf! 'Player)                                                             (* if not bandit or gasman)                                                             (* (for y in (@ (@ player truck) cargo)                                                              do (DoFringeMethods y                                                             (QUOTE UpdateStatus))))                                                 (COND                                                    ((EQ reason 'GameOver))                                                    (T (_ Communicator MaxMove player                                                                (RAND 1 (@@ (@ player truck)                                                                            MaxDist)))])(Method ((TruckinDecisionMaker MoveRequest) self player from to reason)                                                              (* ; "sm:  6-SEP-83 14:52")                                                             (* ;                                              "sent to DecisionMaker for deciding if move can be made") "reason, if given is used for system generated requests and is not charged as a move to player" (PROG ((truck (@ player truck))        curLoc moves (cli from)        (nli to)        (gb GameBoard)        maxLoc        (maxMove (@ player maxMove))        (newLoc to)        fromLoc        (ctime (IDATE)))       (SETQ maxLoc (ITIMES (@@ gb numRows)                           (@@ gb numColumns)))       (SETQ curLoc (@ truck location))       (SETQ fromLoc (CAR (NTH (@ roadStops)                               from)))       [COND          ((GREATERP ctime (@ Simulator endTime))           (RETURN (_ Communicator MoveMade player from from 'GameOver)]       [COND          ((NOT (EQ curLoc fromLoc))                         (* player not where he thought he was)           (RETURN (_ Communicator MoveMade player from from 'IncorrectLoc)]                                                             (* (COND ((AND (NOT reason)                                                             (EQ player (@ lastMoved)))                                                             (RETURN (_ Communicator MoveMade                                                              player cli cli (QUOTE ConsecutiveMove)))))                                                             (COND ((NOT reason) (* set last moved                                                              only when no System Reason)                                                             (_@ lastMoved player))))       [COND          [(NUMBERP to)           (COND              [(LESSP nli 1)               (RETURN (_ Communicator MoveMade player cli cli 'OffBoardBeg)]              [(GREATERP nli maxLoc)               (RETURN (_ Communicator MoveMade player cli cli 'OffBoardEnd)]              (T (SETQ newLoc (CAR (NTH (@ roadStops)                                        nli]          [(FMEMB to (@ roadStops))           (SETQ nli (FindLocIndex to (@ roadStops)]          (T (BrokenRules player (CONCAT "Illegal location: " to))             (RETURN (_ Communicator MoveMade player cli cli 'IllegalLoc)]                    (* if asked to go to UnionHall dont check any more)       [COND          ((_ newLoc InstOf! 'UnionHall)           (RETURN (_ self MoveTruck player curLoc newLoc reason)]       [COND          ((OR (GREATERP nli (PLUS cli maxMove))               (LESSP nli (DIFFERENCE cli maxMove)))           (RETURN (_ Communicator MoveMade player cli cli 'MoreThanAllowed NIL 1)]                                                             (* check if want to move to curLoc)       [COND          ((EQ newLoc curLoc)                                (* no moves are made)           (RETURN (_ Communicator MoveMade player cli cli 'AlreadyThere)]       (RETURN (_ self MoveTruck player curLoc newLoc reason))))(Method ((TruckinDecisionMaker MoveTruck) self player curLoc newLoc reason)                                                              (* ; "sm: 28-JUN-83 10:01")                                                             (* ;                                                            "actually moves the currentPlayer's truck") "reason - if NIL then move asked by user. else is the reason for the move, where the actual loc will be different from the original request" (PROG (dist cmile dmile (truck (@ player truck))             fuelNeeded actMile forcedMP)                    (* check if want to go to UnionHall)       (SETQ cmile (@ curLoc milePost))       (SETQ dmile (@ newLoc milePost))       [COND          ((_ newLoc InstOf! 'UnionHall)           (COND              ((_ newLoc RoomToPark?)               (RETURN (_ Communicator MoveMade player cmile dmile reason)))              (T (RETURN (_ Communicator MoveMade player cmile cmile (OR reason 'NoRoomStayPut))]                                                             (* check if truck has fuel)       (SETQ dist (IDIFFERENCE (IMAX cmile dmile)                         (IMIN cmile dmile)))       (SETQ fuelNeeded (TIMES dist (@@ truck Gpm)))       (COND          ((GREATERP fuelNeeded (@ truck fuel))           [SETQ actMile (FIX (FQUOTIENT (@ truck fuel)                                     (@@ truck Gpm]           [COND              ((ZEROP actMile)                               (* has no fuel -                                                             move to UnionHall)               (RETURN (_ self MoveTruck player curLoc (@ unionHall)                               'NoFuel)]           [SETQ forcedMP (COND                             ((GREATERP dmile cmile)                              (PLUS cmile actMile))                             (T (DIFFERENCE cmile actMile]           (_ self ForcedMove player curLoc forcedMP 'LowFuel)           (RETURN NIL)))                                    (* enough fuel for the move)                                                             (* check if room at intended location)       (COND          ((_ newLoc RoomToPark?))          (T (_ self ForcedMove player curLoc dmile 'NoRoom)             (RETURN NIL)))       (RETURN (_ self MoveCheckingHazards player curLoc newLoc reason))))(Method ((TruckinDecisionMaker NewGameRequest) self board)   (* ; "sm:  5-JUL-83 18:42")                                                             (* ; "Generates seed for a new game") "board - type of gameBoard needed (BW, Color etc)" (PROG (gbClass seed)       [COND          [(AND (SETQ gbClass (GetClassRec board))                (_ gbClass Subclass 'TruckinBoard)]          [(NULL board)           (SETQ gbClass (GetClassRec 'BWTruckin]          (T (SETQ gbClass (GetClassRec (INMENU "Select type of Game Board" (_ ($ TruckinBoard)                                                                               List                                                                               'Subs)]       (_ Communicator NewGame (SETQ seed (RANDSET T))                (GetObjectName gbClass)                (GetObjectName (Class self)))       (_ self AttachSimulator (@ Communicator simulator))   (* initialize IVs which change game to                                                              game)       (_ self Initialize)       (_@ gameSeed seed)       (RETURN seed)))(Method ((TruckinDecisionMaker ReUseGameRequest) self)       (* ; "sm:  5-JUL-83 13:57") "Generates a new seed for reusing existing game" (PROG (seed)                                                        (_@ gameSeed (SETQ seed (RANDSET T)))                                                        (_ self Initialize)                                                        (_ Communicator ReUseGame seed)                                                        (RETURN seed)))(Method ((TruckinDecisionMaker RedoGameParameters) self)     (* ; "sm:  8-JUL-83 14:34") "Dummy. Needed if some game parameters need to be changed after the players are known" self)(Method ((TruckinDecisionMaker RemovePlayer) self player reason)                                                              (* ; "sm: 10-JUL-83 21:20") "removes player from game" (PROG NIL                        (* (WriteGameStatus (@ player driver)                                                              " Committed serious violation: "                                                              reason) (COND ((EQ (QUOTE YES)                                                             (EVAL.IN.TTY.PROCESS                                                             (INTTY (CONCAT "Should I remove "                                                             (@ player driver) " from game?")                                                             (QUOTE (YES NO))                                                              "Y to remove. N to let stay in game")                                                              T)))))                                  (_@ players (REMOVE player (@ players)))                                  (_@ playerNames (REMOVE (@ player driver)                                                         (@ playerNames)))                                  (_ Communicator RemovePlayer player reason)                                  (RETURN player)))(Method ((TruckinDecisionMaker RemovePlayerRequest) self player reason)                                                              (* ; "sm: 10-JUL-83 21:15") "Request to remove player" (_ self RemovePlayer player reason))(Method ((TruckinDecisionMaker ReplenishQty) self)           (* ; "edited: 11-Sep-87 23:10") "replenish GasStations qty" (PROG (gasMan gasStations (prevStop 0)                                          nextStop unionHall (roadStops (@ roadStops)))                                   (SETQ gasStations (for gasStation in roadStops                                                        when (AND (_ gasStation InstOf! ($ GasStation                                                                                           ))                                                                  (_ gasStation RoomToPark?)                                                                  (ZEROP (@ gasStation qty)))                                                        collect gasStation))                    (* * Per smL suggestion passing #,NotSetValue to smash with for initializing          (used to be (GetInitialValue x (QUOTE qty))))                                   (COND                                      (gasStations (for x in gasStations                                                      do (_ Communicator GasFill prevStop                                                                  (SETQ nextStop (FindLocIndex x                                                                                         roadStops))                                                                  (GetClassValue x 'Qty)                                                                  (TIMES 2 (@ x pr)))                                                         (SETQ prevStop nextStop))                                             (_ Communicator GasFill prevStop 0)))                                   (RETURN gasStations)))(Method ((TruckinDecisionMaker SellMade) self player roadPosition reqQty qty cargoPos reason                                               penaltyAmt)    (* ; "sm:  1-JUL-83 09:38") "Dummy for now" self)(Method ((TruckinDecisionMaker SellRequest) self player roadPosition commodityIndex qty)                                                              (* ; "sm:  6-SEP-83 14:42")                                                             (* ;                "message sent to DecisionMaker to sell qty of commodity at the player's roadPosition.") "commodityIndex - index into cargo of player" [PROG (truck loc commodity intendedLoc commodities                                                            (ctime (IDATE)))                                                             (* check if truck at a Consumer                                                              RoadStop)                                                     (SETQ truck (@ player truck))                                                     (SETQ loc (@ truck location))                                                     (SETQ intendedLoc (CAR (NTH (@ roadStops)                                                                                 roadPosition)))                                                     [COND                                                        ((GREATERP ctime (@ Simulator endTime))                                                         (RETURN (_ Communicator SellMade player                                                                           roadPosition qty 0                                                                           commodityIndex 'GameOver)]                                                     [COND                                                        ((NOT (EQ loc intendedLoc))                                                             (* player is not where he thought he                                                              was)                                                         (RETURN (_ Communicator SellMade player                                                                           roadPosition qty 0                                                                           commodityIndex '                                                                          IncorrectLoc)]                                                     [COND                                                        ([NOT (AND (GetObjectRec loc)                                                                   (_ loc InstOf! 'Consumer)]                                                         (RETURN (_ Communicator SellMade player                                                                           roadPosition qty 0                                                                           commodityIndex 'NotConsumer)                                                                ]                                                             (* check if trying to sell 0)                                                             (* check if commodityIndex is class or                                                              actual commodity index)                                                     [COND                                                        [(NUMBERP commodityIndex)                                                         (COND                                                            [(ZEROP commodityIndex)                                                             (RETURN (_ Communicator SellMade player                                                                               roadPosition qty 0                                                                               commodityIndex                                                                              'IncorrectRequest)]                                                            [(GREATERP commodityIndex                                                                    (FLENGTH (@ truck cargo)))                                                             (RETURN (_ Communicator SellMade player                                                                               roadPosition qty 0                                                                               commodityIndex                                                                              'NotOwned)]                                                            (T (SETQ commodity                                                                (CAR (NTH (@ truck cargo)                                                                          commodityIndex]                                                        (T (RETURN (_ Communicator SellMade player                                                                             roadPosition qty 0                                                                             commodityIndex                                                                            'IncorrectCommodity)]                                                             (* (WriteGameStatus (@ currentPlayer                                                              driver) " Sells " (CONCAT qty " "                                                             (ClassName commodity) " units.")))                                                             (* check if truck has qty)                                                     [COND                                                        ((NULL qty)                                                         (SETQ qty (@ commodity qty)]                                                     [COND                                                        ((ZEROP qty)                                                         (RETURN (_ Communicator SellMade player                                                                           roadPosition qty 0                                                                           commodityIndex '                                                                          CannotSellZero)]                                                     [COND                                                        ((GREATERP qty (@ commodity qty))                                                         (RETURN (_ Communicator SellMade player                                                                           roadPosition qty 0                                                                           commodityIndex '                                                                          MoreThanOwned 0.1)]                                                             (* transfer ownership)                                                     (RETURN (COND                                                                ((_ commodity CanTransfer loc                                                                          (@ loc pr)                                                                          qty)                                                                 (_ Communicator SellMade player                                                                           roadPosition qty qty                                                                           commodityIndex))                                                                (T                                                              (* there was some error during                                                              transaction)                                                                   (_ Communicator SellMade player                                                                             roadPosition qty 0                                                                             commodityIndex FCTReason                                                                             FCTPenalty)])(Method ((TruckinDecisionMaker StartGame) self)              (* ; "sm:  8-JUL-83 14:30")                                                             (* ; "Starts game") "(_ self StartMonitorProcess) (_ self RedoGameParameters)" T)(Method ((TruckinDecisionMaker StartMonitorProcess) self)    (* ; "sm:  1-JUL-83 14:47") "Start the monitor process" (ADD.PROCESS (LIST '_ self 'MonitorProcess)                                    'GameMonitor))(Method ((TruckinDecisionMaker UpdateAlice) self player)     (* ; "sm: 13-JUL-83 09:35") "Decides when parked at Alice" [for x in (@ alices)                                   do (for loc in '(parkingPlace1 parkingPlace2)                                         do (COND                                               ((EQ player (GetValue x loc))                                                [COND                                                   ((ZEROP (GetValue x loc 'howLong))                                                    (_ Communicator ParkedAtAlice player                                                             (GetValue x loc 'timeParked))]                                                (PutValue x loc (ADD1 (GetValue x loc 'howLong))                                                       'howLong])(Method ((TruckinPlayerInterface AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "sm: 16-SEP-83 16:41") "New player being added to game" (PROG (plClass player)                                        (SETQ player (GetObjectRec name))                                        (COND                                           (deniedFlg [COND                                                         ((EQUAL reqID (@ Communicator machineID))                                                             (* local request was denied.                                                             Destroy previously created object)                                                          (WriteGameStatus                                                                  "Request to create player " name                                                                 (CONCAT " denied: " deniedFlg                                                                         " Create another player"))                                                          (AND player (_ player Destroy)]                                                  (RETURN NIL)))                                                             (* check if this was a requested local                                                              player)                                        (COND                                           ([AND (EQUAL reqID (@ Communicator machineID))                                                 (NOT (FMEMB player (@ localPlayers)]                                            (_@ localPlayers (CONS player (@ localPlayers)))                                                             (* Create a process for player if                                                              local player)                                            (_ (@ player truck)                                               Initialize)                                            (_ player Initialize)                                            (_ self CreatePlayerProcess player T)                                            [COND                                               ((@ Simulator gameRunningFlg)                                                (AND (@ playerMenuWindow)                                                     (CLOSEW (@ playerMenuWindow)))                                                (_@ playerMenuWindow (PlayerInterruptMenu                                                                      (for x                                                                         in (@ localPlayers)                                                                         collect (@ x driver))                                                                      (@ self playerMenuWindow                                                                               position)))]                                            (pushnew ExistingPlayers player))                                           (T                (* Not local so create a RemotePlayer)                                              (SETQ plClass ($ RemotePlayer))                                              (SETQ player (_ plClass New name truck type))                                                             (* Initialize player and truck)                                              (_ player Initialize)                                              (_ (@ player truck)                                                 Initialize)))                                        (_@ player remoteMachine reqID)                                                             (* (_@ players (CONS player                                                             (@ players))))                                        (RETURN player)))(Method ((TruckinPlayerInterface AddPlayerRequest) self playerName playerType truckType)                                                              (* ; "sm: 10-JUL-83 20:28")                                                             (* ; "A request to create a new Player") "If playerName is an instance of Player, then used with other two args extracted from it" (PROG (plClass player)       [COND          [(SETQ player (GetObjectRec playerName))           (COND              [(NOT (FMEMB player (@ Simulator players)]              (T (WriteGameStatus "Cannot use " playerName                         " as player - another object by that name exists!")                 (RETURN NIL]          (T                                                 (* get needed info from user)             (SETQ player (CreateNewPlayer playerName playerType truckType]       [SETQ truckType (GetObjectName (Class (@ player truck)]       (SETQ playerType (GetObjectName (Class player)))       (SETQ playerName (@ player driver))       (_ Communicator AddPlayerRequest (@ Communicator machineID)                playerName playerType truckType)))(Method ((TruckinPlayerInterface BeginGame) self players moves)                                                              (* ; "sm:  1-JUL-83 17:11") "Starts a new game. Players is either the number of players or a list of Player objects. If players is NIL, but the gameMaster has previous players, it uses those."   (PROG (board)         (SETQ board GameBoard)         (SetMachineDepPara)         (_ board MakeDriveBitMaps)         (COND            ((OR (@ Simulator players)                 (@ Simulator bandits))                    (* if this board has been used before, ask for a new game on it)             (_ Communicator ReUseGameRequest)))             (* Ask user to select players)         (_ self SelectPlayers players)         (_ Communicator BeginGameRequest)         (RETURN T)))(Method ((TruckinPlayerInterface Buy) self player qty)       (* ; "sm: 10-JUL-83 18:35") "message sent by currentPlayer to BUY qty at its current location"   (PROG (truck loc cmile)         [COND            ((NUMBERP qty)             (SETQ qty (FIX qty]         (SETQ truck (@ player truck))         (SETQ loc (@ truck location))         (SETQ cmile (FindLocIndex loc (@ roadStops)))       (* Update game status window.)         (WriteGameStatus (@ player driver)                " Wants to Buy "                (CONCAT qty " " (GetObjectName (@@ loc Commodity))                       " units"))         (_@ player pendingRequest (LIST 'BuyRequest player cmile qty))         (RETURN (_ self SuspendPlayer player T))))(Method ((TruckinPlayerInterface BuyMade) self player roadPosition reqQty qty reason penaltyAmt                                                fragility lifetime)                                                              (* ; "sm:  6-JUL-83 11:14") "check if for local player" (COND                                ((FMEMB player (@ localPlayers))                                                             (* set the reason when awakened)                                 (_ self PlayerRequestComplete player reason))))(Method ((TruckinPlayerInterface ChargeTime) self player clockTime)                                                              (* ; "sm:  6-JUL-83 13:09")                                                             (* ;                                                  "Calculates the actual time to be charged to player") "if clockTime is NIL, MinMoveTime is charged" (PROG (time charge used)                                                     (SETQ used (IDIFFERENCE clockTime                                                                       (@ player startedAt)))                                                     [SETQ time (IDIFFERENCE used                                                                       (IPLUS (@ player unchargedTime)                                                                              (@@ player Handicap]                                                             (* (SETQ charge (SETQ time                                                             (FIX (ITIMES time HandicapRatio)))))                                                     (SETQ charge time)                                                     [COND                                                        ((LESSP time (@@ MinMoveTime))                                                         (SETQ charge (@@ MinMoveTime)))                                                        ((GREATERP time (@@ MaxMoveTime))                                                             (* player exceeded limit.                                                             Yank from game)                                                             (* currently not yanked)                                                             (* (_ self RemovePlayer player                                                             (CONCAT "Too much time taken " charge)))                                                         ]                                                     (_@ player timeUsed (IPLUS charge                                                                                (@ player timeUsed)))                                                     (AND debugTimeTrace                                                          (WriteGameStatus (CONCAT "Time Used: by "                                                                                  (@ player driver))                                                                 (CONCAT "Elapsed(sec)" used)))                                                     (AND timeTrace (WriteGameStatus                                                                            "Time Charged to: "                                                                           (@ player driver)                                                                           (CONCAT " " charge " sec")                                                                           ))                                                     (RETURN charge)))(Method ((TruckinPlayerInterface CheckLocalPlayers) self)    (* ; "sm: 16-SEP-83 17:09")                                                             (* ;                                           "Checks to make sure that all local players have processes") "Should be needed only in abnormal situations, e.g., machine crashes or manual deletion of a player's process" [for x in (@ localPlayers) do (COND                                  ((PROCESSP (@ x processHandle)))                                  (T                         (* process has disappeared.                                                             recreate)                                     (printout TTY "SysWarning: process for " (@ x driver)                                            " has disappeared. Recreating the process." T)                                     (_ self CreatePlayerProcess x)])(Method ((TruckinPlayerInterface ContinueGame) self noRedrawFlg)                                                              (* ; "sm: 27-JUN-83 11:01") "to resume a game in the middle." (PROG ((board (@ gameBoard)))                                         [COND                                            ((NULL noRedrawFlg)                                                             (* redisplays the game board)                                             (CLEARW (@ board gameWindow))                                             (_ board DisplayGameBoard)                                                             (* (_ board PlaceRoadStops))                                             (for rs in (@ board roadStops)                                                do (_@ rs parkingPlace1 NIL)                                                   (_@ rs parkingPlace2 NIL))                                             (for p in (@ players)                                                do (SETQ currentPlayer p)                                                   (_ (@ (@ p truck)                                                         location)                                                      Park))                                             (for b in (@ bandits)                                                do (SETQ currentPlayer b)                                                   (_ (@ (@ b truck)                                                         location)                                                      Park)] (* resume game)                                         (_ self RunGame)                                         (_ self WhoWon)                                         (WriteGameStatus NIL "Simulation Complete! " (DATE))                                         (AND truckinLogHandle (CLOSEF? truckinLogHandle))                                         (SETQ truckinLogHandle NIL)                                         (RETURN "Simulation Complete!")))(Method ((TruckinPlayerInterface CreatePlayerProcess) self player staySuspendFlg)                                                              (* ; "sm: 16-SEP-83 17:07")                                                             (* ;                                               "Creates a process for player and suspends the process") "marks player to stay suspended if staySuspendFlg is non-NIL" (PROG (hand)       (DEL.PROCESS (FIND.PROCESS (@ player driver)))       (SETQ hand (ADD.PROCESS (LIST '_ player 'StartGame)                         'NAME                         (@ player driver)                         'RESTARTABLE PlayerProcRestFlg))       (_@ player processHandle hand)       [COND          ((FMEMB player (@ suspendedPlayers)))          (T (_@ suspendedPlayers (CONS player (@ suspendedPlayers)))]       (COND          (staySuspendFlg (_@ player staySuspend staySuspendFlg)))       (SUSPEND.PROCESS hand)))(Method ((TruckinPlayerInterface DeletePlayerProcesses) self)                                                              (* ; "sm: 12-JUL-83 16:33") "Deletes players processes after the game" (for x in (@ localPlayers)                                               do (DEL.PROCESS (@ x processHandle)))                                            (AND (@ playerMenuWindow)                                                 (CLOSEW (@ playerMenuWindow))))(Method ((TruckinPlayerInterface Move) self player newLoc)   (* ; "dgb: 15-JUL-83 00:25") "sent by to move to newLoc" (PROG ((truck (@ player truck))                                    curLoc cli nli maxLoc (gb GameBoard))                                   (SETQ maxLoc (ITIMES (@@ gb numRows)                                                       (@@ gb numColumns)))                                   (SETQ curLoc (@ truck location))                                   [SETQ cli (COND                                                ((NULL curLoc)                                                 0)                                                (T (FindLocIndex curLoc (@ roadStops)]                                   [COND                                      ((NUMBERP newLoc)                                       (SETQ nli (PLUS cli newLoc)))                                      [(FMEMB newLoc (@ roadStops))                                       (SETQ nli (FindLocIndex newLoc (@ roadStops)]                                      (T (BrokenRules player (CONCAT "Illegal location: " newLoc]                                   (WriteGameStatus (@ player driver)                                          (CONCAT " Wants to Move " (IDIFFERENCE nli cli))                                          (CONCAT " (max " (@ player maxMove)                                                 ")"))                                   (COND                                      ((AND (GREATERP nli 0)                                            (LEQ nli maxLoc))                                       (SETQ newLoc (CAR (NTH (@ roadStops)                                                              nli)))                                       (WriteGameStatus " To: " (@@ newLoc RoadSign)                                              NIL T))                                      (T (WriteGameStatus NIL NIL NIL T)))                                   (_@ player pendingRequest (LIST 'MoveRequest player cli nli))                                   (RETURN (_ self SuspendPlayer player T))))(Method ((TruckinPlayerInterface MoveMade) self player fromStop toStop reason penaltyAmount missTurns)                                                             (* ; "sm:  6-JUL-83 11:15") "check if for local player" (COND                                ((FMEMB player (@ localPlayers))                                                             (* ask to be resumed)                                 (_ self PlayerRequestComplete player reason))))(Method ((TruckinPlayerInterface NewGame) self seed boardType gameType)                                                              (* ; "sm:  5-JUL-83 13:33") "Adds roadStops locally" (_@ roadStops (@ Simulator roadStops))                          (_ self Initialize))(Method ((TruckinPlayerInterface NewGameRequest) self board) (* ; "sm: 29-JUN-83 13:14")                                                             (* ;                                                    "Request for creating a new game of existing type") "board - type of GameBoard desired" (_ Communicator NewGameRequest board))(Method ((TruckinPlayerInterface PlayerRequestComplete) self player reason)                                                              (* ; "sm: 10-JUL-83 11:28") "if player passed as arg, set wakeReason" (COND                                              (player (_@ player wakeReason reason)                                                     (_@ player staySuspend NIL))))(Method ((TruckinPlayerInterface ReUseGame) self)            (* ; "sm:  5-JUL-83 13:34") "Received when the current board is used for a new game" (_ self Initialize))(Method ((TruckinPlayerInterface RemovePlayer) self player reason)                                                              (* ; "sm: 10-JUL-83 21:18") "New method template" [COND                          ((FMEMB player (@ localPlayers))                           (DREMOVE player (@ localPlayers))                           (DREMOVE player (@ suspendedPlayers))                           (AND (@ player processHandle)                                (DEL.PROCESS (@ player processHandle)])(Method ((TruckinPlayerInterface RemovePlayerRequest) self player reason)                                                              (* ; "mjs:  2-AUG-83 11:33") "Request to remove player" (PROG NIL                                  (SETQ player (GetObjectRec player))                                  (COND                                     ([OR (NOT player)                                          (NOT (_ player InstOf! 'Player)]                                      (printout TTY "Are you kidding! " player " is NOT a player" T)                                      (RETURN NIL)))                                  (COND                                     ((NOT (FMEMB player (@ localPlayers)))                                      (printout TTY "Cannot remove non-local player" T)                                      (RETURN NIL)))                                  (_ Communicator RemovePlayerRequest player (OR reason 'LocalRequest                                                                                 ))                                  (RETURN player)))(Method ((TruckinPlayerInterface RunNextPlayer) self)        (* ; "sm:  6-JUL-83 11:16")                                                             (* ; "Decides who to run next -") "This is one of the few methods which need to be changed to get different strategies for scheduling players" [PROG NIL       (AND (@ Simulator gameRunningFlg)            (COND               ((FMEMB player (@ suspendedPlayers))                (DREMOVE player (@ suspendedPlayers))                (WAKE.PROCESS (@ player processHandle)                       (NOT reason])(Method ((TruckinPlayerInterface ScheduleNextPlayer) self)   (* ; "sm: 16-SEP-83 17:02") "Decides who to run next -" [PROG (currPlayer pendReq waitTime)                                   (COND                                      [(@ localPlayers)                                       (COND                                          ((EQUAL (FLENGTH (@ localPlayers))                                                  (FLENGTH (@ suspendedPlayers)))                                                             (* all suspended. Pick one)                                           [for p bind (minTimeSoFar _ 10000000)                                              in (@ suspendedPlayers)                                              do (COND                                                    ((ILESSP (@ p timeUsed)                                                            minTimeSoFar)                                                     (SETQ currPlayer p)                                                     (SETQ minTimeSoFar (@ p timeUsed)]                                           [COND                                              (currPlayer (_@ suspendedPlayers (REMOVE currPlayer                                                                                      (@                                                                                      suspendedPlayers)                                                                                      ))                                                     (_@ runningPlayer currPlayer)                                                     [COND                                                        ((SETQ pendReq (@ currPlayer pendingRequest))                                                         (_@ currPlayer pendingRequest NIL)                                                         (PutValue currPlayer 'pendingRequest pendReq                                                                'inProcess)                                                         (PutValue currPlayer 'pendingRequest (IDATE)                                                                'whenSent)                                                         (ApplyMethod Communicator (CAR pendReq)                                                                (CDR pendReq]                                                     (_@ unchargedTime 0)                                                     (_@ currPlayer schCount (ADD1 (@ currPlayer                                                                                      schCount)))                                                     (COND                                                        [(@ currPlayer staySuspend)                                                         (COND                                                            ((IGREATERP (SETQ waitTime                                                                         (IDIFFERENCE (IDATE)                                                                                (@ currPlayer                                                                                        pendingRequest                                                                                          whenSent)))                                                                    60)                                                             (printout TTY "SysWarning: over "                                                                     waitTime                                                           " secs have elapsed since request sent by "                                                                    (@ currPlayer driver)                                                                    T]                                                        (T (_ self WakePlayer currPlayer)]                                           (RETURN currPlayer))                                          (T                 (* one player already running)                                             (COND                                                ((@ runningPlayer)                                                 [COND                                                    [(@ (@ runningPlayer)                                                        staySuspend)                                                     (COND                                                        ((IGREATERP (SETQ waitTime                                                                     (IDIFFERENCE (IDATE)                                                                            (@ (@ runningPlayer)                                                                               pendingRequest                                                                                whenSent)))                                                                60)                                                         (printout TTY "SysWarning: over " waitTime                                                           " secs have elapsed since request sent by "                                                                (@ (@ runningPlayer)                                                                   driver)                                                                T]                                                    (T (_ self WakePlayer (@ runningPlayer))]                                                 (RETURN (@ runningPlayer)))                                                (T (printout TTY                                                     "Shouldnt Happen!! Scheduled player is NOT known"                                                           T)                                                   (HELPCHECK "What happened to scheduled player?")                                                   (_ self CheckLocalPlayers)                                                   (RETURN NIL]                                      (T (RETURN NIL])(Method ((TruckinPlayerInterface SelectPlayers) self players)                                                              (* ; "mjs:  2-AUG-83 11:35") "Asks user to select players" (PROG NIL                                     (_@ localPlayers NIL)                                     (COND                                        ((AND (EQ players T)                                              ExistingPlayers)                                                             (* ask existing players to be added to                                                              game)                                         (SETQ players ExistingPlayers)))                                     (COND                                        ((OR (NUMBERP players)                                             (NULL players))                                         (SETQ players (CreatePlayers ExistingPlayers)))                                        ((ATOM players)                                         (printout TTY "Illegal arg" -3 players T)                                         (RETURN NIL)))                                     (for x in (INTERSECTION players players)                                        do (_ self AddPlayerRequest x))                                     (RETURN players)))(Method ((TruckinPlayerInterface Sell) self player commodity qty)                                                              (* ; "sm:  6-SEP-83 14:28")                                                             (* ;            "message sent by currentPlayer to sell qty of commodity at the player's current location.") "commodity is either an instance of commodity or a class of commodity. In the latter case, the game master will try to find the proper instance if any from the cargo of the truck" (PROG (truck loc commodityIndex commodityClass commodities cmile)       [COND          ((NUMBERP qty)           (SETQ qty (FIX qty]       (SETQ truck (@ player truck))       (SETQ loc (@ truck location))       (SETQ cmile (FindLocIndex loc (@ roadStops)))         (* check if commodity is class or                                                              actual commodity instance)       (COND          [(AND (GetObjectRec commodity)                (_ (GetObjectRec commodity)                   InstOf!                   'Commodity))           (SETQ commodityIndex (FindLocIndex (GetObjectRec commodity)                                       (@ truck cargo)]          [(AND (GetClassRec commodity)                (_ (GetClassRec commodity)                   Subclass                   'Commodity))                              (* get commodity instance from cargo)           (SETQ commodities (for x in (@ truck cargo) when (_ x InstOf! commodity) collect x))           (COND              ((NULL commodities)               (WriteGameStatus (@ player driver)                      " does not own " commodity)               (SETQ commodity NIL)               (SETQ commodityIndex 0))              [(NULL qty)                                    (* no qty specified.                                                             pick any from cargo)               (SETQ commodity (CAR commodities))               (SETQ commodityIndex (FindLocIndex commodity (@ truck cargo)]              (T                                             (* get the instance with at least                                                              specified qty)                 [SETQ commodity (for x in commodities thereis (NOT (LESSP qty (@ x qty)]                 [COND                    ((NULL commodity)                        (* no instance with qty -                                                             pick any)                     (SETQ commodity (CAR commodities]                 (SETQ commodityIndex (FindLocIndex commodity (@ truck cargo)]          (T (WriteGameStatus (@ player driver)                    " selling incorrect commodity: " commodity)             (SETQ commodity NIL)             (SETQ commodityIndex 0)))                       (* Update Status Window.)       [COND          ((AND (GetObjectRec commodity)                (_ (GetObjectRec commodity)                   InstOf!                   'Commodity))           (WriteGameStatus (@ player driver)                  " Wants to sell "                  (CONCAT qty " " (ClassName commodity)                         " units."]       (_@ player pendingRequest (LIST 'SellRequest player cmile commodityIndex qty))       (RETURN (_ self SuspendPlayer player T))))(Method ((TruckinPlayerInterface SellMade) self player roadPosition reqQty qty cargoPos reason                                                 penaltyAmt)  (* ; "sm:  6-JUL-83 11:15") "check if for local player" (COND                                ((FMEMB player (@ localPlayers))                                                             (* ask to be resumed)                                 (_ self PlayerRequestComplete player reason))))(Method ((TruckinPlayerInterface StartGame) self begTime endTime)                                                              (* ; "mjs:  2-AUG-83 11:38")                                                             (* ; "Starts the game at begTime") "Put in code to : wait till begTime; spawn processes for each player;" (PROG ((currTime (IDATE)))       (_@ beginTime begTime)       (_@ endTime endTime)       (WriteGameStatus "The following players are already in the game")       (WriteGameStatus "" (for x in (@ Simulator players) collect (@ x driver)))       (printout TTY "If you want to add any more players, do:" T .FONT BOLDFONT               "(_ PlayerInterface AddPlayerRequest)" .FONT DEFAULTFONT T)       [COND          ((@ localPlayers)           (_@ playerMenuWindow (PlayerInterruptMenu (for x in (@ localPlayers)                                                        collect (@ x driver))                                       (@ self playerMenuWindow position)))]                                                             (* (COND ((EQ (QUOTE YES)                                                             (EVAL.IN.TTY.PROCESS                                                             (QUOTE (INTTY                                                              "Do you want to add any more players? "                                                             (QUOTE (YES NO)))) T))                                                             (SETQ players (EVAL.IN.TTY.PROCESS                                                             (QUOTE (CreatePlayers NIL)) T))                                                             (for x in (INTERSECTION players                                                              players) when (NOT (FMEMB x                                                             (@ localPlayers))) do                                                             (_ self AddPlayerRequest x)))))       (RETURN T)))(Method ((TruckinPlayerInterface StartPlayerProcesses) self) (* ; "sm:  8-JUL-83 13:53") "starts players in separate processes" (PROG (hand)                                              (_@ suspendedPlayers NIL)                                              (for x in (@ localPlayers)                                                 when (NOT (FMEMB x (@ suspendedPlayers)))                                                 do (_ self CreatePlayerProcess x))                                              (RETURN T)))(Method ((TruckinPlayerInterface SuspendPlayer) self player staySuspend)                                                              (* ; "sm:  8-AUG-83 20:45") "Suspends player after a Buy/Move/Sell request" [PROG NIL                                                       (_ self ChargeTime player (IDATE))                                                       [COND                                                          ((FMEMB player (@ suspendedPlayers))                                                           (printout TTY (@ player driver)                                                                  "  " "Was already suspended!" T))                                                          (T (_@ suspendedPlayers (CONS player                                                                                        (@                                                                                      suspendedPlayers)                                                                                        ))]                                                       (COND                                                          (staySuspend (_@ player staySuspend                                                                                  staySuspend)))                                                       [COND                                                          ((@ runningPlayer)                                                           (COND                                                              ((EQ player (@ runningPlayer))                                                               (_@ runningPlayer NIL))                                                              (T (printout TTY                                                           "Shouldnt Happen!! Player just suspended: "                                                                        (@ player driver)                                                                        T "Wasn't even scheduled" T)                                                                 (HELPCHECK                                                                       "Unscheduled player suspended!"                                                                        ]                                                       (COND                                                          ((NOT (EQ (THIS.PROCESS)                                                                    (@ player processHandle)))                                                           (HELPCHECK                                                     "Player being suspended from a different process"                                                                  )))                                                       (SUSPEND.PROCESS (@ player processHandle))                                                       (until (AND (EQ player (@ runningPlayer))                                                                   (NOT (@ player staySuspend)))                                                          do (SUSPEND.PROCESS (@ player processHandle)                                                                    ])(Method ((TruckinPlayerInterface WakePlayer) self player)    (* ; "sm: 16-SEP-83 16:55") "Wakes player so it can be run at next BLOCK" (PROG ((hand (@ player processHandle)))                                                     [COND                                                        ((PROCESSP hand))                                                        (T   (* player process has disappeared)                                                           (printout TTY "SysWarning: process for "                                                                  (@ player driver)                                                                                                                            " has disappeared. Recreating the process."                                                                   T)                                                           (_ self CreatePlayerProcess player)                                                           (_@ suspendedPlayers (REMOVE player                                                                                       (@                                                                                      suspendedPlayers)                                                                                       ))]                                                     (_@ player unchargedTime 0)                                                     (_@ player startedAt (IDATE))                                                     (WAKE.PROCESS (@ player processHandle)                                                            (@ player wakeReason))))(Method ((TruckinSimulator AddBandit) self name)             (* ; "sm:  1-JUL-83 17:45") "Add bandit to game" (_@ bandits (CONS (_ ($ Bandit)                                           New name)                                        (@ bandits))))(Method ((TruckinSimulator AddPlayer) self reqID name type truck deniedFlg)                                                              (* ; "dgb: 11-JUL-83 14:01") "Adds player to its list - assumes player created by PlayerInterface"   (PROG (player)         (COND            (deniedFlg (RETURN NIL)))         (SETQ player (GetObjectRec name))         (COND            ((FMEMB player (@ players))             (RETURN NIL)))         (_@ players (CONS player (@ players)))         [COND            ((AND (@ gameRunningFlg)                  (@ barChart))             (_ (@ barChart)                Attach                (@ player truck)                'cashBox NIL (@ player driver))]         (RETURN player)))(Method ((TruckinSimulator AttachBoard) self gameBoard)      (* ; "sm: 28-JUN-83 09:31") "Attaches gameBoard to game" (PutValue self 'gameBoard gameBoard)                              (_@ roadStops (@ gameBoard roadStops))                              (_ gameBoard AttachToGame self))(Method ((TruckinSimulator BreakCargo) self player commodIndex)                                                              (* ; "sm: 27-JUN-83 10:59") "Sent by a commodity when it breaks" (PROG ((truck (@ player truck))                                             commod)                                            (SETQ commod (CAR (NTH (@ truck cargo)                                                                   commodIndex)))                                            (_@ commod status NIL)                                            (WriteGameStatus (CONCAT (@ player driver)                                                                    "'s Cargo of:")                                                   (CONCAT (@ commod qty)                                                          " "                                                          (ClassName commod)                                                          " units")                                                   " destroyed by RoughRoad")))(Method ((TruckinSimulator BuyMade) self player roadPosition reqQty qty reason penalty fragility                                          lifetime)           (* ; "sm:  1-JUL-83 16:51") "Indicates a definite BUY to be made, or reasons for not carrying out a BuyRequest"   (PROG ((truck (@ player truck))          (loc (CAR (NTH (@ roadStops)                         roadPosition)))          commodity)                                         (* (AuxBuyMade player roadPosition                                                              reqQty qty reason penalty fragility                                                              lifetime))         (COND            ((ZEROP qty)                                     (* no buy made)             (BrokenRules player (CONCAT "Buy not made: " reason)                    penalty)             (RETURN NIL)))         (SETQ commodity (_ (GetObjectRec (@@ loc Commodity))                            New                            (@ loc pr)                            qty loc))         (COND            ((_ commodity InstOf! 'FragileCommodity)             (_@ commodity fragility fragility)))         (COND            ((_ commodity InstOf! 'PerishableCommodity)             (_@ commodity lifetime lifetime)))         (RETURN (_ commodity TransferOwner truck NIL qty))))(Method ((TruckinSimulator ClockProcess) self)               (* ; "sm: 12-JUL-83 21:09") "Monitors game clock" (PROG ([endTime (SETUPTIMER.DATE (GDATE (@ Simulator endTime)]                              (blockTime (SETUPTIMER 800 NIL NIL 'MS))                              cTime countDown)               (* Wait till it is game time)                             [SETQ countDown (SETUPTIMER (IntervalToEvent (@ Simulator beginTime)]                             (until (TIMEREXPIRED? countDown) do (printout PROMPTWINDOW T T                                                                        (CHARACTER 7)                                                                        "Game starting soon!" T)                                                                 (_@ timeLeft (IDIFFERENCE                                                                               (@ beginTime)                                                                               (IDATE)))                                                                 (BLOCK 4000))                             (_@ timeLeft (IDIFFERENCE (@ Simulator endTime)                                                 (IDATE)))                             (until (TIMEREXPIRED? endTime 'SECONDS)                                do (_@ timeLeft (IDIFFERENCE (@ Simulator endTime)                                                       (IDATE)))                                   (SETQ blockTime (SETUPTIMER 800 blockTime NIL 'MS))                                   (BLOCK NIL blockTime))                             (_@ timeLeft 0)                             (RETURN 'Done)))(Method ((TruckinSimulator DrivePlayer) self curLoc finalLoc player)                                                              (* ; "dgb: 11-JUL-83 12:40") "Drives player from curLoc to finalLoc" (Drive curLoc finalLoc player))(Method ((TruckinSimulator GameOver) self)                   (* ; "dgb: 11-JUL-83 13:56") "Game Over" (_ self WhoWon)             (_@ gameRunningFlg NIL))(Method ((TruckinSimulator GasFill) self prevStop gsStop qty pr)                                                              (* ; "sm:  6-JUL-83 18:33")                                                             (* ;                                          "Instructions for moving a gas truck and filling GasStation")                                                             (* ; "Fills gas station at gsStop") "Spl cases: If prevStop =0 then start at UnionHall. If gsStop=0 then end at UnionHall" (PROG (gasMan prevRS newRS (unionHall (@ unionHall))              (roadStops (@ roadStops)))       (SETQ gasMan (OR (GetObjectRec 'Gas)                        (_ ($ GasPlayer)                           New)))       [COND          ((ZEROP prevStop)           (WriteGameStatus NIL "Here comes the GasMan!")           (COND              ((_ unionHall RoomToPark?)               (_ unionHall Crash gasMan)               (DISMISS 1500)))           (SETQ prevRS unionHall))          (T (SETQ prevRS (CAR (NTH roadStops prevStop]       [COND          ((ZEROP gsStop)           (SETQ newRS unionHall))          (T (SETQ newRS (CAR (NTH roadStops gsStop]       (COND          ((_ prevRS Parked? gasMan)           (_ prevRS Unpark gasMan)))       (Drive prevRS newRS gasMan)       (COND          [(EQ newRS unionHall)           (COND              ((_ newRS RoomToPark?)               (_ newRS Crash gasMan)               (DISMISS 1500)               (_ newRS Unpark gasMan)]          (T (_ newRS Park gasMan)             (DISMISS 200)             (_@ newRS qty qty)             (_@ newRS pr pr)             (DISMISS 300)))       (RETURN newRS)))(Method ((TruckinSimulator GiveAliceBonus) self atAlice)     (* ; "sm:  6-JUL-83 13:21") "Give bonus for reaching Alices" (WriteGameStatus "Their cashbox multiplied by " (@@ AliceBonus))                                  [for p in atAlice                                     do (_@ (@ p truck)                                            cashBox                                            (FIX (TIMES (@ (@ p truck)                                                           cashBox)                                                        (@@ AliceBonus))))])(Method ((TruckinSimulator Initialize) self)                 (* ; "edited: 12-JUL-83 12:09") "Initializes" (AND (@ barChart)                    (_ (@ barChart)                       Close))               (for x in (@ players) when (_ x InstOf! 'RemotePlayer) do (_ x Destroy))               (_Super self Initialize))(Method ((TruckinSimulator MaxMove) self player maxMove)     (* ; "sm:  1-JUL-83 11:51") "Puts maxMove in player" (_@ player maxMove maxMove))(Method ((TruckinSimulator MoveMade) self player from to reason penaltyAmt missTurn)                                                              (* ; "sm:  6-SEP-83 15:02")                                                             (* ;                                                   "Actually makes the move after all checks are done")                    (* ;; "player - player being moved from, to - indices of from and to locs reason - reason for move penaltyAmt - if any associated with move missTurn - any missed turn associated with move") "Current set of reasons: Bandit, WeighStation, NoFuel, UnionHall, OffBoardBeg, OffBoardEnd, ConsecMoves, IllegalLoc, MoreThanAllowed, AlreadyThere, NoRoom, LowFuel" (PROG (curLoc finalLoc dist (truck (@ player truck)))       (_@ player movesMade (ADD1 (@ player movesMade)))       [COND          ((_ player InstOf! 'Player)                        (* if not bandit or gasman)           (for y in (@ (@ player truck)                        cargo) do (DoFringeMethods y 'UpdateStatus]       (COND          ((AND (EQUAL from to)                (_ player InstOf! 'Player))                  (* no physical move.                                                             print message)           (BrokenRules player (CONCAT "Move not made: " reason)                  penaltyAmt missTurn)           [COND              ((EQ reason 'IncorrectLoc)               (WriteGameStatus (@ player driver)                      (CONCAT " located at: " (@ (@ player truck)                                                 location))                      (CONCAT " thinks he is at stop# " from]           (RETURN NIL)))       (SETQ curLoc (COND                       ((GREATERP from 0)                        (CAR (NTH (@ roadStops)                                  from)))                       (T NIL)))       (SETQ finalLoc (CAR (NTH (@ roadStops)                                to)))       (SETQ dist (IABS (IDIFFERENCE from to)))       (_@ truck fuel [IMAX 0 (IDIFFERENCE (@ truck fuel)                                     (ITIMES dist (@@ truck Gpm])       (COND          (curLoc (_ curLoc Unpark player)                 (_ self DrivePlayer curLoc finalLoc player)))       (_ finalLoc Visit player reason (IDATE))                    (* more code here for UnionHall, Bandit & WS cash lost, etc)       (RETURN finalLoc)))(Method ((TruckinSimulator NewGame) self seed board)         (* ; "sm: 26-JUL-83 11:20") "Generates a new game based on seed and board specified by DecisionMaster"   (PROG (gb)         (SETQ gb (_ (GetClassRec board)                     New self))         (SETQ GameBoard gb)         (SETQ gameWindow NIL)         (SetMachineDepPara)         (_ gb NewBoard seed)         (_ self AttachBoard gb)         (_ self Initialize)         (_ self SetUpGauges)         (_@ alices (for x in (@ roadStops) when (_ x InstOf! 'AlicesRestaurant) collect x))         (_@ unionHall (CAR (@ roadStops)))         (RETURN self)))(Method ((TruckinSimulator ParkedAtAlice) self player time)  (* ; "sm:  1-JUL-83 11:44") "Marks when player parked at alice" [for loc in '(parkingPlace1 parkingPlace2)                                        bind (x _ (@ (@ player truck)                                                     location))                                        do (COND                                              ((EQ player (GetValue x loc))                                               (PutValue x loc time 'timeParked])(Method ((TruckinSimulator ReUseGame) self seed)             (* ; "sm: 30-JUN-83 19:36") "Sends message to GameBoard to reuse" (_ (@ gameBoard)                                          ReUseBoard seed)                                       (_ self Initialize))(Method ((TruckinSimulator RedoGameParameters) self)         (* ; "sm:  8-AUG-83 15:29") "Change anything after all game info is known - prior to game start"   [COND      ((@ barChart))      (T (_@ barChart (_New ($ SSBarChart)                            SetUp                            (@ players)                            'cashBox "CashBox of Players" 20000 '(truck) NIL '(430 . 630)))])(Method ((TruckinSimulator RemovePlayer) self player reason) (* ; "sm: 10-JUL-83 21:18") "Sent to game board so it can remove player from board" (PROG ((pobj player))                                                               (DREMOVE pobj (@ players))                                                               (_ (@ gameBoard)                                                                  RemovePlayer pobj)                                                               (WriteGameStatus (@ player driver)                                                                      "Removed from game: " reason)                                                               (RETURN player)))(Method ((TruckinSimulator SellMade) self player roadPosition reqQty qty cargoPosition reason penalty)                                                             (* ; "sm:  1-JUL-83 16:52") "Performs an actual Sell, once all checking is done" (PROG [(truck (@ player truck))                                                             commodity                                                             (loc (CAR (NTH (@ roadStops)                                                                            roadPosition]                                                             (* (AuxSellMade player roadPosition                                                              reqQty qty cargoPosition reason                                                              penalty))                                                            (COND                                                               ((ZEROP qty)                                                             (* no sell made)                                                                (BrokenRules player (CONCAT                                                                                    "Unable to sell: "                                                                                            reason)                                                                       penalty)                                                                (RETURN NIL)))                                                            (SETQ commodity                                                             (CAR (NTH (@ truck cargo)                                                                       cargoPosition)))                                                            (RETURN (_ commodity TransferOwner loc                                                                             (@ loc pr)                                                                             qty))))(Method ((TruckinSimulator SetUpGauges) self)                (* ; "sm:  1-JUL-83 14:55") "Sets up gauges" (_ self AddGauges 'timeLeft T "Time Remaining (sec)"))(Method ((TruckinSimulator SpoilCargo) self player commodIndex)                                                              (* ; "sm: 27-JUN-83 11:00") "Sent by commodity when it spoils" (PROG ((truck (@ player truck))                                           commod)                                          (SETQ commod (CAR (NTH (@ truck cargo)                                                                 commodIndex)))                                          (_@ commod status NIL)                                          (WriteGameStatus (CONCAT (@ player driver)                                                                  "'s cargo of: ")                                                 (CONCAT (@ commod qty)                                                        " "                                                        (ClassName commod)                                                        " units")                                                 " just perished. Tch! Tch!")                                          (RETURN NIL)))(Method ((TruckinSimulator StartClockProcess) self)          (* ; "sm:  8-AUG-83 15:53") "Starts the clock process" (DEL.PROCESS (FIND.PROCESS 'GameClock))                            (ADD.PROCESS (LIST '_ self 'ClockProcess)                                   'NAME                                   'GameClock                                   'RESTARTABLE GameProcRestFlg))(Method ((TruckinSimulator StartGame) self begTime endTime)  (* ; "sm:  5-JUL-83 16:13") "SetsUp IVs for time left etc and starts game clock process" (_@ beginTime begTime)                                                              (_@ endTime endTime)                                                              (_@ timeLeft (IDIFFERENCE endTime                                                                                   begTime))                                                             (* ; "Start the clock process here")                                                              (_ self StartClockProcess)                                                              (WriteGameStatus (DATE)                                                                     "  New Simulation!")                                                              [WriteGameStatus                                                               (CONCAT "Game Begins at: "                                                                      (GDATE (@ beginTime)))                                                               (CONCAT "Game will end at: "                                                                      (GDATE (@ endTime)]                                                              (_@ gameRunningFlg T))(Method ((TruckinSimulator UnattachBoard) self)              (* ; "sm: 28-JUN-83 09:31") "Removes game board" (PutValue self 'gameBoard NotSetValue)                      (_@ roadStops NIL))(Method ((TruckinSimulator UpdateRS) self roadStop)          (* ; "sm: 28-JUN-83 09:45") "Sent when any RoadStop's data changes" (_ roadStop DisplayData))(Method ((TruckinSimulator WhoWon) self)                     (* ; "mjs:  2-AUG-83 11:49") "summarizes the game results" (PROG (atAlice winner)                                     (printout TTY 5 .FONT BOLDFONT "Summary of Game" .FONT                                             DEFAULTFONT T)                                     (WriteGameStatus NIL "Summary of Game")                                     [SETQ atAlice (for x in (@ alices)                                                      join (for y in '(parkingPlace1 parkingPlace2)                                                              when (GetValue x y)                                                              collect (GetValue x y]                                     (printout TTY "Following players made it to Alices" T T)                                     (WriteGameStatus "Following players made it to Alices")                                     (_ self GiveAliceBonus atAlice)                                     [for x in atAlice                                        do (printout TTY .FONT BOLDFONT (@ x driver)                                                  -5 "$" (@ (@ x truck)                                                            cashBox)                                                  T)                                           (WriteGameStatus (@ x driver)                                                  (CONCAT "   $" (@ (@ x truck)                                                                    cashBox)]                                     (printout PPDefault T .FONT DEFAULTFONT                                             "Summary of all player's status" T)                                     (for x in (@ players) do (_ x Summarize)                                                              (AND truckinLogFlg truckinLogHandle                                                                   (_ x Summarize truckinLogHandle)))                                     (printout PPDefault T)                                     (SETQ atAlice (@ players))                                     (SETQ winner (CAR atAlice))                                     [for x in (CDR atAlice)                                        do (COND                                              ((GREATERP (@ (@ x truck)                                                            cashBox)                                                      (@ (@ winner truck)                                                         cashBox))                                               (SETQ winner x]                                     (printout TTY .FONT BOLDFONT "Winner is :" (@ winner driver)                                            (CONCAT " Cash: $" (@ (@ winner truck)                                                                  cashBox))                                            .FONT DEFAULTFONT T)                                     (WriteGameStatus "Winner is: " (@ winner driver)                                            (CONCAT " Cash: $" (@ (@ winner truck)                                                                  cashBox)))                                     (RETURN winner)))(\UnbatchMethodDefs)(PUTPROPS TRUCKINM COPYRIGHT ("Xerox Corporation" 1985 1987 1988))(DECLARE%: DONTCOPY  (FILEMAP (NIL (23079 24785 (RemoteMasterComm.StartWorldProcess 23089 . 23687) (RemoteSlaveComm.StartWorldProcess 23689 . 24286) (SlaveTruckin 24288 . 24783)))))STOP