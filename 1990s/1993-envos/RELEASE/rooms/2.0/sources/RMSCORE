(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(IL:FILECREATED "30-Mar-93 18:39:55" IL:|{DSK}<python2>tmp>rooms>sources>RMSCORE.;1| 40809        IL:|changes| IL:|to:|  (IL:VARS IL:RMSCORECOMS)                             (IL:FUNCTIONS IL:MARCELL-IS-A-PENIS-HEAD GET-ROOMS-FUNCTION DO-ROOMS                                     DO-INCLUSIONS)                             (FILE-ENVIRONMENTS IL:RMSCORE)); Copyright (c) 1993 by Venue.  All rights reserved.(IL:PRETTYCOMPRINT IL:RMSCORECOMS)(IL:RPAQQ IL:RMSCORECOMS          (           (IL:* IL:|;;| "core rooms code")           (FILE-ENVIRONMENTS IL:RMSCORE)           (IL:P (EXPORT '(ROOM ROOM-P ROOM-NAME ROOM-PLACEMENTS ROOM-INCLUSIONS ROOM-BACKGROUND                                 ROOM-TTY-PROCESS ROOM-PROPS ROOM-PROP MAKE-ROOM COPY-ROOM DELETE-ROOM                                RENAME-ROOM ROOM-NAMED ROOM-SORT-FUNCTION))                 (EXPORT '(*CURRENT-ROOM* *POCKET-ROOM-NAME* *ROOM-ENTRY-FUNCTIONS*                                  *ROOM-EXIT-FUNCTIONS* *ROOM-CHANGED-FUNCTIONS*))                 (EXPORT '(PLACEMENT PLACEMENT-P PLACEMENT-WINDOW PLACEMENT-REGION                                  PLACEMENT-SHRUNKEN? PLACEMENT-ICON-POSITION PLACEMENT-PROPS                                  PLACEMENT-PROP MAKE-PLACEMENT COPY-PLACEMENT MOVE-PLACEMENT))                 (EXPORT '(GO-TO-ROOM UPDATE-PLACEMENTS FIND-PLACEMENT ROOM-CHANGED DO-INCLUSIONS                                  RESET))                 (REQUIRE "ROOMS"))           (IL:COMS                   (IL:* IL:|;;| "the room -- a named object")                  (IL:STRUCTURES ROOM)                  (IL:FUNCTIONS GET-CURRENT-ROOM GET-MONITOR-LOCK GET-POCKET-ROOM-NAME GET-ROOMS                          GET-ROOMS-FUNCTION IN-ROOM? MAKE-ROOM COPY-ROOM RENAME-ROOM ROOM-PROP                          DO-ROOMS ALL-ROOMS ROOM-SORT-FUNCTION ROOM-NAMED DELETE-ROOM))           (IL:COMS                   (IL:* IL:|;;| "placements")                  (IL:STRUCTURES PLACEMENT)                  (IL:FUNCTIONS PLACEMENT-PROP MAKE-PLACEMENT COPY-PLACEMENT MOVE-PLACEMENT                          ADD-PLACEMENT DELETE-PLACEMENT))                      (IL:* IL:|;;| "going from one room to another")           (IL:VARIABLES *POCKET-ROOM-NAME* *ROOM-ENTRY-FUNCTIONS* *ROOM-EXIT-FUNCTIONS*)           (IL:FUNCTIONS GO-TO-ROOM GO-TO-ROOM-PROCESS GO-TO-ROOM-INTERNAL CALL-ENTRY-FUNCTIONS                   CALL-EXIT-FUNCTIONS UPDATE-PLACEMENTS FIND-PLACEMENT FIND-PLACEMENT-IN-ROOM                   UPDATE-PLACEMENT PLACE-PLACEMENTS FIND-PLACEMENTS PLACE-PLACEMENT)           (IL:FUNCTIONS UPDATE-TTY-PROCESS PLACE-TTY-PROCESS)                      (IL:* IL:|;;| "other essentials")           (IL:FUNCTIONS FIND-ROOMS-CONTAINING)           (IL:COMS (IL:VARIABLES *ROOM-CHANGED-FUNCTIONS*)                  (IL:FUNCTIONS ROOM-CHANGED))           (IL:FUNCTIONS DO-INCLUSIONS ROOM-INCLUDERS)                      (IL:* IL:|;;| "bootstrapping & resetting")           (IL:VARIABLES *RESET-FORMS*)           (IL:FUNCTIONS RESET)           (IL:VARIABLES OLD-WHOLESCREEN *SCREEN-CHANGED-FUNCTIONS*)           (IL:FUNCTIONS AROUNDEXITFN %INTERNALIZE-ALL-PLACEMENTS %INTERNALIZE-PLACEMENTS)           (IL:GLOBALVARS IL:\\CURSORSCREEN IL:PROMPTWINDOW IL:AROUNDEXITFNS)           (EVAL-WHEN (LOAD)                  (IL:P                                      (IL:* IL:\;                 "smash system code which moves windows around on reboot so we don't fight with it.")                        (PUSHNEW '(IL:CHANGENAME 'IL:\\STARTDISPLAY 'IL:\\MOVE.WINDOWS.ONTO.SCREEN                                         'IL:NILL)                               *RESET-FORMS* :TEST 'EQUAL)))                      (IL:* IL:|;;| "random")           (IL:PROP IL:ARGNAMES GO-TO-ROOM)           (IL:SEDIT-FORMATS DO-INCLUSIONS DO-ROOMS)))(IL:* IL:|;;| "core rooms code")(DEFINE-FILE-ENVIRONMENT IL:RMSCORE :COMPILER :COMPILE-FILE   :PACKAGE "ROOMS"   :READTABLE "XCL")(EXPORT '(ROOM ROOM-P ROOM-NAME ROOM-PLACEMENTS ROOM-INCLUSIONS ROOM-BACKGROUND ROOM-TTY-PROCESS                ROOM-PROPS ROOM-PROP MAKE-ROOM COPY-ROOM DELETE-ROOM RENAME-ROOM ROOM-NAMED                ROOM-SORT-FUNCTION))(EXPORT '(*CURRENT-ROOM* *POCKET-ROOM-NAME* *ROOM-ENTRY-FUNCTIONS* *ROOM-EXIT-FUNCTIONS*                 *ROOM-CHANGED-FUNCTIONS*))(EXPORT '(PLACEMENT PLACEMENT-P PLACEMENT-WINDOW PLACEMENT-REGION PLACEMENT-SHRUNKEN?                 PLACEMENT-ICON-POSITION PLACEMENT-PROPS PLACEMENT-PROP MAKE-PLACEMENT COPY-PLACEMENT                MOVE-PLACEMENT))(EXPORT '(GO-TO-ROOM UPDATE-PLACEMENTS FIND-PLACEMENT ROOM-CHANGED DO-INCLUSIONS RESET))(REQUIRE "ROOMS")(IL:* IL:|;;| "the room -- a named object")(DEFSTRUCT (ROOM (:CONSTRUCTOR MAKE-ROOM-INTERNAL)                     (:COPIER COPY-ROOM-INTERNAL)                     (:PRINT-FUNCTION (LAMBDA (ROOM STREAM DEPTH)                                             (FORMAT STREAM "#<Room ~S>" (ROOM-NAME ROOM)))))   (NAME NIL :READ-ONLY T)   (PLACEMENTS NIL :TYPE LIST)   (IL:* IL:|;;| "list of PLACEMENT objects")   (INCLUSIONS NIL :TYPE LIST)   (IL:* IL:|;;| "list of names of included rooms")   (BACKGROUND NIL :TYPE BACKGROUND)   (IL:* IL:|;;| "how to paint the background")   (TTY-PROCESS NIL)   (IL:* IL:|;;| "which process has the TTY in this room")   (PROPS NIL :TYPE LIST)   (IL:* IL:|;;| "property list")   )(DEFMACRO GET-CURRENT-ROOM ()   '(GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of| IL:\\CURSORSCREEN)          '*CURRENT-ROOM*))(DEFMACRO GET-MONITOR-LOCK ()   '(GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of| IL:\\CURSORSCREEN)          '*MONITOR-LOCK*))(DEFMACRO GET-POCKET-ROOM-NAME ()   '(GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of| IL:\\CURSORSCREEN)          '*POCKET-ROOM-NAME*))(DEFMACRO GET-ROOMS ()   '(GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of| IL:\\CURSORSCREEN)          '*ROOMS*))(DEFUN GET-ROOMS-FUNCTION ()   (GET-ROOMS))(DEFUN IN-ROOM? (ROOM)(IL:* IL:|;;;| "true if ROOM is a sub-room of the current room")   (DO-INCLUSIONS (INCLUDED-ROOM (GET-CURRENT-ROOM))          (WHEN (EQUAL (ROOM-NAME ROOM)                       (ROOM-NAME INCLUDED-ROOM))                (RETURN-FROM DO-INCLUSIONS T))))(DEFUN MAKE-ROOM (NAME &REST REST-KEYS &KEY PLACEMENTS INCLUSIONS (BACKGROUND NIL                                                                              BACKGROUND-SPECIFIED?)                           TTY-PROCESS &ALLOW-OTHER-KEYS)   (IL:* IL:|;;| "check whether a room with this already exists")   (WHEN (ROOM-NAMED NAME)       (CERROR "Delete existing room named ~S (will close windows)" "A room named ~S already exists"              NAME)       (DELETE-ROOM (ROOM-NAMED NAME)))   (IL:* IL:|;;| "check the types of the placements")   (DOLIST (PLACEMENT PLACEMENTS)       (CHECK-TYPE PLACEMENT PLACEMENT))   (IL:* IL:|;;| "default the background to contain the name of the room")   (UNLESS BACKGROUND-SPECIFIED?       (SETQ BACKGROUND `((:TEXT ,NAME))))   (LET ((ROOM (MAKE-ROOM-INTERNAL :NAME NAME :PLACEMENTS PLACEMENTS :INCLUSIONS INCLUSIONS                       :BACKGROUND (MAKE-BACKGROUND BACKGROUND)                      :TTY-PROCESS TTY-PROCESS :PROPS                      (LET ((PROPS (COPY-LIST REST-KEYS)))                           (DOLIST (KEYWORD '(:PLACEMENTS :INCLUSIONS :BACKGROUND :TTY-PROCESS))                               (REMF PROPS KEYWORD))                           PROPS))))        (SETF (ROOM-NAMED NAME)              ROOM)        (WHEN (GET-CURRENT-ROOM)            (WHEN (EQUAL NAME (ROOM-NAME (GET-CURRENT-ROOM)))                (SETF (GET-CURRENT-ROOM)                      ROOM))            (ROOM-CHANGED ROOM :CREATED))        ROOM))(DEFUN COPY-ROOM (ROOM NEW-NAME)   (UPDATE-PLACEMENTS)   (APPLY 'MAKE-ROOM NEW-NAME :PLACEMENTS (MAPCAR #'COPY-PLACEMENT (ROOM-PLACEMENTS ROOM))          :INCLUSIONS          (COPY-LIST (ROOM-INCLUSIONS ROOM))          :BACKGROUND          (LET* ((BACKGROUND (COPY-TREE (BACKGROUND-EXTERNAL-FORM (ROOM-BACKGROUND ROOM))))                 (OLD-NAME (ROOM-NAME ROOM))                 (TEXT (FIND-IF #'(LAMBDA (COMMAND)                                         (AND (EQ (FIRST COMMAND)                                                  :TEXT)                                              (EQUAL (SECOND COMMAND)                                                     OLD-NAME)))                              BACKGROUND)))                (WHEN TEXT                    (SETF (SECOND TEXT)                          NEW-NAME))                BACKGROUND)          (COPY-TREE (ROOM-PROPS ROOM))))(DEFUN RENAME-ROOM (ROOM NEW-NAME)   (LET ((OLD-NAME (ROOM-NAME ROOM)))        (PROG1 (COPY-ROOM ROOM NEW-NAME)            (DELETE-ROOM ROOM)            (LET ((SUITE-NAME (FIND-SUITE-CONTAINING OLD-NAME)))                 (IL:* IL:|;;| "if its in a suite, rename it there too")                 (WHEN SUITE-NAME                     (SETF (SUITE-ROOMS SUITE-NAME)                           (SUBSTITUTE NEW-NAME OLD-NAME (SUITE-ROOMS SUITE-NAME)                                  :TEST                                  'EQUAL))))            (DO-ROOMS (ROOM)                   (IL:* IL:|;;| "rename it in inclusions of other rooms")                   (WHEN (MEMBER OLD-NAME (ROOM-INCLUSIONS ROOM)                                :TEST                                'EQUAL)                       (IL:* IL:|;;|                  "don't need to call UPDATE-PLACEMENTS as COPY-ROOM has already called it for us. ")                       (SETF (ROOM-INCLUSIONS ROOM)                             (SUBSTITUTE NEW-NAME OLD-NAME (ROOM-INCLUSIONS ROOM)                                    :TEST                                    'EQUAL))                       (ROOM-CHANGED ROOM :EDITED))))))(DEFMACRO ROOM-PROP (ROOM PROP &OPTIONAL (NEW-VALUE NIL NEW-VALUE-SUPPLIED))   (IF NEW-VALUE-SUPPLIED       `(SETF (GETF (ROOM-PROPS ,ROOM)                    ,PROP)              ,NEW-VALUE)       `(GETF (ROOM-PROPS ,ROOM)              ,PROP)))(DEFMACRO DO-ROOMS ((ROOM-VAR)                        &BODY BODY)(IL:* IL:|;;;| "evaluate BODY once for each room with ROOM-VAR bound to the room.")   `(BLOCK DO-ROOMS        (MAPHASH #'(LAMBDA (,(GENSYM)                            ,ROOM-VAR)                          ,@BODY)               (GET-ROOMS-FUNCTION))))(DEFUN ALL-ROOMS (&OPTIONAL SORTED?)(IL:* IL:|;;;| "return a list of all rooms.  if SORTED? is true, sort them alphabetically by name")   (LET ((ALL-ROOMS (WITH-COLLECTION (DO-ROOMS (ROOM)                                                (COLLECT ROOM)))))        (IF SORTED?            (SORT ALL-ROOMS #'ROOM-SORT-FUNCTION)            ALL-ROOMS)))(DEFUN ROOM-SORT-FUNCTION (ROOM-1 ROOM-2)(IL:* IL:|;;;| "used as the predicate for sorting lists of rooms.  we sort alphabetically by the name of the room.")   (MACROLET ((STRINGIFY (NAME)                     `(IF (STRINGP ,NAME)                          ,NAME                          (PRINC-TO-STRING ,NAME))))          (LET ((NAME-1 (ROOM-NAME ROOM-1))                (NAME-2 (ROOM-NAME ROOM-2)))               (STRING-LESSP (STRINGIFY NAME-1)                      (STRINGIFY NAME-2)))))(DEFMACRO ROOM-NAMED (NAME)   `(GETHASH ,NAME (GET-ROOMS)))(DEFUN DELETE-ROOM (ROOM)   (IL:* IL:|;;| "first close all the windows which only have placements in this room")   (LET ((ONLY-THIS-ROOM (LIST ROOM)))        (DOLIST (WINDOW (ALL-WINDOWS T))            (WHEN (EQUAL (FIND-ROOMS-CONTAINING WINDOW)                         ONLY-THIS-ROOM)                (UN-HIDE-WINDOW WINDOW)                (CLOSE-WINDOW (IF (SHRUNKEN? WINDOW)                                  (WINDOW-ICON WINDOW)                                  WINDOW)))))   (WHEN (DO-ROOMS (RM)                (WHEN (EQ ROOM RM)                      (RETURN-FROM DO-ROOMS T)))       (IL:* IL:|;;| "if it's in the name table, remove it.  this is so deleting an un-named room (like the Overview) doesn't cause a room named \"Overview\" to also disappear.")       (REMHASH (ROOM-NAME ROOM)              (GET-ROOMS)))   (IL:* IL:|;;| "tell the world we've deleted it")   (ROOM-CHANGED ROOM :DELETED))(IL:* IL:|;;| "placements")(DEFSTRUCT (PLACEMENT (:CONSTRUCTOR MAKE-PLACEMENT-INTERNAL)                          (:COPIER COPY-PLACEMENT-INTERNAL))   WINDOW   REGION   SHRUNKEN?   ICON-POSITION   PROPS)(DEFMACRO PLACEMENT-PROP (PLACEMENT PROP &OPTIONAL (NEW-VALUE NIL NEW-VALUE-SUPPLIED))   (IF NEW-VALUE-SUPPLIED       `(SETF (GETF (PLACEMENT-PROPS ,PLACEMENT)                    ,PROP)              ,NEW-VALUE)       `(GETF (PLACEMENT-PROPS ,PLACEMENT)              ,PROP)))(DEFUN MAKE-PLACEMENT (WINDOW)   (LET ((PLACEMENT (MAKE-PLACEMENT-INTERNAL :WINDOW WINDOW)))        (UPDATE-PLACEMENT PLACEMENT)        PLACEMENT))(DEFUN COPY-PLACEMENT (PLACEMENT)   (IL:* IL:|;;| "make sure PROPS gets copied.  it is not important that REGION & ICON-POSITION are copied, but seems safer.")   (MAKE-PLACEMENT-INTERNAL :WINDOW (PLACEMENT-WINDOW PLACEMENT)          :REGION          (COPY-REGION (PLACEMENT-REGION PLACEMENT))          :SHRUNKEN?          (PLACEMENT-SHRUNKEN? PLACEMENT)          :ICON-POSITION          (COPY-TREE (PLACEMENT-ICON-POSITION PLACEMENT))          :PROPS          (COPY-TREE (PLACEMENT-PROPS PLACEMENT))))(DEFUN MOVE-PLACEMENT (PLACEMENT FROM-ROOM TO-ROOM &OPTIONAL COPY?)   (ADD-PLACEMENT (COPY-PLACEMENT PLACEMENT)          TO-ROOM)   (UNLESS COPY?       (DELETE-PLACEMENT PLACEMENT FROM-ROOM)       (LET* ((WINDOW (PLACEMENT-WINDOW PLACEMENT))              (INHERITED (FIND-PLACEMENT WINDOW)))             (HIDE-WINDOW WINDOW)             (WHEN INHERITED (PLACE-PLACEMENT INHERITED)))))(DEFUN ADD-PLACEMENT (PLACEMENT ROOM)(IL:* IL:|;;;| "add PLACEMENT to ROOM's placements.  does not update screen. ")   (IL:* IL:|;;| "first delete any old placements for same window")   (SETF (ROOM-PLACEMENTS ROOM)         (DELETE (PLACEMENT-WINDOW PLACEMENT)                (ROOM-PLACEMENTS ROOM)                :TEST                'EQ :KEY #'PLACEMENT-WINDOW))   (IL:* IL:|;;| "add it")   (PUSH PLACEMENT (ROOM-PLACEMENTS ROOM))   (IL:* IL:|;;| "notify system that ROOM has changed.")   (ROOM-CHANGED ROOM :PLACEMENTS))(DEFUN DELETE-PLACEMENT (PLACEMENT ROOM)   (IL:* IL:|;;| "delete PLACEMENT from ROOM.  does not remove placement from screen.")   (SETF (ROOM-PLACEMENTS ROOM)         (DELETE (PLACEMENT-WINDOW PLACEMENT)                (ROOM-PLACEMENTS ROOM)                :TEST                'EQ :KEY #'PLACEMENT-WINDOW))   (IL:* IL:|;;| "notify system that ROOM has changed.")   (ROOM-CHANGED ROOM :PLACEMENTS))(IL:* IL:|;;| "going from one room to another")(DEFGLOBALVAR *POCKET-ROOM-NAME* NIL   "The name of the room to be the pockets or NIL.")(DEFVAR *ROOM-ENTRY-FUNCTIONS* NIL   "A list of functions to be called before a room is entered")(DEFVAR *ROOM-EXIT-FUNCTIONS* NIL   "A list of functions to be called before a room is left")(DEFUN GO-TO-ROOM (&REST ARGS)(IL:* IL:|;;;| "skip to GO-TO-ROOM-INTERNAL for details...")   (IL:* IL:|;;| "can't run under mouse, as mouse switches TTY around.  have to spawn our own process, let the mouse return the TTY, then we'll be run.  ")   (CHECK-TYPE (FIRST ARGS)          ROOM)   (IL:RESETVAR IL:\\PROC.RUN.NEXT.FLG T     (IL:* IL:|;;| "ensure that we'll be the next process run when the mouse blocks.")    (IL:ADD.PROCESS `(GO-TO-ROOM-PROCESS ',ARGS)           'IL:NAME "Go To Room")))(DEFUN GO-TO-ROOM-PROCESS (ARGS)   (LET ((OLD-CURSOR (IL:CURSOR)))        (UNWIND-PROTECT            (IF (IL:OBTAIN.MONITORLOCK (GET-MONITOR-LOCK)                       T)                (PROGN (IL:CURSOR IL:WAITINGCURSOR)                       (IL:\\CARET.DOWN NIL IL:MAX.FIXP)                       (APPLY 'GO-TO-ROOM-INTERNAL ARGS))                (NOTIFY-USER "Can't!  Rooms is busy."))            (IL:RELEASE.MONITORLOCK (GET-MONITOR-LOCK))            (IL:CURSOR OLD-CURSOR)            (IL:CARET T))))(DEFUN GO-TO-ROOM-INTERNAL (ROOM &KEY NO-UPDATE BAGGAGE)   (CHECK-TYPE ROOM ROOM)(IL:* IL:|;;;| "Leave the current room & enter ROOM.  BAGGAGE is a list of additional placements to be placed in ROOM.")   (IL:* IL:|;;| "call exit hooks on current room")   (CALL-EXIT-FUNCTIONS (GET-CURRENT-ROOM))   (UNLESS NO-UPDATE       (IL:* IL:|;;| "update the current room per the screen")       (UPDATE-PLACEMENTS (GET-CURRENT-ROOM)))   (IL:* IL:|;;| "note which process has the keyboard")   (UPDATE-TTY-PROCESS (GET-CURRENT-ROOM))   (IL:* IL:|;;| "clear the screen")   (HIDE-ALL-WINDOWS)   (UNWIND-PROTECT       (PROGN               (IL:* IL:|;;| "paint the background")              (PAINT-BACKGROUND ROOM (GET-SCREEN-BITMAP))              (IL:* IL:|;;| "call entry hooks")              (CALL-ENTRY-FUNCTIONS ROOM))       (IL:* IL:|;;| "set *CURRENT-ROOM*.")       (SETF (GET-CURRENT-ROOM)             ROOM))   (IL:* IL:|;;| "place placements from ROOM -- inherited & direct")   (PLACE-PLACEMENTS ROOM BAGGAGE)   (IL:* IL:|;;| "place the caret ")   (PLACE-TTY-PROCESS ROOM))(DEFUN CALL-ENTRY-FUNCTIONS (ROOM)   (IL:* IL:|;;| "first call global entry functions")   (DOLIST (FN *ROOM-ENTRY-FUNCTIONS*)       (FUNCALL FN ROOM))   (IL:* IL:|;;| "then call inherited entry functions")   (DO-INCLUSIONS (SUB-ROOM ROOM)          (DOLIST (FN (ROOM-PROP SUB-ROOM :BEFORE-ENTRY-FUNCTIONS))              (FUNCALL FN ROOM))))(DEFUN CALL-EXIT-FUNCTIONS (ROOM)   (IL:* IL:|;;| "first call global room exit functions")   (DOLIST (FN *ROOM-EXIT-FUNCTIONS*)       (FUNCALL FN ROOM))   (IL:* IL:|;;| "then call inherited functions on ROOM")   (DO-INCLUSIONS (SUB-ROOM ROOM)          (DOLIST (FN (ROOM-PROP SUB-ROOM :BEFORE-EXIT-FUNCTIONS))              (FUNCALL FN ROOM))))(DEFUN UPDATE-PLACEMENTS (&OPTIONAL (FOR-ROOM (GET-CURRENT-ROOM)))(IL:* IL:|;;;| "called when leaving a room to update it's placements")(IL:* IL:|;;;| "returns the new list of placements ")   (LET ((NEW-PLACEMENTS NIL)         (CHANGED-ROOMS NIL)         (OLD-PLACEMENTS (ROOM-PLACEMENTS FOR-ROOM))         (ALL-WINDOWS (ALL-WINDOWS)))        (DOLIST (WINDOW ALL-WINDOWS)            (MULTIPLE-VALUE-BIND (PLACEMENT IN-ROOM)                   (FIND-PLACEMENT WINDOW FOR-ROOM)                   (UNLESS PLACEMENT                       (IL:* IL:|;;| "new  window in this room - make a placement")                       (SETQ PLACEMENT (MAKE-PLACEMENT WINDOW))                       (SETQ IN-ROOM FOR-ROOM)                       (IL:* IL:|;;| "note change to this room")                       (PUSHNEW FOR-ROOM CHANGED-ROOMS :TEST 'EQ))                   (IL:* IL:|;;| "collect placements in this room in top to bottom order.")                   (WHEN (EQ IN-ROOM FOR-ROOM)                         (PUSH PLACEMENT NEW-PLACEMENTS))                   (IL:* IL:|;;| "update the placement")                   (WHEN (UPDATE-PLACEMENT PLACEMENT)                       (IL:* IL:|;;| "placement has changed - note it")                       (PUSHNEW IN-ROOM CHANGED-ROOMS :TEST 'EQ))))        (DOLIST (PLACEMENT (FIND-PLACEMENTS FOR-ROOM))            (UNLESS (MEMBER (PLACEMENT-WINDOW PLACEMENT)                           ALL-WINDOWS :TEST 'EQ)                (IL:* IL:|;;| "it's a window that's been closed")                (DO-INCLUSIONS (ROOM FOR-ROOM)                       (WHEN (MEMBER PLACEMENT (ROOM-PLACEMENTS ROOM)                                    :TEST                                    'EQ)                           (IL:* IL:|;;| "delete its placement")                           (UNLESS (EQ ROOM FOR-ROOM)                               (IL:* IL:|;;| "unless we'll delete it below anyway")                               (DELETE-PLACEMENT PLACEMENT ROOM))                           (IL:* IL:|;;| "note that this room has changed")                           (PUSHNEW ROOM CHANGED-ROOMS :TEST 'EQ)                           (RETURN-FROM DO-INCLUSIONS)))))        (UNLESS (EQUAL NEW-PLACEMENTS OLD-PLACEMENTS)            (IL:* IL:|;;| "check if occlusion order of placements has changed")            (PUSHNEW FOR-ROOM CHANGED-ROOMS :TEST 'EQ))        (SETF (ROOM-PLACEMENTS FOR-ROOM)              NEW-PLACEMENTS)        (DOLIST (ROOM CHANGED-ROOMS)            (ROOM-CHANGED ROOM :PLACEMENTS))        T))(DEFUN FIND-PLACEMENT (WINDOW &OPTIONAL (FROM-ROOM (GET-CURRENT-ROOM)))(IL:* IL:|;;;| "returns the placement which caused WINDOW to be in ROOM.")(IL:* IL:|;;;| "does a breadth-first search through ROOM & its inclusions for a placement containing WINDOW.  second value is room placement was found in. ")   (DO-INCLUSIONS (ROOM FROM-ROOM)          (LET ((PLACEMENT (FIND-PLACEMENT-IN-ROOM WINDOW ROOM)))               (WHEN PLACEMENT                   (RETURN-FROM FIND-PLACEMENT (VALUES PLACEMENT ROOM))))))(DEFMACRO FIND-PLACEMENT-IN-ROOM (WINDOW ROOM)   `(LET ((WINDOW ,WINDOW))         (WHEN ,ROOM             (DOLIST (PLACEMENT (ROOM-PLACEMENTS ,ROOM))                 (WHEN (EQ (PLACEMENT-WINDOW PLACEMENT)                           WINDOW)                       (RETURN PLACEMENT))))))(DEFUN UPDATE-PLACEMENT (PLACEMENT)(IL:* IL:|;;;| "called when leaving a room on each placement in the room.  returns true if placement has changed since the last time it was updated.")   (LET* ((WINDOW (PLACEMENT-WINDOW PLACEMENT))          (ICON-POSITION (ICON-POSITION WINDOW))          (REGION (WINDOW-REGION WINDOW))          (SHRUNKEN? (SHRUNKEN? WINDOW))          (CHANGED? NIL))         (UNLESS (EQUAL ICON-POSITION (PLACEMENT-ICON-POSITION PLACEMENT))             (SETF (PLACEMENT-ICON-POSITION PLACEMENT)                   (COPY-TREE ICON-POSITION))             (SETQ CHANGED? T))         (UNLESS (EQUAL REGION (PLACEMENT-REGION PLACEMENT))             (SETF (PLACEMENT-REGION PLACEMENT)                   (COPY-REGION REGION))             (SETQ CHANGED? T))         (UNLESS (EQ SHRUNKEN? (PLACEMENT-SHRUNKEN? PLACEMENT))             (SETF (PLACEMENT-SHRUNKEN? PLACEMENT)                   SHRUNKEN?)             (SETQ CHANGED? T))         (IL:* IL:|;;| "call the user hook")         (LET ((WINDOW-TYPE (WINDOW-TYPE WINDOW T)))              (WHEN WINDOW-TYPE                  (LET ((UPDATER (WINDOW-TYPE-UPDATER WINDOW-TYPE)))                       (WHEN UPDATER                           (FUNCALL (WINDOW-TYPE-UPDATER WINDOW-TYPE)                                  PLACEMENT)))))         CHANGED?))(DEFUN PLACE-PLACEMENTS (ROOM &OPTIONAL BAGGAGE)   (DOLIST (PLACEMENT (FIND-PLACEMENTS ROOM))       (PLACE-PLACEMENT PLACEMENT))   (DOLIST (PLACEMENT BAGGAGE)       (PLACE-PLACEMENT PLACEMENT)))(DEFUN FIND-PLACEMENTS (ROOM)(IL:* IL:|;;;| "returns the list of placements to be displayed in room, ordered in bottom first (i.e. the order they should be displayed in)")   (LET (PLACEMENTS)        (DO-INCLUSIONS (INCLUSION ROOM)               (DOLIST (PLACEMENT (ROOM-PLACEMENTS INCLUSION))                   (IL:* IL:|;;| "save one placement for each window on the way down")                   (IL:* IL:|;;| "optimization: this rather convoluted piece of code is used rather than (pushnew placement placements :key #'placement-window) because pushnew compiles into something really slow in XCL.")                   (LET ((WINDOW (PLACEMENT-WINDOW PLACEMENT)))                        (UNLESS (DOLIST (PLACEMENT PLACEMENTS)                                    (WHEN (EQ (PLACEMENT-WINDOW PLACEMENT)                                              WINDOW)                                          (RETURN T)))                               (PUSH PLACEMENT PLACEMENTS)))))        PLACEMENTS))(DEFUN PLACE-PLACEMENT (PLACEMENT)(IL:* IL:|;;;| "Called on each placement in a room when it's visited to place PLACEMENT's window per the rest of PLACEMENT.")(IL:* IL:|;;;| "This will probably require a lot of work in a different window system.")   (LET* ((WINDOW (PLACEMENT-WINDOW PLACEMENT))          (IL:* IL:|;;| "we copy as window system sometimes seems to smash these")          (PLACEMENT-REGION (COPY-REGION (PLACEMENT-REGION PLACEMENT)))          (PLACEMENT-ICON-POSITION (COPY-TREE (PLACEMENT-ICON-POSITION PLACEMENT)))          (WINDOW-REGION (WINDOW-REGION WINDOW))          (WINDOW-ICON (WINDOW-ICON WINDOW))          (WINDOW-TYPE (WINDOW-TYPE WINDOW T)))         (WHEN (OR (IL:OPENWP WINDOW)                   (AND WINDOW-ICON (IL:OPENWP WINDOW-ICON)))             (IL:* IL:|;;| "if it's been closed & we ignore it")             (UN-HIDE-WINDOW WINDOW)             (COND                ((PLACEMENT-SHRUNKEN? PLACEMENT)                 (IL:* IL:|;;| "ensure the expansion is placed correctly")                 (UNLESS (EQUAL PLACEMENT-REGION WINDOW-REGION)                     (SHAPE-WINDOW WINDOW PLACEMENT-REGION :CURRENT-REGION WINDOW-REGION :NO-SHAPE                            (AND WINDOW-TYPE (WINDOW-TYPE-PROP WINDOW-TYPE :NO-SHAPE))))                 (IL:* IL:|;;| "place the icon")                 (COND                    ((SHRUNKEN? WINDOW)                     (UNLESS (EQUAL (WINDOW-POSITION WINDOW-ICON)                                    PLACEMENT-ICON-POSITION)                         (MOVE-WINDOW WINDOW-ICON PLACEMENT-ICON-POSITION)                         (OPEN-WINDOW WINDOW-ICON)))                    (T (MOVE-WINDOW (SHRINK-WINDOW WINDOW PLACEMENT-ICON-POSITION)                              PLACEMENT-ICON-POSITION))))                (T (WHEN PLACEMENT-ICON-POSITION                       (IL:* IL:|;;| "ensure the icon is placed correctly")                       (UNLESS WINDOW-ICON                           (SETQ WINDOW-ICON (SHRINK-WINDOW WINDOW PLACEMENT-ICON-POSITION)))                       (MOVE-WINDOW WINDOW-ICON PLACEMENT-ICON-POSITION)                       (WHEN (AND (IL:OPENWP WINDOW-ICON)                                  (NOT (SHRUNKEN? WINDOW)))                           (IL:* IL:|;;| "we opened the icon by moving it")                           (IL:\\CLOSEW1 WINDOW-ICON)))                   (IL:* IL:|;;| "place the window")                   (WHEN (SHRUNKEN? WINDOW)                         (EXPAND-WINDOW WINDOW))                   (UNLESS (EQUAL PLACEMENT-REGION WINDOW-REGION)                       (SHAPE-WINDOW WINDOW PLACEMENT-REGION :CURRENT-REGION WINDOW-REGION :NO-SHAPE                              (AND WINDOW-TYPE (WINDOW-TYPE-PROP WINDOW-TYPE :NO-SHAPE))))                   (OPEN-WINDOW WINDOW)                   (UNLESS PLACEMENT-ICON-POSITION (DELETE-WINDOW-ICON WINDOW))))             (IL:* IL:|;;| "call the user hook")             (WHEN (AND WINDOW-TYPE (WINDOW-TYPE-PLACER WINDOW-TYPE))                 (FUNCALL (WINDOW-TYPE-PLACER WINDOW-TYPE)                        PLACEMENT)))))(DEFUN UPDATE-TTY-PROCESS (ROOM)(IL:* IL:|;;;| "update ROOM's notion of which process has the keyboard.")   (SETF (ROOM-TTY-PROCESS ROOM)         (IL:TTY.PROCESS)))(DEFUN PLACE-TTY-PROCESS (ROOM)(IL:* IL:|;;;| "place the keyboard per ROOM's TTY-PROCESS field")   (LET ((PROCESS (ROOM-TTY-PROCESS ROOM)))        (IL:TTY.PROCESS (IF (IL:PROCESSP PROCESS)                            PROCESS                            (IL:* IL:|;;| "if no process specified, or the specified process is dead, then we give the TTY to the MOUSE process ")                            (IL:FIND.PROCESS 'IL:MOUSE)))))(IL:* IL:|;;| "other essentials")(DEFUN FIND-ROOMS-CONTAINING (WINDOW)(IL:* IL:|;;;| "return a list of all rooms which directly contain a placement for WINDOW")   (LET ((ROOMS))        (DO-ROOMS (ROOM)               (WHEN (FIND-PLACEMENT-IN-ROOM WINDOW ROOM)                     (PUSH ROOM ROOMS)))        (IL:* IL:|;;| "we need a general way of handling un-named rooms, but as there is only one now, we can just special case it.")        (WHEN (FIND-PLACEMENT-IN-ROOM WINDOW (GET-OVERVIEW-ROOM))            (PUSH (GET-OVERVIEW-ROOM)                  ROOMS))        ROOMS))(DEFGLOBALVAR *ROOM-CHANGED-FUNCTIONS* NIL)(DEFUN ROOM-CHANGED (ROOM REASON)(IL:* IL:|;;;| "called when we notice a room has changed to ensure display is up to date.")   (ECASE REASON       ((:EDITED :CREATED :DELETED) (WHEN (IN-ROOM? ROOM)                                        (IL:* IL:|;;|                                       "if we're in this room, redisplay whole screen")                                        (IL:* IL:|;;|                                       "note: we depend upon our caller to update placements")                                        (IL:WITH.MONITOR (GET-MONITOR-LOCK)                                            (GO-TO-ROOM-INTERNAL (GET-CURRENT-ROOM)                                                   :NO-UPDATE T))))       (:PLACEMENTS                     (IL:* IL:|;;| "we presume our caller & the hooks handle these cases")))   (IL:* IL:|;;| "call hooks")   (DOLIST (FN *ROOM-CHANGED-FUNCTIONS*)       (FUNCALL FN ROOM REASON)))(DEFMACRO DO-INCLUSIONS ((ROOM-VAR ROOM-FORM)                             &BODY BODY)(IL:* IL:|;;;| "descend breadth-first, left to right down the inclusions of a room, performing BODY with ROOM-VAR bound to each room. ")   `(LET* ((,ROOM-VAR ,ROOM-FORM)           ($ROOMS$ (LIST ,ROOM-VAR))           ($QUEUE-HEAD$ $ROOMS$)           ($QUEUE-TAIL$ $QUEUE-HEAD$)           ($POCKET-ROOM-NAME$ (GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of|                                                                                  IL:\\CURSORSCREEN)                                     '*POCKET-ROOM-NAME*))           $INCLUSIONS$ $INCLUSION$)          (BLOCK DO-INCLUSIONS              (TAGBODY $LOOP$ ,@BODY (SETQ $INCLUSIONS$ (ROOM-INCLUSIONS ,ROOM-VAR))                     (UNLESS (LISTP $INCLUSIONS$)                            (RETURN-FROM DO-INCLUSIONS))                     (DOLIST (INCLUDED-ROOM-NAME $INCLUSIONS$)                         (SETQ $INCLUSION$ (ROOM-NAMED INCLUDED-ROOM-NAME))                         (WHEN (AND $INCLUSION$ (NOT (MEMBER $INCLUSION$ $ROOMS$ :TEST #'EQ)))                             (RPLACD $QUEUE-TAIL$ (SETQ $QUEUE-TAIL$ (LIST $INCLUSION$)))))                     (POP $QUEUE-HEAD$)                     (IF $QUEUE-HEAD$                         (SETQ ,ROOM-VAR (FIRST $QUEUE-HEAD$))                         (IF (AND $POCKET-ROOM-NAME$ (SETQ ,ROOM-VAR (ROOM-NAMED                                                                             $POCKET-ROOM-NAME$))                                  (NOT (MEMBER ,ROOM-VAR $ROOMS$ :TEST #'EQ)))                             (SETQ $POCKET-ROOM-NAME$ NIL)                             (RETURN-FROM DO-INCLUSIONS)))                     (GO $LOOP$)))))(DEFUN ROOM-INCLUDERS (ROOM &OPTIONAL SORTED?)(IL:* IL:|;;;| "returns the list of rooms which include ROOM.")(IL:* IL:|;;;| "note that every room implicitly includes itself.  the motivation for this is that most code which wants to map over includers also wants the root.")   (IF (EQUAL (ROOM-NAME ROOM)              (GET-POCKET-ROOM-NAME))       (IL:* IL:|;;| "special case: all rooms include the pocket room")       (ALL-ROOMS SORTED?)       (DO* ((INCLUDERS NIL)                                 (IL:* IL:\; "list of included rooms")             (QUEUE (LIST ROOM))                             (IL:* IL:\;                                                            "list of rooms to examine ")             (INCLUDER ROOM (POP QUEUE))                     (IL:* IL:\; "room being examined")             (INCLUDER-NAME (ROOM-NAME INCLUDER)                    (ROOM-NAME INCLUDER)))            ((NULL QUEUE)             (IF SORTED?                 (SORT INCLUDERS #'ROOM-SORT-FUNCTION)                 INCLUDERS))          (UNLESS (MEMBER INCLUDER INCLUDERS :TEST 'EQ)              (PUSH INCLUDER INCLUDERS)              (DO-ROOMS (ROOM)                     (LET ((INCLUSIONS (ROOM-INCLUSIONS ROOM)))                          (WHEN (AND (LISTP INCLUSIONS)                                     (MEMBER INCLUDER-NAME INCLUSIONS :TEST 'EQUAL))                              (PUSHNEW ROOM QUEUE :TEST 'EQ))))))))(IL:* IL:|;;| "bootstrapping & resetting")(DEFVAR *RESET-FORMS* NIL   "List of forms to be EVALled when Rooms is reset.")(DEFUN RESET ()   (IL:* IL:|;;| "delete all existing rooms")   (SETF (GET-ROOMS)         (IF (AND (BOUNDP '*ROOMS*)                  *ROOMS*)             (PROG1 *ROOMS* (SETQ *ROOMS* NIL))             (MAKE-HASH-TABLE :TEST 'EQUAL)))   (IL:* IL:|;;| "Make a new screen bitmap.")   (SETF (GET-SCREEN-BITMAP)         (IF (AND (BOUNDP '*SCREEN-BITMAP*)                  *SCREEN-BITMAP*)             (PROG1 *SCREEN-BITMAP* (SETQ *SCREEN-BITMAP* NIL))             (IL:SCREENBITMAP IL:\\CURSORSCREEN)))   (SETF (GET-PLACEMENT-EDITORS)         (IF (AND (BOUNDP '*PLACEMENT-EDITORS*)                  *PLACEMENT-EDITORS*)             (PROG1 *PLACEMENT-EDITORS* (SETQ *PLACEMENT-EDITORS* NIL))             (MAKE-HASH-TABLE :TEST 'EQUAL)))   (SETF (GET-OV-CHANGED)         (AND (BOUNDP '*OV-CHANGED?*)              *OV-CHANGED?*))   (SETF (GET-HIDDEN-WINDOWS)         (IF (AND (BOUNDP '*HIDDEN-WINDOWS*)                  *HIDDEN-WINDOWS*)             (PROG1 *HIDDEN-WINDOWS* (SETQ *HIDDEN-WINDOWS* NIL))             (MAKE-HASH-TABLE :TEST 'EQ)))   (IL:* IL:|;;| "bootstrap *CURRENT-ROOM*")   (SETF (GET-CURRENT-ROOM)         (IF (AND (BOUNDP '*CURRENT-ROOM*)                  *CURRENT-ROOM*)             (PROG1 *CURRENT-ROOM* (SETQ *CURRENT-ROOM* NIL))             NIL))   (SETF (GET-POCKET-ROOM-NAME)         "Pockets")   (UNLESS (ROOM-NAMED (GET-POCKET-ROOM-NAME))       (MAKE-ROOM (GET-POCKET-ROOM-NAME)              :PLACEMENTS              (IL:* IL:|;;| "put promptwindow in pockets")              (LIST (MAKE-PLACEMENT IL:PROMPTWINDOW))              :BACKGROUND              (COPY-TREE '((:WHOLE-SCREEN (:EVAL IL:WINDOWBACKGROUNDSHADE))))))   (UNLESS (GET-CURRENT-ROOM)       (SETF (GET-CURRENT-ROOM)             (MAKE-ROOM "Original")))   (SETF (GET-MONITOR-LOCK)         (IF (AND (BOUNDP '*MONITOR-LOCK*)                  *MONITOR-LOCK*)             (PROG1 *MONITOR-LOCK* (SETQ *MONITOR-LOCK* NIL))             (IL:CREATE.MONITORLOCK "Rooms")))   (IL:WITH.MONITOR (GET-MONITOR-LOCK)       (GO-TO-ROOM-INTERNAL (GET-CURRENT-ROOM)))   (IL:* IL:|;;| "install our aroundexitfn last so it gets called before greet")   (UNLESS (MEMBER 'AROUNDEXITFN IL:AROUNDEXITFNS)       (SETQ IL:AROUNDEXITFNS (NCONC IL:AROUNDEXITFNS (LIST 'AROUNDEXITFN))))   (IL:* IL:|;;| "do reset forms")   (DOLIST (FORM *RESET-FORMS*)       (EVAL FORM))   (IL:* IL:|;;| "may have lost some windows...")   (CHECK-LOST-WINDOWS))(DEFGLOBALVAR OLD-WHOLESCREEN (COPY-REGION IL:WHOLESCREEN))(DEFGLOBALVAR *SCREEN-CHANGED-FUNCTIONS* (LIST '%INTERNALIZE-ALL-PLACEMENTS))(DEFUN AROUNDEXITFN (EVENT)   (CASE EVENT       ((IL:BEFORESAVEVM IL:BEFORELOGOUT IL:BEFORESYSOUT IL:BEFOREMAKESYS) )       ((IL:AFTERSAVEVM IL:AFTERLOGOUT IL:AFTERSYSOUT IL:AFTERMAKESYS) (UNLESS (EQUAL IL:WHOLESCREEN                                                                                      OLD-WHOLESCREEN                                                                                      )                                                                           (DOLIST                                                                                    #'                                                                           *SCREEN-CHANGED-FUNCTIONS*                                                                               (FUNCALL FUNCTION))                                                                           (SETQ OLD-WHOLESCREEN                                                                                 (COPY-REGION                                                                                        IL:WHOLESCREEN                                                                                        ))))))(DEFUN %INTERNALIZE-ALL-PLACEMENTS ()(IL:* IL:|;;;| "called when we re-boot on different sized screen.  re-scales the placement regions & icon-positions of all placements.")   (LET ((OLD-SCREEN-WIDTH (REGION-WIDTH OLD-WHOLESCREEN))         (OLD-SCREEN-HEIGHT (REGION-HEIGHT OLD-WHOLESCREEN)))        (UPDATE-PLACEMENTS)        (DO-ROOMS (ROOM)               (IL:* IL:|;;| "do all the named rooms")               (%INTERNALIZE-PLACEMENTS ROOM OLD-SCREEN-WIDTH OLD-SCREEN-HEIGHT)               (ROOM-CHANGED ROOM :PLACEMENTS))        (IL:* IL:|;;| "redisplay the current room.")        (IL:PROCESS.RESULT (GO-TO-ROOM (GET-CURRENT-ROOM)                                  :NO-UPDATE T)               T)))(DEFUN %INTERNALIZE-PLACEMENTS (ROOM OLD-SCREEN-WIDTH OLD-SCREEN-HEIGHT)   (DOLIST (PLACEMENT (ROOM-PLACEMENTS ROOM))       (IL:* IL:|;;| "re-scale placements to new size of screen")       (LET ((REGION (PLACEMENT-REGION PLACEMENT)))            (SETF (PLACEMENT-REGION PLACEMENT)                  (INTERNALIZE-REGION (MAKE-REGION :LEFT (EXTERNALIZE-COORDINATE (REGION-LEFT REGION)                                                                OLD-SCREEN-WIDTH)                                             :BOTTOM                                             (EXTERNALIZE-COORDINATE (REGION-BOTTOM REGION)                                                    OLD-SCREEN-HEIGHT)                                             :WIDTH                                             (EXTERNALIZE-COORDINATE (REGION-WIDTH REGION)                                                    OLD-SCREEN-WIDTH)                                             :HEIGHT                                             (EXTERNALIZE-COORDINATE (REGION-HEIGHT REGION)                                                    OLD-SCREEN-HEIGHT)))))       (LET ((POSITION (PLACEMENT-ICON-POSITION PLACEMENT)))            (WHEN POSITION                (SETF (PLACEMENT-ICON-POSITION PLACEMENT)                      (INTERNALIZE-POSITION (MAKE-POSITION (EXTERNALIZE-COORDINATE (POSITION-X                                                                                           POSITION)                                                                  OLD-SCREEN-WIDTH)                                                   (EXTERNALIZE-COORDINATE (POSITION-Y POSITION)                                                          OLD-SCREEN-HEIGHT))))))))(IL:DECLARE\: IL:DOEVAL@COMPILE IL:DONTCOPY(IL:GLOBALVARS IL:\\CURSORSCREEN IL:PROMPTWINDOW IL:AROUNDEXITFNS))(EVAL-WHEN (LOAD)                                                             (IL:* IL:\;                 "smash system code which moves windows around on reboot so we don't fight with it.")(PUSHNEW '(IL:CHANGENAME 'IL:\\STARTDISPLAY 'IL:\\MOVE.WINDOWS.ONTO.SCREEN 'IL:NILL)       *RESET-FORMS* :TEST 'EQUAL))(IL:* IL:|;;| "random")(IL:PUTPROPS GO-TO-ROOM IL:ARGNAMES (ROOM &KEY NO-UPDATE BAGGAGE))(SEDIT:DEF-LIST-FORMAT DO-INCLUSIONS :INDENT (1)   :ARGS (:KEYWORD :BINDING NIL)   :SUBLISTS (2))(SEDIT:DEF-LIST-FORMAT DO-ROOMS :INDENT (1)   :ARGS (:KEYWORD :BINDING NIL)   :SUBLISTS (2))(IL:PUTPROPS IL:RMSCORE IL:COPYRIGHT ("Venue" 1993))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP