(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(IL:FILECREATED "30-Mar-93 17:49:25" IL:|{DSK}<python2>tmp>rooms>sources>RMSBGRND.;1| 16342        IL:|changes| IL:|to:|  (FILE-ENVIRONMENTS IL:RMSBGRND)                             (IL:VARS IL:RMSBGRNDCOMS)                             (IL:VARIABLES RENAISSANCE-BITMAP SQUARES-BITMAP TILE-BITMAP)); Copyright (c) 1993 by I.  All rights reserved.(IL:PRETTYCOMPRINT IL:RMSBGRNDCOMS)(IL:RPAQQ IL:RMSBGRNDCOMS          (           (IL:* IL:|;;| "code for painting background")           (FILE-ENVIRONMENTS IL:RMSBGRND)           (IL:P (EXPORT '(MAKE-BACKGROUND BACKGROUND-INTERNAL-FORM *DEFAULT-BACKGROUND-TEXT-FONT*                                  RENAISSANCE-BITMAP SQUARES-BITMAP TILE-BITMAP                                  INTERNALIZE-ALL-BACKGROUNDS))                 (REQUIRE "ROOMS"))           (IL:STRUCTURES BACKGROUND)           (IL:FUNCTIONS GET-SCREEN-BITMAP MAKE-BACKGROUND INTERNALIZE-BACKGROUND                   INTERNALIZE-BACKGROUND-TEXT INTERNALIZE-ALL-BACKGROUNDS)           (EVAL-WHEN (LOAD)                  (IL:P (PUSHNEW 'INTERNALIZE-ALL-BACKGROUNDS *SCREEN-CHANGED-FUNCTIONS*)))           (IL:VARIABLES *DEFAULT-BACKGROUND* *DEFAULT-BACKGROUND-TEXT-FONT*)           (IL:FUNCTIONS PAINT-BACKGROUND FIND-BACKGROUNDS DRAW&FILL-BOX-WITHIN)           (IL:VARIABLES RENAISSANCE-BITMAP SQUARES-BITMAP TILE-BITMAP)           (IL:GLOBALVARS IL:WINDOWBACKGROUNDSHADE IL:WHOLESCREEN)))(IL:* IL:|;;| "code for painting background")(DEFINE-FILE-ENVIRONMENT IL:RMSBGRND :COMPILER :COMPILE-FILE   :PACKAGE "ROOMS"   :READTABLE "XCL")(EXPORT '(MAKE-BACKGROUND BACKGROUND-INTERNAL-FORM *DEFAULT-BACKGROUND-TEXT-FONT*                 RENAISSANCE-BITMAP SQUARES-BITMAP TILE-BITMAP INTERNALIZE-ALL-BACKGROUNDS))(REQUIRE "ROOMS")(DEFSTRUCT (BACKGROUND (:CONSTRUCTOR MAKE-BACKGROUND-INTERNAL))   (EXTERNAL-FORM NIL :TYPE LIST :READ-ONLY T)   (IL:* IL:|;;| "what the user sees")   (INTERNAL-FORM NIL :TYPE LIST)   (IL:* IL:|;;| "what PAINT-BACKGROUND operates on")   )(DEFMACRO GET-SCREEN-BITMAP ()   '(GETF (IL:|fetch| (IL:SCREEN IL:SCDATA) IL:|of| IL:\\CURSORSCREEN)          '*SCREEN-BITMAP*))(DEFUN MAKE-BACKGROUND (EXTERNAL-FORM)   (MAKE-BACKGROUND-INTERNAL :EXTERNAL-FORM EXTERNAL-FORM :INTERNAL-FORM (INTERNALIZE-BACKGROUND                                                                          EXTERNAL-FORM)))(DEFUN INTERNALIZE-BACKGROUND (BACKGROUND)   (IL:* IL:|;;| "internalize BACKGROUND")   (MAPCAR #'(LAMBDA (PROP-LIST)                    (CASE (CAR PROP-LIST)                        (:WHOLE-SCREEN                            (CHECK-TYPE (SECOND PROP-LIST)                                  (OR BITMAP TEXTURE))                           (CHECK-TYPE (GETF PROP-LIST :BORDER)                                  (OR NULL INTEGER))                           (CHECK-TYPE (GETF PROP-LIST :BORDER-SHADE)                                  (OR NULL TEXTURE))                           `(:WHOLE-SCREEN ,(SECOND PROP-LIST)                                   ,@(WHEN (GETF PROP-LIST :BORDER)                                         `(:BORDER ,(GETF PROP-LIST :BORDER)))                                   ,@(WHEN (GETF PROP-LIST :BORDER-SHADE)                                         `(:BORDER-SHADE ,(GETF PROP-LIST :BORDER-SHADE)))))                        (:REGION                            (CHECK-TYPE (GETF PROP-LIST :SHADE)                                  (OR NULL BITMAP TEXTURE))                           (CHECK-TYPE (GETF PROP-LIST :BORDER)                                  (OR NULL INTEGER))                           (CHECK-TYPE (GETF PROP-LIST :BORDER-SHADE)                                  (OR NULL TEXTURE))                           `(:REGION ,(INTERNALIZE-REGION (SECOND PROP-LIST))                                   ,@(WHEN (GETF PROP-LIST :SHADE)                                         `(:SHADE ,(GETF PROP-LIST :SHADE)))                                   ,@(WHEN (GETF PROP-LIST :BORDER)                                         `(:BORDER ,(GETF PROP-LIST :BORDER)))                                   ,@(WHEN (GETF PROP-LIST :BORDER-SHADE)                                         `(:BORDER-SHADE ,(GETF PROP-LIST :BORDER-SHADE)))))                        (:TEXT (LIST :TEXT (LET ((*DEFAULT-TEXT-FONT* *DEFAULT-BACKGROUND-TEXT-FONT*)                                                 )                                                (INTERNALIZE-BACKGROUND-TEXT PROP-LIST))))))          (EVAL-WALK BACKGROUND)))(DEFUN INTERNALIZE-BACKGROUND-TEXT (PROP-LIST)   (MAKE-TEXT :STRING (GETF PROP-LIST :TEXT)          :POSITION          (INTERNALIZE-POSITION (OR (GETF PROP-LIST :POSITION)                                    (MAKE-POSITION 0 0)))          :ALIGNMENT          (OR (GETF PROP-LIST :ALIGNMENT)              :LEFT-BOTTOM)          :FONT          (LET ((FONT (GETF PROP-LIST :FONT)))               (IF FONT                   (IL:FONTCREATE FONT)                   *DEFAULT-TEXT-FONT*))          :SHADOWS          (GETF PROP-LIST :SHADOWS T)))(DEFUN INTERNALIZE-ALL-BACKGROUNDS ()   (IL:* IL:|;;| "do all the named rooms")   (DO-ROOMS (ROOM)          (LET ((BACKGROUND (ROOM-BACKGROUND ROOM)))               (SETF (BACKGROUND-INTERNAL-FORM BACKGROUND)                     (INTERNALIZE-BACKGROUND (BACKGROUND-EXTERNAL-FORM BACKGROUND)))))   (IL:* IL:|;;| "do the Overview too (yes, this is ugly)")   (LET ((BACKGROUND (ROOM-BACKGROUND (GET-OVERVIEW-ROOM))))        (SETF (BACKGROUND-INTERNAL-FORM BACKGROUND)              (INTERNALIZE-BACKGROUND (BACKGROUND-EXTERNAL-FORM BACKGROUND))))   NIL)(EVAL-WHEN (LOAD)(PUSHNEW 'INTERNALIZE-ALL-BACKGROUNDS *SCREEN-CHANGED-FUNCTIONS*))(DEFGLOBALPARAMETER *DEFAULT-BACKGROUND* (MAKE-BACKGROUND `((:WHOLE-SCREEN                                                                            ,IL:WINDOWBACKGROUNDSHADE)                                                                    )))(DEFPARAMETER *DEFAULT-BACKGROUND-TEXT-FONT* (IL:FONTCREATE 'IL:TIMESROMAND 36))(DEFUN PAINT-BACKGROUND (ROOM DSP &KEY (SCALE *ONE-TO-ONE*)                                  NO-TEXT CLIPPING-REGION)   (DOLIST (BACKGROUND (FIND-BACKGROUNDS ROOM))       (DOLIST (SPEC (BACKGROUND-INTERNAL-FORM BACKGROUND))           (CASE (FIRST SPEC)               (:WHOLE-SCREEN (DRAW&FILL-BOX-WITHIN (SCALE-REGION IL:WHOLESCREEN SCALE)                                     DSP :SHADE (SECOND SPEC)                                     :BORDER-WIDTH                                     (SCALE-WIDTH (GETF SPEC :BORDER 0)                                            SCALE)                                     :BORDER-SHADE                                     (GETF SPEC :BORDER-SHADE IL:BLACKSHADE)                                     :CLIPPING-REGION CLIPPING-REGION))               (:REGION (DRAW&FILL-BOX-WITHIN (SCALE-REGION (GETF SPEC :REGION)                                                         SCALE)                               DSP :SHADE (GETF SPEC :SHADE)                               :BORDER-WIDTH                               (SCALE-WIDTH (GETF SPEC :BORDER 0)                                      SCALE)                               :BORDER-SHADE                               (GETF SPEC :BORDER-SHADE IL:BLACKSHADE)                               :CLIPPING-REGION CLIPPING-REGION))               (:TEXT (UNLESS NO-TEXT                          (DISPLAY-TEXT (SECOND SPEC)                                 DSP :SCALE SCALE)))))))(DEFUN FIND-BACKGROUNDS (ROOM)(IL:* IL:|;;;| "returns the list of backgrounds which apply to ROOM")   (LET (BACKGROUNDS FOUND-WHOLE-SCREEN?)        (DO-INCLUSIONS (ROOM ROOM)               (LET ((BACKGROUND (ROOM-BACKGROUND ROOM)))                    (PUSH BACKGROUND BACKGROUNDS)                    (IL:* IL:|;;| "stop when we see one which paints the whole background")                    (WHEN (ASSOC :WHOLE-SCREEN BACKGROUND :TEST 'EQ)                        (SETQ FOUND-WHOLE-SCREEN? T)                        (RETURN-FROM DO-INCLUSIONS))))        (UNLESS FOUND-WHOLE-SCREEN? (PUSH *DEFAULT-BACKGROUND* BACKGROUNDS))        BACKGROUNDS))(DEFUN DRAW&FILL-BOX-WITHIN (REGION DSP &KEY (SHADE IL:WHITESHADE)                                       (BORDER-WIDTH 0)                                       CLIPPING-REGION                                       (BORDER-SHADE IL:BLACKSHADE))   (LET ((LEFT (REGION-LEFT REGION))         (BOTTOM (REGION-BOTTOM REGION))         (WIDTH (REGION-WIDTH REGION))         (HEIGHT (REGION-HEIGHT REGION)))        (IF (OR (NULL BORDER-WIDTH)                (ZEROP BORDER-WIDTH))            (PAINT-REGION DSP REGION SHADE CLIPPING-REGION)            (LET ((TOP (+ BOTTOM HEIGHT))                  (RIGHT (+ LEFT WIDTH))                  (INSIDE-LEFT (+ LEFT BORDER-WIDTH))                  (INSIDE-WIDTH (- WIDTH BORDER-WIDTH)))                 (PAINT-REGION DSP (MAKE-REGION :LEFT INSIDE-LEFT :BOTTOM (+ BOTTOM BORDER-WIDTH)                                          :WIDTH INSIDE-WIDTH :HEIGHT (- HEIGHT BORDER-WIDTH))                        SHADE CLIPPING-REGION)                 (IL:* IL:|;;| "up left")                 (IL:BLTSHADE BORDER-SHADE DSP LEFT BOTTOM BORDER-WIDTH HEIGHT BORDER-WIDTH NIL                         CLIPPING-REGION)                 (IL:* IL:|;;| "across top")                 (IL:BLTSHADE BORDER-SHADE DSP INSIDE-LEFT (- TOP BORDER-WIDTH)                        INSIDE-WIDTH BORDER-WIDTH NIL CLIPPING-REGION)                 (IL:* IL:|;;| "up the right")                 (IL:BLTSHADE BORDER-SHADE DSP (- RIGHT BORDER-WIDTH)                        BOTTOM BORDER-WIDTH (- HEIGHT BORDER-WIDTH)                        NIL CLIPPING-REGION)                 (IL:* IL:|;;| "across the bottom")                 (IL:BLTSHADE BORDER-SHADE DSP INSIDE-LEFT BOTTOM INSIDE-WIDTH BORDER-WIDTH NIL                         CLIPPING-REGION)))))(DEFGLOBALVAR RENAISSANCE-BITMAP )(DEFGLOBALPARAMETER SQUARES-BITMAP )(DEFGLOBALPARAMETER TILE-BITMAP )(IL:DECLARE\: IL:DOEVAL@COMPILE IL:DONTCOPY(IL:GLOBALVARS IL:WINDOWBACKGROUNDSHADE IL:WHOLESCREEN))(IL:PUTPROPS IL:RMSBGRND IL:COPYRIGHT ("I" 1993))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP