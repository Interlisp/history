(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "10-Jul-88 15:31:37" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>SOURCES>ROOMS-NOTES.;4| 8554         il:|changes| il:|to:|  (il:window-types :note-window)      il:|previous| il:|date:| "23-Jun-88 16:01:25" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>SOURCES>ROOMS-NOTES.;3|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-notescoms)(il:rpaqq il:rooms-notescoms ((file-environments il:rooms-notes) (il:p (export (quote (*default-note-window-font* make-note-window))) (require "ROOMS")) (il:* il:|;;| "provides note windows") (il:structures note) (il:variables *default-note-window-font*) (il:functions make-note-window note-window-repaintfn print-note-string note-window-buttoneventfn edit-note-window-text set-note-window-font set-note-window-title) (il:window-types :note-window) (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:hasdef (quote stream) (quote il:records)) (il:eval (il:sysreclook1 (quote stream)))))) (il:globalvars il:boldfont)))(define-file-environment il:rooms-notes :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (*default-note-window-font* make-note-window)))(require "ROOMS")(il:* il:|;;| "provides note windows")(defstruct note (il:* il:|;;;| "a note for display in a note-window") (string "" :type string) (font nil :type font) (title "Note:" :type string) (read-only? nil :type (member t nil)))(defvar *default-note-window-font* il:boldfont)(defun make-note-window (&key region (title "Note:") (string "") (font *default-note-window-font*) (read-only? nil)) (let ((window (il:createw region title))) (il:windowprop window (quote note) (make-note :string string :font (if (symbolp font) font (il:fontcreate font)) :title title :read-only? read-only?)) (il:windowprop window (quote il:repaintfn) (quote note-window-repaintfn)) (il:windowprop window (quote il:reshapefn) (quote note-window-repaintfn)) (il:windowprop window (quote il:buttoneventfn) (quote note-window-buttoneventfn)) (il:windowprop window (quote il:buttoneventfn) (quote note-window-buttoneventfn)) (note-window-repaintfn window) window))(defun note-window-repaintfn (window &rest ignore) (let* ((note (il:windowprop window (quote note))) (dsp (il:getstream window)) (font (note-font note))) (il:windowprop window (quote il:title) (note-title note)) (il:dspfont (if (symbolp font) (symbol-value font) font) dsp) (il:clearw window) (il:* il:|;;| "why 8?  that's what TEdit uses.") (print-note-string (note-string note) dsp 8 (- (il:windowprop window (quote il:width)) 8))))(defun print-note-string (string dsp left-margin right-margin &optional (line-leading 0)) (il:* il:|;;;| "print STRING to DSP within LEFT-MARGIN & RIGHT-MARGIN, breaking lines at spaces.  I shouldn't have to write this, so it's ok if the code is ugly, right?") (check-type dsp (satisfies il:displaystreamp)) (prog* ((char) (font (il:dspfont nil dsp)) (line-height (+ (il:fontheight font) line-leading)) (length (vector-length string)) (dd (il:fetch (stream il:imagedata) il:of dsp)) (last-space 0) (il:* il:\; "offset in string where we'll break") (line-start 0) (il:* il:\; "offset into string where this line starts") (i -1) (il:* il:\; "current offset into string") (x left-margin) (il:* il:\; "x position of char at I in pixels") (x-at-last-space left-margin) (il:* il:\; "x position of char at LAST-SPACE in pixels")) (il:moveto left-margin (- (il:dspyposition nil dsp) line-leading) dsp) loop (incf i) (when (>= i length) (setq last-space length) (go dump-line)) (setq char (aref string i)) (case char (#\Space (do ((n (1+ i) (1+ n))) (il:* il:|;;| "skip through multiple spaces without checking for line breaks so that line breaks are always forced after a group of spaces") ((or (= n length) (not (eql (aref string n) #\Space)))) (incf i) (incf x (il:charwidth (char-code #\Space) font))) (setq last-space i) (setq x-at-last-space x)) (#\Newline (il:* il:\; "force line break") (setq last-space i) (setq x-at-last-space x) (go dump-line))) (incf x (il:charwidth (char-code char) font)) (when (> x right-margin) (il:* il:|;;| "check if line needs breaking") (when (and (<= last-space line-start)) (il:* il:|;;| "if we've had no spaces on this line, just break it where we are.  we actually lose a character here, as DUMP-LINE always skips the character we're on, presuming it's a space or CR.") (setq last-space i) (setq x-at-last-space x)) (go dump-line)) (go loop) dump-line (il:* il:|;;| "dump chars from LINE-START up to (but not including) LAST-SPACE.") (do ((n line-start (1+ n))) ((or (= n last-space) (= n length)) (il:* il:|;;| "move to the next line") (il:moveto left-margin (- (il:dspyposition nil dsp) line-height) dsp) (il:* il:|;;| "adjust X & LINE-START") (setq x (+ left-margin (- x x-at-last-space))) (setq line-start (1+ last-space))) (il:* il:|;;| "this is soooo much faster than calling WRITE-CHAR.  the down side is that this code will now only work on display streams.") (il:\\bltchar (char-code (aref string n)) dsp dd)) (if (>= i length) (return) (go loop))))(defun note-window-buttoneventfn (window) (il:totopw window) (when (and (il:mousestate (il:only il:middle)) (not (note-read-only? (il:windowprop window (quote note))))) (case (menu (quote (("Edit Text" :edit "Edit the text of this note window with TEdit.") ("Set Font" :font "Set the font of this note window.") ("Set Title" :title "Set the title of this note window.")))) (:edit (il:add.process (il:bquote (edit-note-window-text (quote (il:\\\, window)))))) (:font (il:add.process (il:bquote (set-note-window-font (quote (il:\\\, window)))))) (:title (il:add.process (il:bquote (set-note-window-title (quote (il:\\\, window)))))))))(defun edit-note-window-text (window) (let ((note (il:windowprop window (quote note)))) (if (fboundp (quote il:tedit)) (let ((text-stream (il:opentextstream (note-string note) nil nil nil (il:bquote (il:font (il:\\\, (note-font note)) il:notitle t il:promptwindow (il:\\\, il:promptwindow) il:menu (il:|Find| il:|Substitute| il:|Quit|) il:quitfn (il:\\\, (function (lambda (window stream textobj il:props) (il:|replace| il:editfinishedflg il:|of| textobj il:|with| t) (quote il:don\'t)))) il:afterquitfn (il:\\\, (function (lambda (window stream) (il:openw window))))))))) (il:tty.process (il:this.process)) (setf (note-string note) (il:tedit text-stream window t)) (il:block 200) (il:windowprop window (quote il:repaintfn) (quote note-window-repaintfn)) (il:windowprop window (quote il:reshapefn) (quote note-window-repaintfn)) (il:windowprop window (quote il:buttoneventfn) (quote note-window-buttoneventfn)) (note-window-repaintfn window)))))(defun set-note-window-font (window) (let* ((note (il:windowprop window (quote note))) (old-font (note-font note)) (new-font (sedit::sedite (if (symbolp old-font) old-font (externalize-font old-font)) nil nil nil nil (quote (:close-on-completion))))) (setf (note-font note) (if (symbolp new-font) new-font (il:fontcreate new-font))) (note-window-repaintfn window)))(defun set-note-window-title (window) (let* ((note (il:windowprop window (quote note))) (title (prompt-user "Title:" "Type title (CR to abort)"))) (when title (setf (note-title note) title) (note-window-repaintfn window))))(def-window-type :note-window :recognizer (lambda (window) (note-p (il:windowprop window (quote note)))) :abstracter (lambda (window) (let* ((note (il:windowprop window (quote note))) (font (note-font note))) (il:bquote (:region (il:\\\, (externalize-region (window-region window))) :title (il:\\\, (note-title note)) :string (il:\\\, (note-string note)) :font (il:\\\, (if (symbolp font) font (externalize-font font))) :read-only? (il:\\\, (note-read-only? note)))))) :reconstituter (lambda (args) (let ((rest (copy-list args))) (remf rest :region) (apply (function make-note-window) :region (internalize-region (getf args :region (quote (0 0 100 100)))) rest))) :title (lambda (placement region dsp) (let ((note (il:windowprop (placement-window placement) (quote note)))) (print-pep-title-string (if (and note (note-title note)) (string (note-title note)) "Note:") region dsp :no-title-bar? (placement-shrunken? placement)))))(il:declare\: il:eval@compile il:dontcopy (or (il:hasdef (quote stream) (quote il:records)) (il:eval (il:sysreclook1 (quote stream)))))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:boldfont))(il:putprops il:rooms-notes il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop