(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 5-Aug-88 18:01:07" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>WALLPAPER.;3| 2696         il:|changes| il:|to:|  (il:window-types :wallpaper) (il:vars il:wallpapercoms) (il:functions make-wallpaper-window wallpaper-window-buttoneventfn hack-background make-background-hacker) (file-environments il:wallpaper)      il:|previous| il:|date:| " 5-Aug-88 16:51:41" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>WALLPAPER.;2|); Copyright (c) 1988 by Douglass Read Cutting.  All rights reserved.(il:prettycomprint il:wallpapercoms)(il:rpaqq il:wallpapercoms ((file-environments il:wallpaper) (il:p (export (quote (make-wallpaper-window hack-background)) "ROOMS")) (il:files (il:sysload) il:screenpaper) (il:functions make-wallpaper-window wallpaper-window-buttoneventfn hack-background) (il:window-types :wallpaper)))(define-file-environment il:wallpaper :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (make-wallpaper-window hack-background)) "ROOMS")(il:filesload (il:sysload) il:screenpaper)(defun make-wallpaper-window (&optional region) (let ((window (il:createw region "Wallpaper" 10))) (il:windowprop window (quote il:buttoneventfn) (quote wallpaper-window-buttoneventfn)) window))(defun wallpaper-window-buttoneventfn (window) (notify-user "Pick regions of the screen with LEFT~%Press MIDDLE when satisfied, RIGHT to abort.") (let ((shade (il:screenpaper window nil (quote il:pick)))) (when shade (hack-background shade))))(defun hack-background (shade &optional (room *current-room*)) (il:* il:|;;;| "set the first shade specification of ROOM to be SHADE, or add a :WHOLE-SCREEN specification ROOM has no shades specified.") (il:* il:|;;| "always call this before we hack a room") (update-placements) (let ((specs (background-external-form (room-background room)))) (dolist (spec specs (push (list :whole-screen shade) specs)) (case (first spec) (:whole-screen (setf (second spec) shade) (return)) (:region (setf (getf spec :shade) shade) (return)))) (setf (room-background room) (make-background specs))) (il:* il:|;;| "always call this after we hack a room") (room-changed room :edited))(def-window-type :wallpaper :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote wallpaper-window-buttoneventfn))) :abstracter (lambda (window) (list :region (externalize-region (window-region window)))) :reconstituter (lambda (args) (make-wallpaper-window (internalize-region (getf args :region)))) :title "Wallpaper" :files (il:wallpaper))(il:putprops il:wallpaper il:copyright ("Douglass Read Cutting" 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop