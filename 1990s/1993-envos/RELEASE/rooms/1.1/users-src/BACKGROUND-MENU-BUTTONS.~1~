(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "XCL-USER")(il:filecreated "11-Aug-88 15:02:54" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>BACKGROUND-MENU-BUTTONS.;2| 2605         il:|changes| il:|to:|  (il:functions make-background-menu-button)      il:|previous| il:|date:| "28-Jan-88 12:02:37" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>BACKGROUND-MENU-BUTTONS.;1|); Copyright (c) 1987, 1988 by Douglass Read Cutting.  All rights reserved.(il:prettycomprint il:background-menu-buttonscoms)(il:rpaqq il:background-menu-buttonscoms ((il:files (il:sysload) il:rooms) (file-environments il:background-menu-buttons) (il:functions make-background-menu-button background-item) (il:p (eval-when (load) (rooms:make-button-window (rooms:make-button :text "Make Background Button" :action (quote (make-background-menu-button)) :help "make a button which does the same thing as an entry on the background menu"))))))(il:filesload (il:sysload) il:rooms)(define-file-environment il:background-menu-buttons :package "XCL-USER" :readtable "XCL" :compiler :compile-file)(defun make-background-menu-button nil (let ((item (background-item))) (when item (rooms:make-button-window (rooms:make-button :text (princ-to-string (first item)) :help (third item) :action (il:bquote (il:eval (il:\\\, (second item)))))))))(defun background-item nil (il:* il:|;;| "return a menu item from the background menu") (il:* il:|;;| "labels of sub-items are coerced to show where they came from") (declare (global il:|BackgroundMenuCommands|)) (let ((item (il:menu (il:create il:menu il:items il:_ il:|BackgroundMenuCommands| il:centerflg il:_ t il:whenselectedfn il:_ (function values))))) (when item (labels ((item-path (items) (il:* il:|;;| "construct a list of the names of the items in ITEMS on the path to ITEM") (dolist (i items) (when (eq i item) (return (list (first i)))) (let ((found (item-path (cdr (fourth i))))) (when found (return (cons (first i) found))))))) (let ((path (item-path il:|BackgroundMenuCommands|))) (if (rest path) (il:* il:|;;| "it's a subitem - coerce the label") (list* (let ((*print-case* :upcase)) (format nil "~A~{ > ~A~}" (first path) (rest path))) (rest item)) (il:* il:|;;| "it's a top-level item - just return it") item))))))(eval-when (load) (rooms:make-button-window (rooms:make-button :text "Make Background Button" :action (quote (make-background-menu-button)) :help "make a button which does the same thing as an entry on the background menu")))(il:putprops il:background-menu-buttons il:copyright ("Douglass Read Cutting" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop