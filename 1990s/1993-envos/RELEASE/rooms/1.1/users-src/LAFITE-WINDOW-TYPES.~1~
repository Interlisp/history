(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 3-Jan-89 13:46:52" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>LAFITE-WINDOW-TYPES.;7| 6186         il:|changes| il:|to:|  (il:functions abstract-lafite-browser reconstitute-lafite-browser) (il:window-types :lafite-browser) (il:vars il:lafite-window-typescoms)      il:|previous| il:|date:| "30-Dec-88 15:24:22" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>LAFITE-WINDOW-TYPES.;6|); Copyright (c) 1988, 1989 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:lafite-window-typescoms)(il:rpaqq il:lafite-window-typescoms ((il:* il:|;;| "window types for Lafite") (file-environments il:lafite-window-types) (il:p (require "ROOMS")) (eval-when (compile eval) (il:files (il:loadcomp t) il:lafitedecls)) (il:window-types :lafite-status-window :lafite-browser) (il:functions abstract-lafite-browser reconstitute-lafite-browser) (il:* il:|;;| "keep il:shapew from hanging") (il:p (il:changename (quote il:lab.reshapefn) (quote il:obtain.monitorlock) (quote true)) (il:changename (quote il:lab.repaintfn) (quote il:obtain.monitorlock) (quote true))) (il:globalvars il:lafitestatuswindow il:defaultmailfoldername il:\\lafite.active il:lafitebrowserregion)))(il:* il:|;;| "window types for Lafite")(define-file-environment il:lafite-window-types :compiler :compile-file :readtable "XCL" :package "ROOMS")(require "ROOMS")(eval-when (compile eval)(il:filesload (il:loadcomp t) il:lafitedecls))(def-window-type :lafite-status-window :recognizer (lambda (window) (eq window il:lafitestatuswindow)) :abstracter (lambda (window) nil) :reconstituter (lambda (ignore) (when (fboundp (quote il:lafite)) (or il:lafitestatuswindow (progn (il:lafite (quote il:on) nil) (il:block) il:lafitestatuswindow)))) :updater (lambda (placement) (if il:\\lafite.outbox (il:* il:|;;| "note the height of the outbox") (placement-prop placement :outbox-height (region-height (il:windowprop (first il:\\lafite.outbox) (quote il:region)))) (remf (placement-props placement) :outbox-height))) :placer (lambda (placement) (il:* il:|;;| "adjust placement as outbox might have appeared or been removed since we were last here & we don't want status window creeping around.") (il:relmovew (placement-window placement) (make-position 0 (- (getf (placement-props placement) :outbox-height 0) (if il:\\lafite.outbox (region-height (il:windowprop (first il:\\lafite.outbox) (quote il:region))) 0))))) :title (lambda (placement region dsp) (print-pep-title-string "Lafite" region dsp :no-title-bar? t)) :files (il:* il:|;;;| "we don't load Lafite on demand.") (il:lafite-window-types))(def-window-type :lafite-browser :recognizer (lambda (window) (typep (il:windowprop window (quote il:mailfolder)) (quote il:mailfolder))) :abstracter abstract-lafite-browser :reconstituter reconstitute-lafite-browser :title (lambda (placement region dsp) (let* ((folder (il:windowprop (placement-window placement) (quote il:mailfolder)))) (print-pep-title-string (if folder (il:|fetch| (il:mailfolder il:shortfoldername) il:|of| folder) "Lafite Browser") region dsp :no-title-bar? (placement-shrunken? placement)))) :files (il:* il:|;;;| "we don't load Lafite on demand") (il:lafite-window-types))(defun abstract-lafite-browser (window) (let ((folder (il:windowprop window (quote il:mailfolder))) (move-to-window (il:windowprop window (quote il:lafite.auto.move.menu)))) (list :folder-name (il:|fetch| (il:mailfolder il:shortfoldername) il:|of| folder) :layout (let ((folder-region (window-region window)) (icon-position (icon-position window)) (display-region (il:|fetch| (il:mailfolder il:folderdisplayregion) il:|of| folder))) (when move-to-window (il:* il:|;;| "knock off portion of FOLDER-REGION which includes MoveTo menu window so tht FOLDER-REGION is right for passing to LAFITE.BROWSE.FOLDER (which won't create the MoveTo menu for us).") (decf (region-width folder-region) (region-width (il:windowprop move-to-window (quote il:region))))) (list (externalize-region folder-region) (when icon-position (externalize-position icon-position)) (when display-region (externalize-region display-region)))) :options (when (il:|fetch| (il:mailfolder il:foldergetsmail) il:|of| folder) (list :active)) :move-to-folders (when move-to-window (mapcar (function il:la.shortfilename) (il:windowprop window (quote il:lafite.auto.move.names)))))))(defun reconstitute-lafite-browser (plist) (il:* il:|;;| "pass if lafite is not loaded") (when (fboundp (quote il:lafite)) (il:* il:|;;| "first make sure lafite is turned on") (unless (eq il:\\lafite.active t) (il:lafite (quote il:on) nil) (loop (il:block) (when (eq il:\\lafite.active t) (return))) (il:* il:|;;| "don't want to add windows to current room") (hide-window il:lafitestatuswindow)) (let* ((externalized-region (getf plist :region)) (externalized-layout (getf plist :layout (list il:lafitebrowserregion))) (layout (if externalized-region (il:* il:|;;| "for back compatability") (list (internalize-region externalized-region)) (list (internalize-region (first externalized-layout)) (when (second externalized-layout) (internalize-position (second externalized-layout))) (when (third externalized-layout) (internalize-region (third externalized-layout)))))) (folder (il:lafite.browse.folder (getf plist :folder-name il:defaultmailfoldername) layout (getf plist :options))) (move-to-folders (getf plist :move-to-folders))) (when folder (when move-to-folders (il:windowprop (il:fetch (il:mailfolder il:browserwindow) il:of folder) (quote il:lafite.auto.move.names) move-to-folders) (il:\\lafite.update.move.menu folder t)) (il:fetch (il:mailfolder il:browserwindow) il:of folder)))))(il:* il:|;;| "keep il:shapew from hanging")(il:changename (quote il:lab.reshapefn) (quote il:obtain.monitorlock) (quote true))(il:changename (quote il:lab.repaintfn) (quote il:obtain.monitorlock) (quote true))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:lafitestatuswindow il:defaultmailfoldername il:\\lafite.active il:lafitebrowserregion))(il:putprops il:lafite-window-types il:copyright ("Xerox Corporation" 1988 1989))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop