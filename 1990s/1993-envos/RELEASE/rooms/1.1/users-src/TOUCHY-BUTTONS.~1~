(DEFINE-FILE-INFO PACKAGE "ROOMS" READTABLE "XCL")(il:filecreated "28-Jul-88 15:23:46" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>TOUCHY-BUTTONS.;3| 5806         il:|changes| il:|to:|  (il:vars il:touchy-buttonscoms) (il:functions includer-action n-valuer-action switch-action)      il:|previous| il:|date:| "31-May-88 17:36:50" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>TOUCHY-BUTTONS.;2|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:touchy-buttonscoms)(il:rpaqq il:touchy-buttonscoms ((il:* il:|;;| "Includer buttons so you can have dynamic mixin rooms.  For example, you can have a \"Notecards-Mixin\" or \"Programming-Mixin\" Room and have buttons to include these in \"Pockets\"  then whenever you need these facilities you can mix them in.") (il:functions make-includer includer-text includer-action) (il:* il:|;;| "Toggle buttons for switching between variable settings.  This should obviously be generalized to something that allows you to select or circulate through value settings.") (il:functions make-toggler make-n-valuer make-exset-toggler make-range-toggler n-valuer-action n-valuer-text check-eval) (il:functions make-switch switch-action) (il:* il:|;;| "") (il:* il:|;;| "(MAKE-ONCE-ONLY (IL:PROMPTPRINT \"Hello, World\") \"Fire...\" \"Exhausted\")") (il:functions make-once-only once-only-action once-only-text) (il:declare\: il:dontcopy (il:props (il:touchy-buttons il:makefile-environment) (il:touchy-buttons il:filetype)))))(il:* il:|;;| "Includer buttons so you can have dynamic mixin rooms.  For example, you can have a \"Notecards-Mixin\" or \"Programming-Mixin\" Room and have buttons to include these in \"Pockets\"  then whenever you need these facilities you can mix them in.")(defun make-includer (room-name) (make-button-window (make-button :text-form (list (quote includer-text) room-name) :action (quote includer-action) :includer-room-name room-name)))(defun includer-text (includer-room-name) (let ((inclusions (room-inclusions *current-room*))) (if (listp inclusions) (if (member includer-room-name inclusions :test (function equal)) (format nil "Exclude ~A" includer-room-name) (format nil "Include ~A" includer-room-name)) (format nil "*-???-* ~A" includer-room-name))))(defun includer-action (dsp button) (let* ((room *current-room*) (includer-room-name (button-prop button :includer-room-name))) (update-placements) (if (member includer-room-name (room-inclusions room) :test (function equal)) (setf (room-inclusions room) (delete includer-room-name (room-inclusions room) :test (function equal))) (push includer-room-name (room-inclusions room))) (room-changed room :edited)))(il:* il:|;;| "Toggle buttons for switching between variable settings.  This should obviously be generalized to something that allows you to select or circulate through value settings.")(defun make-toggler (variable-name &rest keys) (apply (function make-n-valuer) variable-name (quote (nil t)) keys))(defun make-n-valuer (variable-name n-values &rest keys) (make-button-window (apply (function make-button) :text-form (il:bquote (n-valuer-text (quote (il:\\\, variable-name)))) :action (quote n-valuer-action) :variable-name variable-name :n-values n-values keys)))(defun make-exset-toggler (variable-name explicit-set &rest keys) (apply (function make-n-valuer) variable-name explicit-set :help (format nil "Set variable ~S" variable-name) keys))(defun make-range-toggler (variable-name range-start range-end &rest keys) (apply (function make-n-valuer) variable-name (do ((i range-start (1+ i)) (accumulator nil accumulator)) ((> i range-end) (nreverse accumulator)) (push i accumulator)) :help (format nil "Set variable ~S" variable-name) keys))(defun n-valuer-action (dsp button) (let* ((n-values (button-prop button :n-values)) (variable-name (button-prop button :variable-name))) (setq n-values (remove (check-eval variable-name) n-values)) (set variable-name (if (eq (length n-values) 1) (car n-values) (il:menu (il:create il:menu il:items il:_ n-values))))))(defun n-valuer-text (variable-name) (format nil "~A is ~a" variable-name (check-eval variable-name)))(defun check-eval (variable-name) (if (boundp variable-name) (eval variable-name) "Unbound"))(defun make-switch (decision-fn set-fn text-form &rest keys) (make-button-window (apply (function make-button) :text-form text-form :action (quote switch-action) :decision-fn decision-fn :set-fn set-fn keys)))(defun switch-action (dsp button) (let* ((value (funcall (button-prop button :decision-fn) button))) (funcall (button-prop button :set-fn) button value)))(il:* il:|;;| "")(il:* il:|;;| "(MAKE-ONCE-ONLY (IL:PROMPTPRINT \"Hello, World\") \"Fire...\" \"Exhausted\")")(defun make-once-only (form initial-text final-text) (make-button-window (make-button :text initial-text :text-form (quote once-only-text) :action (quote once-only-action) :once-only-form form :initial-text initial-text :final-text final-text)))(defun once-only-action (stream button) (unless (il:streamprop (il:getstream stream) button) (il:* il:|;;| "store the state of the button on its host, so that the state is reset each time the button is reconstituted.") (eval (button-prop button :once-only-form)) (il:streamprop (il:getstream stream) button t)))(defun once-only-text (stream button) (when stream (if (il:streamprop (il:getstream stream) button) (button-prop button :final-text) (button-prop button :initial-text))))(il:declare\: il:dontcopy (il:putprops il:touchy-buttons il:makefile-environment (:package "ROOMS" :readtable "XCL"))(il:putprops il:touchy-buttons il:filetype :compile-file))(il:putprops il:touchy-buttons il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop