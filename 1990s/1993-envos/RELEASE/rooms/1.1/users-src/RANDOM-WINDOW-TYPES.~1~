(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "24-Jan-89 14:47:44" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>RANDOM-WINDOW-TYPES.;6| 8987         il:|changes| il:|to:|  (il:functions file-watch-exit-function file-watch-entry-function) (il:window-types :file-watch) (il:vars il:random-window-typescoms)      il:|previous| il:|date:| "24-Jan-89 14:44:41" il:|{POGO:AISNORTH:XEROX}<ROOMS>MEDLEY>USERS>RANDOM-WINDOW-TYPES.;5|); Copyright (c) 1988, 1989 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:random-window-typescoms)(il:rpaqq il:random-window-typescoms ((il:* il:|;;| "Window types for various LispUsers modules") (file-environments il:random-window-types) (il:p (require "ROOMS")) (il:* il:|;;| "Window type for WHO-LINE") (il:window-types :who-line) (il:* il:|;;| "Window types for the CALENDAR program") (il:window-types :calendar-year :calendar-month) (il:* il:|;;| "Window type for the PRINTERMENU program") (il:window-types :printer-menu-window) (il:* il:|;;| "Window type for some clocks") (il:window-types :crock-window :biclock) (il:* il:|;;| "Window types for AddressBook and PhoneDirectory") (il:coms (il:window-types :addressbook :phone-directory) (il:functions address-book-window-p phone-directory-window-p find-window)) (il:* il:|;;| "Window type for GRID-ICONS") (il:window-types :grid-icon-coms-editor) (il:coms (il:* il:|;;| "special handlers for FILEWATCH.  these are somewhat broken") (il:window-types :file-watch) (il:functions file-watch-exit-function file-watch-entry-function) (il:p (pushnew (quote file-watch-exit-function) *room-exit-functions*) (pushnew (quote file-watch-entry-function) *room-entry-functions*)))))(il:* il:|;;| "Window types for various LispUsers modules")(define-file-environment il:random-window-types :compiler :compile-file :readtable "XCL" :package "ROOMS")(require "ROOMS")(il:* il:|;;| "Window type for WHO-LINE")(def-window-type :who-line :recognizer (lambda (window) (declare (global il:*who-line*)) (eq window il:*who-line*)) :abstracter (lambda (window) nil) :reconstituter (lambda (props) (declare (global il:*who-line*)) (il:install-who-line-options) il:*who-line*) :no-shape t (il:* il:\; "don't scale placements") :title "" :files (il:who-line il:random-window-types))(il:* il:|;;| "Window types for the CALENDAR program")(def-window-type :calendar-year :recognizer (lambda (w) (eq (il:windowprop w (quote il:repaintfn)) (quote il:repaintyear))) :abstracter (lambda (w) (list (il:windowprop w (quote il:year#)))) :reconstituter (lambda (data) (destructuring-bind (year) data (flet ((find-calendar-year nil (find-if (function (lambda (w) (and (eq (il:windowprop w (quote il:repaintfn)) (quote il:repaintyear)) (eql (il:windowprop w (quote il:year#)) year)))) (il:openwindows)))) (or (find-calendar-year) (progn (il:calendar nil nil year) (find-calendar-year)))))) :title (lambda (placement region dsp) (print-pep-title-string (or (il:windowprop (placement-window placement) (quote il:year#)) "YEAR") region dsp :no-title-bar? t)) :files (il:calendar il:random-window-types))(def-window-type :calendar-month :recognizer (lambda (w) (eq (il:windowprop w (quote il:repaintfn)) (quote il:repaintmonth))) :abstracter (lambda (w) (list (il:windowprop w (quote il:year#)) (il:windowprop w (quote il:month#)))) :reconstituter (lambda (data) (destructuring-bind (year month) data (flet ((find-calendar-month nil (find-if (function (lambda (w) (and (eq (il:windowprop w (quote il:repaintfn)) (quote il:repaintyear)) (eql (il:windowprop w (quote il:year#)) year) (eql (il:windowprop w (quote il:month#)) month)))) (il:openwindows)))) (or (find-calendar-month) (progn (il:calendar month nil year) (find-calendar-month)))))) :title (lambda (placement region dsp) (print-pep-title-string (let ((month-number (il:windowprop (placement-window placement) (quote il:month#)))) (if month-number (nth (1- month-number) (quote ("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"))) "MONTH")) region dsp :no-title-bar? t)) :files (il:calendar il:random-window-types))(il:* il:|;;| "Window type for the PRINTERMENU program")(def-window-type :printer-menu-window :recognizer (lambda (w) (and (boundp (quote il:printermenu.window)) (eq w il:printermenu.window))) :reconstituter (lambda (data) (declare (ignore data)) (unless (and (boundp (quote il:printermenu.window)) il:printermenu.window) (il:printermenu)) il:printermenu.window) :abstracter (lambda (w) (declare (ignore w)) nil) :title "PrinterMenu" :files (il:printermenu il:random-window-types))(il:* il:|;;| "Window type for some clocks")(def-window-type :crock-window :recognizer (lambda (w) (and (boundp (quote il:crockwindow)) (eq w il:crockwindow))) :reconstituter (lambda (data) (declare (ignore data)) (unless (and (boundp (quote il:crockwindow)) (il:windowp il:crockwindow)) (il:crock (il:createregion 0 0 100 100))) il:crockwindow) :abstracter (lambda (w) (declare (ignore w)) nil) :title "Crock" :files (il:crock il:random-window-types))(def-window-type :biclock :recognizer (lambda (window) (eq (il:windowprop window (quote il:reshapefn)) (quote il:biclockrsfn))) :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data) (global il:biclockwindow)) (if (boundp (quote il:biclockwindow)) il:biclockwindow (il:biclock))) :title (lambda (placement region dsp) (print-pep-title-string "Clock" region dsp :no-title-bar? t)) :files (il:biclock il:random-window-types))(il:* il:|;;| "Window types for AddressBook and PhoneDirectory")(def-window-type :addressbook :dependencies (:textstream) :recognizer address-book-window-p :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data)) (or (find-window (function address-book-window-p) t) (il:|MakeAddressBook|))) :title "Address" :files (il:addressbook il:random-window-types))(def-window-type :phone-directory :recognizer phone-directory-window-p :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data)) (or (find-window (function phone-directory-window-p) t) (il:|Let-your-fingers-do-the-walking|))) :title "Phone" :files (il:phone-directory il:random-window-types))(defun address-book-window-p (window) (eq (il:windowprop window (quote il:|ProcessName|)) (quote il:|Address Book|)))(defun phone-directory-window-p (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:|Phone-Window-ButtonEventFn|)))(defun find-window (test &optional include-hidden-p) (dolist (window (all-windows include-hidden-p)) (when (funcall test window) (return window))))(il:* il:|;;| "Window type for GRID-ICONS")(def-window-type :grid-icon-coms-editor :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:loaded-files-icon-window-buttoneventfn))) :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data) (global il:loaded-files-icon-window)) il:loaded-files-icon-window) :files (il:grid-icons il:random-window-types))(il:* il:|;;| "special handlers for FILEWATCH.  these are somewhat broken")(def-window-type :file-watch :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:fw-buttoneventfn))))(defun file-watch-exit-function (room) (declare (global il:|FW-Running?| il:|FW-Anchor| il:|FW-Position|)) (when (fboundp (quote il:filewatch)) (cond (il:|FW-Running?| (room-prop room :file-watch-on? t) (room-prop room :file-watch-anchor il:|FW-Anchor|) (room-prop room :file-watch-position (externalize-position il:|FW-Position|)) (let* ((changed? nil) (new-placements (delete-if (function (lambda (placement) (and (eq (il:windowprop (placement-window placement) (quote il:buttoneventfn)) (quote il:fw-buttoneventfn)) (setq changed? t)))) (room-placements room)))) (when changed? (setf (room-placements room) new-placements) (room-changed room :placements))) (il:filewatch :off) (il:process.result (il:find.process "FileWatcher") t)) (t (room-prop room :file-watch-on? nil) (remf (room-props room) :file-watch-anchor) (remf (room-props room) :file-watch-position)))))(defun file-watch-entry-function (room) (declare (global il:|FW-Properties|)) (when (fboundp (quote il:filewatch)) (let ((pos (room-prop room :file-watch-position)) (anchor (room-prop room :file-watch-anchor))) (when pos (setf (getf il:|FW-Properties| (quote il:position)) (internalize-position pos))) (when anchor (setf (getf il:|FW-Properties| (quote il:anchor)) anchor)) (when (room-prop room :file-watch-on?) (il:filewatch :on) (il:block)))))(pushnew (quote file-watch-exit-function) *room-exit-functions*)(pushnew (quote file-watch-entry-function) *room-entry-functions*)(il:putprops il:random-window-types il:copyright ("Xerox Corporation" 1988 1989))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop