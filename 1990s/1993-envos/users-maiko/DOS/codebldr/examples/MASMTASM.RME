                                 Release Notes                                    for the                      Intel 386/486 C Code Builder(TM) Kit                                                                       Version 1.0 Supplement                             MASM and TASM Support          The V1.0d and later versions of the C Code Builder(TM) linker and     librarian accept 32-bit object files (.obj) created with Microsoft's     MASM 5.1 and 6.0 assemblers or Borland's TASM 2.0 and 2.5 assemblers.     The C Code Builder linker and librarian also accept 32-bit assembler     library files (.lib) created with Microsoft's LIB or Borland's TLIB     librarians.          You can specify MASM and TASM files in the iCC invocation, for     example:               icc cmain.c asm1.obj asmtools.lib          This hypothetical invocation compiles cmain.c and then links it with     asm1.obj (produced by MASM) and asmtools.lib (produced by TLIB).  Now     you can use any combination of 32-bit object and library files created     by MASM, TASM, LIB, or TLIB with Easy-OMF and C Code Builder object     and library files.  For an example of how easy it is to write MASM and     TASM modules that interface with C, see the examples in \masm6,     \masm5, and \tasmdemo on your distribution media.          ------------------------------------------------------     Recommendations for MASM and TASM Command-line Options     ------------------------------------------------------          The following tables show which MASM and TASM command-line options to     use and which to avoid when assembling modules that are linked to C     Code Builder applications.  You can use all other options as     necessary.                                          MASM 5.1 Options          Option  Recommendation   Comments          ------  --------------   --------          /MX     Recommended      Symbols in C modules are case                                   significant.          /ZD     Not recommended  Debug information is ignored if                                   present.          /ZI     Not recommended  Debug information is ignored if                                   present.                                       ML Options (MASM 6.0)          Option  Recommendation   Comments          ------  --------------   --------          /AT     Not recommended  The .com file format is not                                   appropriate for C Code Builder                                   applications.          /Bl     Not recommended  Use iCC to link.          /c      Recommended      Specify .obj files in the iCC                                   invocation.          /Cx     Recommended      Symbols in C modules are case                                   significant.          /F      Not recommended  Use the /s control to iCC to                                   control the stack size.          /Fb     Not recommended  Use the /e control to iCC to name                                   the .exe file.          /Fm     Not recommended  Use the /m control to iCC to                                   create a .map file.          /FPi    Not recommended  Use the /n control to iCC to bind                                   in the Intel387(TM) emulator.                                   (See pp. 19-20 in the reference                                   manual.)          /Zd     Not recommended  Debug information is ignored if                                   present.          /Zi     Not recommended  Debug information is ignored if                                   present.                                      TASM 2.0 and 2.5 Options          Option  Recommendation   Comments          ------  --------------   --------          /mx     Recommended      Symbols in C modules are case                                   significant.          /o      Not recommended  Overlay object code is not          /op                      appropriate for C Code Builder                                   applications.          /q      Recommended      Comment records are not needed.          /zd     Not recommended  Debug information is ignored if                                   present.          /zi     Not recommended  Debug information is ignored if                                   present.               ---------     Debugging     ---------          The C Code Builder debugger can debug programs that contain modules     assembled with MASM or TASM as follows:               Public symbols declared in assembler modules are visible to the          debugger, but their types are unknown.                    You can set symbolic breakpoints on public assembler functions.                    To display or modify public assembler data, you must specify the          type; see pages 208-211 in the Intel 386/486 C Code Builder(TM)          Kit Reference Manual.                    The debugger does not support source display of assembler          modules.                    Using assembler command-line options to include debug information          has no effect on the Code Builder debugger.          ------------------     MASM and TASM Tips     ------------------          The following tips assume familiarity with features of the Microsoft     and Borland assemblers.          To improve linker performance, you can convert non-Intel libraries to     Intel library format by using the add command in the C Code Builder     librarian; see page 104 in the Intel 386/486 C Code Builder(TM) Kit     User's Guide for an example.          See the on-line demo programs in \masm6, \masm5, or \tasmdemo for     examples of the following items.               If you use the simplified segment directives (e.g., .DATA or .CODE)     with MASM or TASM, be certain to include the .386 directive in every     module before the .model small directive to ensure creation of 32-bit     data and code segments.  Likewise, if you use the SEGMENT directive,     specify USE32.  You can name segments as you wish, but you must     identify segments containing code by specifying a class name of     'CODE'.               If you use the simplified function directives (such as MASM 6.0's     INVOKE, PROC, PROTO, or LOCAL), you must use the .model small     directive.  As long as you use the .386 directive, your segments are     not restricted to 64K bytes.                    If you use the simplified function directives with MASM and your     assembler modules interface to C code, you must also use .model     small,c.  Note that the assembler automatically appends an underscore     (_) to the beginning of all PUBLIC or EXTERNAL procedure or variable     names; you must add an underscore to all such names wherever they     appear in your C code.               If you are using MASM 6.0, do not use "C langtype" with the PROTO and     INVOKE directives when calling a C Code Builder standard library     routine.  MASM 6.0 automatically prefixes an underscore (_) to the     identifiers listed with PROTO and INVOKE.  Instead, use the "SYSCALL     langtype," which pushes arguments in the same order as "C langtype"     but requires that you clean up the stack after the INVOKE.  For     example:               chdir  PROTO  C dirname:PTR          ; do not use "PROTO C ..."          ...                                  ;  like this          INVOKE chdir, OFFSET newdir                    chdir  PROTO  SYSCALL dirname:PTR    ; instead, use "PROTO          ...                                  ;  SYSCALL ..." like this          INVOKE chdir, OFFSET newdir          add    sp,4                          ; and clean up the stack               If you are porting assembly code from another assembler to MASM or     TASM and are using segment directives, you must not use the access     attribute, (e.g., ER).  In the following example the 'CODE' class name     is required if the segment name is not CODE:               Other assembler: CODE SEGMENT ER PUBLIC USE32               MASM:            CODE SEGMENT PUBLIC USE32 'CODE'               To ensure 32-bit instructions, do not use the PROC directive to define     arguments using TASM 2.0 or 2.5.  For example:               foo  PROC  C  arg1:WORD        ; do not define arguments here               mov   eax,arg1               ...          foo  ENDP                    foo  PROC                      ; instead,          arg1 EQU   [ebp+8]             ; define arguments here               enter 0,0               mov   eax,arg1               ...               leave          foo  ENDP     ______________________________________________________________________          Document number 483823.          Copyright 1991, Intel Corporation.  All rights reserved.                    Intel387 and Code Builder are trademarks of Intel Corporation.          Microsoft is a registered trademark of Microsoft Corporation.          Borland is a registered trademark of Borland International, Inc.          Easy-OMF is a trademark of Phar Lap Software, Inc.     