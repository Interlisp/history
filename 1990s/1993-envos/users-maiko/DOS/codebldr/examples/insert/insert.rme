                      Intel 386/486 C Code Builder(TM) Kit            Copyright 1991 Intel Corporation.  All Rights Reserved.                       Source Debugging Utility Example        This source is intended for your benefit in developing        applications using the Intel 386/486 C Code Builder(TM) Kit.        Intel hereby grants you permission to modify and incorporate it        as needed.        The files included are as follows:        INSERT.RME    - Insert utility information file.        MAKEFILE      - Insert utility make file.        NEWMAKE.INI   - A modified 'make.ini' file to be used                        with the Insert utility.        CONFIG.H      - Definitions used in source files.                      - Insert utility source files:                        IM.C       IS.C       DB.C                        ERROR.C    CONSOLE.C        DEMO.BAT      - Insert demonstration script.        DEMO.DAT      - Insert demonstration source file.        --------------------------------------------------------------                Insert compilation error messages into sources        This directory contains the sources to IM ("Insert Messages"),        a program that helps correlate compilation error messages with        source text.  IM is used as follows:        1. Compile modified source files and save any error messages        to a file.                              RSE MAKE > MAKE.MSG        2. Insert the messages into the appropriate source files and        build a script to invoke an editor on each effected source        file.                       IM EDITOR < MAKE.MSG > VISIT.BAT        3. Invoke the script to correct the sources that have errors.                                     VISIT        4. Repeat from step 1.        --------------------------------------------------------------        RSE is "Redirect Standard Error", a Code Builder tool.  It runs        a command after making stderr and stdout be the same file        handle.  If you use a different shell than COMMAND.COM, you may        want to use another technique to save stderr in a file.        The script that IM builds has this form:            EDITOR SOURCE1 SOURCE2 SOURCE3 ...        The inserted messages have this form:            %% line LINE-NUMBER: MESSAGE-TEXT        For example:            %% line 3: undefined identifier: x        The "%%" is easy to find and remove with an editor.  The        inserted message follows the referenced line in the source.        You may wish to define an editor keystroke to move to the next        "%%" line and a keystroke to remove all such lines.        For each source file that IM modifies, a copy of the original        is kept in a file with the same name but with an extension of        ".@@@".  For example, if FOO.C is modified, a copy of the        original is kept in FOO.@@@.        IM echoes the names of the modified sources to stdout.        IM uses #.TMP as a temporary file where # is replaced with a        number based on where IM is loaded into memory.        --------------------------------------------------------------        Note, that since all MAKE messages are redirected to a file,        progress of the MAKE can be difficult to determine.  An IM        companion program, CONSOLE, can be used to echo messages to the        console.  The interface to CONSOLE is:            CONSOLE "MESSAGE" ...        The message is written to the console device just as with ECHO,        if stdout has been redirected to a file.  If stdout has not        been redirected, CONSOLE does nothing.  CONSOLE is used as        follows in a MAKEFILE (such as MAKE.INI):            .c.obj :                @console $(CC) $(CFLAGS) -c $<                $(CC) $(CFLAGS) -c $<        This defines a rule to automatically compile .c files into .obj        files.  Before the compilation, CONSOLE will echo the compile        command to the console if MAKE's stdout is redirected.  A        similar rule for links of .obj's into .exe's is useful.        The file NEWMAKE.INI is a modification of the standard MAKE        initialization file, \CODEBLDR\BIN\MAKE.INI.  NEWMAKE.INI adds        @CONSOLE (as described above) to the builtin rules.  To install        NEWMAKE.INI, execute            COPY NEWMAKE.INI \CODEBLDR\BIN\MAKE.INI        If the environment variable COLOR is defined and not null,        CONSOLE uses the value of the variable as a palette index to        set the text background for the message display.  For example,            set COLOR=1        will cause CONSOLE's output to be in blue.  The text background        is not reset; modify CONSOLE.C to change behavior.        CONSOLE uses _outtext for output, so special characters (such        as tab) are not interpreted.        --------------------------------------------------------------        To build IM and CONSOLE, invoke MAKE:            MAKE        To change IM capacity constants and other configuration        parameters, change CONFIG.H and then invoke MAKE.  In        particular, if you don't want .@@@ files to be kept, change        SHOULD_SAVE_OBSOLETE to 0.  If you don't like "%%", change        ERROR_INSERT_TEMPLATE.  To extend IM to understand more error        message formats, change the file IS.C.        To try IM, edit DEMO.BAT to use your editor and then run        DEMO.BAT:            DEMO        DEMO builds a little program with errors, compiles the program,        invokes IM, and then invokes the script IM built (steps 1-3        above).        --------------------------------------------------------------