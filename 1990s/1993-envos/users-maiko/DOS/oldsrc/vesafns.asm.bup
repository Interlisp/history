.386PDATA SEGMENT USE32;;; ******************************;;; DspInterfaceRec is the record that represents the;;; display interface. ;;;  **IT IS IMPORTANT THAT YOU KEEP THIS RECORD IN SYNC;;; WITH THE DspInterfaceRec DEFINED IN C. ;;; ******************************	DspInterfaceRec		STRUC	enter_display		DD	?	exit_display		DD	?	before_raid		DD	?	after_raid		DD	?	drawline		DD	?	cleardisplay		DD	?	get_color_map_entry	DD	?	set_color_map_entry	DD	?	available_colors	DD	?	possible_colors		DD	?	switch_colormode	DD	?;;	get_color_map		DD	?;;	set_color_map		DD	?;;	make_color_map		DD	?	medley_to_native_bm	DD	?	native_to_mdley_bm	DD	?	bitblit_to_screen	DD	?	bitblit_from_screen	DD	?	scroll_region		DD	?	displaywidth		DD	?	displayheight		DD	?	bitsperpixel		DD	?	colors			DD	?	oldstate		DD	?	graphicsstate		DD	?	numberofbanks		DD	?	DspInterfaceRec ENDS	EXTRN DisplayWidth8: NEAR  ;; DisplayWidth in bytesDATA ENDSCODE SEGMENT USE32ASSUME DS:DATAASSUME CS:CODEDOBANK	MACRO	NUMBER	push	eax	mov	 ax, NUMBER	mov	 dx, 3cdh	out	 dx, ax	pop	eax	ENDMRET2C	MACRO	VALUE	mov	eax,VALUE	leave        ret	ENDM;; **************************************************;;		 D o s c l e a r b a n k s;; arg1: dsp	(pointer to dsp struct);;;; Fill banks with 0.;; **************************************************dsp		=	 8bank		=	-8PUBLIC DosclearbanksDosclearbanks	PROC NEAR	enter	16,0	mov	DWORD PTR bank[ebp], 0	mov	ebx, dsp[ebp]	mov	ecx, [ebx.numberofbanks]clrbnk:	push	ecx	DOBANK	bank[ebp]	add	DWORD PTR bank[ebp], 1	mov	eax, 0	mov	edi, 0a0000h	mov	ecx, 0ffffh	rep stosd	pop	ecx	loop	clrbnk	RET2C	0Dosclearbanks ENDP;; **************************************************;; **************************************************;;                  D o s b b t 1;; arg1: dsp	(pointer to a dsp struct);; arg2: buffer (pointer to array of word);; arg3: left   (dword) (in pixels);; arg4: top    (dword) (in pixels);; arg5: swidth (dword) (in pixels);; arg6: height (dword) (in pixels);;;; Bitblits the image stored in buffer to the display;; buffer. Assumption: buffer and the displaybuffer;; are equaly large and thus left, top etc. pertains;; to the same offsets.;;;; PLANAR or PACKED ???;; 1 bit to 1 bit ???;;;; C-CALL: void Dosbbt1( ... );;; RETURN: 0 in eax. should be ignored...;; **************************************************dsp		=	 8buffer		=	12left		=	16top		=	20swidth		=	24height		=	28left32		=	 -8width32		=	-12PUBLIC Dosbbt1Dosbbt1	PROC NEAR	;;; *****************************	;;; Save the volatile environment	;;; *****************************	enter	16,0	;;; ******************************	;;; Adjust width and left to be on even DWORD boundrys.	;;; Right boundry adjusted to even Dword boundrys (since	;;; we dma move dwords) and expressed in byte adresses	;;; (since the arguments are in pixel adresses)	;;; Same reasoning goes for the left boundry.	;;; Caveat! Since the DMA transfer is done in dword	;;; chunks the width has to be expressed in dwords	;;; ******************************	;; Right boundry	mov	eax, left[ebp]	add	eax, swidth[ebp]        add     eax, 1fh	sar	eax, 5		; Get rid of the low 5 bits	sal	eax, 2		; Adjust up to byte adresses	push	eax	;; Left boundry	mov	eax, left[ebp]	sar	eax, 5		; Get rid of the low 5 bits	sal	eax, 2		; Adjust up to byte adresses	mov	DWORD PTR left32[ebp], eax	;; width32 = TOS ( = right32 ) - left32	pop	ebx	sub	ebx, eax	sar	ebx, 2	mov	DWORD PTR width32[ebp], ebx	;;; ******************************	;;; ******************************	;;; Calculate the offset into the buffers	;;; The buffers are assumed to have the	;;; offset in common.	;;; ******************************	mov	eax, DWORD PTR DisplayWidth8	mov	ebx, top[ebp]	imul	eax, ebx	add	eax, left32[ebp]	;;; Preamble to banktransfer loop	mov	esi, buffer[ebp]; src into ESI	add	esi, eax	; adjust for offset	mov	edi, 0a0000h	; dest into EDI	add	edi, eax	; adjust for offset	mov	ecx, height[ebp]; line counter	;; push the results nuln:	push	ecx	; push the column counter	push	esi	push	edi	mov	ecx, width32[ebp]	; swidth into ecx	and	ecx, 0ffffh	; adjust ecx to the bank width	;; write one line to the display bank   @50: ;; The actual byte swapping	lodsd           ; Load eax and increment esi        xchg    ah,al   ; Swap low byte        rol     eax,10h ; Get the high byte into position        xchg    ah,al   ; Swap again        not     eax     ; In medley 1=black 0=white, Hence invert.	stosd           ; Store eax and increment edi        loop    @50	;; Get the src and dest for the start of the line.	pop	edi	pop	esi	;; calc vals for src and dest for the next line.	add	edi, DWORD PTR DisplayWidth8	; dest = edi + displaywidth	add	esi, DWORD PTR DisplayWidth8	; src  = esi + swidth	pop	ecx	;; get the row counter	loop	nuln	;;; *****************************	;;; Provide return value	;;; *****************************	mov	eax,0	;;; *****************************	;;; Restore the stack and return	;;; *****************************	leave        retDosbbt1 ENDP;; **************************************************;; **************************************************;;                  D o s b b t 2;; arg1: dsp	(pointer to a dsp struct);; arg2: buffer (pointer to array of word);; arg3: left   (dword) (in pixels);; arg4: top    (dword) (in pixels);; arg5: swidth (dword) (in pixels);; arg6: height (dword) (in pixels);;;; Bitblits the image stored in buffer to the display;; buffer. Assumption: buffer and the displaybuffer;; are equaly large and thus left, top etc. pertains;; to the same offsets.;;;; This version of dosbbt can handle two memory;; banks. The algorithm works roughly like this:;; start: calculate # of lines from start to bankend.;;        Transfer that many lines.;;        If (more lines to transfer) goto start.;;;; The variable banklines tells us how many lines;; there is to a bank.;;;; C-CALL: void Dosbbt2( ... );;; RETURN: 0 in eax. should be ignored...;; **************************************************dsp		=	 8buffer		=	12left		=	16top		=	20swidth		=	24height		=	28left32		=	 -8width32		=	-12endptr		=	-16desttop		=	-20PUBLIC Dosbbt2Dosbbt2	PROC NEAR	;;; *****************************	;;; Save the volatile environment	;;; *****************************	enter	24,0	;;; ******************************	;;; Adjust width and left to be on even DWORD boundrys.	;;; Right boundry adjusted to even Dword boundrys (since	;;; we dma move dwords) and expressed in byte adresses	;;; (since the arguments are in pixel adresses)	;;; Same reasoning goes for the left boundry.	;;; Caveat! Since the DMA transfer is done in dword	;;; chunks the width has to be expressed in dwords	;;; ******************************	;; Right boundry	mov	eax, left[ebp]	add	eax, swidth[ebp]        add     eax, 1fh	sar	eax, 5		; Get rid of the low 5 bits	sal	eax, 2		; Adjust up to byte adresses	push	eax	;; Left boundry	mov	eax, left[ebp]	sar	eax, 5		; Get rid of the low 5 bits	sal	eax, 2		; Adjust up to byte adresses	mov	DWORD PTR left32[ebp], eax	;; width32 = TOS ( = right32 ) - left32	pop	ebx	sub	ebx, eax	sar	ebx, 2	mov	DWORD PTR width32[ebp], ebx	;; start src_pointer into esi.	mov	eax, DWORD PTR DisplayWidth8	mov	ebx, top[ebp]	imul	eax, ebx	add	eax, left32[ebp]	mov	esi, buffer[ebp]; src into ESI	add	esi, eax	; start of src now in esi.	;; the current height into ecx	mov	ecx, height[ebp]; line counter	;; initialize desttop	mov	eax, top[ebp]	mov	desttop[ebp], eax	;; the end pointer = top + height	mov	eax, top[ebp]	add	eax, height[ebp]	mov	endptr[ebp], eax	;;; ******************************	;;; Find out if top  is in bank 1	;;; If so just blit to bank 1	;;; ******************************	mov	eax, top[ebp]	cmp	eax, 511	jg	btmbnk	;;; ******************************	;;; Find out if top+height is in bank 0	;;; If so just blit to bank 0	;;; ******************************	mov	eax, endptr[ebp]	cmp	eax, 511	jle	topbnk	;;; ******************************	;;; We have a straddler. Blit top to	;;; bank 0 and bottom to bank 1	;;; ******************************sdlbnk:	DOBANK 0	mov	ecx, 512	sub	ecx, desttop[ebp]	;height = 511 - top	call	outbnk	DOBANK 1	mov	DWORD PTR desttop[ebp], 0	mov	ecx, endptr[ebp]	sub	ecx, 511	; height = end - 511	call	outbnk	DOBANK 0	RET2C	0btmbnk:	DOBANK 1	sub	DWORD PTR desttop[ebp], 512	call	outbnk	DOBANK 0	RET2C	0topbnk:	DOBANK 0	call	outbnk	RET2C	0	;;; ******************************	;;; Calculate dest_offset	;;; ******************************outbnk:	mov	eax, desttop[ebp]	imul	eax, DWORD PTR DisplayWidth8	add	eax, left32[ebp]	mov	edi, 0a0000h	; dest into EDI	add	edi, eax	; adjust for offset	;; When we enter here src pointer should be in	;; esi, destpointer should be in edi and the	;; height should be in ecx nln:	push	ecx	; push the row counter	push	esi	push	edi	mov	ecx, width32[ebp]	; swidth into ecx	and	ecx, 0ffffh	; adjust ecx to the bank width	;; write one line to the display bank   @5:  ;; The actual byte swapping	lodsd           ; Load eax and increment esi        xchg    ah,al   ; Swap low byte        rol     eax,10h ; Get the high byte into position        xchg    ah,al   ; Swap again        not     eax     ; In medley 1=black 0=white, Hence invert.	stosd           ; Store eax and increment edi        loop    @5	;; Get the src and dest for the start of the line.	pop	edi	pop	esi	;; calc vals for src and dest for the next line.	add	edi, DWORD PTR DisplayWidth8	; dest = edi + displaywidth	add	esi, DWORD PTR DisplayWidth8	; src  = esi + swidth	pop	ecx	;; get the row counter	loop	nln	retDosbbt2 ENDPCODE ENDSEND