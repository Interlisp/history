.386.MODEL hugeNAME dosbbt	DATA SEGMENT	PUBLIC	EXTRN DisplayHeight: NEAR	EXTRN DisplayWidth: NEAR	ORG 00H	PUBLIC tmpbuffer	tmpbuffer               DB 4 DUP(00H)	DATA ENDS	CODE SEGMENT	PUBLIC       EXTRN _putimage_w: NEAR                        PUBLIC DOSbitbliORG 00HBIT_SRC		EQU	000000014hSRC_LEFT	EQU	000000018hSRC_TOP		EQU	00000001chSRC_WIDTH	EQU	000000020hSRC_HEIGHT	EQU	000000024hSRC_BOTTOM	EQU	0fffffffch;source		EQU	0fffffff8hSRCRIGHT32	EQU	0fffffff4h;		EQU	0fffffff0hSRCLEFT32	EQU	0ffffffechSRCWIDTH32_3	EQU	0ffffffe8hSRCWIDTH32	EQU	0ffffffe4hDSPWIDTH32	EQU	0ffffffe0h                                                   ; Statement # 1081ASSUME DS:DATAASSUME CS:CODE DOSbitbli      proc near      ;; *****************************      ;; Save the volatile environment      ;; *****************************        push    ebx        push    esi        push    edi        push    ebp        mov     ebp,esp        sub     esp,20h        ;;   SRCRIGHT32 = (SRC_LEFT + source_width + 31)/32        mov     eax,DWORD PTR [ebp]+SRC_WIDTH        add     eax,DWORD PTR [ebp]+SRC_LEFT        add     eax,1fh        sar     eax,5        mov     DWORD PTR [ebp]+SRCRIGHT32,eax        ;; SRC_LEFT /= 32        mov     eax,DWORD PTR [ebp]+SRC_LEFT        sar     eax,5        mov     DWORD PTR [ebp]+SRCLEFT32,eax                ;; SRCWIDTH32 = SRCRIGHT32 - SRCLEFT32        mov     eax,DWORD PTR [ebp]+SRCRIGHT32        sub     eax,DWORD PTR [ebp]+SRCLEFT32        mov     DWORD PTR [ebp]+SRCWIDTH32,eax	;; SRCWIDTH32_3 = SRCWIDTH32 * 3	mov     ebx,3        mul     ebx        mov     DWORD PTR [ebp]+SRCWIDTH32_3,eax	;; DSPWIDTH32 = DisplayWidth        mov     eax,DWORD PTR DisplayWidth        sar     eax,5        mov     DWORD PTR [ebp]+DSPWIDTH32,eax        ;; source_bottom = source_top + source_height        mov     eax,DWORD PTR [ebp]+SRC_TOP        add     eax,DWORD PTR [ebp]+SRC_HEIGHT        mov     DWORD PTR [ebp]+SRC_BOTTOM,eax        ;; tmpbuffer[1w] = source_height; tmpbuffer[2w] = source_width	;; After this poin edi is only updated indirect.        mov     edi,DWORD PTR tmpbuffer        mov     eax,DWORD PTR [ebp]+SRCWIDTH32	sal	eax,5	stosw        mov     eax,DWORD PTR [ebp]+SRC_HEIGHT	stosw	;; ebx = starting value for esi (to save for loop bottom)	;; edx = dspwidth in bytes, to move esi to new start value	mov	eax, DWORD PTR SRC_TOP[ebp]	mul	DWORD PTR DSPWIDTH32[ebp]	add	eax, DWORD PTR SRCLEFT32[ebp]	sal	eax, 2	add	eax, DWORD PTR BIT_SRC[ebp]	mov	esi, eax	mov	ebx,eax	mov	edx, DWORD PTR DSPWIDTH32[ebp]	sal	edx, 2	;; End of the initialization. Start the loops.        ;; START outer loop        ;; Preamble of the outer loop        mov     ecx,DWORD PTR [ebp]+SRC_HEIGHT   @40: push    ecx     ; For use later in the loop        ;; START of the outer loop        ;; START innermost loop        ;; Preamble to the innermost loop        push    edi     ; Save edi for later blockmove	;; The source pointer turns out to be	;; (SRC_BOTTOM - SRC_HEIGHT)*DSPWIDTH32 + SRCLEFT32	;; where SRC_HEIGHT is stored in ecx;       mov     eax,DWORD PTR [ebp]+SRC_BOTTOM;	sub     eax,ecx;       mov     ebx,DWORD PTR [ebp]+DSPWIDTH32;	mul     ebx;       add     eax,DWORD PTR [ebp]+SRCLEFT32;	mov     esi,eax        ;; load the number of times this has to be done (ie. SRCWIDTH32)	mov     ecx,DWORD PTR [ebp]+SRCWIDTH32   @50: ;; The actual byte swapping	lodsd           ; Load eax and increment esi        xchg    ah,al   ; Swap low byte        rol     eax,10h ; Get the high byte into position        xchg    ah,al   ; Swap again        not     eax     ; In medley 1=black 0=white, Hence invert.	stosd           ; Store eax and increment edi        loop    @50        ;; Postamble to the inner loop        ;; do a block move of memory        pop     esi     ; Retrieve the old edi start of memoryblock                        ; edi is already pointing where we want it.        mov     ecx,DWORD PTR [ebp]+SRCWIDTH32_3        rep movsd      ; Go do it all        ;; END innermost loop        ;; Resume outer loop        pop     ecx     ; Restore the outer (SRC_HEIGHT) counter.	add	ebx,edx	mov	esi,ebx        loop    @40        ;; END outer loop        ;; ***********        ;; PUTIMAGE_W        ;; ***********        push    3h        push    DWORD PTR tmpbuffer; 2        fild    DWORD PTR [ebp]+SRC_TOP        sub     esp,8h        fstp    QWORD PTR [ebp-30h]        mov     eax,DWORD PTR [ebp]+SRCLEFT32        sal     eax,5h        push    eax     ; 5        fild    DWORD PTR [ebp-304]        pop     eax     ; 5        sub     esp,8h        fstp    QWORD PTR [ebp-38h]        call    _putimage_w        add     esp,18h        ;; Restore volitile environment.        leave        pop     edi        pop     esi        pop     ebx        ret                           DOSbitbli      endp	CODE ENDS.STACK 88END