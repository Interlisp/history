h56797s 00004/00000/00266d D 1.6 88/04/22 19:24:24 krivacic 6 5c ***** FILE OBSOLETED *****es 00027/00007/00239d D 1.5 88/03/29 18:48:43 krivacic 5 4c putbase, putbaseptres 00000/00002/00246d D 1.4 88/03/29 14:40:05 krivacic 4 3c turn apply back ones 00001/00001/00247d D 1.3 88/03/28 15:21:30 krivacic 3 2c remove apply from inlinees 00101/00114/00147d D 1.2 88/03/28 11:58:21 krivacic 2 1c comment out checkapplyes 00261/00000/00000d D 1.1 88/03/23 10:10:30 krivacic 1 0c date and time created 88/03/23 10:10:30 by krivaciceuUtTI 1/* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */D 2/* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */E 2/* 	op_inlinedefsC.h *//* 	Bob Krivacic 2/23/88 */I 6*************************************************************/* ******** THIS FILE IS OBSOLETE DO NOT USE ************ */*************************************************************E 6/* 		These are the Macros Used to generate inline c code.	These are the goto ni definitions of the opcodes.*/D 2#undef ADDBASE#undef LOLOC#undef HILOC#undef VAG2E 2I 2E 2#undef	IVARMACRO#undef	PVARMACRO#undef	FVARMACRO#undef	PVARSETMACRO#undef	PVARSETPOPMACRO#undef	PUSHATOMD 2#undef	JUMPMACRO#undef	FJUMPMACRO#undef	TJUMPMACRO#undef GETBASE_N#undef GETBASEPTR_N#undef PVARX#undef PVARX_#undef IVARX#undef IVARX_#undef GVAR#undef COPY#undef SWAP		#undef FN0#undef FN1#undef FN2#undef FN3#undef FN4#undef FNX#undef APPLY#undef CHECKAPPLY#undef RETURN#undef ATOMCELL_N#undef BLT#undef PUTBASEBYTE#undef PUTBASEPTR_N#undef PUTBASE_N#undef DIFFERENCE#undef PLUS	#undef	GREATERP#undef IPLUS_N#undef QUOTIENT  #undef TIMES2	 #undef IREMAINDER #undef LOGOR #undef LOGAND#undef LOGXOR#undef LRSH1#undef LRSH8#undef LLSH1#undef LLSH8							#undef ADDBASE#undef LOLOC#undef HILOC#undef VAG2#undef OPCAR#undef OPCDR#undef RPLACA#undef RPLACD#undef LISTP#undef NTYPEX#undef TYPEP#undef DTEST#undef BIND#undef UNBIND	#undef DUNBIND	#undef RPLPTR#undef GCREF#undef ASSOC#undef CONS#undef DBX#undef FMEMB	#undef FINDKEY	#undef CREATECELL#undef BIN#undef RPLCONS#undef LISTGET#undef EVAL#undef STKSCAN#undef RECLAIMCELL#undef GCSCAN1#undef GCSCAN2#undef CONTEXTSWITCH#undef UBFLOAT3#undef TYPEMASK#undef EQLOP#undef DRAWLINE#undef STOREN#undef COPYN	#undef GVAR_#undef FVARX#undef FVARX_E 2#define	IVARMACRO(x)	{PUSH(GetLongWord((LispPTR *)IVAR + x )); nextop1;}#define	PVARMACRO(x)	{PUSH(GetLongWord((LispPTR *)PVAR + x )); nextop1;}#define	FVARMACRO(x)	{EXT; OP_fvarn(); NRET; }#define	PVARSETMACRO(x)	{*((LispPTR *)PVAR + x) = TOPOFSTACK; nextop1;}#define	PVARSETPOPMACRO(x) {*((LispPTR *)PVAR + x) = TOPOFSTACK; POP; nextop1;}#define	PUSHATOM(x)	{PUSH(x); nextop1;}I 2#undef	JUMPMACROE 2#define	JUMPMACRO(x)	{CHECK_INTERRUPT;				\			PCMAC += x; nextop0;				\			}I 2#undef	FJUMPMACROE 2#define	FJUMPMACRO(x)	{CHECK_INTERRUPT;				\			if(TOPOFSTACK != 0) {goto PopNextop1 ; }	\			{POP; PCMAC += x; nextop0;}			\			}I 2#undef	TJUMPMACROE 2#define	TJUMPMACRO(x)	{CHECK_INTERRUPT;				\			if(TOPOFSTACK == 0) {goto PopNextop1 ; }	\			{POP; PCMAC += x; nextop0;}			\			}I 2#undef GETBASE_NE 2#define GETBASE_N(n)	{ 						\		TOPOFSTACK = 						\			(S_POSITIVE | *((DLword *)			\			Addr68k_from_LADDR((0xFFFFFF & TOPOFSTACK) + n)));\		nextop2;						\		}I 2#undef GETBASEPTR_NE 2#define GETBASEPTR_N(n) {						\		TOPOFSTACK = 						\			(0xFFFFFF & *((LispPTR *)			\			Addr68k_from_LADDR((0xFFFFFF & TOPOFSTACK) + n)));\		nextop2;						\		}I 5#undef PUTBASEBYTE#undef PUTBASEPTR_N#undef PUTBASE_N#define PUTBASEBYTE	{ EXT; OP_putbasebyte(); NRET; }#define PUTBASEPTR_N(n)							\	{ register int base;						\	  if (GetHiWord(TOPOFSTACK) != (S_POSITIVE >> 16))		\		goto op_ufn;						\	  base = 0xffffff & POP_TOS_1;					\	  *((LispPTR *)Addr68k_from_LADDR(base + n)) = 0xffffff & TOPOFSTACK;\	  TOPOFSTACK = base;						\	  nextop2;							\	}#define PUTBASE_N(n)							\	{ register int base;						\	  if (GetHiWord(TOPOFSTACK) != (S_POSITIVE >> 16))		\		goto op_ufn;						\	  base = 0xffffff & POP_TOS_1;					\	  *((DLword *)Addr68k_from_LADDR(base + n)) = GetLoWord(TOPOFSTACK);\	  TOPOFSTACK = base;						\	  nextop2;							\	}E 5I 2#undef PVARX#undef PVARX_#undef IVARX#undef IVARX_#undef GVARE 2#define PVARX(x)	{ PUSH(GetLongWord((DLword * )PVAR + x)); nextop2; }#define PVARX_(x)	{ *((LispPTR *)((DLword * )PVAR+x))=TOPOFSTACK; nextop2;}#define IVARX(x)	{ PUSH(GetLongWord((DLword * )IVAR + x)); nextop2; }#define IVARX_(x)	{ *((LispPTR *)((DLword * )IVAR+x))=TOPOFSTACK; nextop2;}#define GVAR(x)		{ PUSH(GetLongWord(Valspace + (x<<1))); nextop3; }I 2#undef COPYE 2#define COPY		{ HARD_PUSH(TOPOFSTACK); nextop1; }I 2#undef SWAP		E 2#define SWAP		{ register LispPTR temp;			\		 	 temp = GET_TOS_1;				\			 GET_TOS_1 = TOPOFSTACK;			\		 	 TOPOFSTACK = temp;				\			 nextop1;					\			}I 2#undef FN0#undef FN1#undef FN2#undef FN3#undef FN4#undef FNX#undef RETURN#define FN0		{CHECK_INTERRUPT; OPFN(0); nextop0; }#define FN1		{CHECK_INTERRUPT; OPFN(1); nextop0; }#define FN2		{CHECK_INTERRUPT; OPFN(2); nextop0; }#define FN3		{CHECK_INTERRUPT; OPFN(3); nextop0; }#define FN4		{CHECK_INTERRUPT; OPFN(4); nextop0; }#define FNX		{CHECK_INTERRUPT; OPFNX;   nextop0; }#define RETURN		{OPRETURN; nextop0; }I 3D 4/*E 4E 3#undef APPLY#define APPLY		{CHECK_INTERRUPT; OPAPPLY; }D 3/*E 3#undef CHECKAPPLY#define CHECKAPPLY	{OPCHECKAPPLY; nextop1; }D 4*/E 4#undef ADDBASEE 2#define ADDBASE { EXT; OP_addbase(); NRET; }I 2#undef LOLOCE 2#define LOLOC	{ EXT; OP_loloc(); NRET; }I 2#undef HILOCE 2#define HILOC	{ EXT; OP_hiloc(); NRET; }I 2#undef VAG2E 2#define VAG2	{ EXT; OP_vag2(); NRET; }I 2#undef OPCAR#undef OPCDR#undef RPLACA#undef RPLACDE 2#define OPCAR	{ EXT; OP_car(); NRET; }#define OPCDR	{ EXT; OP_cdr(); NRET; }#define RPLACA	{ EXT; OP_rplaca(); NRET; }#define RPLACD	{ EXT; OP_rplacd(); NRET; }I 2#undef LISTP#undef NTYPEX#undef TYPEP#undef DTESTE 2#define LISTP	{ EXT; OP_listp(); NRET; }#define NTYPEX	{ EXT; OP_ntypex(); NRET; }#define TYPEP	{ EXT; OP_typep(); NRET; }#define DTEST	{ EXT; OP_dtest(); NRET; }I 2#undef ATOMCELL_N#undef BLTD 5#undef PUTBASEBYTE#undef PUTBASEPTR_N#undef PUTBASE_NE 5E 2#define ATOMCELL_N(n)	{ EXT; OP_atomcellN(); NRET; }#define BLT		{ EXT; OP_blt(); NRET; }D 5#define PUTBASEBYTE	{ EXT; OP_putbasebyte(); NRET; }#define PUTBASEPTR_N(n)	{ EXT; OP_putbaseptrn(); NRET; }#define PUTBASE_N(n)	{ EXT; OP_putbasen(); NRET; }E 5D 2#define FN0		{CHECK_INTERRUPT; OPFN(0); nextop0; }#define FN1		{CHECK_INTERRUPT; OPFN(1); nextop0; }#define FN2		{CHECK_INTERRUPT; OPFN(2); nextop0; }#define FN3		{CHECK_INTERRUPT; OPFN(3); nextop0; }#define FN4		{CHECK_INTERRUPT; OPFN(4); nextop0; }#define FNX		{CHECK_INTERRUPT; OPFNX;   nextop0; }#define APPLY		{CHECK_INTERRUPT; OPAPPLY; }#define CHECKAPPLY	{OPCHECKAPPLY; nextop1; }#define RETURN		{OPRETURN; nextop0; }E 2I 2#undef DIFFERENCE#undef PLUS	#undef	GREATERP#undef IPLUS_N#undef QUOTIENT  #undef TIMES2	 #undef IREMAINDER E 2#define DIFFERENCE	{ EXT; OP_difference(); NRET; }#define PLUS		{ EXT; OP_plus2(); NRET; }#define	GREATERP	{ EXT; OP_greaterp(); NRET; }#define IPLUS_N(n)	{ EXT; OP_iplusn(); NRET; }#define QUOTIENT 	{ EXT; OP_quot(); NRET; } #define TIMES2		{ EXT; OP_times2(); NRET; } #define IREMAINDER 	{ EXT; OP_remainder(); NRET; }I 2#undef LOGOR #undef LOGAND#undef LOGXORE 2#define LOGOR	{ EXT; OP_logor(); NRET; } #define LOGAND	{ EXT; OP_logand(); NRET; }#define LOGXOR	{ EXT; OP_logxor(); NRET; }I 2#undef LRSH1#undef LRSH8#undef LLSH1#undef LLSH8E 2#define LRSH1	{ EXT; OP_lrsh1(); NRET; }#define LRSH8	{ EXT; OP_lrsh8(); NRET; }#define LLSH1	{ EXT; OP_llsh1(); NRET; }#define LLSH8	{ EXT; OP_llsh8(); NRET; }I 2#undef ADDBASE#undef LOLOC#undef HILOC#undef VAG2E 2#define ADDBASE { EXT; OP_addbase(); NRET; }#define LOLOC	{ EXT; OP_loloc(); NRET; }#define HILOC	{ EXT; OP_hiloc(); NRET; }#define VAG2	{ EXT; OP_vag2(); NRET; }I 2#undef BIND#undef UNBIND	#undef DUNBIND	#undef RPLPTR#undef GCREF#undef ASSOCE 2#define BIND		{ EXT; OP_bind(); NRET; }#define UNBIND		{ EXT; OP_unbind(); NRET; }#define DUNBIND		{ EXT; OP_dunbind(); NRET; }D 5#define RPLPTR		{ EXT; OP_rplptr(); NRET; }E 5I 5#define RPLPTR(n)	{ EXT; OP_rplptr(); NRET; }E 5#define GCREF		{ EXT; OP_gcref(); NRET; }#define ASSOC		{ EXT; OP_assoc(); NRET; }I 2#undef CONS#undef DBX#undef FMEMB	#undef FINDKEY	#undef CREATECELL#undef BIN#undef RPLCONS#undef LISTGETE 2#define CONS		{ EXT; OP_cons(); NRET; }#define DBX		{ EXT; OP_dbx(); NRET; }#define FMEMB		{ EXT; OP_fmemb(); NRET; }#define FINDKEY		{ EXT; OP_findkey(); NRET; }#define CREATECELL	{ EXT; OP_createcell(); NRET; }#define BIN		{ EXT; OP_bin(); NRET; }#define RPLCONS		{ EXT; OP_rplcons(); NRET; }#define LISTGET		{ EXT; OP_listget(); NRET; }I 2#undef EVAL#undef STKSCAN#undef RECLAIMCELL#undef GCSCAN1#undef GCSCAN2#undef CONTEXTSWITCHE 2#define EVAL		{ EXT; OP_eval(); NRET; }#define STKSCAN		{ EXT; OP_stkscan(); NRET; }#define RECLAIMCELL	{ EXT; OP_reclaimcell(); NRET; }#define GCSCAN1		{ EXT; OP_gcscan1(); NRET; }#define GCSCAN2		{ EXT; OP_gcscan2(); NRET; }#define CONTEXTSWITCH	{ EXT; OP_contextsw(); NRET; }I 2#undef UBFLOAT3E 2#define UBFLOAT3(n)	{ EXT; OP_ubfloat3(); NRET; }I 2#undef TYPEMASKE 2#define TYPEMASK	{ EXT; OP_typemask(); NRET; }I 2#undef EQLOP#undef DRAWLINE#undef STOREN#undef COPYN	E 2#define EQLOP		{ EXT; OP_eqlop(); NRET; }#define DRAWLINE	{ EXT; OP_drawline(); NRET; }#define STOREN		{ EXT; OP_storen(); NRET; }#define COPYN		{ EXT; OP_copyn(); NRET; }I 2#undef GVAR_#undef FVARX#undef FVARX_E 2#define GVAR_(x)	{ EXT; OP_gvar_(); NRET; }#define FVARX(x)	{ EXT; OP_fvarn(); NRET; }#define FVARX_(x)	{ EXT; OP_fvar_(); NRET; }E 1