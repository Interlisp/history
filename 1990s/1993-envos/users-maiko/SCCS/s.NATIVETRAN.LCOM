h46111s 00246/00000/00000d D 1.1 88/05/04 15:28:09 krivacic 1 0c date and time created 88/05/04 15:28:09 by krivaciceuUtTI 1(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)
(FILECREATED " 4-May-88 14:24:21" ("compiled on " 
|{POGO:AISNORTH:XEROX}<DSUNUNIX>KRIVACIC>TRANSLATOR>NATIVETRAN.;310|) "28-Apr-88 04:48:39" |bcompl'd| 
|in| "Xerox Lisp 28-Apr-88 ..." |dated| "28-Apr-88 05:11:27")
(FILECREATED " 4-May-88 14:21:44" |{POGO:AISNORTH:XEROX}<DSUNUNIX>KRIVACIC>TRANSLATOR>NATIVETRAN.;310|
 120496 |changes| |to:| (FNS NATIVE ADD-FN-HEADER-INFO WRITE-INLINE-FILE FN-CALL-PARSER 
TRANSLATION-INIT CODEWALK2 STR-PARSER TOS-CHECK ADD-PUSH-OPERAND-LINE INLINE-EXPAND FIX-FILENAME 
SETUP-TRANSLATION-FNS CODEWALK1 ADD-ERROR-ENTRY BCE-PC CONST-PARSER SUBSTITUTE GET-INFO SET-INFO 
CONDITIONAL-PARSER ADD-INFO MAKE-TRANSLATION-ENTRY BIND-PARSER MAKE-NEW-CODE-BLOCK OPERAND-GET 
OPERAND-POP PUSH-ALL-OPERANDS) (VARS NATIVETRANCOMS) (RECORDS INFO-REC) |previous| |date:| 
"28-Apr-88 12:36:19" |{POGO:AISNORTH:XEROX}<DSUNUNIX>KRIVACIC>TRANSLATOR>NATIVETRAN.;275|)
BYTE-TO-NATIVE-TRANSLATE :D5
(P 2 \i P 0 |result| I 0 |function|) 4 |file-name| P 3 *TARGET-MACHINE.N* P 2 *TARGET-MACHINE* P 1 *SHOW-BYTECODES* P 0 *ENTRY-POINT-MAX* I 3 |keep-cr-eol| I 2 |set-native| I 1 |make-the-file| I 0 |fn| F 26 CODE-BASE F 27 EP) IZE*) Ó
	 *TARGET-MACHINE*) STACK* F 5 *IGNORE-JUMP*) ¿Ji@•CSREC I 0 TRANS-REC F 16 *ERROR-PC*) -j_¿A_¿Hl)ð“BCE :D5
(I 1 BYTE-REC I 0 PC F 0 *SHOW-BYTECODES*) -JUMP*)  6 *CODE-BASE*)  "fncall_$who(1, $pc)" 76 "fncall_$who(0, $pc)")
CHECKAPPLY-PARSER :D5
(P 0 |c-string| I 3 |optional-string| I 2 FN-NAME I 1 BYTE-REC I 0 TRANS-REC F 2 *PC-BUMP-SIZE* F 3 *EVAL-STACK* F 4 *CODE-BASE*) Ao@"" 28 "")
TOS-CHECK :D5
(P 0 |next-opcode| I 2 |match-string| I 1 BYTE-REC I 0 TRANS-REC F 1 *PC-BUMP-SIZE*) D-LINE :D5
(P 1 |pos| P 0 |error-return| I 2 |info-rec| I 1 |error-cases| I 0 |operand-string|) oDD-LF 107 ADD-LINE 100 ADD-LINE 93 ADD-LINE 86 ADD-LINE 79 ADD-LINE 72 ADD-LF 69 ADD-LINE 62 ADD-LINE 59 CONCAT 47 ADD-LF 44 ADD-LINE 37 ADD-LF 34 ADD-LINE 27 ADD-LF 24 ADD-LINE)
(130 |include-errors|)
( 524 "}" 508 "	PUSH(tempreg);" 499 "	PUSH(tempreg);" 477 "{register tempreg = 0x0ffffffff;" 464 ");" 453
 ", " 447 ", " 442 "framesetup(" 430 ";" 425 "IVAR = CSTKPTR - " 406 "PUSH(NIL_PTR);" 362 ";" 357 "goto pc_"
 352 "goto pc" 332 "POP;" 282 "}" 271 ";" 266 "goto pc_" 261 "goto pc" 246 "; i++) PUSH(NIL_PTR); " 241
 "for (i = (-entry_pc) & 0x7f; i<" 230 "; i--) POP; " 225 "for (i = (-entry_pc) & 0x7f; i > " 217 "{register int i;"
 196 "]);" 191 "asmgoto(entry_table[entry_pc+" 184 "switchlabel: " 174 "PVAR = (LispPTR *) PVar;" 167 "IVAR = (LispPTR *) IVar;"
 160 "CSTKPTR = (LispPTR *) CurrentStackPTR;" 150 "entrylabel: " 140 "entry_table_setup();" 121 "else return((int) entrylabel);"
 114 "if (entry_pc == 0x1000000) goto entrylabel;" 104 "register LispPTR TOS_CACHE;" 97 "register LispPTR *PVAR;"
 90 "register LispPTR *IVAR;" 83 "register LispPTR *CSTKPTR;" 76 "extern int entry_table[255];" 66 "{"
 56 "()" 51 "int " 41 "LispPTR T_NIL_VALUES[2] = {NIL_PTR, ATOM_T};" 31 "#define entry_pc	((int) PC)" 21
 "#include \"nativeincludes.h\"")
ADD-LINE :D5
(I 2 |pushall| I 1 |indent| I 0 |line| F 0 *CPROGRAM*) I 1 |info| I 0 \x F 0 *EVAL-STACK*) jhc´j-FILE :D5
(P 0 |cases| I 0 ERROR-PC-STREAM F 1 *ERROR-CASES*)  NIL 0 T T STR-PARSER) (IVARX_ "IVAR[$x/2] = $Tos " NIL 1 NIL NIL STR-PARSER) (PVAR "PVAR[$op<3>]" NIL 0 T T STR-PARSER) (PVAR_ "PVAR[$op<3>] = $Tos " NIL 1 NIL NIL STR-PARSER) (PVAR_^ "PVAR[$op<3>] = $(Tos) " NIL 1 NIL NIL STR-PARSER) (PVARX "PVAR[$x/2]" NIL 0 T T STR-PARSER) (PVARX_ "PVAR[$x/2] = $Tos " NIL 1 NIL NIL STR-PARSER) (GVAR_ "N_OP_gvar_($Tos, $x16)" NIL 1 NIL NIL STR-PARSER NIL NIL) (GVAR " (GetLongWord(Valspace + $x16<<1))" NIL 0 T T STR-PARSER NIL NIL) (FVAR "N_OP_fvarn($op<3><<1, $errorpc)" T 0 T NIL STR-PARSER NIL NIL) (FVARX "N_OP_fvarn($x, $errorpc)" T 0 T NIL STR-PARSER NIL NIL) (FVARX_ "N_OP_fvar_($(Tos), $x, $errorpc)" T 1 T NIL STR-PARSER NIL NIL) (* |;;| "Stack Operations") (COPY "COPY_TOP" NIL 1 T T STR-PARSER) (SWAP "{LispPTR temp = TOS; TOS = PREV_TOS; PREV_TOS = temp;}" NIL 2 T T SWAP-PARSER) (POP "$(Tos)" NIL 1 NIL NIL STR-PARSER) (POP.N "CSTKPTR = CSTKPTR - ($x)" T 0 NIL NIL STR-PARSER) (COPY.N " *(CSTKPTR - ($x/2 + 1))" T 0 T NIL STR-PARSER) (STORE.N " *(CSTKPTR - ($x/2 + 1)) = TOS" T 1 T NIL STR-PARSER) (FINDKEY "N_OP_findkey($(Tos), $x)" NIL 1 T T STR-PARSER NIL NIL) (BIND "CSTKPTR = (LispPTR *) N_OP_bind(CSTKPTR, $(Tos), $x, $x2) + 1" NIL 1 T T BIND-PARSER NIL NIL) (UNBIND "{register LispPTR SAVE_TOS = $(Tos); CSTKPTR = (LispPTR *) N_OP_unbind(CSTKPTR); PUSH(SAVE_TOS);}" NIL 0 T NIL BIND-PARSER NIL NIL) (DUNBIND "CSTKPTR = (LispPTR *) N_OP_dunbind(CSTKPTR, $Tos)" NIL 1 T NIL BIND-PARSER NIL NIL) (UNWIND "CSTKPTR = (LispPTR *) N_OP_unwind(CSTKPTR, TOS, $x, $errorpc)" T 1 T NIL STR-PARSER NIL NIL) (MYALINK " ((((NATIVE_CURRENTFX->alink) & 0xfffe) - FRAMESIZE) | S_POSITIVE)" NIL 0 T T STR-PARSER NIL NIL) (ARG0 "N_OP_arg0($(Tos), $errorpc)" T 0 T NIL STR-PARSER NIL NIL) (MYARGCOUNT "MYARGCOUNT" T 0 NIL NIL STR-PARSER NIL NIL) (STKSCAN "N_OP_stkscan($(Tos), $errorpc)" T 1 T NIL STR-PARSER) (* |;;| "Arithmetic Operations") (DIFFERENCE "N_OP_difference($(Tos-1), $(Tos), $pc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("DIFFERENCE_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "subl ##(Tos<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0") SUN3 ("DIFFERENCE_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "roll d2,d1" "subqb #7,d1" "bne $errorpc " "subl d1,d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (IDIFFERENCE "N_OP_difference($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("IDIFFERENCE_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "subl ##(Tos<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0") SUN3 ("IDIFFERENCE_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "roll d2,d1" "subqb #7,d1" "bne $errorpc " "subl d1,d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (IDIFFERENCE.N "N_OP_idifferencen($(Tos), $x, $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("IDIFFERENCE_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "subl ##(n<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (PLUS2 "N_OP_plus2($(Tos-1), $(Tos), $errorpc) " T 2 T NIL STR-PARSER NIL (SUN3.N ("PLUS_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "addl ##(Tos<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0") SUN3 ("PLUS_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "roll d2,d1" "subqb #7,d1" "bne $errorpc " "addl d1,d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (IPLUS2 "N_OP_plus2($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("PLUS_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "addl ##(Tos<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0") SUN3 ("PLUS_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "roll d2,d1" "subqb #7,d1" "bne $errorpc " "addl d1,d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (IPLUS.N "N_OP_iplusn($(Tos), $x, $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("I_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "subqb #7,d0" "bne $errorpc " "addl ##(n<<15),d0 " "bvs $errorpc " "lsrl d2,d0" "orl #0x000E0000,d0"))) (QUOTIENT "N_OP_quot($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (IQUOTIENT "N_OP_quot($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (TIMES2 "N_OP_times($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (ITIMES2 "N_OP_times($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (IREMAINDER "N_OP_remainder($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (BOXIPLUS "N_OP_boxiplus($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL) (BOXIDIFFERENCE "N_OP_boxidifference($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL) (LOGAND2 "N_OP_logand($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("LOGAND_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "andl ##(Tos<<15) + 7,d0 " "rorl d2,d0") SUN3 ("LOGAND_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "roll d2,d1" "cmpb #7,d1" "bne $errorpc " "andl d1,d0 " "rorl d2,d0"))) (LOGOR2 "N_OP_logor($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("LOGOR_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "orl ##(Tos<<15),d0 " "rorl d2,d0") SUN3 ("LOGOR_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "roll d2,d1" "cmpb #7,d1" "bne $errorpc " "orl d1,d0 " "rorl d2,d0"))) (LOGXOR2 "N_OP_logxor($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("LOGXOR_N_$pc($(Tos-1))" "movl a7@+,d0" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "eorl ##(Tos<<15),d0 " "rorl d2,d0") SUN3 ("LOGXOR_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d0" "cmpb #7,d0" "bne $errorpc " "roll d2,d1" "subqb #7,d1" "bne $errorpc " "eorl d1,d0 " "rorl d2,d0"))) (* |;;| "Shifts ") (LRSH8 "N_OP_lrsh8($(Tos), $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("LRSH8_$pc($(Tos))" "movl a7@+,d0" "moveq #15,d1" "roll d1,d0" "subqb #0x7,d0" "bne $errorpc " "lsrl #8,d0" "lsrl d1,d0" "orl #0xe0000,d0"))) (LRSH1 "N_OP_lrsh1($(Tos), $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("LRSH1_$pc($(Tos))" "movl a7@+,d0" "moveq #15,d1" "roll d1,d0" "subqb #0x7,d0" "bne $errorpc " "lsrl #1,d0" "lsrl d1,d0" "orl #0xe0000,d0"))) (LLSH8 "N_OP_llsh8($(Tos), $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("LLSH8_$pc($(Tos))" "movl a7@+,d0" "movl d0,d1" "swap d1" "cmpw #0xE,d1" "bne $errorpc " "cmpw #0x10,d0" "bge $errorpc " "lslw #8,d0"))) (LLSH1 "N_OP_llsh1($(Tos), $errorpc)" T 1 T NIL STR-PARSER NIL (SUN3 ("LLSH1_$pc($(Tos))" "movl a7@+,d0" "movl d0,d1" "swap d1" "cmpw #0xE,d1" "bne $errorpc " "lslw #1,d0" "bcs $errorpc "))) (LSH "N_OP_lsh($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL) (* |;;| "Constants") (\'0 0 NIL 0 T T CONST-PARSER) (\'1 1 NIL 0 T T CONST-PARSER) (\'NIL "NIL_PTR" NIL 0 T T CONST-PARSER) (\'T "ATOM_T" NIL 0 T T CONST-PARSER) (SIC "$x" NIL 0 T T CONST-PARSER) (SNIC "$-x" NIL 0 T T CONST-PARSER) (SICX "$x16" NIL 0 T T CONST-PARSER) (ACONST "$a16" NIL 0 T T CONST-PARSER) (GCONST "$g24" NIL 0 T T CONST-PARSER) (* |;;| "Conditionals") (GREATERP "(N_OP_greaterp($(Tos-1), $(Tos), $errorpc))" T 2 T NIL STR-PARSER NIL (SUN3.N ("GREATERP_N_$pc($(Tos-1))" "movl a7@+,d1" "moveq #15,d2" "roll d2,d1" "subqb #7,d1" "bne $errorpc " "clrl d0" "cmpl ##(Tos<<15),d1 " "ble 100$" "moveq #76,d0" "100$: ") SUN3 ("GREATERP_$pc($(Tos-1), $(Tos))" "movl a7@+,d3" "movl a7@+,d1" "moveq #15,d2" "roll d2,d1" "subqb #7,d1" "bne $errorpc " "roll d2,d3" "subqb #7,d3" "bne $errorpc " "clrl d0" "cmpl d1,d3 " "ble 100$" "moveq #76,d0" "100$: "))) (IGREATERP "(N_OP_greaterp($(Tos-1), $(Tos), $errorpc))" T 2 T T STR-PARSER NIL (SUN3.N ("IGREATERP_N_$pc($(Tos-1))" "movl a7@+,d1" "moveq #15,d2" "roll d2,d1" "subqb #7,d1" "bne $errorpc " "clrl d0" "cmpl ##(Tos<<15),d1 " "ble 100$" "moveq #76,d0" "100$: ") SUN3 ("IGREATERP_$pc($(Tos-1), $(Tos))" "movl a7@+,d3" "movl a7@+,d1" "moveq #15,d2" "roll d2,d1" "subqb #7,d1" "bne $errorpc " "roll d2,d3" "subqb #7,d3" "bne $errorpc " "clrl d0" "cmpl d1,d3 " "ble 100$" "moveq #76,d0" "100$: "))) (EQ "($(Tos) == $(Tos-1))" NIL 2 NIL T CONDITIONAL-PARSER-2) (EQL "(N_OP_eqlop($(Tos-1), $(Tos), $errorpc))" T 2 T NIL STR-PARSER) (* |;;| "Type opcodes") (INSTANCEP "(N_OP_instancep($(Tos), $x16, $errorpc))" T 1 T NIL STR-PARSER) (TYPEMASK.N "(N_OP_instancep($(Tos), $x, $errorpc))" T 1 T NIL STR-PARSER) (DTEST "(N_OP_dtest($(Tos), $x16, $errorpc))" T 1 T NIL STR-PARSER) (TYPECHECK "(N_OP_dtest($(Tos), $x16, $errorpc))" T 1 T NIL STR-PARSER) (TYPEP "((DLword)GetTypeNumber($(Tos)) == $x)" T 1 T NIL CONDITIONAL-PARSER-3) (NTYPX " (S_POSITIVE | (unsigned int)GetTypeNumber($(Tos)))" T 1 T T STR-PARSER) (LISTP "((DLword)GetTypeNumber($(Tos)) == TYPE_LISTP)" NIL 1 T T CONDITIONAL-PARSER-3) (* |;;| "Jumps") (TJUMP "if ($(Tos)) { goto pc$jt; }" NIL 1 NIL NIL JUMP-PARSER) (FJUMP "if (!($(Tos))) { goto pc$jt; }" NIL 1 NIL NIL JUMP-PARSER) (TJUMPX "if ($(Tos)) { goto pc$jt; }" NIL 1 NIL NIL JUMP-PARSER) (FJUMPX "if (!($(Tos))) { goto pc$jt; }" NIL 1 NIL NIL JUMP-PARSER) (NFJUMPX "if (!($Tos)) { goto pc$jt; } else POP" NIL 1 NIL NIL JUMP-PARSER) (NTJUMPX "if ($Tos) { goto pc$jt; } else POP" NIL 1 NIL NIL JUMP-PARSER) (JUMP "goto pc$jt " T 0 NIL NIL JUMP-PARSER) (JUMPX "goto pc$jt " T 0 NIL NIL JUMP-PARSER) (JUMPXX "goto pc$jt " T 0 NIL NIL JUMP-PARSER) (-X- NIL NIL NIL NIL NIL NOP-PARSER) (NOP NIL NIL NIL NIL NIL NOP-PARSER) (* |;;| "Function call & return") (FN0 "fncall_$who(0, $pc)" T 0 T NIL FN-CALL-PARSER) (FN1 "fncall_$who(1, $pc)" T 1 T NIL FN-CALL-PARSER) (FN2 "fncall_$who(2, $pc)" T 2 T NIL FN-CALL-PARSER) (FN3 "fncall_$who(3, $pc)" T 3 T NIL FN-CALL-PARSER) (FN4 "fncall_$who(4, $pc)" T 4 T NIL FN-CALL-PARSER) (FNX "fncall_$who($x, $pc)" T 3 T NIL FN-CALL-PARSERX) (RETURN "return_op($full-pc, $swapped-fn-obj)" T NIL 1 NIL RETURN-PARSER) (APPLYFN "RETURN_TO_FN_CALL($pc, ret_to_apply)" T 2 T NIL APPLY-PARSER) (CHECKAPPLY* "N_OP_CHECKAPPLY($Tos, $bce-pc)" NIL 1 NIL NIL CHECKAPPLY-PARSER) (* |;;| "Pointer Operations") (GETBASEPTR.N " GETBASEPTR_N($(Tos),$x)" NIL 1 T T STR-PARSER NIL NIL) (ADDBASE "AddBase($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL (SUN3.N ("ADDBASE_N_$pc($(Tos-1))" "movl a7@+,d0" "andl #0xFFFFFF,d0" "addl ##(Tos),d0 ") SUN3 ("ADDBASE_$pc($(Tos-1), $(Tos))" "movl a7@+,d0" "movl a7@+,d1" "moveq #15,d2" "roll d2,d1" "subqb #7,d1" "bne $errorpc " "asrl d2,d1" "andl #0xFFFFFF,d0" "addl d1,d0 "))) (GETBASE.N " GETBASE_N($(Tos),$x)" NIL 1 T T STR-PARSER NIL NIL) (PUTBASE.N "N_OP_putbasen($(Tos-1), $(Tos), $x, $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (PUTBASEPTR.N "N_OP_putbaseptrn($(Tos-1), $(Tos), $x, $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (PUTBITS.N.FD "N_OP_putbitsnfd($(Tos-1), $(Tos), $x, $x2, $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (GETBITS.N.FD "N_OP_getbitsnfd($(Tos), $x, $x2)" T 2 T NIL STR-PARSER NIL NIL) (GETBASEBYTE "N_OP_getbasebyte($(Tos-1), $(Tos),$errorpc)" T 2 T NIL STR-PARSER NIL NIL) (PUTBASEBYTE "N_OP_putbasebyte($(Tos-1), $(Tos-1), $(Tos),$errorpc)" T 3 T NIL STR-PARSER NIL NIL) (RPLPTR.N "N_OP_rplptr($(Tos-1), $(Tos), $x)" NIL 2 T NIL STR-PARSER) (ATOMCELL.N "N_OP_atomcellN($(Tos), $x, $errorpc)" T 1 T NIL STR-PARSER) (VAG2 "( ((unsigned int) $(Tos-1) << 16) | ((unsigned int)$(Tos) & 0xffff) )" T 2 T NIL STR-PARSER) (HILOC "( S_POSITIVE | ((unsigned int) $(Tos) >> 16) )" NIL 1 T T STR-PARSER NIL NIL) (LOLOC "( S_POSITIVE | ((unsigned int) $(Tos) & 0xffff) )" NIL 1 T T STR-PARSER NIL NIL) (* |;;| "List Operations") (CAR "N_OP_car($(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (CDR "N_OP_cdr($(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (CONS " N_OP_cons($(Tos-1), $(Tos))" NIL 2 T T STR-PARSER NIL NIL) (RPLCONS " N_OP_rplcons($(Tos-1), $(Tos))" NIL 2 T T STR-PARSER NIL NIL) (RPLACA "N_OP_rplaca($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (RPLACD "N_OP_rplacd($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (FMEMB "N_OP_fmemb($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (LISTGET "N_OP_listget($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (ASSOC "N_OP_assoc($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (* |;;| "Array Opcodes") (AREF1 "N_OP_aref1($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (AREF2 "N_OP_aref2($(Tos-1), $(Tos-1), $(Tos), $errorpc)" T 3 T NIL STR-PARSER NIL NIL) (ASET1 "N_OP_aset1($(Tos-1), $(Tos-1), $(Tos), $errorpc)" T 3 T NIL STR-PARSER NIL NIL) (ASET2 "N_OP_aset1($(Tos-1), $(Tos-1), $(Tos-1), $(Tos), $errorpc)" T 4 T NIL STR-PARSER NIL NIL) (* |;;| "Other Opcodes") (DRAWLINE "N_OP_drawline($(Tos-1), $(Tos-1), $(Tos-1), $(Tos-1), $(Tos-1), $(Tos-1), $(Tos-1), $(Tos-1), $(Tos), $errorpc)" T 2 T NIL DRAWLINE-PARSER NIL NIL) (BLT "N_OP_blt($(Tos-1), $(Tos-1), $(Tos), $errorpc)" T 3 T NIL STR-PARSER) (MAKENUMBER "N_OP_makenumber($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (BIN "N_OP_bin($(Tos), $errorpc)" T 2 T NIL STR-PARSER NIL NIL) (RCLK "N_OP_rclk($(Tos))" T 1 T NIL STR-PARSER NIL NIL) (CREATECELL "N_OP_createcell($(Tos), $errorpc)" T 1 T NIL STR-PARSER) (PILOTBITBLT "N_OP_pilotbitblt($(Tos-1), $(Tos), $errorpc)" T 2 T NIL STR-PARSER) (* |;;| "Misc Opcodes") (MISC1 "CALL_UFN($bce-pc, $op)" T 1 NIL NIL STR-PARSER NIL NIL) (MISC2 "CALL_UFN($bce-pc, $op)" T 2 NIL NIL STR-PARSER NIL NIL) (MISC3 "PUSH(N_OP_misc3($(Tos-1), $(Tos-1), $(Tos), $x,  $errorpc))" T 3 T NIL STR-PARSER NIL NIL) (MISC3 "PUSH(N_OP_misc4($(Tos-1), $(Tos-1), $(Tos-1), $(Tos), $x,  $errorpc))" T 4 T NIL STR-PARSER NIL NIL) (MISC4 "PUSH(N_OP_misc4($(Tos-1), $(Tos-1), $(Tos-1), $(Tos), $x,  $errorpc))" T 4 T NIL STR-PARSER NIL NIL) (MISC7 "CALL_UFN($bce-pc, $op)" T 7 NIL NIL STR-PARSER NIL NIL) (MISC8 "CALL_UFN($bce-pc, $op)" T 8 NIL NIL STR-PARSER NIL NIL) (MISC10 "CALL_UFN($bce-pc, $op)" T 10 NIL NIL STR-PARSER NIL NIL) (* |;;| "Unimplemented Opcodes") (BUSBLT "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (RDPROLOGPTR "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (RDPROLOGTAG "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (WRTPTR&TAG "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (WRTPTR&0TAG "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (DOVEMISC "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (RAID "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (\\RETURN "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (READFLAGS "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (READRP "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (WRITEMAP "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (READPRINTERPORT "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (WRITEPRINTERPORT "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (RETCALL "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (FLOATBLT "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (FFTSTEP "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (UPCTRACE "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL) (UBFLOAT1 "CALL_UFN($bce-pc, $op)" T 1 NIL NIL STR-PARSER NIL NIL) (UBFLOAT2 "CALL_UFN($bce-pc, $op)" T 2 NIL NIL STR-PARSER NIL NIL) (UBFLOAT3 "CALL_UFN($bce-pc, $op)" T 3 NIL NIL STR-PARSER NIL NIL) (POPDISP "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (RESTLIST "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (RECLAIMCELL "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (GCSCAN1 "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (GCSCAN2 "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (GCREF "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (* |;;| "These should have calls added") (CONTEXTSWITCH "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (EVAL "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (FQUOTIENT "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (FTIMES2 "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (FDIFFERENCE "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (FPLUS2 "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (FGREATERP "CALL_UFN($bce-pc, $op)" T 2 T NIL STR-PARSER) (EQUAL "CALL_UFN($bce-pc, $op)" T 2 NIL NIL STR-PARSER NIL NIL) (= "CALL_UFN($bce-pc, $op)" T 2 NIL NIL STR-PARSER NIL NIL) (SUBRCALL "CALL_UFN($bce-pc, $op)" T 0 NIL NIL STR-PARSER NIL NIL)))
SETUP-TRANSLATION-FNS :D5
(F 0 *CODE-SIZE* F 1 *BYTE-INFO-TABLE*) 12 |parse-fn| P 11 A0708 P 10 |defer-push| P 9 A0707 P 8 |pushing-result| P 7 A0706 P 6 |stack-args| P 5 A0705 P 4 |may-ufn| P 3 A0704 P 2 |pattern| P 1 A0703 P 0 A0702 I 0 |entry| F 25 *TRANSLATION-TABLE*) %ATIVE :D5
(I 0 |fn|) Ojð´WOlÔÐÉA@ÉSER CONST-PARSER JUMP-PARSER CONDITIONAL-PARSER-2 
CONDITIONAL-PARSER-3 RETURN-PARSER FN-CALL-PARSER APPLY-PARSER CHECKAPPLY-PARSER FN-CALL-PARSERX 
SWAP-PARSER BIND-PARSER DRAWLINE-PARSER NOP-PARSER) (* |;;| "Pattern Matching  Routines") (FNS 
SUBSTITUTE TOS-CHECK) (* |;;| "Output of Code lines") (FNS ADD-CASE ADD-PUSH-OPERAND-LINE 
ADD-FN-HEADER-INFO) (* |;;| "Low Level Output of  code lines") (FNS ADD-LINE ADD-LF ADD-ASM-LINE 
ADD-INLINE-LINE BCE-LINE) (* |;;| "Error Line Functions") (FNS ADD-ERROR-LINE ADD-ERROR-ENTRY 
ADD-ERROR-SELECT) (* |;;| "Low Level Routines") (FNS FIX-FILENAME PC-XFORM BCE-PC) (* |;;| 
"Deferred Stack Funcions") (FNS NEXT-OPERAND PUSH-ALL-OPERANDS OPERAND-PUSH OPERAND-GET OPERAND-POP 
GET-VAL GET-SHIFTED-VAL GET-INFO ADD-INFO SET-INFO) (* |;;| "Writeout Files") (FNS MAKE-PROGRAM-FILE 
WRITE-INLINE-FILE WRITE-INCLUDE-FILE WRITE-PROGRAM-FILE) (* |;;| "Initialization") (FNS 
TRANSLATION-INIT SETUP-TRANSLATION-FNS MAKE-TRANSLATION-ENTRY MAKE-TRANSLATION-ENTRIES) (* |;;| 
"Opcode Verification Fns") (FNS VERIFY-OPCODES VERIFY-OPCODE) (* |;;| "New Code Block Fns") (FNS 
LOADNATIVE CLRNATIVE SET-CODE-BASE MAKE-NEW-CODE-BLOCK SET-NEW-FUNCTION-DEF GET-FUNCTION-DEF 
SET-NATIVE-ADDR GET-NATIVE-ADDR) (* |;;| "Macros") (FUNCTIONS SWAPPED-FN-OBJ FN-OBJ |fix-c-string|)))
(FILESLOAD ACODE)
(RECORD BYTE-INFO-REC (PC OPCODE OPCODE-REC OP-NAME NEXT-BYTE-REC OPLENGTH JUMP-TARGET 
NEGATIVE-JUMP-TARGET JUMP-TO-ADDRESS ARG1 ARG2 ARG3 LEVEL-ADJUST ENTRY-ADDRESS))
(RECORD TRANSLATION-REC (MAY-UFN STACK-ADJUST STACK-ARGS PUSHING-RESULT DEFER-PUSH PATTERN PARSE-FN 
INLINE-EXIT-FN INLINE-EXPANSIONS POPPING-TOS))
(RECORD INFO-REC (POP-COUNT))
(DEFMACRO GETBYTE NIL (QUOTE (\\GETBASEBYTE *CODE-BASE* (PROG1 CODELOC (|add| CODELOC 1)))))
(DEFMACRO SWAPPED-FN-OBJ (|base|) (BQUOTE (LOGOR (LLSH (\\LOLOC (\\\, |base|)) 16) (\\HILOC (\\\, 
|base|)))))
(DEFMACRO FN-OBJ (|base|) (BQUOTE (LET* ((|base-addr| (LOGOR (LLSH (\\HILOC (\\\, |base|)) 16) (
\\LOLOC (\\\, |base|)))) (|machine-addr| (|if| (OR (EQ (MACHINETYPE) (QUOTE KATANA)) (EQ (MACHINETYPE)
 (QUOTE MAIKO))) THEN ((OPCODES 125 118 1) |base-addr|) |else| |base-addr|))) |machine-addr|)))
(DEFMACRO |fix-c-string| (|pattern| |replacement|) (BQUOTE (SETQ |c-string| (SUBSTITUTE |c-string| (
\\\, |pattern|) (\\\, |replacement|)))))
(PUTPROPS NATIVETRAN COPYRIGHT ("Xerox Corporation" 1988))
NIL
E 1