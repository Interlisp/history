h55778s 00036/00034/00066d D 1.5 93/03/25 12:07:58 sybalsky 5 4c big-vm changeses 00013/00012/00087d D 1.4 92/05/26 13:43:18 sybalsky 4 3c fixing SCCS headers \nes 00000/00000/00099d D 1.3 91/03/07 19:55:38 sybalsky 3 2c Add -DBIGATOMS for 3 byte atom emulator.es 00019/00003/00080d D 1.2 91/03/07 19:45:54 sybalsky 2 1c Default init is now 3-byte atoms.es 00083/00000/00000d D 1.1 90/07/26 11:35:49 sybalsky 1 0c date and time created 90/07/26 11:35:49 by sybalskyeuUf e 0tTI 1# Options for SunOS4 and SPARC#  @(#) makefile-init.sparc Version 1.0 (7/18/90). ##  MAKE AN INIT-LOADING emulator for sparc.I 4##************************************************************************/#*									*/#*	(C) Copyright 1989-92 Venue. All Rights Reserved.		*/#*	Manufactured in the United States of America.			*/#*									*/#*	The contents of this file are proprietary information 		*/#*	belonging to Venue, and are provided to you under license.	*/#*	They may not be further distributed or disclosed to third	*/#*	parties without the specific permission of Venue.		*/#*									*/#************************************************************************/E 4D 4##***********************************************************************/##									*/##	Copyright 1989, 1990 Venue, Fuji Xerox Co., Ltd, Xerox Corp.	*/##									*/##	This file is work-product resulting from the Xerox/Venue	*/##	Agreement dated 18-August-1989 for support of Medley.		*/##									*/##***********************************************************************/E 4# This is to make the %$#@! Apollo cc happyOEXT = .o# OPTFLAGS is normally -g for init building.OPTFLAGS = -gI 2DISPOPTFLAGS = -gE 2FPFLAGS =# Now share the same ldesingle with COLOR(CG4)/MONO Suns# If you load MAIKOCOLOR.LCOM etc., you can use color functions# for bigatom work, removed  -DSPARCDISP -DSUN4_OS4_ILD 2DFLAGS = -DINIT -DKBINT -DFSERROR -DOS4 -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DFORKCOMM -DBIGATOMS -DNOASME 2I 2D 4DFLAGS = -DINIT -DKBINT -DFSERROR -DOS4 -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMM -DBIGATOMS -DNOASME 4I 4D 5DFLAGS = -DINIT -DKBINT -DFSERROR -DOS4 -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMM -DBIGATOMS -DNOASM -DNOFORNE 5I 5DFLAGS = -DINIT -DKBINT -DFSERROR -DOS4 -DOS4_TYPE4BUG -DCOLOR \	-DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMM \	-DBIGATOMS -DNOASM -DNOFORN -DBIGVM -DNEWCDRCODINGE 5E 4E 2LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lm#-Dsparc?D 5INLINE = $(SRCDIR)dispSPARC.ilBITBLTFILE = $(OBJECTDIR)bitbltSPARC.oE 5I 5INLINE = $(SRCDIR)dspSPARC.ilBITBLTFILE = $(OBJECTDIR)bbtSPARC.oE 5OBJECTDIR = ../$(RELEASENAME)/D 5COLORFILES = $(OBJECTDIR)colorbltfns.oE 5I 5COLORFILES = $(OBJECTDIR)rawcolor.oE 5default: ../$(OSARCHNAME)/$(LDENAME)# Special rules to create xc.c on Sun4#run cpp to expand macrosD 5$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \E 5I 5$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \E 5	 $(INCDIR)arith.h $(INCDIR)stream.h \D 5	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inline68K.h	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.iE 5I 5	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inln68k.h	cc -P $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.iE 5#run c compiler to produce first pass assembly$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i	rm -f $(OBJECTDIR)xc.s1	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1#generate C program to remove dispatch loop, optimizeD 5$(OBJECTDIR)disphack.c: $(SRCDIR)disphack.lex	rm -f $(OBJECTDIR)disphack.c	lex -t $(SRCDIR)disphack.lex > $(OBJECTDIR)disphack.cE 5I 5$(OBJECTDIR)dsphack.c: $(SRCDIR)dsphack.lex	rm -f $(OBJECTDIR)dsphack.c	lex -t $(SRCDIR)dsphack.lex > $(OBJECTDIR)dsphack.cE 5#uses this program to find dispatchD 5$(OBJECTDIR)find-disp.c: $(SRCDIR)find-disp.lex	rm -f $(OBJECTDIR)find-disp.c	lex -t $(SRCDIR)find-disp.lex > $(OBJECTDIR)find-disp.cE 5I 5$(OBJECTDIR)find-dsp.c: $(SRCDIR)find-dsp.lex	rm -f $(OBJECTDIR)find-dsp.c	lex -t $(SRCDIR)find-dsp.lex > $(OBJECTDIR)find-dsp.cE 5D 5$(OBJECTDIR)find-disp: $(OBJECTDIR)find-disp.c	cc -o $(OBJECTDIR)find-disp $(OBJECTDIR)find-disp.c -llE 5I 5$(OBJECTDIR)find-dsp: $(OBJECTDIR)find-dsp.c	cc -o $(OBJECTDIR)find-dsp $(OBJECTDIR)find-dsp.c -llE 5D 5$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-disp $(OBJECTDIR)xc.s1	rm -f $(OBJECTDIR)dispatch-label.c	$(OBJECTDIR)find-disp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 5I 5$(OBJECTDIR)dspatch-label.c: $(OBJECTDIR)find-dsp $(OBJECTDIR)xc.s1	rm -f $(OBJECTDIR)dspatch-label.c	$(OBJECTDIR)find-dsp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dspatch-label.cE 5D 5$(OBJECTDIR)disphack: $(OBJECTDIR)disphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)disphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)disphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)disphack.oE 5I 5$(OBJECTDIR)dsphack: $(OBJECTDIR)dsphack.c $(OBJECTDIR)dspatch-label.c	cc -o $(OBJECTDIR)dsphack $(OBJECTDIR)dspatch-label.c $(OBJECTDIR)dsphack.c -ll	rm -f $(OBJECTDIR)dspatch-label.o $(OBJECTDIR)dsphack.oE 5D 5$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)disphackE 5I 5$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)dsphackE 5	rm -f $(OBJECTDIR)xc.s2D 5	$(OBJECTDIR)disphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 5I 5	$(OBJECTDIR)dsphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 5$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)	rm -f $(OBJECTDIR)xc.s3	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3D 2$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3E 2I 2#$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3#	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3##############	SPECIAL xc.o  for debugging#############D 5$(OBJECTDIR)xc.o:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \E 5I 5$(OBJECTDIR)xc.o:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \E 5	 $(INCDIR)arith.h $(INCDIR)stream.h \D 5	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   E 5I 5	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   E 5	cc $(DISPRFLAGS) $(SRCDIR)xc.c -I$(INCDIR) -o $(OBJECTDIR)xc.oE 2E 1