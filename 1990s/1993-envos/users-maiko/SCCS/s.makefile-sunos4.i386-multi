h27140s 00001/00001/00047d D 1.12 91/03/07 19:54:05 sybalsky 12 11c Add -DBIGATOMS for 3 byte atom emulator.es 00001/00001/00047d D 1.11 90/07/26 18:49:20 mitani 11 10c add -DNEW_STORAGE flages 00008/00004/00040d D 1.10 90/07/04 01:36:18 sybalsky 10 9c Bob Bane changes:  Consolidate nromal and -x tails, move forking earlier.es 00003/00003/00041d D 1.9 90/04/20 02:12:15 sybalsky 9 8c AIX:  shortening file names, bulk change.es 00002/00003/00042d D 1.8 90/04/18 11:38:32 sybalsky 8 7c Posix:  shorten tosfuncallmacro to tosfuncalles 00020/00006/00025d D 1.7 90/04/16 11:02:37 sybalsky 7 6c add new make method for xc.oes 00001/00001/00030d D 1.6 90/03/22 16:36:35 sybalsky 6 5c add OPDISP, remove NOASM, for fast dispatches 00006/00005/00025d D 1.5 90/03/22 10:53:06 sybalsky 5 4c float-pt changes, plus make it compile -Oes 00004/00003/00026d D 1.4 90/03/15 20:58:36 takeshi 4 3c compile opt. -g FPFLAGSes 00004/00004/00025d D 1.3 90/03/13 18:59:16 sybalsky 3 2c Add inline-code optimizationes 00001/00001/00028d D 1.2 90/03/04 15:04:20 takeshi 2 1c Add options for Xes 00029/00000/00000d D 1.1 90/02/16 15:35:38 takeshi 1 0c date and time created 90/02/16 15:35:38 by takeshieuUf e 0tTI 1# Options for sun4 and mc68020# This is to make the %$#@! Apollo cc happyOEXT = .oD 5OPTFLAGS = -gD 4FPFLAGS = D 2DFLAGS = -DKBINT -DFSERROR -DFLTINT -DNOASM -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFERE 2I 2DFLAGS = -DKBINT -DFSERROR -DFLTINT -DNOASM -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAYE 4I 4DISPOPTFLAGS = -gFPFLAGS = -DFLTINTDFLAGS = -DKBINT -DFSERROR -DNOASM -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAYE 5I 5D 10OPTFLAGS = -ODISPOPTFLAGS = -OE 10I 10OPTFLAGS = -O -traditionalDISPOPTFLAGS = -O -traditionalE 10FPFLAGS = D 6DFLAGS = -DKBINT -DFSERROR -DNOASM -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAY -DNEWBITBLTE 6I 6D 10DFLAGS = -DKBINT -DFSERROR -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAY -DNEWBITBLT -DOPDISPE 10I 10D 11DFLAGS = -DKBINT -DFSERROR -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAY -DNEWBITBLT -DOPDISP -DFORKCOMME 11I 11D 12DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAY -DNEWBITBLT -DOPDISP -DFORKCOMME 12I 12DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DI386 -DBYTESWAP -DCHECK -DLOGINT -DDISPLAYBUFFER -DSUNDISPLAY -DNEWBITBLT -DOPDISP -DFORKCOMM -DBIGATOMSE 12E 11LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lmE 10E 6E 5E 4E 2D 3INLINE = E 3I 3INLINE = $(SRCDIR)disp386i.ilI 5BITBLTFILE=$(OBJECTDIR)bitblt386i.oI 10CC=gccAS=/users/sybalsky/gcc/gas/gas-1.35/a386E 10E 5E 3OBJECTDIR = ../sunos4.i386-multi/BYTESWAPFILES = $(OBJECTDIR)byteswapfns.o I 10COLORFILES = $(OBJECTDIR)colorbltfns.oE 10default	: $(OBJECTDIR)lde $(OBJECTDIR)ldeetherD 7$(OBJECTDIR)xc.o :  $(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  \	 $(INCDIR)address.h \E 7I 7# Special rules to create xc.c on 386i#run cpp to expand macros$(OBJECTDIR)xc.s:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \E 7	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \	 $(INCDIR)arith.h $(INCDIR)stream.h  $(INCDIR)dbprint.h\	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \D 8	 $(INCDIR)tosfuncallmacro.h  $(INCDIR)inlinedefsC.h   \D 3	 $(INCDIR)n_op_inlinedefsC.h  $(INCDIR)inlinedefs68K.h  \	 $(INCDIR)dummy_entries.h \	 $(INCDIR)inlinedefsSPARC.h  $(INCDIR)fast_dispatch.h  \E 3I 3D 7	 $(INCDIR)n_op_inlinedefsC.h \	 $(INCDIR)dummy_entries.h  $(SRCDIR)disp386i.il \	 $(INCDIR)inlinedefs386i.h $(INCDIR)fast_dispatch.h  \E 7I 7	 $(INCDIR)n_op_inlinedefsC.h  $(SRCDIR)disp386i.il  \	 $(INCDIR)dummy_entries.h \E 8I 8D 9	 $(INCDIR)tosfuncall.h  $(INCDIR)inlinedefsC.h   \E 9I 9	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \E 9	 $(SRCDIR)disp386i.il  \E 8D 9	 $(INCDIR)inlinedefs386i.h  $(INCDIR)fast_dispatch.h  \E 7E 3	 $(INCDIR)fastinlinedefs68K.h $(INCDIR)profile.hE 9I 9	 $(INCDIR)inline386i.h  $(INCDIR)fast_disp.h  \	 $(INCDIR)fastinline68K.h $(INCDIR)profile.hE 9D 4	cc $(RFLAGS) $(SRCDIR)xc.c $(INLINE) -o $(OBJECTDIR)xc.oE 4I 4D 5	cc $(OPTFLAGS) $(RFLAGS) $(SRCDIR)xc.c $(INLINE) -o $(OBJECTDIR)xc.oE 5I 5D 7	cc $(DISPRFLAGS) $(SRCDIR)xc.c $(INLINE) -o $(OBJECTDIR)xc.oE 7I 7	cc -c -O -Qproduce .s $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.s#run c compiler to produce first pass assembly#$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i#	rm -f $(OBJECTDIR)xc.s1#	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s $(INLINE)	rm -f $(OBJECTDIR)xc.s2	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s > $(OBJECTDIR)xc.s2$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s2D 10	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s2E 10I 10	$(AS) -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s2E 10E 7E 5E 4E 1