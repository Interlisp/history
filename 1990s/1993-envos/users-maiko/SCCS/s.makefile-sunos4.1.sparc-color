h44387s 00000/00000/00071d D 1.4 93/03/25 12:15:04 sybalsky 4 3c es 00001/00001/00070d D 1.3 90/07/26 18:48:26 mitani 3 2c add -DNEW_STORAGE flages 00003/00001/00068d D 1.2 90/07/04 01:35:23 sybalsky 2 1c Bob Bane changes:  Consolidate nromal and -x tails, move forking earlier.es 00069/00000/00000d D 1.1 90/05/14 15:57:54 fuji 1 0c date and time created 90/05/14 15:57:54 by fujieuUf e 0tTI 1# Options for SunOS4 and SPARC# This is to make the %$#@! Apollo cc happyOEXT = .o# OPTFLAGS is normally -O2.OPTFLAGS = -gFPFLAGS =# For COLOR, Add COLOR, remove OLD_CURSORD 2DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DFLTINT  -DCOLOR -DNEWBITBLT -DSUNDISPLAY -DLOGINTE 2I 2D 3DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DFLTINT  -DCOLOR -DNEWBITBLT -DSUNDISPLAY -DLOGINT -DFORKCOMME 3I 3DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DFLTINT  -DCOLOR -DNEWBITBLT -DSUNDISPLAY -DLOGINT -DFORKCOMME 3LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lmE 2# SPARC Assemble optimize checkDFLAGS:sh += optck.sh ; true#-Dsparc?INLINE = $(SRCDIR)dispSPARC.ilBITBLTFILE = $(OBJECTDIR)bitbltSPARC.oOBJECTDIR = ../$(RELEASENAME)/I 2COLORFILES = $(OBJECTDIR)colorbltfns.oE 2default	: $(OBJECTDIR)lde $(OBJECTDIR)Cldeether# Special rules to create xc.c on Sun4#run cpp to expand macros$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \	 $(INCDIR)arith.h $(INCDIR)stream.h \	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inline68K.h	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i#run c compiler to produce first pass assembly$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i	rm -f $(OBJECTDIR)xc.s1	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1#generate C program to remove dispatch loop, optimize$(OBJECTDIR)disphack.c: $(SRCDIR)disphack.lex	rm -f $(OBJECTDIR)disphack.c	lex -t $(SRCDIR)disphack.lex > $(OBJECTDIR)disphack.c#uses this program to find dispatch$(OBJECTDIR)find-disp.c: $(SRCDIR)find-disp.lex	rm -f $(OBJECTDIR)find-disp.c	lex -t $(SRCDIR)find-disp.lex > $(OBJECTDIR)find-disp.c$(OBJECTDIR)find-disp: $(OBJECTDIR)find-disp.c	cc -o $(OBJECTDIR)find-disp $(OBJECTDIR)find-disp.c -ll$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-disp $(OBJECTDIR)xc.s1	rm -f $(OBJECTDIR)dispatch-label.c	$(OBJECTDIR)find-disp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.c$(OBJECTDIR)disphack: $(OBJECTDIR)disphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)disphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)disphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)disphack.o$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)disphack	rm -f $(OBJECTDIR)xc.s2	$(OBJECTDIR)disphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)	rm -f $(OBJECTDIR)xc.s3	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3E 1