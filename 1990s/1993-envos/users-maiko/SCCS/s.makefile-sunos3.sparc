h05661s 00001/00001/00066d D 1.8 91/03/07 19:55:43 sybalsky 8 7c Add -DBIGATOMS for 3 byte atom emulator.es 00001/00001/00066d D 1.7 90/07/26 18:46:38 mitani 7 6c add -DNEW_STORAGE flages 00003/00001/00064d D 1.6 90/07/04 01:33:58 sybalsky 6 5c Bob Bane changes:  Consolidate nromal and -x tails, move forking earlier.es 00009/00009/00056d D 1.5 90/04/20 02:11:42 sybalsky 5 4c AIX:  shortening file names, bulk change.es 00002/00002/00063d D 1.4 90/04/18 11:38:18 sybalsky 4 3c Posix:  shorten tosfuncallmacro to tosfuncalles 00001/00001/00064d D 1.3 90/03/01 14:34:14 osamu 3 2c Mitsunori Matsuda adds -DSUNDISPLAY in DFLAGS. c -DSUNDISPLAY means lde uses Frame buffer. c Maiko-X codes need codes in -DDISPLAYBUFFER. So he adds new compile option.es 00000/00000/00065d D 1.2 89/02/27 17:27:00 shih 2 1c nonees 00065/00000/00000d D 1.1 89/01/21 11:30:10 bane 1 0c date and time created 89/01/21 11:30:10 by baneeuUf e 0tTI 1# Options for SunOS3 and SPARC# This is to make the %$#@! Apollo cc happyOEXT = .oOPTFLAGS = -O2FPFLAGS =# JRB - I'm not 100% sure about these flags; someone should check...D 3DFLAGS = -DKBINT -DFSERROR -DFLTINT -DSPARCDISP -DOS4_TYPE4BUG -DOLD_CURSORE 3I 3D 6DFLAGS = -DKBINT -DFSERROR -DFLTINT -DSPARCDISP -DOS4_TYPE4BUG -DOLD_CURSOR -DSUNDISPLAYE 6I 6D 7DFLAGS = -DKBINT -DFSERROR -DFLTINT -DSPARCDISP -DOS4_TYPE4BUG -DOLD_CURSOR -DSUNDISPLAY -DFORKCOMME 7I 7D 8DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DFLTINT -DSPARCDISP -DOS4_TYPE4BUG -DOLD_CURSOR -DSUNDISPLAY -DFORKCOMME 8I 8DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DFLTINT -DSPARCDISP -DOS4_TYPE4BUG -DOLD_CURSOR -DSUNDISPLAY -DFORKCOMM -DBIGATOMSE 8E 7LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lmE 6E 3#-Dsparc?INLINE = $(SRCDIR)dispSPARC.ilOBJECTDIR = ../$(RELEASENAME)/I 6COLORFILES = $(OBJECTDIR)colorbltfns.oE 6default	: $(OBJECTDIR)lde $(OBJECTDIR)ldeether# Special rules to create xc.c on Sun4#run cpp to expand macros$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \	 $(INCDIR)arith.h $(INCDIR)stream.h \	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \D 4	 $(INCDIR)tosfuncallmacro.h  $(INCDIR)inlinedefsC.h   \	 $(INCDIR)n_op_inlinedefsC.h  $(INCDIR)inlinedefs68K.hE 4I 4D 5	 $(INCDIR)tosfuncall.h  $(INCDIR)inlinedefsC.h   \	 $(INCDIR)inlinedefs68K.hE 5I 5	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inline68K.hE 5E 4	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i#run c compiler to produce first pass assembly$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i	rm -f $(OBJECTDIR)xc.s1	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1#generate C program to remove dispatch loop, optimize$(OBJECTDIR)disphack.c: $(SRCDIR)disphack.lex	rm -f $(OBJECTDIR)disphack.c	lex -t $(SRCDIR)disphack.lex > $(OBJECTDIR)disphack.c#uses this program to find dispatchD 5$(OBJECTDIR)find-dispatch.c: $(SRCDIR)find-dispatch.lex	rm -f $(OBJECTDIR)find-dispatch.c	lex -t $(SRCDIR)find-dispatch.lex > $(OBJECTDIR)find-dispatch.cE 5I 5$(OBJECTDIR)find-disp.c: $(SRCDIR)find-disp.lex	rm -f $(OBJECTDIR)find-disp.c	lex -t $(SRCDIR)find-disp.lex > $(OBJECTDIR)find-disp.cE 5D 5$(OBJECTDIR)find-dispatch: $(OBJECTDIR)find-dispatch.c	cc -o $(OBJECTDIR)find-dispatch $(OBJECTDIR)find-dispatch.c -llE 5I 5$(OBJECTDIR)find-disp: $(OBJECTDIR)find-disp.c	cc -o $(OBJECTDIR)find-disp $(OBJECTDIR)find-disp.c -llE 5D 5$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-dispatch $(OBJECTDIR)xc.s1E 5I 5$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-disp $(OBJECTDIR)xc.s1E 5	rm -f $(OBJECTDIR)dispatch-label.cD 5	$(OBJECTDIR)find-dispatch < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 5I 5	$(OBJECTDIR)find-disp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 5$(OBJECTDIR)disphack: $(OBJECTDIR)disphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)disphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)disphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)disphack.o$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)disphack	rm -f $(OBJECTDIR)xc.s2	$(OBJECTDIR)disphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)	rm -f $(OBJECTDIR)xc.s3	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3E 1