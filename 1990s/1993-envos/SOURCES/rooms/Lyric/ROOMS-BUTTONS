(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "21-Apr-88 22:03:49" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-BUTTONS.;28| 36918        il:|changes| il:|to:|  (il:vars il:rooms-buttonscoms)      il:|previous| il:|date:| "20-Apr-88 19:52:40" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-BUTTONS.;27|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-buttonscoms)(il:rpaqq il:rooms-buttonscoms ((file-environments il:rooms-buttons) (il:p (export (quote (*default-button-type* def-button-type make-button button-prop *button-help-delay* *button-selection-shade* make-button-window set-button-window-text-string with-button *default-button-shadows* make-east-west-bitmap make-north-south-bitmap make-nsew-bitmap))) (require "ROOMS")) (il:coms (il:* il:\; "the button object") (il:define-types il:button-types) (il:structures button updated-button button-type margins) (il:variables *button-types* *default-button-type* *default-button-shadows*) (il:functions def-button-type button-type-prop select-button-type button-type-named make-button button-prop compute-button-text-position button-text-x-coord button-text-y-coord)) (il:coms (il:* il:\; "button windows") (il:variables *button-help-delay* *button-selection-shade*) (il:functions make-button-window button-repaintfn update-button-window text-from-text-form button-buttoneventfn button-track-mouse shade-button print-button-help set-button-window-text-string maybe-resize-button-window)) (il:coms (il:* il:\; "button bitmaps") (il:structures north-south-bitmap east-west-bitmap nsew-bitmap) (il:functions display-button-image display-button-mask button-width button-height button-bitmap-bitblt ew-bitblt ns-bitblt nsew-bitblt)) (il:coms (il:* il:\; "externalization") (il:functions edit-button-window externalize-button externalize-font) (il:window-types :button)) (il:functions with-button construct-nsew-bitmap convert-koto-nsew-bitmap) (il:button-types :door :shadowed :transparent :porthole :ark :round-ark :stretchy-ark :stretchy-round-ark) (il:globalvars il:menuheldwait) (il:coms (il:* il:|;;| "cheap hack to make ICONS move like buttons") (il:advise il:iconbuttoneventfn) (il:declare\: il:eval@compile (il:p (case il:makesysname (:lyric (fix-advice (quote il:iconbuttoneventfn)))))))))(define-file-environment il:rooms-buttons :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (*default-button-type* def-button-type make-button button-prop *button-help-delay* *button-selection-shade* make-button-window set-button-window-text-string with-button *default-button-shadows* make-east-west-bitmap make-north-south-bitmap make-nsew-bitmap)))(require "ROOMS")(il:* il:\; "the button object")(def-define-type il:button-types "Button types" :undefiner (lambda (name) (remhash name *button-types*)))(defstruct (button (:constructor make-button-internal) (:print-function (lambda (button stream depth) (let ((type (button-type button)) (text (button-text button))) (format stream "#<~A button ~S>" (typecase type (button-type (button-type-name type)) (t type)) (typecase (button-text button) (text (text-string text)) (t text))))))) (type *default-button-type* :type button-type) (il:* il:|;;| "a BUTTON-TYPE structure") (text nil :type text) (il:* il:|;;| "a TEXT structure") (action nil :type list) (il:* il:|;;| "form to EVAL when this button is pressed") (help-string nil :type string) (il:* il:|;;| "printed when button is held") (inverted? nil :type (member t nil)) (il:* il:|;;| "if true, button image will be inverted") %mask %image (il:* il:|;;| "caches used by redisplay") (props nil :type list))(defstruct (updated-button (:include button) (:print-function (lambda (button stream depth) (format stream "#<Updated ~A button ~S>" (let ((type (button-type button))) (typecase type (button-type (button-type-name type)) (t type))) (updated-button-text-form button))))) (text-form nil :type t))(defstruct (button-type (:print-function (lambda (button-type stream depth) (format stream "#<Button Type ~S>" (button-type-name button-type))))) name (il:* il:|;;| "name of the type") image-bitmap (il:* il:|;;| "the background for the text") mask-bitmap (il:* il:|;;| "to allow non-rectangular buttons.  should be a bitmap the same size as IMAGE-BITMAP.  designates the set of bits of IMAGE-BITMAP which are the region to be displayed. ") (margins (make-margins)) (il:* il:|;;| "a MARGINS record.") props)(defstruct (margins (:type list)) (il:* il:|;;;| "Defines the region within a button intended for the text.  We cannot use a region, as buttons may be strechable.") (left 0 :type integer) (bottom 0 :type integer) (right 0 :type integer) (top 0 :type integer))(defglobalvar *button-types* (make-hash-table :test (quote eq)))(defparameter *default-button-type* :shadowed)(defvar *default-button-shadows* nil "Default for :SHADOWS arg to MAKE-BUTTON.Overridden when button type has default shadows.")(defdefiner def-button-type il:button-types (name &rest rest-keys &key image mask (margins (make-margins)) &allow-other-keys) (il:bquote (setf (gethash (quote (il:\\\, name)) *button-types*) (make-button-type :name (quote (il:\\\, name)) :image-bitmap (quote (il:\\\, image)) :mask-bitmap (quote (il:\\\, mask)) :margins (quote (il:\\\, margins)) :props (quote (il:\\\, (let ((props (copy-list rest-keys))) (dolist (keyword (quote (:image :mask :margins))) (remf props keyword)) props)))))))(defmacro button-type-prop (button-type prop &optional (new-value nil new-value-supplied)) (if new-value-supplied (il:bquote (setf (getf (button-type-props (il:\\\, button-type)) (il:\\\, prop)) (il:\\\, new-value))) (il:bquote (getf (button-type-props (il:\\\, button-type)) (il:\\\, prop)))))(defun select-button-type (&optional (reason "Select Button Type")) (il:* il:|;;| "returns the name of a button type or NIL") (menu (with-collection (dolist (type (sort (with-collection (maphash (function (lambda (name type) (collect type))) *button-types*)) (function string-lessp) :key (function button-type-name))) (let ((name (button-type-name type))) (collect (il:bquote ((il:\\\, (or (button-type-prop type :sample-image) (il:* il:|;;| "cache sample images on button type") (let* ((button (make-button :type name :text (let ((*print-case* :capitalize) (*readtable* (il:find-readtable "XCL"))) (princ-to-string name)))) (image (il:bitmapcreate (button-width button) (button-height button))) (width (button-width button)) (height (button-height button))) (when (button-type-mask-bitmap type) (display-button-mask button image width height)) (when (button-type-image-bitmap type) (display-button-image button image width height)) (display-text (button-text button) image) (button-type-prop type :sample-image image) image))) (quote (il:\\\, name)))))))) reason))(defmacro button-type-named (type-name) (il:bquote (gethash (il:\\\, type-name) *button-types*)))(defun make-button (&rest rest-keys &key (type *default-button-type*) (text nil text-provided) (text-form nil text-form-provided) (shadows nil shadows-provided) action help font inverted?) (il:* il:|;;;| "make & return a button.  use MAKE-BUTTON-WINDOW to put this button in a window.") (let* ((button-type (or (button-type-named type) (error "No button type named ~S exists." type))) (text (make-text :string (if (and (not text-provided) text-form-provided) (text-from-text-form text-form) text) :alignment :center :font (if font (il:fontcreate font) *default-text-font*) :shadows (if shadows-provided shadows (il:* il:|;;| "default shadows per button type") (getf (button-type-props button-type) :default-shadows *default-button-shadows*)))) (button (apply (if text-form-provided (function make-updated-button) (function make-button-internal)) :type button-type :text text :action action :help-string help :inverted? inverted? :props (let ((props (copy-list rest-keys))) (dolist (keyword (quote (:type :text :action :help :font :shadows :text-form :inverted?))) (remf props keyword)) props) (when text-form-provided (il:bquote (:text-form (il:\\\, text-form))))))) (compute-button-text-position button) button))(defmacro button-prop (button prop &optional (new-value nil new-value-supplied)) (if new-value-supplied (il:bquote (setf (getf (button-props (il:\\\, button)) (il:\\\, prop)) (il:\\\, new-value))) (il:bquote (getf (button-props (il:\\\, button)) (il:\\\, prop)))))(defun compute-button-text-position (button) (setf (text-position (button-text button)) (make-position (button-text-x-coord button) (button-text-y-coord button))))(defun button-text-x-coord (button) (let ((text (button-text button)) (margins (button-type-margins (button-type button)))) (ecase (text-alignment text) ((:left-bottom :left-top) (margins-left margins)) ((:right-bottom :right-top) (margins-right margins)) (:center (+ (margins-left margins) (floor (max (text-%width text) (- (button-width button) (margins-left margins) (margins-right margins))) 2))))))(defun button-text-y-coord (button) (let ((text (button-text button)) (margins (button-type-margins (button-type button)))) (ecase (text-alignment text) ((:left-bottom :right-bottom) (margins-bottom margins)) ((:left-top :right-top) (margins-top margins)) (:center (+ (margins-bottom margins) (floor (max (text-%height text) (- (button-height button) (margins-bottom margins) (margins-top margins))) 2))))))(il:* il:\; "button windows")(defglobalvar *button-help-delay* il:menuheldwait)(defparameter *button-selection-shade* 32768)(defun make-button-window (button &optional position) (let* ((width (button-width button)) (height (button-height button)) (position (or (il:positionp position) (il:getboxposition width height))) (window (il:createw (il:createregion (position-x position) (position-y position) width height) nil 0))) (il:windowprop window (quote button) button) (il:windowprop window (quote il:buttoneventfn) (quote button-buttoneventfn)) (il:windowprop window (quote il:aftermovefn) (quote button-repaintfn)) (il:windowprop window (quote il:openfn) (quote button-repaintfn)) (il:windowprop window (quote il:totopfn) (quote button-repaintfn)) (il:windowprop window (quote il:repaintfn) (quote button-repaintfn)) (il:windowprop window (quote il:reshapefn) (quote il:don\'t)) (il:windowprop window (quote il:shrinkfn) (quote il:don\'t)) (when (button-prop button :protected?) (il:windowprop window (quote il:rightbuttonfn) (quote il:totopw))) (button-repaintfn window) window))(defun button-repaintfn (window &rest ignore) (unless (window-hidden? window) (il:* il:|;;| "optimization: we know that we'll always get redisplayed when we're un-hidden.") (update-button-window window) (let* ((button (il:windowprop window (quote button))) (dsp (il:windowprop window (quote il:dsp))) (width (button-width button)) (height (button-height button)) (type (button-type button)) (image (button-type-image-bitmap type)) (mask (button-type-mask-bitmap type))) (il:totopw window t) (if (and image (null mask)) (il:clearw window) (il:* il:|;;| "copy what's behind the window through ") (il:bitblt (il:windowprop window (quote il:imagecovered)) 0 0 dsp 0 0 width height (if (button-inverted? button) (quote il:invert) (quote il:input)) (quote il:replace))) (when mask (il:* il:|;;| "erase what's in the mask") (display-button-mask button dsp width height)) (when image (il:* il:|;;| "paint the image on") (display-button-image button dsp width height)) (il:* il:|;;| "paint the text") (display-text (button-text button) dsp) (when (button-inverted? button) (il:bltshade il:blackshade dsp 0 0 width height (quote il:invert))))))(defun update-button-window (window) (let ((button (il:windowprop window (quote button)))) (when (updated-button-p button) (il:* il:|;;| "set the text string of WINDOW's BUTTON to the value of its TEXT-FORM.") (let ((new-text-string (text-from-text-form (updated-button-text-form button) window))) (unless (equal new-text-string (text-string (button-text button))) (il:* il:|;;| "optimization: don't bother if string is same") (set-button-window-text-string window new-text-string))))))(defun text-from-text-form (text-form &optional window) (il:* il:|;;;| "return the text string for an updated button in WINDOW.") (typecase text-form (list (eval text-form)) (il:* il:|;;| "note: when an updated button is first created this is called with WINDOW=NIL.  text form functions are required to handle this condition gracefully. ") (t (funcall text-form window))))(defun button-buttoneventfn (window) (let ((button (il:windowprop window (quote button)))) (if (il:mousestate il:middle) (cond ((button-prop button :protected?) (button-track-mouse button window)) ((edit-key-down-p) (edit-button-window window)) ((copy-key-down-p) (make-button-window (typecase button (updated-button (copy-updated-button button)) (t (copy-button button))))) ((move-key-down-p) (il:movew window)) ((delete-key-down-p) (interactive-close-window window)) ((help-key-down-p) (print-button-help button)) (t (button-track-mouse button window))) (button-track-mouse button window))))(defun button-track-mouse (button window) (let ((region (window-region window)) (timer (il:setuptimer *button-help-delay*)) (inside? nil)) (declare (global il:lastmousex il:lastmousey)) (loop (unless (il:mousestate (or il:left il:middle)) (when inside? (let ((action (button-action button))) (typecase action (list (eval action)) (t (funcall action window)))) (button-repaintfn window)) (return)) (if (il:insidep region il:lastmousex il:lastmousey) (unless inside? (shade-button window button) (setq inside? t)) (when inside? (button-repaintfn window) (setq inside? nil))) (when (and timer (il:timerexpired? timer)) (print-button-help button) (setq timer nil)) (il:block))))(defun shade-button (window button &optional (shade *button-selection-shade*)) (let* ((mask (button-%mask button)) (inverted? (button-inverted? button))) (il:bitblt mask nil nil window nil nil nil nil (if (or inverted? (null mask)) (quote il:texture) (quote il:merge)) (if inverted? (quote il:erase) (quote il:invert)) shade)))(defun print-button-help (button) (notify-user (or (button-help-string button) "No help provided for this button.")))(defun set-button-window-text-string (window string) (il:* il:|;;;| "note: this does everything but the redisplay.") (let ((button (il:windowprop window (quote button)))) (set-text-string (button-text button) string) (compute-button-text-position button) (maybe-resize-button-window window button)))(defun maybe-resize-button-window (window button) (let ((old-region (window-region window)) (width (button-width button)) (height (button-height button))) (unless (and (= width (region-width old-region)) (= height (region-height old-region))) (unwind-protect (progn (il:windowprop window (quote il:reshapefn) (quote il:nill)) (il:shapew1 window (make-region :left (region-left old-region) :bottom (region-bottom old-region) :width width :height height)) (il:* il:|;;| "we shouldn't have to call this, but it seems to help.") (il:advisewds window)) (il:windowprop window (quote il:reshapefn) (quote il:don\'t))))))(il:* il:\; "button bitmaps")(defstruct (north-south-bitmap (:conc-name "NS-BITMAP-")) north center south)(defstruct (east-west-bitmap (:conc-name "EW-BITMAP-")) east center west)(defstruct nsew-bitmap north nw ne south sw se east center west)(defun display-button-image (button dsp width height) (let ((cached-image (button-%image button))) (unless (and cached-image (= (il:bitmapwidth cached-image) width) (= (il:bitmapheight cached-image) height)) (let ((image-bitmap (button-type-image-bitmap (button-type button)))) (typecase image-bitmap (bitmap (il:* il:|;;| "optimization: don't copy if simple bitmap") (setq cached-image image-bitmap)) (t (setq cached-image (il:bitmapcreate width height)) (button-bitmap-bitblt image-bitmap cached-image width height)))) (setf (button-%image button) cached-image)) (il:bitblt cached-image 0 0 dsp 0 0 width height (quote il:source) (quote il:paint))))(defun display-button-mask (button dsp width height) (let ((cached-mask (button-%mask button))) (unless (and cached-mask (= (il:bitmapwidth cached-mask) width) (= (il:bitmapheight cached-mask) height)) (let ((mask-bitmap (button-type-mask-bitmap (button-type button)))) (typecase mask-bitmap (bitmap (il:* il:|;;| "optimization: don't copy if simple bitmap") (setq cached-mask mask-bitmap)) (t (setq cached-mask (il:bitmapcreate width height)) (button-bitmap-bitblt mask-bitmap cached-mask width height)))) (setf (button-%mask button) cached-mask)) (il:bitblt cached-mask 0 0 dsp 0 0 width height (quote il:source) (quote il:erase))))(defun button-width (button) (let* ((button-type (button-type button)) (margins (button-type-margins button-type)) (bitmap (button-type-image-bitmap button-type)) (text-width (text-%width (button-text button)))) (etypecase bitmap (bitmap (il:bitmapwidth bitmap)) (null text-width) (north-south-bitmap (il:bitmapwidth (ns-bitmap-north bitmap))) ((or nsew-bitmap east-west-bitmap) (let* ((width (+ text-width (margins-left margins) (margins-right margins))) (east-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-east bitmap)) (east-west-bitmap (ew-bitmap-east bitmap))))) (center-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-center bitmap)) (east-west-bitmap (ew-bitmap-center bitmap))))) (west-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-west bitmap)) (east-west-bitmap (ew-bitmap-west bitmap)))))) (il:* il:|;;| "we could use WIDTH directly but we'd rather tile in an even number of CENTER bitmaps, in case it's a pattern that needs to blend with the EAST and WEST.") (max (+ width (- center-width (mod (- width east-width west-width) center-width))) (+ east-width west-width)))))))(defun button-height (button) (let* ((button-type (button-type button)) (margins (button-type-margins button-type)) (bitmap (button-type-image-bitmap button-type)) (text-height (text-%height (button-text button)))) (etypecase bitmap (bitmap (il:bitmapheight bitmap)) (null text-height) (east-west-bitmap (il:bitmapheight (ew-bitmap-east bitmap))) ((or nsew-bitmap north-south-bitmap) (let* ((height (+ text-height (margins-bottom margins) (margins-top margins))) (north-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-north bitmap)) (north-south-bitmap (ns-bitmap-north bitmap))))) (center-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-center bitmap)) (north-south-bitmap (ns-bitmap-center bitmap))))) (south-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-south bitmap)) (north-south-bitmap (ns-bitmap-south bitmap)))))) (il:* il:|;;| "we could use HEIGHT directly but we'd rather tile in an even number of CENTER bitmaps, in case it's a pattern that needs to blend with the EAST and WEST.") (max (+ height (- center-height (mod (- height north-height south-height) center-height))) (+ north-height south-height)))))))(defun button-bitmap-bitblt (bitmap destination width height) (etypecase bitmap (bitmap (il:bitblt bitmap 0 0 destination 0 0 width height)) (east-west-bitmap (ew-bitblt (ew-bitmap-west bitmap) (ew-bitmap-center bitmap) (ew-bitmap-east bitmap) destination width 0)) (north-south-bitmap (ns-bitblt (ns-bitmap-south bitmap) (ns-bitmap-center bitmap) (ns-bitmap-north bitmap) destination height 0)) (nsew-bitmap (nsew-bitblt bitmap destination width height))))(defun ew-bitblt (west center east destination width bottom) (let ((center-width (il:bitmapwidth center)) (east-left (- width (il:bitmapwidth east)))) (il:* il:|;;| "blt the west bitmap down the left ") (il:bitblt west 0 0 destination 0 bottom) (do* ((left (il:bitmapwidth west) (+ left center-width))) ((>= left east-left)) (il:* il:|;;| "blt the center bitmap across the middle") (il:bitblt center 0 0 destination left bottom)) (il:* il:|;;| "blt the east bitmap down the right end") (il:bitblt east 0 0 destination east-left bottom)))(defun ns-bitblt (south center north destination height left &optional (do-ends? t)) (let ((center-height (il:bitmapheight center)) (north-bottom (- height (il:bitmapheight north)))) (when do-ends? (il:* il:|;;| "blt the south bitmap across the bottom") (il:bitblt south 0 0 destination left 0)) (do* ((bottom (il:bitmapheight south) (+ bottom center-height))) ((>= bottom north-bottom)) (il:* il:|;;| "blt the center bitmap up to through the middle") (il:bitblt center 0 0 destination left bottom)) (when do-ends? (il:* il:|;;| "blt the north bitmap across the top") (il:bitblt north 0 0 destination left north-bottom))))(defun nsew-bitblt (nsew-bitmap destination width height) (let* ((sw (nsew-bitmap-sw nsew-bitmap)) (se (nsew-bitmap-se nsew-bitmap)) (nw (nsew-bitmap-nw nsew-bitmap)) (ne (nsew-bitmap-ne nsew-bitmap)) (north-bottom (- height (il:bitmapheight nw))) (east-left (- width (il:bitmapwidth se)))) (il:* il:|;;| "across the bottom") (ew-bitblt sw (nsew-bitmap-south nsew-bitmap) se destination width 0) (il:* il:|;;| "across the top") (ew-bitblt nw (nsew-bitmap-north nsew-bitmap) ne destination width north-bottom) (il:* il:|;;| "up the left") (ns-bitblt sw (nsew-bitmap-west nsew-bitmap) nw destination height 0 nil) (il:* il:|;;| "up the right") (ns-bitblt se (nsew-bitmap-east nsew-bitmap) ne destination height east-left nil) (il:* il:|;;| "tile the center") (paint-region destination (let ((left (il:bitmapwidth sw)) (bottom (il:bitmapheight sw))) (make-region :left left :bottom bottom :width (- east-left left) :height (- north-bottom bottom))) (nsew-bitmap-center nsew-bitmap))))(il:* il:\; "externalization")(defun edit-button-window (window) (let* ((button (il:windowprop window (quote button))) (external-form (externalize-button button))) (with-profile (find-profile "XCL") (il:edite external-form nil (text-string (button-text button)) (quote il:|Expression|) (function (lambda (&rest ignore) (let ((new-button (apply (function make-button) external-form))) (il:windowprop window (quote button) new-button) (maybe-resize-button-window window new-button) (button-repaintfn window)))) (quote (:dontwait))))))(defun externalize-button (button) (il:* il:|;;;| "returns a property list to which MAKE-BUTTON can be applied") (let ((text (button-text button))) (il:bquote ((il:\\\,@ (etypecase button (updated-button (il:bquote (:text-form (il:\\\, (updated-button-text-form button))))) (button (il:bquote (:text (il:\\\, (text-string text))))))) :font (il:\\\, (externalize-font (text-font text))) :shadows (il:\\\, (externalize-text-shadows (text-shadows text))) :type (il:\\\, (button-type-name (button-type button))) :help (il:\\\, (button-help-string button)) :action (il:\\\, (copy-tree (button-action button))) :inverted? (il:\\\, (button-inverted? button)) (il:\\\,@ (copy-tree (button-props button)))))))(defun externalize-font (font) (list (il:fontprop font (quote il:family)) (il:fontprop font (quote il:size)) (il:fontprop font (quote il:face))))(def-window-type :button :recognizer (lambda (window) (typep (il:windowprop window (quote button)) (quote button))) :abstracter (lambda (window) (externalize-button (il:windowprop window (quote button)))) :reconstituter (lambda (args) (make-button-window (apply (function make-button) args) (internalize-position (getf args :position (make-position 0 0))))) :title (lambda (placement region dsp) (let ((button (il:windowprop (placement-window placement) (quote button)))) (when button (print-pep-title-string (text-string (button-text button)) region dsp :no-title-bar? t)))))(defun with-button (action text help) (if (copy-key-down-p) (prog1 nil (make-button-window (make-button :type *default-button-type* :text text :help help :action action) text help)) (eval action)))(defun construct-nsew-bitmap (bitmap x &optional center-x center-y) (il:* il:|;;;| "split a bitmap into nine bitmaps & make a NSEW-BITMAP out of them.  X is how wide the center square is. CENTER-X & CENTER-Y determine where center square is. ") (let* ((width (il:bitmapwidth bitmap)) (height (il:bitmapheight bitmap)) (west-width (or center-x (floor (- (il:bitmapwidth bitmap) x) 2))) (south-height (or center-y (floor (- (il:bitmapheight bitmap) x) 2))) (north-height (- height south-height x)) (east-width (- width west-width x)) (sw (il:bitmapcreate west-width south-height)) (nw (il:bitmapcreate west-width north-height)) (se (il:bitmapcreate east-width south-height)) (ne (il:bitmapcreate east-width north-height)) (center (il:bitmapcreate x x)) (north (il:bitmapcreate x north-height)) (east (il:bitmapcreate east-width x)) (south (il:bitmapcreate x south-height)) (west (il:bitmapcreate west-width x))) (il:bitblt bitmap 0 0 sw 0 0 west-width south-height) (il:bitblt bitmap west-width 0 south 0 0 x south-height) (il:bitblt bitmap (+ west-width x) 0 se 0 0 east-width south-height) (il:bitblt bitmap 0 (+ south-height x) nw 0 0 west-width north-height) (il:bitblt bitmap west-width (+ south-height x) north 0 0 x north-height) (il:bitblt bitmap (+ west-width x) (+ south-height x) ne 0 0 east-width north-height) (il:bitblt bitmap 0 south-height west 0 0 west-width x) (il:bitblt bitmap (+ west-width x) south-height east 0 0 east-width x) (il:bitblt bitmap (+ west-width x) (+ south-height x) center 0 0 x x) (make-nsew-bitmap :north north :south south :east east :west west :nw nw :ne ne :sw sw :se se :center center)))(defun convert-koto-nsew-bitmap (list) (make-nsew-bitmap :nw (first (first list)) :north (second (first list)) :ne (third (first list)) :west (first (second list)) :center (second (second list)) :east (third (second list)) :sw (first (third list)) :south (second (third list)) :se (third (third list))))(def-button-type :door :imagemask nil :margins (2 18 3 2) :default-shadows nil)(def-button-type :shadowed :image #S(nsew-bitmap north #*(2 4)L@@@L@@@@@@@@@@@ nw #*(5 4)CH@@GH@@N@@@L@@@ ne #*(7 4)O@@@OH@@CL@@AN@@ south #*(2 6)@@@@L@@@L@@@D@@@H@@@L@@@ sw #*(5 6)N@@@OH@@GH@@C@@@AH@@@H@@ se #*(7 6)GJ@@OF@@OJ@@EN@@JL@@OH@@ east #*(7 2)CF@@CJ@@ center #*(2 2)@@@@@@@@ west #*(5 2)L@@@L@@@) :mask #S(nsew-bitmap north #*(2 4)L@@@L@@@L@@@L@@@ nw #*(5 4)CH@@GH@@OH@@OH@@ ne #*(7 4)O@@@OH@@OL@@ON@@ south #*(2 6)L@@@L@@@L@@@D@@@H@@@L@@@ sw #*(5 6)OH@@OH@@GH@@C@@@AH@@@H@@ se #*(7 6)OJ@@OF@@OJ@@EN@@JL@@OH@@ east #*(7 2)OF@@OJ@@ center #*(2 2)L@@@L@@@ west #*(5 2)OH@@OH@@) :margins (3 5 7 3))(def-button-type :transparent :image nil :mask nil :margins (0 0 0 0) :default-shadows t)(def-button-type :porthole :image #S(nsew-bitmap north #*(15 36)OOONOOON@@@@@@@@L@@FN@@NG@ALCHAHCHAHGHALOH@NO@@FN@@B@@@@@@@@OOONOOON@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ nw #*(36 36)@@@@@@@CO@@@@@@@@@GOO@@@@@@@@AON@@@@@@@@@OL@@@@@@@@@CO@@C@@@@@@@GH@@G@@@@@@AN@@@N@@@@@@CL@@@L@@@@@@G@O@@L@@@@@@NAOH@N@@@@@ALCIL@G@@@@@CHC@N@C@@@@@G@C@N@A@@@@@N@CIN@@@@@@AL@AON@@@@@@CH@@OLCO@@@@C@@@GIOO@@@@G@@@@CO@@@@@NCL@@OL@@@@@LGN@AO@@@@@ALNG@CL@@@@@AHLCHGH@@@@@AHLCHO@@@@@@CHNGIN@@@@@@C@GOKL@@@@@@G@COCH@@@@@@F@ANG@@@@@@@F@@@G@@@@@@@F@@@N@@@@@@@F@@@N@@@@@@@N@@AL@@@@@@@L@@AL@@@@@@@LCLAH@@@@@@@LGNAH@@@@@@@LNGAH@@@@@@@LLCIH@@@@@@@ ne #*(36 36)OL@@@@@@@@@@OON@@@@@@@@@@GOH@@@@@@@@@@CO@@@@@@@@L@@OL@@@@@@@N@@AN@@@@@@@G@@@GH@@@@@@CH@@CL@@@@@@CHAN@N@@@@@@GHCO@G@@@@@@OHGCHCH@@@@@O@FALAL@@@@@N@FAL@N@@@@@@@GCL@G@@@@@@@COL@CH@@@@OHAOH@AL@@@@OO@O@@@L@@@@@GL@@GHN@@@@@AO@@OLG@@@@@@GHALNC@@@@@@ALAHGCH@@@@@@NAHGAH@@@@@@GALOAH@@@@@@CHOOAL@@@@@@ALGN@L@@@@@@@LCL@N@@@@@@@N@@@F@@@@@@@F@@@F@@@@@@@G@@@F@@@@@@@C@@@F@@@@@@@C@@@G@@@@@@@CH@@C@@@@@@@AHGHC@@@@@@@AHOLC@@@@@@@AILNC@@@@@@@AIHGC@@@ south #*(15 36)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOONOOON@@@@@@@@L@@FN@@NG@ALCHAHCHAHGH@LOH@NO@@FN@@B@@@@@@@@OOONOOON sw #*(36 36)LLCIH@@@@@@@LNGIH@@@@@@@LGOIH@@@@@@@LCOAH@@@@@@@LANAH@@@@@@@N@@@L@@@@@@@F@@@L@@@@@@@F@@@N@@@@@@@F@@@F@@@@@@@F@CLG@@@@@@@G@GNC@@@@@@@C@NGCH@@@@@@CHLCIL@@@@@@AHLCHN@@@@@@AHNGHG@@@@@@ALGOHCH@@@@@@LCO@AN@@@@@@NAN@@OH@@@@@G@@@@CO@@@@@C@@@O@OO@@@@CH@AOHAO@@@@AL@CIL@@@@@@@N@C@N@@@@@@@G@C@N@C@@@@@CHCIN@G@@@@@ALAON@N@@@@@@N@OL@L@@@@@@G@GH@L@@@@@@CL@@@N@@@@@@AN@@@G@@@@@@@GH@@C@@@@@@@CO@@A@@@@@@@@OL@@@@@@@@@@AON@@@@@@@@@@GOO@@@@@@@@@@CO@@@ se #*(36 36)@@@@AIHGC@@@@@@@AILOC@@@@@@@AHOOC@@@@@@@AHGNC@@@@@@@AHCLC@@@@@@@C@@@G@@@@@@@C@@@F@@@@@@@G@@@F@@@@@@@F@@@F@@@@@@@NCL@F@@@@@@@LGN@N@@@@@@ALNG@L@@@@@@CHLCIL@@@@@@G@LCIH@@@@@@N@NGIH@@@@@AL@GOKH@@@@@GH@COCH@@@@AO@@ANG@@@@@GL@@@@O@@@@OO@GH@@N@@@@OH@OL@AL@@@@@@ALN@CL@@@@@@AHG@GH@@@@L@AHG@O@@@@@N@ALOAN@@@@@G@@OOCL@@@@@CH@GNGH@@@@@CH@CLO@@@@@@GH@@CN@@@@@@OH@@GL@@@@@@O@@AO@@@@@@@N@@OL@@@@@@@@@COH@@@@@@@@GOL@@@@@@@@OON@@@@@@@@@OL@@@@@@@@@@ east #*(36 15)@@@@AIHGC@@@@@@@AILOC@@@@@@@AHOOC@@@@@@@AHGNC@@@@@@@AHCLC@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AHGHC@@@@@@@AHOLC@@@@@@@AILNC@@@@@@@AIHGC@@@ center #*(15 15)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ west #*(36 15)LLCIH@@@@@@@LNGIH@@@@@@@LGOIH@@@@@@@LCOAH@@@@@@@LANAH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@LCLAH@@@@@@@LGNAH@@@@@@@LNGAH@@@@@@@LLCIH@@@@@@@) :mask #S(nsew-bitmap north #*(15 36)OOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOON@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ nw #*(36 36)@@@@@@@CO@@@@@@@@@GOO@@@@@@@@AOOO@@@@@@@@OOOO@@@@@@@COOOO@@@@@@@GOOOO@@@@@@AOOOOO@@@@@@COOOOO@@@@@@GOOOOO@@@@@@OOOOOO@@@@@AOOOOOO@@@@@COOOOOO@@@@@GOOOOOO@@@@@OOOOOOO@@@@AOOOOOOO@@@@COOOOOOO@@@@COOOOOOO@@@@GOOOOOO@@@@@OOOOOOL@@@@@OOOOOO@@@@@AOOOOOL@@@@@AOOOOOH@@@@@AOOOOO@@@@@@COOOON@@@@@@COOOOL@@@@@@GOOOOH@@@@@@GOOOO@@@@@@@GOOOO@@@@@@@GOOON@@@@@@@GOOON@@@@@@@OOOOL@@@@@@@OOOOL@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@ ne #*(36 36)OL@@@@@@@@@@OON@@@@@@@@@OOOH@@@@@@@@OOOO@@@@@@@@OOOOL@@@@@@@OOOON@@@@@@@OOOOOH@@@@@@OOOOOL@@@@@@OOOOON@@@@@@OOOOOO@@@@@@OOOOOOH@@@@@OOOOOOL@@@@@OOOOOON@@@@@OOOOOOO@@@@@OOOOOOOH@@@@OOOOOOOL@@@@OOOOOOOL@@@@@GOOOOON@@@@@AOOOOOO@@@@@@GOOOOO@@@@@@AOOOOOH@@@@@@OOOOOH@@@@@@GOOOOH@@@@@@COOOOL@@@@@@AOOOOL@@@@@@@OOOON@@@@@@@OOOON@@@@@@@GOOON@@@@@@@GOOON@@@@@@@COOON@@@@@@@COOOO@@@@@@@COOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@ south #*(15 36)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOON sw #*(36 36)OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOL@@@@@@@GOOOL@@@@@@@GOOON@@@@@@@GOOON@@@@@@@GOOOO@@@@@@@GOOOO@@@@@@@COOOOH@@@@@@COOOOL@@@@@@AOOOON@@@@@@AOOOOO@@@@@@AOOOOOH@@@@@@OOOOON@@@@@@OOOOOOH@@@@@GOOOOOO@@@@@COOOOOOO@@@@COOOOOOO@@@@AOOOOOOO@@@@@OOOOOOO@@@@@GOOOOOO@@@@@COOOOOO@@@@@AOOOOOO@@@@@@OOOOOO@@@@@@GOOOOO@@@@@@COOOOO@@@@@@AOOOOO@@@@@@@GOOOO@@@@@@@COOOO@@@@@@@@OOOO@@@@@@@@AOOO@@@@@@@@@GOO@@@@@@@@@@CO@@@ se #*(36 36)@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@COOOO@@@@@@@COOON@@@@@@@GOOON@@@@@@@GOOON@@@@@@@OOOON@@@@@@@OOOON@@@@@@AOOOOL@@@@@@COOOOL@@@@@@GOOOOH@@@@@@OOOOOH@@@@@AOOOOOH@@@@@GOOOOOH@@@@AOOOOOO@@@@@GOOOOOO@@@@OOOOOOON@@@@OOOOOOOL@@@@OOOOOOOL@@@@OOOOOOOH@@@@OOOOOOO@@@@@OOOOOON@@@@@OOOOOOL@@@@@OOOOOOH@@@@@OOOOOO@@@@@@OOOOON@@@@@@OOOOOL@@@@@@OOOOO@@@@@@@OOOOL@@@@@@@OOOOH@@@@@@@OOOL@@@@@@@@OON@@@@@@@@@OL@@@@@@@@@@ east #*(36 15)@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@ center #*(15 15)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ west #*(36 15)OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@) :margins (17 17 17 17) :default-shadows t)(def-button-type :ark :image #*(82 26)OOOOOOOOOOOOOOOOOOOOL@@@JBBBBBBBBBBBBBBBBBBBL@@@HHHHHHHHHHHHHHHHHHHID@@@JBBBBBBBBBBBBBBBBBBCL@@@HHHHHHHHHHHHHHHHHHHOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JEEEEEEEEEEEEEEEEEEEL@@@HJJJJJJJJJJJJJJJJJJOD@@@JMMMMMMMMMMMMMMMMMMML@@@IGGGGGGGGGGGGGGGGGGGD@@@KMMMMMMMMMMMMMMMMMMML@@@OGGGGGGGGGGGGGGGGGGGD@@@OOOOOOOOOOOOOOOOOOOOL@@@ :margins (6 5 6 6) :default-shadows :ark)(def-button-type :round-ark :image #*(74 24)@@@@@@@@@@@@@@@@@@@@@AOOOOOOOOOOOOOOH@@@@GAAAAAAAAAAAAAAF@@@AL@DDDDDDDDDDDDDEH@@A@EEEEEEEEEEEEEEAH@@BBJJJJJJJJJJJJJJJL@@BEEEEEEEEEEEEEEEED@@FJJJJJJJJJJJJJJJJJ@@DEEEEEEEEEEEEEEEEF@@FJJJJJJJJJJJJJJJJJ@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJJJ@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJJN@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJKN@@CMEEEEEEEEEEEEEEFL@@CFJJJJJJJJJJJJJJOL@@AMMMMMMMMMMMMMMMKH@@@GGGGGGGGGGGGGGGN@@@@AOOOOOOOOOOOOOOH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ :mask #*(74 24)@@@@@@@@@@@@@@@@@@@@@AOOOOOOOOOOOOOOH@@@@GOOOOOOOOOOOOOON@@@AOOOOOOOOOOOOOOOOH@@AOOOOOOOOOOOOOOOOH@@COOOOOOOOOOOOOOOOL@@COOOOOOOOOOOOOOOOL@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@COOOOOOOOOOOOOOOOL@@COOOOOOOOOOOOOOOOL@@AOOOOOOOOOOOOOOOOH@@@GOOOOOOOOOOOOOON@@@@AOOOOOOOOOOOOOOH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ :margins (2 4 5 2) :default-shadows :ark)(def-button-type :stretchy-ark :image #S(nsew-bitmap north #*(4 5)O@@@D@@@A@@@D@@@A@@@ nw #*(5 5)OH@@J@@@HH@@J@@@HH@@ ne #*(5 5)OH@@EH@@BH@@GH@@NH@@ south #*(4 5)K@@@N@@@K@@@N@@@O@@@ sw #*(5 5)JH@@I@@@KH@@O@@@OH@@ se #*(5 5)KH@@NH@@KH@@NH@@OH@@ east #*(5 4)KH@@NH@@KH@@NH@@ center #*(4 4)J@@@E@@@J@@@E@@@ west #*(5 4)J@@@HH@@J@@@HH@@) :margins (6 6 6 6) :default-shadows :ark)(def-button-type :stretchy-round-ark :image #S(nsew-bitmap north #*(4 6)O@@@D@@@A@@@E@@@J@@@E@@@ nw #*(7 6)@B@@@N@@CH@@B@@@DD@@DJ@@ ne #*(9 6)N@@@EH@@AF@@DF@@JK@@EE@@ south #*(4 6)J@@@E@@@J@@@G@@@M@@@O@@@ sw #*(7 6)OD@@GJ@@FL@@CJ@@@N@@@B@@ se #*(9 6)JOH@EK@@KO@@FN@@OH@@N@@@ east #*(9 8)JJH@EEH@JJH@EEH@JJH@EEH@JJH@EEH@ center #*(4 8)J@@@E@@@J@@@E@@@J@@@E@@@J@@@E@@@ west #*(7 8)OD@@JJ@@OD@@JJ@@OD@@JJ@@OD@@JJ@@) :mask #S(nsew-bitmap north #*(4 6)O@@@O@@@O@@@O@@@O@@@O@@@ nw #*(7 6)@B@@@N@@CN@@CN@@GN@@GN@@ ne #*(9 6)N@@@OH@@ON@@ON@@OO@@OO@@ south #*(4 6)O@@@O@@@O@@@O@@@O@@@O@@@ sw #*(7 6)ON@@GN@@GN@@CN@@@N@@@B@@ se #*(9 6)OOH@OO@@OO@@ON@@OH@@N@@@ east #*(9 8)OOH@OOH@OOH@OOH@OOH@OOH@OOH@OOH@ center #*(4 8)O@@@O@@@O@@@O@@@O@@@O@@@O@@@O@@@ west #*(7 8)ON@@ON@@ON@@ON@@ON@@ON@@ON@@ON@@) :margins (4 1 4 2) :default-shadows :ark)(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:menuheldwait))(il:* il:|;;| "cheap hack to make ICONS move like buttons")(reinstall-advice (quote il:iconbuttoneventfn) :around (quote ((:last (if (move-key-down-p) (il:movew (locally (declare (special il:window)) il:window)) il:*)))))(il:readvise il:iconbuttoneventfn)(il:declare\: il:eval@compile (case il:makesysname (:lyric (fix-advice (quote il:iconbuttoneventfn)))))(il:putprops il:rooms-buttons il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop