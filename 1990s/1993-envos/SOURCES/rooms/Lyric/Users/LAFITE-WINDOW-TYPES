(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "21-Apr-88 23:04:45" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>USERS>LAFITE-WINDOW-TYPES.;4| 7042         il:|changes| il:|to:|  (il:window-types :lafite-browser :lafite-status-window)      il:|previous| il:|date:| "21-Apr-88 22:17:14" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>USERS>LAFITE-WINDOW-TYPES.;3|); Copyright (c) 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:lafite-window-typescoms)(il:rpaqq il:lafite-window-typescoms ((il:* il:|;;| "window types for Lafite") (file-environments il:lafite-window-types) (il:p (require "ROOMS")) (il:declare\: il:eval@compile il:dontcopy (il:p (unless (il:reclook (quote il:mailfolder)) (il:eval (il:sysreclook1 (quote il:mailfolder)))))) (il:window-types :lafite-status-window :lafite-browser) (il:* il:|;;| "keep il:shapew from hanging") (il:p (il:changename (quote il:lab.reshapefn) (quote il:obtain.monitorlock) (quote true)) (il:changename (quote il:lab.repaintfn) (quote il:obtain.monitorlock) (quote true)))))(il:* il:|;;| "window types for Lafite")(define-file-environment il:lafite-window-types :compiler :compile-file :readtable "XCL" :package "ROOMS")(require "ROOMS")(il:declare\: il:eval@compile il:dontcopy (unless (il:reclook (quote il:mailfolder)) (il:eval (il:sysreclook1 (quote il:mailfolder)))))(def-window-type :lafite-status-window :recognizer (lambda (window) (declare (global il:lafitestatuswindow)) (eq window il:lafitestatuswindow)) :abstracter (lambda (window) nil) :reconstituter (lambda (ignore) (declare (global il:lafitestatuswindow) (ignore ignore)) (when (fboundp (quote il:lafite)) (or il:lafitestatuswindow (progn (il:lafite (quote il:on) nil) il:lafitestatuswindow)))) :updater (lambda (placement) (declare (global il:\\lafite.outbox)) (if il:\\lafite.outbox (il:* il:|;;| "note the height of the outbox") (placement-prop placement :outbox-height (region-height (il:windowprop (first il:\\lafite.outbox) (quote il:region)))) (remf (placement-props placement) :outbox-height))) :placer (lambda (placement) (declare (global il:\\lafite.outbox)) (il:* il:|;;| "adjust placement as outbox might have appeared or been removed since we were last here & we don't want status window creeping around.") (il:relmovew (placement-window placement) (make-position 0 (- (getf (placement-props placement) :outbox-height 0) (if il:\\lafite.outbox (region-height (il:windowprop (first il:\\lafite.outbox) (quote il:region))) 0))))) :title (lambda (placement region dsp) (print-pep-title-string "Lafite" region dsp :no-title-bar? t)) :files (il:* il:|;;;| "we don't load Lafite on demand, as customers don't have it.  this way we can hand them suites which contain Lafite windows & they won't die.") (il:lafite-window-types))(def-window-type :lafite-browser :recognizer (lambda (window) (eq (il:windowprop window (quote il:repaintfn)) (quote il:lab.repaintfn))) :abstracter (lambda (window) (declare (global il:lafitedefaulthost&dir il:defaultmailfoldername)) (il:* il:|;;| "If this is the default mail folder, we don't need any data at all.  Otherwise, we need the foldername.") (let* ((folder-name (il:|fetch| (il:mailfolder il:versionlessfoldername) il:|of| (il:windowprop window (quote il:mailfolder))))) (list* :region (externalize-region (window-region window)) (if (eq folder-name (il:u-case (il:pack* il:lafitedefaulthost&dir il:defaultmailfoldername))) nil (il:bquote (:folder-name (il:\\\, folder-name))))))) :reconstituter (lambda (plist) (declare (global il:lafitestatuswindow il:\\lafite.active il:lafitedefaulthost&dir il:defaultmailfoldername il:\\activelafitefolders il:lafitebrowserregion)) (when (fboundp (quote il:lafite)) (il:* il:|;;| "have to make sure lafite is on first") (unless (eq il:\\lafite.active t) (il:* il:|;;| "turn it on") (il:lafite (quote il:on) nil) (hide-window il:lafitestatuswindow) (il:* il:|;;| "wait for initialization to complete") (loop (il:block) (when (eq il:\\lafite.active t) (return)))) (let* ((folder-name (or (getf plist :folder-name) (il:u-case (il:pack* il:lafitedefaulthost&dir il:defaultmailfoldername)))) (folder (il:\\lafite.getmailfolder folder-name))) (when folder (unless (il:|fetch| (il:mailfolder il:browserwindow) il:|of| folder) (let ((all-folders il:\\activelafitefolders) (old-browser-region il:lafitebrowserregion)) (il:* il:|;;| "We have to do some hacking here to prevent the lafite browser code from asking the user for a region.  If there is no open folder, the browser code (the function is il:lab.createwindow) will use the value of il:lafitebrowserregion as the region instead of asking the user.") (unwind-protect (progn (setq il:\\activelafitefolders (list folder)) (setq il:lafitebrowserregion (internalize-region (or (getf plist :region) (list 0 0 500 200)))) (il:\\lafite.prepare.browser folder-name (quote (il:noconfirm)))) (il:* il:\; "When we unwind, reset the list of active folders and the browser region") (setq il:lafitebrowserregion old-browser-region) (setq il:\\activelafitefolders all-folders)) (il:lab.loadfolder folder) (let ((browser-ready (il:fetch (il:mailfolder il:browserready) il:of folder))) (unwind-protect (progn (il:* il:|;;| "so no questions are asked on shrink") (il:replace (il:mailfolder il:browserready) il:of folder il:with nil) (il:* il:|;;| "shrink the window, so there's an icon we can later place.  lafite browsers spawn a process when shrunk which screws up place-placement. ") (il:shrinkw (il:|fetch| (il:mailfolder il:browserwindow) il:|of| folder)) (il:block))) (il:replace (il:mailfolder il:browserready) il:of folder il:with browser-ready)))) (il:* il:|;;| "return the window") (il:|fetch| (il:mailfolder il:browserwindow) il:|of| folder))))) :placer (lambda (placement) (let* ((window (placement-window placement)) (icon (window-icon window)) (pos (placement-icon-position placement))) (il:* il:|;;| "not sure what's going on here.  the following code pretty much duplicates what PLACE-PLACEMENT does to ensure the icon is in the right position, but for some reason it works the second time.") (when (and (placement-shrunken? placement) icon (not (equal (window-position icon) pos))) (il:movew icon pos)))) :title (lambda (placement region dsp) (let* ((folder (il:windowprop (placement-window placement) (quote il:mailfolder)))) (print-pep-title-string (if folder (string (il:|fetch| (il:mailfolder il:shortfoldername) il:|of| folder)) "Lafite Browser") region dsp :no-title-bar? (placement-shrunken? placement)))) :files (il:* il:|;;;| "we don't load Lafite on demand, as customers don't have it.  this way we can hand them suites which contain Lafite windows & they won't die.") (il:lafite-window-types))(il:* il:|;;| "keep il:shapew from hanging")(il:changename (quote il:lab.reshapefn) (quote il:obtain.monitorlock) (quote true))(il:changename (quote il:lab.repaintfn) (quote il:obtain.monitorlock) (quote true))(il:putprops il:lafite-window-types il:copyright ("Xerox Corporation" 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop