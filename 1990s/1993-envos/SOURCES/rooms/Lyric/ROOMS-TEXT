(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "23-Feb-88 17:53:48" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>ROOMS-TEXT.;28| 10283        il:|changes| il:|to:|  (il:vars il:rooms-textcoms)      il:|previous| il:|date:| "10-Feb-88 18:39:03" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>ROOMS-TEXT.;27|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-textcoms)(il:rpaqq il:rooms-textcoms ((file-environments il:rooms-text) (il:p (export (quote (*default-text-font* make-text display-text def-text-shadows set-text-string))) (require "ROOMS")) (il:structures text text-shadow) (il:variables *default-text-font*) (il:functions make-text update-text-caches update-text-bitmap update-text-dimensions maximize minimize display-text display-text-x-coord display-text-y-coord set-text-string) (il:variables *text-shadows* *text-shadow-factor*) (il:functions get-text-shadows get-text-shadows-internal make-text-shadows externalize-text-shadows internalize-text-shadows internalize-text-shadows-internal) (il:* il:|;;| "a definer for shadows") (il:define-types il:text-shadows) (il:functions def-text-shadows) (il:text-shadows nil :ark)))(define-file-environment il:rooms-text :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (*default-text-font* make-text display-text def-text-shadows set-text-string)))(require "ROOMS")(defstruct (il:* il:|;;;| "specifies a bit of text for display") (text (:constructor make-text-internal) (:print-function (lambda (text stream depth) (format stream "#<Text ~S>" (text-string text))))) (string "" :type string) (il:* il:|;;| "the text to print.  use SET-TEXT-STRING to change this field.") (position (make-position 0 0) :type cons) (il:* il:|;;| "where to print it") (alignment :left-bottom :type (il:* il:|;;| "how to align it") (member :left-bottom :left-top :center :right-bottom :right-top)) (il:* il:|;;| "how to align it relative to POSITION") (font *default-text-font*) (il:* il:|;;| "font to use") (shadows (make-text-shadows *default-text-font*) :type list) (il:* il:|;;| "a list of TEXT-SHADOW structures") (il:* il:|;;;| "caches to speed redisplay") (%width 0 :type integer) (il:* il:|;;| "width of the text image, including shadows") (%height 0 :type integer) (il:* il:|;;| "height of the text image, including shadows") (%x-offset 0 :type integer) (%y-offset 0 :type integer) (il:* il:|;;| "offsets from POSITION required to fit text image w/ shadows") (%bitmap nil :type bitmap) (il:* il:|;;| "the image shadows are constructed from"))(defstruct text-shadow (il:* il:|;;;| "a specification of a call to IL:BITBLT.  a list of these is used to achieve special effects when displaying text.  the most common effect is that of shadowed text, hence the name TEXT-SHADOW.") (il:* il:|;;| "offset for this BLT") (dx 0 :type integer) (dy 0 :type integer) (il:* il:|;;| "args to IL:BITBLT") (source-type (quote il:input) :type (member il:input il:invert il:texture il:merge)) (operation (quote il:paint) :type (member il:paint il:replace il:erase il:invert)) (texture 0 :type texture))(defparameter *default-text-font* (il:fontcreate (quote il:helvetica) 12 (quote (il:bold il:regular il:regular))) "Default FONT for TEXT objects.")(defun make-text (&key string (position (make-position 0 0)) (alignment :left-bottom) (font *default-text-font*) shadows) (il:* il:|;;| "check args") (unless (il:positionp position) (error "~S not a position" position)) (ecase alignment ((:left-bottom :left-top :center :right-bottom :right-top))) (check-type font font) (let ((text (make-text-internal :string string :position position :alignment alignment :font font :shadows (internalize-text-shadows shadows)))) (il:* il:|;;| "fill in the caches") (update-text-caches text) text))(defun update-text-caches (text) (il:* il:|;;;| "compute & cache fields dependent upon string, font & shadows") (let ((string-width (il:stringwidth (text-string text) (text-font text)))) (il:* il:|;;| "optimization: only call IL:STRINGWIDTH once.") (update-text-dimensions text string-width) (update-text-bitmap text string-width)))(defun update-text-bitmap (text string-width) (il:* il:|;;;| "compute & cache the text image") (let* ((font (text-font text)) (bitmap (il:bitmapcreate string-width (il:fontheight font))) (dsp (il:dspcreate bitmap))) (il:dspfont font dsp) (il:moveto 0 (il:fontdescent font) dsp) (princ (text-string text) dsp) (setf (text-%bitmap text) bitmap)))(defun update-text-dimensions (text string-width) (il:* il:|;;;| "compute & cache width, height & offsets of TEXT, taking shadows into consideration.") (let* ((shadows (get-text-shadows text)) (max-dx (maximize (shadow shadows) (text-shadow-dx shadow))) (min-dx (minimize (shadow shadows) (text-shadow-dx shadow))) (max-dy (maximize (shadow shadows) (text-shadow-dy shadow))) (min-dy (minimize (shadow shadows) (text-shadow-dy shadow)))) (setf (text-%width text) (+ string-width max-dx (- min-dx))) (setf (text-%height text) (+ (il:fontheight (text-font text)) max-dy (- min-dy))) (setf (text-%x-offset text) (- min-dx)) (setf (text-%y-offset text) (- min-dy))) text)(defmacro maximize ((var list) form) (il:bquote (let ((si::$max-value$ nil) (si::$value$ nil)) (dolist ((il:\\\, var) (il:\\\, list) si::$max-value$) (setq si::$value$ (il:\\\, form)) (unless (and si::$max-value$ (> si::$max-value$ si::$value$)) (setq si::$max-value$ si::$value$))))))(defmacro minimize ((var list) form) (il:bquote (let* ((si::$min-value$ nil) (si::$value$ nil)) (dolist ((il:\\\, var) (il:\\\, list) si::$min-value$) (setq si::$value$ (il:\\\, form)) (unless (and si::$min-value$ (< si::$min-value$ si::$value$)) (setq si::$min-value$ si::$value$))))))(defun display-text (text destination &optional (scale *one-to-one*)) (il:* il:|;;;| "print TEXT, a TEXT structure, to DESTINATION, a valid destination for IL:BITBLT.") (let* ((position (text-position text)) (alignment (text-alignment text)) (x-coord (display-text-x-coord (scale-x (position-x position) scale) (text-%width text) alignment (text-%x-offset text))) (y-coord (display-text-y-coord (scale-y (position-y position) scale) (text-%height text) alignment (text-%y-offset text))) (bitmap (text-%bitmap text)) (width (il:bitmapwidth bitmap)) (height (il:bitmapheight bitmap))) (dolist (shadow (get-text-shadows text)) (il:bitblt bitmap 0 0 destination (+ x-coord (text-shadow-dx shadow)) (+ y-coord (text-shadow-dy shadow)) width height (text-shadow-source-type shadow) (text-shadow-operation shadow) (text-shadow-texture shadow)))))(defun display-text-x-coord (position-x width alignment x-offset) (+ (ecase alignment ((:left-bottom :left-top) position-x) ((:right-bottom :right-top) (- position-x width)) (:center (- position-x (floor width 2)))) x-offset))(defun display-text-y-coord (position-y height alignment y-offset) (+ (case alignment ((:left-bottom :right-bottom) position-y) ((:left-top :right-top) (- position-y height)) (:center (- position-y (floor height 2)))) y-offset))(defun set-text-string (text string) (il:* il:|;;;| "call this to change the string of a TEXT object") (setf (text-string text) string) (il:* il:|;;| "update all caches") (update-text-caches text) (il:* il:|;;| "return the string") string)(defglobalvar *text-shadows* (make-hash-table :test (quote eq)) "Cache of default shadows indexed by font.")(defparameter *text-shadow-factor* 10 "Text shadows will use the inverse of this number to determine what fraction of the font size should be shadow.")(defun get-text-shadows (text) (let ((shadows (text-shadows text))) (etypecase shadows ((member t) (get-text-shadows-internal (text-font text))) (symbol (il:* il:|;;| "user defined shadows") (let ((internal (gethash shadows *text-shadows*))) (or internal (error "No text shadows named ~S" shadows)))) (cons shadows))))(defun get-text-shadows-internal (font) (il:* il:|;;| "cache default shadows per font") (or (gethash font *text-shadows*) (setf (gethash font *text-shadows*) (make-text-shadows font))))(defun make-text-shadows (font &optional (factor *text-shadow-factor*)) (list (let ((depth (ceiling (il:fontheight font) factor))) (make-text-shadow :dx depth :dy (- depth) :operation (quote il:paint))) (make-text-shadow :dy 1) (make-text-shadow :dx 1) (make-text-shadow :dy -1) (make-text-shadow :dx -1) (make-text-shadow :operation (quote il:erase))))(defun externalize-text-shadows (shadows) (etypecase shadows (symbol shadows) (cons (mapcar (function (lambda (shadow) (list :dx (text-shadow-dx shadow) :dy (text-shadow-dy shadow) :operation (text-shadow-operation shadow) :source-type (text-shadow-source-type shadow) :texture (text-shadow-texture shadow)))) shadows))))(defun internalize-text-shadows (shadows) (etypecase shadows (symbol (il:* il:|;;| "named shadows -- handled by GET-TEXT-SHADOWS") shadows) (cons (il:* il:|;;| "explitly specified shadows") (internalize-text-shadows-internal shadows))))(defun internalize-text-shadows-internal (shadows) (mapcar (function (lambda (shadow) (if (text-shadow-p shadow) shadow (il:* il:|;;| "parse shadow from property list") (let ((dx (getf shadow :dx 0)) (dy (getf shadow :dy 0)) (operation (getf shadow :operation (quote il:paint))) (source-type (getf shadow :source-type (quote il:input))) (texture (getf shadow :texture 0))) (il:* il:|;;| "check the types (defstruct won't)") (check-type dx integer) (check-type dy integer) (check-type operation (member il:paint il:replace il:erase il:invert)) (check-type source-type (member il:input il:invert il:texture il:merge)) (check-type texture texture) (il:* il:|;;| "make a shadow") (make-text-shadow :dx dx :dy dy :operation operation :source-type source-type :texture texture))))) shadows))(il:* il:|;;| "a definer for shadows")(def-define-type il:text-shadows "Text Shadows" :undefiner (lambda (name) (remhash name *text-shadows*)))(defdefiner def-text-shadows il:text-shadows (name &rest external-form) (il:bquote (setf (gethash (quote (il:\\\, name)) *text-shadows*) (internalize-text-shadows-internal (quote (il:\\\, external-form))))))(def-text-shadows nil nil)(def-text-shadows :ark (:operation il:erase) (:dx -1 :dy 1))(il:putprops il:rooms-text il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop