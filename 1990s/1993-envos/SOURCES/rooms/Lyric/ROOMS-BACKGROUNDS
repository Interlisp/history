(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "20-Apr-88 19:29:32" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-BACKGROUNDS.;12| 14683        il:|changes| il:|to:|  (il:functions internalize-all-backgrounds)      il:|previous| il:|date:| "25-Feb-88 20:14:40" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-BACKGROUNDS.;11|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-backgroundscoms)(il:rpaqq il:rooms-backgroundscoms ((il:* il:|;;| "code for painting background") (file-environments il:rooms-backgrounds) (il:p (export (quote (make-background *default-background-text-font* renaissance-bitmap squares-bitmap tile-bitmap internalize-all-backgrounds))) (require "ROOMS")) (il:structures background) (il:functions make-background internalize-background internalize-background-text internalize-all-backgrounds) (il:variables *default-background* *default-background-text-font*) (il:types bitmap font texture) (il:functions paint-background find-backgrounds draw&fill-box-within paint-region) (il:variables *screen-bitmap*) (il:variables renaissance-bitmap squares-bitmap tile-bitmap) (il:globalvars il:windowbackgroundshade il:wholescreen)))(il:* il:|;;| "code for painting background")(define-file-environment il:rooms-backgrounds :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (make-background *default-background-text-font* renaissance-bitmap squares-bitmap tile-bitmap internalize-all-backgrounds)))(require "ROOMS")(defstruct (background (:constructor make-background-internal)) (external-form nil :type list :read-only t) (il:* il:|;;| "what the user sees") (internal-form nil :type list) (il:* il:|;;| "what PAINT-BACKGROUND operates on"))(defun make-background (external-form) (make-background-internal :external-form external-form :internal-form (internalize-background external-form)))(defun internalize-background (background) (il:* il:|;;| "internalize BACKGROUND") (mapcar (function (lambda (prop-list) (case (car prop-list) (:whole-screen (check-type (second prop-list) (or bitmap texture)) (check-type (getf prop-list :border) (or null integer)) (check-type (getf prop-list :border-shade) (or null texture)) (il:bquote (:whole-screen (il:\\\, (second prop-list)) (il:\\\,@ (when (getf prop-list :border) (il:bquote (:border (il:\\\, (getf prop-list :border)))))) (il:\\\,@ (when (getf prop-list :border-shade) (il:bquote (:border-shade (il:\\\, (getf prop-list :border-shade))))))))) (:region (check-type (getf prop-list :shade) (or null bitmap texture)) (check-type (getf prop-list :border) (or null integer)) (check-type (getf prop-list :border-shade) (or null texture)) (il:bquote (:region (il:\\\, (internalize-region (second prop-list))) (il:\\\,@ (when (getf prop-list :shade) (il:bquote (:shade (il:\\\, (getf prop-list :shade)))))) (il:\\\,@ (when (getf prop-list :border) (il:bquote (:border (il:\\\, (getf prop-list :border)))))) (il:\\\,@ (when (getf prop-list :border-shade) (il:bquote (:border-shade (il:\\\, (getf prop-list :border-shade))))))))) (:text (list :text (let ((*default-text-font* *default-background-text-font*)) (internalize-background-text prop-list))))))) (eval-walk background)))(defun internalize-background-text (prop-list) (make-text :string (getf prop-list :text) :position (internalize-position (or (getf prop-list :position) (make-position 0 0))) :alignment (or (getf prop-list :alignment) :left-bottom) :font (let ((font (getf prop-list :font))) (if font (il:fontcreate font) *default-text-font*)) :shadows (getf prop-list :shadows t)))(defun internalize-all-backgrounds nil (il:* il:|;;| "do all the named rooms") (do-rooms (room) (let ((background (room-background room))) (setf (background-internal-form background) (internalize-background (background-external-form background))))) (il:* il:|;;| "do the Overview too (yes, this is ugly)") (let ((background (room-background *overview-room*))) (setf (background-internal-form background) (internalize-background (background-external-form background)))) nil)(defglobalparameter *default-background* (make-background (il:bquote ((:whole-screen (il:\\\, il:windowbackgroundshade))))))(defparameter *default-background-text-font* (il:fontcreate (quote il:timesromand) 36))(deftype bitmap nil (il:bquote (satisfies il:bitmapp)))(deftype font nil (il:bquote (satisfies il:fontp)))(deftype texture nil (il:bquote (satisfies il:texturep)))(defun paint-background (room dsp &key (scale *one-to-one*) no-text clipping-region) (dolist (background (find-backgrounds room)) (dolist (spec (background-internal-form background)) (case (first spec) (:whole-screen (draw&fill-box-within (scale-region il:wholescreen scale) dsp :shade (second spec) :border-width (scale-width (getf spec :border 0) scale) :border-shade (getf spec :border-shade il:blackshade) :clipping-region clipping-region)) (:region (draw&fill-box-within (scale-region (getf spec :region) scale) dsp :shade (getf spec :shade) :border-width (scale-width (getf spec :border 0) scale) :border-shade (getf spec :border-shade il:blackshade) :clipping-region clipping-region)) (:text (unless no-text (display-text (second spec) dsp scale)))))))(defun find-backgrounds (room) (il:* il:|;;;| "returns the list of backgrounds which apply to ROOM") (let (backgrounds found-whole-screen?) (do-inclusions (room room) (let ((background (room-background room))) (push background backgrounds) (il:* il:|;;| "stop when we see one which paints the whole background") (when (assoc :whole-screen background :test (quote eq)) (setq found-whole-screen? t) (return-from do-inclusions)))) (unless found-whole-screen? (push *default-background* backgrounds)) backgrounds))(defun draw&fill-box-within (region dsp &key (shade il:whiteshade) (border-width 0) clipping-region (border-shade il:blackshade)) (let ((left (region-left region)) (bottom (region-bottom region)) (width (region-width region)) (height (region-height region))) (if (or (null border-width) (zerop border-width)) (paint-region dsp region shade clipping-region) (let ((top (+ bottom height)) (right (+ left width)) (inside-left (+ left border-width)) (inside-width (- width border-width))) (paint-region dsp (make-region :left inside-left :bottom (+ bottom border-width) :width inside-width :height (- height border-width)) shade clipping-region) (il:* il:|;;| "up left") (il:bltshade border-shade dsp left bottom border-width height border-width nil clipping-region) (il:* il:|;;| "across top") (il:bltshade border-shade dsp inside-left (- top border-width) inside-width border-width nil clipping-region) (il:* il:|;;| "up the right") (il:bltshade border-shade dsp (- right border-width) bottom border-width (- height border-width) nil clipping-region) (il:* il:|;;| "across the bottom") (il:bltshade border-shade dsp inside-left bottom inside-width border-width nil clipping-region)))))(defun paint-region (destination region shade &optional clipping-region) (il:* il:|;;| "fill REGION of DESTINATION with SHADE") (typecase shade (bitmap (il:* il:|;;| "tile the bitmap within REGION") (let* ((region-left (region-left region)) (region-bottom (region-bottom region)) (region-width (region-width region)) (region-height (region-height region)) (bitmap-width (il:bitmapwidth shade)) (bitmap-height (il:bitmapheight shade)) (region-right (+ region-left region-width)) (region-top (+ region-bottom region-height)) (clipping-region (if clipping-region (il:intersectregions clipping-region region) region))) (il:* il:|;;| "blt in one copy in lower left corner") (il:bitblt shade 0 0 destination region-left region-bottom bitmap-width bitmap-height nil nil nil clipping-region) (il:* il:|;;| "blt across bottom, doubling size each time") (let ((left bitmap-width)) (loop (when (>= left region-right) (return)) (il:bitblt destination region-left region-bottom destination (+ left region-left) region-bottom left bitmap-height nil nil nil clipping-region) (setf left (+ left left)))) (il:* il:|;;| "blt up, doubling size each time") (let ((bottom bitmap-height)) (loop (when (>= bottom region-top) (return)) (il:bitblt destination region-left region-bottom destination region-left (+ region-bottom bottom) region-width bottom nil nil nil clipping-region) (setf bottom (+ bottom bottom)))))) (texture (il:* il:|;;| "squirt the texture onto the screen within REGION") (il:bltshade shade destination (region-left region) (region-bottom region) (region-width region) (region-height region) nil clipping-region))))(defglobalvar *screen-bitmap* (il:screenbitmap))(defglobalvar renaissance-bitmap (quote(defglobalparameter squares-bitmap (quote(defglobalparameter tile-bitmap (quote(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:windowbackgroundshade il:wholescreen))(il:putprops il:rooms-backgrounds il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop