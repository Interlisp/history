(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "23-Apr-88 21:27:44" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-WINDOW-HIDER.;12| 8253         il:|changes| il:|to:|  (il:advice il:attachwindow) (il:vars il:rooms-window-hidercoms)      il:|previous| il:|date:| " 6-Jan-88 20:56:16" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-WINDOW-HIDER.;11|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-window-hidercoms)(il:rpaqq il:rooms-window-hidercoms ((file-environments il:rooms-window-hider) (il:p (export (quote (hide-window un-hide-window window-hidden? all-windows lost-windows on-hidden-screen))) (require "ROOMS")) (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window)))) (or (il:reclook (quote il:screen)) (il:eval (il:sysreclook1 (quote il:screen))))) (il:globalvars il:\\mainscreen il:\\screenbitmaps il:\\screens)) (il:variables *hidden-screen* *hidden-screen-bitmap* *hidden-windows*) (il:functions screen-needs-reset? reset-hidden-screen) (il:functions hide-all-windows hide-window hide-window-internal un-hide-window un-hide-window-internal do-totop-functions window-hidden?) (il:functions all-windows lost-windows) (il:functions on-hidden-screen make-hidden-window) (il:advise il:attachwindow) (il:declare\: il:eval@compile (il:p (when (eq il:makesysname :lyric) (fix-advice (quote il:attachwindow)))))))(define-file-environment il:rooms-window-hider :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (hide-window un-hide-window window-hidden? all-windows lost-windows on-hidden-screen)))(require "ROOMS")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window))))(or (il:reclook (quote il:screen)) (il:eval (il:sysreclook1 (quote il:screen))))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:\\mainscreen il:\\screenbitmaps il:\\screens)))(defglobalvar *hidden-screen* nil)(defglobalvar *hidden-screen-bitmap* nil)(defglobalvar *hidden-windows* (make-hash-table :test (quote eq)))(defun screen-needs-reset? nil (not (and *hidden-screen* (= (il:|fetch| (il:screen il:scwidth) il:|of| *hidden-screen*) il:screenwidth) (= (il:|fetch| (il:screen il:scheight) il:|of| *hidden-screen*) il:screenheight))))(defun reset-hidden-screen nil (when *hidden-screen-bitmap* (setq il:\\screenbitmaps (delete *hidden-screen-bitmap* il:\\screenbitmaps :test (quote eq)))) (setq *hidden-screen-bitmap* (il:bitmapcreate il:screenwidth il:screenheight)) (push *hidden-screen-bitmap* il:\\screenbitmaps) (let ((hidden-windows (and *hidden-screen* (with-collection (maphash (function (lambda (window true) (collect window))) *hidden-windows*))))) (when *hidden-screen* (il:* il:|;;| "remove old screen") (setq il:\\screens (delete *hidden-screen* il:\\screens :test (quote eq)))) (setq *hidden-screen* (il:|create| il:screen il:sconoff il:_ (quote il:on) il:scdestination il:_ *hidden-screen-bitmap* il:scwidth il:_ il:screenwidth il:scheight il:_ il:screenheight il:sctopw il:_ nil il:sctitleds il:_ (il:|fetch| (il:screen il:sctitleds) il:|of| il:\\mainscreen))) (push *hidden-screen* il:\\screens) (il:* il:|;;| "re-hide windows on new hidden screen") (dolist (hidden-window hidden-windows) (hide-window hidden-window)) *hidden-screen*))(defun hide-all-windows nil (dolist (window (nreverse (all-windows))) (hide-window window)))(defun hide-window (window) (il:* il:|;;;| "move WINDOW from the normal screen to the hidden screen") (let ((window (main-window window))) (unless (window-hidden? window) (setf (gethash window *hidden-windows*) t) (il:windowaddprop window (quote il:closefn) (quote un-hide-window)) (let ((icon (window-icon window))) (when icon (hide-window-internal icon))) (hide-window-internal window) (il:* il:|;;| "return T if we succeded") t)))(defun hide-window-internal (window) (il:* il:|;;| "note: We don't open the window on the hidden screen.  This is an optimization.  Whenever a window is un-hidden it must first be brought to the top.  When there are many windows this can significantly slow things down.  Thus we leave them closed & let them open on demand (when they're written to).") (unless (eq (il:fetch (il:window il:screen) il:of window) *hidden-screen*) (dolist (attached-window (il:windowprop window (quote il:attachedwindows))) (il:* il:|;;| "recursively hide attached windows") (hide-window-internal attached-window)) (when (il:openwp window) (il:* il:|;;| "save the image") (il:\\closew1 window)) (il:* il:|;;| "switch screens") (il:freplace (il:window il:screen) il:of window il:with *hidden-screen*) (il:* il:|;;| "switch the destination") (il:dspdestination *hidden-screen-bitmap* window) (il:* il:|;;| "(IL:\\openw1 WINDOW)")))(defun un-hide-window (window) (il:* il:|;;;| "move WINDOW from the hidden screen to the normal screen") (let ((window (main-window window))) (unless (eq (il:fetch (il:window il:screen) il:of window) il:\\mainscreen) (let* ((icon (window-icon window)) (shrunken? (shrunken? window))) (when icon (un-hide-window-internal icon (not shrunken?))) (un-hide-window-internal window shrunken?)) (remhash window *hidden-windows*) (il:windowdelprop window (quote il:closefn) (quote un-hide-window)) (il:* il:|;;| "return T if we succeded") t)))(defun un-hide-window-internal (window &optional no-open) (unless (eq (il:fetch (il:window il:screen) il:of window) il:\\mainscreen) (when (il:openwp window) (il:* il:|;;| "save the image") (il:\\closew1 window)) (il:* il:|;;| "switch screens") (il:freplace (il:window il:screen) il:of window il:with il:\\mainscreen) (il:* il:|;;| "switch destinations (redundancy in D window system)") (il:dspdestination il:|ScreenBitMap| window) (unless no-open (il:* il:|;;| "open it on the main screen") (il:\\openw1 window)) (dolist (attached-window (il:windowprop window (quote il:attachedwindows))) (il:* il:|;;| "recursively un-hide attached windows") (un-hide-window-internal attached-window no-open)) (unless no-open (do-totop-functions window))))(defun do-totop-functions (window) (let ((totopfn (il:windowprop window (quote il:totopfn)))) (il:* il:|;;| "TOTOPFN's often look at what's behind a window & since this window now has a new screen behind it we do these.  This makes buttons & icons work right.  ") (when (and totopfn (not (il:* il:|;;| "we take care of attached windows already") (or (il:eqmemb (quote il:topattachedwindows) totopfn) (il:eqmemb (quote il:attachedwindowtotopfn) totopfn)))) (il:douserfns totopfn window))))(defun window-hidden? (window) (eq (il:fetch (il:window il:screen) il:of window) *hidden-screen*))(defun all-windows (&optional include-hidden?) (il:* il:|;;;| "returns a list of all the window groups in bottom first order.") (let (result main-window) (dolist (window (il:openwindows il:\\mainscreen) result) (pushnew (main-window window) result :test (quote eq))) (when include-hidden? (maphash (function (lambda (window true) (push window result))) *hidden-windows*)) result))(defun lost-windows nil (il:* il:|;;;| "returns the subset of all existing windows which are not in any room.") (il:* il:|;;;| "as UPDATE-PLACEMENTS guarentees us that all un-hidden windows belong to a room, we know that all lost windows must be hidden. ") (update-placements) (with-collection (dolist (window (all-windows t)) (unless (find-rooms-containing window) (collect window)))))(defmacro on-hidden-screen (&body body) (il:bquote (let ((il:\\cursorscreen *hidden-screen*)) (declare (special il:\\cursorscreen)) (il:\\\,@ body))))(defun make-hidden-window (&optional region title border no-open?) (on-hidden-screen (il:createw region title border no-open?)))(reinstall-advice (quote il:attachwindow) :after (quote ((:last (when (and (window-hidden? (il:insure.window il:mainwindow)) (not (window-hidden? (il:insure.window il:windowtoattach)))) (hide-window-internal il:windowtoattach))))))(il:readvise il:attachwindow)(il:declare\: il:eval@compile (when (eq il:makesysname :lyric) (fix-advice (quote il:attachwindow))))(il:putprops il:rooms-window-hider il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop