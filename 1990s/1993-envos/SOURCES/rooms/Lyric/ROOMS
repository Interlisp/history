(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (DEFPACKAGE "ROOMS" (USE "LISP" "XCL") (SHADOW CLROOM)))(il:filecreated "21-Apr-88 11:00:40" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS.;48| 6199         il:|changes| il:|to:|  (il:vars il:roomscoms) (il:functions aroundexitfn %internalize-all-placements)      il:|previous| il:|date:| "20-Apr-88 21:01:09" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS.;47|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:roomscoms)(il:rpaqq il:roomscoms ((il:p (provide "ROOMS") (export (quote (*rooms-system-date*)) "ROOMS") (il:* il:|;;| "first load appropriate patch file") (case il:makesysname (:lyric (il:filesload il:rooms-lyric-patches)))) (file-environments il:rooms) (il:coms (il:p (proclaim (quote (global *rooms-system-date*)))) (il:e (setq *rooms-system-date* (il:date))) (il:vars *rooms-system-date*)) (il:* il:|;;| "load Rooms modules") (il:files il:rooms-core il:rooms-d il:rooms-window-hider il:rooms-geometry il:rooms-text il:rooms-window-types il:rooms-buttons il:rooms-suites il:rooms-interactive il:rooms-backgrounds il:rooms-placement-editor il:rooms-overview) (il:p (il:* il:|;;| "load appropriate window types") (case il:makesysname (:lyric (il:filesload il:rooms-lyric-window-types)) (t (il:filesload (il:sysload) il:rooms-medley-window-types)))) (il:coms (il:* il:|;;| "code to handle being booted on different sized screen than loaded upon") (il:declare\: il:eval@compile il:dontcopy il:donteval@load (il:files (il:loadcomp il:source) il:rooms-window-hider)) (il:functions aroundexitfn reset-screen %internalize-all-placements %internalize-placements) (il:p (unless (member (quote aroundexitfn) il:aroundexitfns) (il:* il:|;;| "needs to be last, so that it gets called before GREET") (setq il:aroundexitfns (nconc il:aroundexitfns (list (quote aroundexitfn))))) (il:* il:|;;| "smash system code which moves windows around on reboot so we don't fight with it.") (il:changename (quote il:\\startdisplay) (quote il:\\move.windows.onto.screen) (quote il:nill)))) (il:p (eval-when (load) (unless *current-room* (il:* il:|;;| "bootstrap") (reset-hidden-screen) (reset))))))(provide "ROOMS")(export (quote (*rooms-system-date*)) "ROOMS")(il:* il:|;;| "first load appropriate patch file")(case il:makesysname (:lyric (il:filesload il:rooms-lyric-patches)))(define-file-environment il:rooms :compiler :compile-file :package (defpackage "ROOMS" (:use "LISP" "XCL") (:shadow cl:room)) :readtable "XCL")(proclaim (quote (global *rooms-system-date*)))(il:rpaqq *rooms-system-date* "21-Apr-88 11:00:46")(il:* il:|;;| "load Rooms modules")(il:filesload il:rooms-core il:rooms-d il:rooms-window-hider il:rooms-geometry il:rooms-text il:rooms-window-types il:rooms-buttons il:rooms-suites il:rooms-interactive il:rooms-backgrounds il:rooms-placement-editor il:rooms-overview)(il:* il:|;;| "load appropriate window types")(case il:makesysname (:lyric (il:filesload il:rooms-lyric-window-types)) (t (il:filesload (il:sysload) il:rooms-medley-window-types)))(il:* il:|;;| "code to handle being booted on different sized screen than loaded upon")(il:declare\: il:eval@compile il:dontcopy il:donteval@load (il:filesload (il:loadcomp il:source) il:rooms-window-hider))(defun aroundexitfn (event) (case event ((il:beforesavevm il:beforelogout il:beforesysout il:beforemakesys) (il:* il:|;;| "do nothing")) ((il:aftersavevm il:afterlogout il:aftersysout il:aftermakesys) (when (screen-needs-reset?) (il:* il:|;;| "reset if on different sized screen") (reset-screen)))))(defun reset-screen nil (il:* il:|;;;| "called when the size of the screen has changed") (%internalize-all-placements) (il:* il:|;;| "re-build hidden screen") (reset-hidden-screen) (il:* il:|;;| "force backgrounds to be re-internalized") (internalize-all-backgrounds))(defun %internalize-all-placements nil (il:* il:|;;;| "called when we re-boot on different sized screen.  re-scales the placement regions & icon-positions of all placements.") (il:* il:|;;;| "must be called before RESET-HIDDEN-SCREEN so that we can find old dimensions of screen.") (let ((old-screen-width (il:|fetch| (il:screen il:scwidth) il:|of| *hidden-screen*)) (old-screen-height (il:|fetch| (il:screen il:scheight) il:|of| *hidden-screen*))) (update-placements) (do-rooms (room) (il:* il:|;;| "do all the named rooms") (%internalize-placements room old-screen-width old-screen-height) (room-changed room :placements)) (il:* il:|;;| "do our one un-named room") (%internalize-placements *overview-room* old-screen-width old-screen-height) (il:* il:|;;| "redisplay the current room.") (il:process.result (go-to-room *current-room* :no-update t) t)))(defun %internalize-placements (room old-screen-width old-screen-height) (dolist (placement (room-placements room)) (il:* il:|;;| "re-scale placements to new size of screen") (let ((region (placement-region placement))) (setf (placement-region placement) (internalize-region (make-region :left (externalize-coordinate (region-left region) old-screen-width) :bottom (externalize-coordinate (region-bottom region) old-screen-height) :width (externalize-coordinate (region-width region) old-screen-width) :height (externalize-coordinate (region-height region) old-screen-height))))) (let ((position (placement-icon-position placement))) (when position (setf (placement-icon-position placement) (internalize-position (make-position (externalize-coordinate (position-x position) old-screen-width) (externalize-coordinate (position-y position) old-screen-height))))))))(unless (member (quote aroundexitfn) il:aroundexitfns) (il:* il:|;;| "needs to be last, so that it gets called before GREET") (setq il:aroundexitfns (nconc il:aroundexitfns (list (quote aroundexitfn)))))(il:* il:|;;| "smash system code which moves windows around on reboot so we don't fight with it.")(il:changename (quote il:\\startdisplay) (quote il:\\move.windows.onto.screen) (quote il:nill))(eval-when (load) (unless *current-room* (il:* il:|;;| "bootstrap") (reset-hidden-screen) (reset)))(il:putprops il:rooms il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop