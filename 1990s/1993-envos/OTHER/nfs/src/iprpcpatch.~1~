(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED "14-Jun-90 15:21:20" {DSK}<LISPFILES>ETHERNET>TCP>NFS>IPRPCPATCH.;1 33938        previous date%: "20-Jan-89 18:35:56" {DSK}<LISPFILES>ETHERNET>NFS>IPRPCPATCH.;1)(* "Copyright (c) 1988, 1989, 1990 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT IPRPCPATCHCOMS)(RPAQQ IPRPCPATCHCOMS ((COMS                             (* ; "Prettier printing")                                 (FNS IPTRACE PRINTIP PRINTICMP)                                 (FNS \IP.READ.STRING.ADDRESS)                                 (INITVARS IPTRACETIME)                                                             (* ;                                        "This is copied verbatim from LLETHER for benefit of Lyric:")                                 (FNS MAKE-NETWORK-TRACE-WINDOW))                           (COMS                             (* ; "ICMP stuff")                                 (FNS \ICMP.INPUT \ICMP.HANDLE.REDIRECT)                                 (DECLARE%: EVAL@COMPILE DONTCOPY (MACROS IP.FROM.ICMP)))                           [COMS                             (* ; "From TCPLLIP")                                 (FNS \IP.ADD.PROTOCOL \IP.CLOSE.SOCKET \IP.FIND.PROTOCOL.SOCKET                                       \IP.OPEN.SOCKET \IPSOCKET.DEFPRINT \IP.BROADCAST.ADDRESS                                       \IPADDRESSCLASS \IPNETADDRESS \IPHOSTADDRESS)                                 (FNS \IP.MAYBE.READ.HOSTS.TXT \IP.REINITIALIZE.FROM.SCRATCH                                       \IP.ROUTE.PACKET \IP.PROCESS.OPTIONS)                                 (ADDVARS (*IP-PROTOCOL-NAME-FROM-NUMBER* (17 . "UDP")                                                 (6 . "TCP")                                                 (1 . "ICMP")))                                 (GLOBALVARS *IP-PROTOCOL-NAME-FROM-NUMBER*)                                 (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS IPADDRESS))                                 (DECLARE%: DONTEVAL@LOAD DOCOPY (P (DEFPRINT 'IPSOCKET                                                                            '\IPSOCKET.DEFPRINT]                           [COMS                             (* ; "UDP")                                 (FNS \UDP.HANDLE.ICMP UDP.INIT UDP.OPEN.SOCKET                                       \UDP.FLUSH.SOCKET.QUEUE UDP.GET)                                 (DECLARE%: DONTEVAL@LOAD DOCOPY (P (UDP.INIT]                           (COMS                             (* ; "TCP")                                 (FNS \TCP.DELETE.TCB))                           (COMS                             (* ; "debugging")                                 (FNS \FINDPOINTERS))))(* ; "Prettier printing")(DEFINEQ(IPTRACE(LAMBDA (FLG REGION) (* ; "Edited 13-Sep-88 14:53 by bvm") (MAKE-NETWORK-TRACE-WINDOW (QUOTE IPTRACEFLG) (QUOTE IPTRACEFILE) "IP traffic" REGION FLG)))(PRINTIP(LAMBDA (IP CALLER FILE PRE.NOTE DOFILTER) (* ; "Edited 28-Apr-88 14:05 by bvm") (PROG ((*STANDARD-OUTPUT* (GETSTREAM (OR FILE IPTRACEFILE) (QUOTE OUTPUT))) (PROTOCOL (fetch (IP IPPROTOCOL) of IP)) MACRO LENGTH) (COND (DOFILTER (COND ((COND (IPONLYTYPES (NOT (FMEMB PROTOCOL IPONLYTYPES))) (IPIGNORETYPES (FMEMB PROTOCOL IPIGNORETYPES))) (RETURN (PRIN1 (SELECTQ CALLER ((PUT RAWPUT) (QUOTE !)) ((GET RAWGET) (QUOTE +)) (QUOTE ?)))))))) (AND PRE.NOTE (printout NIL T PRE.NOTE)) (if CALLER then (* ; "Print GET or PUT") (FRESHLINE) (PRINTOUT NIL CALLER " ")) (printout NIL "From " (\IP.ADDRESS.TO.STRING (fetch (IP IPSOURCEADDRESS) of IP)) " to " (\IP.ADDRESS.TO.STRING (fetch (IP IPDESTINATIONADDRESS) of IP))) (if IPTRACETIME then (LET ((CSECS (\CENTICLOCK IP))) (PRINTOUT NIL " [" |.I4| (IQUOTIENT CSECS 100) "." |.I2..T| (IREMAINDER CSECS 100) "]"))) (TERPRI) (COND ((AND (SETQ MACRO (CDR (FASSOC PROTOCOL IPPRINTMACROS))) (NLISTP MACRO)) (* ; "Macro is a function to which to dispatch for the printing.") (CL:FUNCALL MACRO IP *STANDARD-OUTPUT*) (RETURN (TERPRI)))) (printout NIL "Length = " |.P2| (SETQ LENGTH (fetch (IP IPTOTALLENGTH) of IP)) " bytes" " (header + " |.P2| (IDIFFERENCE LENGTH \IPOVLEN) ")" T "Protocol = ") (PRINTCONSTANT PROTOCOL IPPROTOCOLTYPES NIL) (TERPRI) (COND ((IGREATERP LENGTH \IPOVLEN) (* ; "MACRO tells how to print data.") (PRIN1 "Contents: ") (PRINTIPDATA IP (OR MACRO (QUOTE (BYTES 12 |...|)))))) (TERPRI) (RETURN IP))))(PRINTICMP(LAMBDA (ICMP FILE) (* ; "Edited 13-Sep-88 11:35 by bvm") (LET ((*PRINT-BASE* 10) (TYPE (fetch (ICMP ICMPTYPE) of ICMP)) (CODE (fetch (ICMP ICMPCODE) of ICMP))) (PRINTCONSTANT TYPE ICMPTYPES FILE "\ICMP.") (SPACES 1 FILE) (SELECTC TYPE (\ICMP.REDIRECT (PRINTCONSTANT CODE ICMPREDIRECTS FILE "\ICMP.REDIRECT.") (PRINTOUT FILE " " (\IP.ADDRESS.TO.STRING (fetch (ICMPREDIRECT ICMPGATEWAY) of ICMP)))) (\ICMP.DEST.UNREACHABLE (PRINTCONSTANT CODE ICMPUNREACHABLES FILE "\ICMP.")) (PRIN3 CODE FILE)) (TERPRI FILE)))))(DEFINEQ(\IP.READ.STRING.ADDRESS(LAMBDA (STRING.OR.ATOM) (* ; "Edited 21-Apr-88 14:41 by bvm") (for CHAR instring (MKSTRING STRING.OR.ATOM) bind (RESULT _ (NCREATE (QUOTE FIXP))) (INDEX _ 0) BYTE do (if (> INDEX 3) then (* ; "Got 3 parts and there's still more to go, must be bad") (RETURN NIL) elseif (EQ CHAR (CHARCODE %.)) then (if BYTE then (\PUTBASEBYTE RESULT INDEX BYTE)) (SETQ BYTE NIL) (add INDEX 1) elseif (AND (SETQ CHAR (CL:DIGIT-CHAR-P (CL:INT-CHAR CHAR))) (< (SETQ BYTE (+ (if BYTE then (TIMES BYTE 10) else 0) CHAR)) 256)) then (* ; "Accumulated decimal digit, and we haven't overflowed a byte yet") else (* ; "Malformed") (RETURN NIL)) finally (if BYTE then (\PUTBASEBYTE RESULT INDEX BYTE) (add INDEX 1)) (RETURN (AND (EQ INDEX 4) RESULT))))))(RPAQ? IPTRACETIME NIL)(* ; "This is copied verbatim from LLETHER for benefit of Lyric:")(DEFINEQ(MAKE-NETWORK-TRACE-WINDOW(LAMBDA (FLGVAR STREAMVAR TITLE REGION FLG) (* ; "Edited 14-Jan-88 18:06 by bvm") (* ;; "Create a window for controlling network tracing.  FLGVAR and STREAMVAR are the variables controlling whether and where tracing occurs.  TITLE and REGION are for creating the window, FLG is the initial value of FLGVAR (defaults to T) ") (LET (W DS) (if (WINDOWP (SETQ W (EVALV STREAMVAR))) then (SETQ DS (WINDOWPROP W (QUOTE DSP))) elseif (NOT (AND (DISPLAYSTREAMP W) (SETQ W (WFROMDS (SETQ DS W) T)))) then (SETQ DS (WINDOWPROP (SETQ W (CREATEW REGION TITLE)) (QUOTE DSP)))) (TOTOPW W) (WINDOWPROP W (QUOTE FLG&STREAM) (CONS FLGVAR STREAMVAR)) (WINDOWPROP W (QUOTE BUTTONEVENTFN) (FUNCTION (LAMBDA (WINDOW) (* ; "Left or middle changes state") (COND ((LASTMOUSESTATE (NOT UP)) (\CHANGE.ETHER.TRACING WINDOW (CAR (WINDOWPROP WINDOW (QUOTE FLG&STREAM))))))))) (WINDOWPROP W (QUOTE CLOSEFN) (FUNCTION (LAMBDA (WINDOW) (* ; "Closing turns off tracing") (DESTRUCTURING-BIND (FLG . STRM) (WINDOWPROP WINDOW (QUOTE FLG&STREAM)) (COND ((EQ (WINDOWPROP WINDOW (QUOTE DSP)) (EVALV STRM)) (SET FLG NIL) (SET STRM T))))))) (WINDOWPROP W (QUOTE SHRINKFN) (FUNCTION (LAMBDA (WINDOW) (* ; "Turn off tracing while window shrunk") (DESTRUCTURING-BIND (FLG . STRM) (WINDOWPROP WINDOW (QUOTE FLG&STREAM)) (COND ((EQ (WINDOWPROP WINDOW (QUOTE DSP)) (EVALV STRM)) (WINDOWPROP WINDOW FLG (EVALV FLG)) (SET FLG NIL))))))) (WINDOWPROP W (QUOTE EXPANDFN) (FUNCTION (LAMBDA (WINDOW) (* ; "Restore tracing to previous state") (DESTRUCTURING-BIND (FLG . STRM) (WINDOWPROP WINDOW (QUOTE FLG&STREAM)) (COND ((EQ (WINDOWPROP WINDOW (QUOTE DSP)) (EVALV STRM)) (SET FLG (WINDOWPROP WINDOW FLG NIL)))))))) (DSPFONT (FONTCREATE (QUOTE GACHA) 8) DS) (DSPSCROLL T DS) (TOTOPW W) (SET STREAMVAR DS) (SET FLGVAR (OR FLG T))))))(* ; "ICMP stuff")(DEFINEQ(\ICMP.INPUT(LAMBDA (ICMP) (* ; "Edited 25-Aug-88 11:51 by bvm") (* ;;; "ICMP packet received") (COND ((\IP.CHECKSUM.OK (\IPCHECKSUM ICMP (fetch (ICMP ICMPBASE) of ICMP) (\IPDATALENGTH ICMP))) (SELECTC (fetch (ICMP ICMPTYPE) of ICMP) (\ICMP.ECHO.REPLY (\ICMP.HANDLE.ECHO.REPLY ICMP)) (\ICMP.ECHO (\ICMP.REPLY.TO.ECHO ICMP)) (\ICMP.DEST.UNREACHABLE (* ; "Some packet couldn't reach its destination.  Tell the protocol that sent the packet (found in the enclosed header)") (LET* ((SEGMENT (IP.FROM.ICMP ICMP)) (PROTOCOL (\IP.FIND.PROTOCOL (fetch (IP IPPROTOCOL) of SEGMENT)))) (COND (PROTOCOL (CL:FUNCALL (fetch (IPSOCKET IPSICMPFN) of PROTOCOL) ICMP SEGMENT PROTOCOL))))) (\ICMP.REDIRECT (\ICMP.HANDLE.REDIRECT ICMP)) (\ICMP.ADDRESS.MASK.REPLY (ICMP.HANDLE.ADDRESS.MASK ICMP)) (\RELEASE.ETHERPACKET ICMP))) (T (AND IPTRACEFLG (PRINTPACKET ICMP (QUOTE ICMPGET) IPTRACEFILE "[dropping packet--bad ICMP checksum]"))))))(\ICMP.HANDLE.REDIRECT(LAMBDA (ICMP) (* ; "Edited 24-Aug-88 16:16 by bvm") (* ;;; "Called when a gateway tells us a better route to the destination.  There is a code for type of redirect, but it's not obviously meaningful ") (LET* ((NDB (fetch EPNETWORK of ICMP)) (GATEWAY (fetch (ICMPREDIRECT ICMPGATEWAY) of ICMP)) (DESTADDRESS (fetch (IP IPDESTINATIONADDRESS) of (IP.FROM.ICMP ICMP))) (DESTNET (\IPNETADDRESS DESTADDRESS))) (* ;; "Store the new route in the routing table") (COND ((= DESTNET (fetch (NDB NDBIPNET#) of NDB)) (LET* ((SOURCEADDRESS (fetch (NDB NDBIPHOST#) of NDB)) (SUBNETMASK (CDR (SASSOC SOURCEADDRESS \IP.SUBNET.MASKS))) (DESTSUBNET (LOGAND DESTADDRESS SUBNETMASK))) (* ;; "The dest net is a local net.  Either we fouled up in our routing, or the dest net is really a subnet") (COND ((NOT (= DESTSUBNET (LOGAND SOURCEADDRESS SUBNETMASK))) (* ; "Yes, this is a redirect for a subnet, if such is possible") (SPUTASSOC DESTSUBNET GATEWAY \IP.ROUTING.TABLE))))) (T (* ; "Non-local net") (SPUTASSOC DESTNET GATEWAY \IP.ROUTING.TABLE))) (* ;; "If it's a 10MB network, see if we have the 10MB address of this gateway, and if not, request the address") (SELECTQ (fetch (NDB NETTYPE) of NDB) (10 (COND ((NOT (\AR.TRANSLATE.TO.10MB GATEWAY T)) (\AR.TRANSLATE.TO.10MB GATEWAY)))) NIL) (\RELEASE.ETHERPACKET ICMP)))))(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE [PUTPROPS IP.FROM.ICMP MACRO (OPENLAMBDA (PKT)                                 (* ;; "Returns a pointer to the 'Internet header + 64 bits' found in an ICMP packet, offset so that it looks like an IP record.  I.e., add to the base the size of the IP header + ICMP header")                                    (\ADDBASE PKT (+ (UNFOLD (fetch (IP IPHEADERLENGTH)                                                                of PKT)                                                            WORDSPERCELL)                                                     (CONSTANT (+ (FOLDHI \ICMPOVLEN BYTESPERWORD)                                                                  2]))(* ; "From TCPLLIP")(DEFINEQ(\IP.ADD.PROTOCOL(LAMBDA (PROTOCOL SOCKETCOMPAREFN NOSOCKETFN INPUTFN ICMPFN) (* ; "Edited 25-Aug-88 12:10 by bvm") (* ;;; "Find an existing protocol, or create a new one, and return the socket chain head.  If the protocol already exists, the remaining arguments redefine the current slots.") (LET* ((FOUND (find SOCKET in \IP.PROTOCOLS suchthat (EQ (fetch (IPSOCKET PROTOCOL) of SOCKET) PROTOCOL))) (SOCKET (OR FOUND (create IPSOCKET PROTOCOL _ PROTOCOL IPSQUEUE _ NIL IPSQUEUEALLOC _ 0 IPSEVENT _ NIL)))) (replace (IPSOCKET IPSDESTSOCKETCOMPAREFN) of SOCKET with SOCKETCOMPAREFN) (replace (IPSOCKET IPSINPUTFN) of SOCKET with (OR INPUTFN (FUNCTION \IP.DEFAULT.INPUTFN))) (replace (IPSOCKET IPSNOSOCKETFN) of SOCKET with (OR NOSOCKETFN (FUNCTION \IP.DEFAULT.NOSOCKETFN))) (replace (IPSOCKET IPSICMPFN) of SOCKET with (OR ICMPFN (FUNCTION \RELEASE.ETHERPACKET))) (if (NOT FOUND) then (* ; "Now that it's all filled in, add it to the protocol set") (push \IP.PROTOCOLS SOCKET)) SOCKET)))(\IP.CLOSE.SOCKET(LAMBDA (SOCKET PROTOCOL NOERRORFLG) (* ; "Edited 26-Aug-88 12:33 by bvm") (* ;;; "Close the given socket.  Call this only after the higher level protocol has finished doing its closing operations.") (* ;; "For some silly reason, this fn was defined to take not an IPSOCKET object but rather the socket number, or whatever was in the socket slot.  For backward compatibility, let's do both (sigh).") (LET ((PREV (\IP.FIND.PROTOCOL PROTOCOL)) NEXT) (COND ((AND PREV (while (SETQ NEXT (ffetch (IPSOCKET IPSLINK) of PREV)) do (if (OR (EQ SOCKET NEXT) (EQ SOCKET (ffetch (IPSOCKET IPSOCKET) of NEXT))) then (* ; "Found it, so splice it out") (freplace (IPSOCKET IPSLINK) of PREV with (ffetch (IPSOCKET IPSLINK) of NEXT)) (freplace (IPSOCKET IPSLINK) of NEXT with NIL) (RETURN T)) (SETQ PREV NEXT)))) ((NOT NOERRORFLG) (ERROR "Socket not found" SOCKET))))))(\IP.FIND.PROTOCOL.SOCKET(LAMBDA (IP PROTOCOLCHAIN) (* ; "Edited 26-Aug-88 12:44 by bvm") (* ;; "Find the socket specified by IP packet.  PROTOCOLCHAIN is the head of the socket chain for this protocol; if NIL we look it up.") (LET ((SOCKET (OR PROTOCOLCHAIN (\IP.FIND.PROTOCOL (ffetch (IP IPPROTOCOL) of IP)))) RESULT) (* ;; "Note that we start the comparisons with the dummy head, even though we expect that to fail.  This is so that a socketless protocol, such as ICMP can use this dummy head as the sole handler of the protocol.") (AND SOCKET (when (SETQ RESULT (CL:FUNCALL (ffetch (IPSOCKET IPSDESTSOCKETCOMPAREFN) of SOCKET) IP SOCKET)) do (RETURN (COND ((EQ RESULT T) SOCKET) (T (* ; "This is a little strange.  Non-T comparison result will be passed as the second arg to the chain head's inputfn when a packet arrives here.") RESULT))) repeatwhile (SETQ SOCKET (ffetch (IPSOCKET IPSLINK) of SOCKET)))))))(\IP.OPEN.SOCKET(LAMBDA (PROTOCOL SOCKET NOERRORFLG DESTSOCKETCOMPAREFN NOSOCKETFN INPUTFN ICMPFN) (* ; "Edited 25-Aug-88 12:43 by bvm") (* ;;; "Open a new socket for a protocol.  The last 4 fns default to those specified when the protocol was enabled.") (* ;; "Keeping NOSOCKETFN for back compatibility, but it doesn't really make any sense --bvm.") (LET ((MASTERSOC (\IP.FIND.PROTOCOL PROTOCOL)) OLDSOC NEWSOC) (COND ((NOT (type? IPSOCKET MASTERSOC)) (COND ((NOT NOERRORFLG) (ERROR "Attempt to open socket in unknown protocol" PROTOCOL SOCKET)))) ((if SOCKET then (SETQ OLDSOC (\IP.FIND.SOCKET SOCKET MASTERSOC)) else (* ; "Pick a random socket that is smallp but not very small, so as to avoid well-known sockets") (SETQ SOCKET (LOGOR (LOGAND (DAYTIME) 65535) 32768)) (while (\IP.FIND.SOCKET SOCKET MASTERSOC) do (SETQ SOCKET (- SOCKET 1))) NIL) (COND (NOERRORFLG OLDSOC) (T (ERROR "Attempt to open an existing socket" OLDSOC)))) (T (SETQ NEWSOC (create IPSOCKET IPSLINK _ (ffetch (IPSOCKET IPSLINK) of MASTERSOC) IPSOCKET _ SOCKET PROTOCOL _ PROTOCOL IPSDESTSOCKETCOMPAREFN _ (OR DESTSOCKETCOMPAREFN (ffetch (IPSOCKET IPSDESTSOCKETCOMPAREFN) of MASTERSOC)) IPSNOSOCKETFN _ (OR NOSOCKETFN (ffetch (IPSOCKET IPSNOSOCKETFN) of MASTERSOC)) IPSINPUTFN _ (OR INPUTFN (ffetch (IPSOCKET IPSINPUTFN) of MASTERSOC)) IPSICMPFN _ (OR ICMPFN (ffetch (IPSOCKET IPSICMPFN) of MASTERSOC)))) (freplace (IPSOCKET IPSLINK) of MASTERSOC with NEWSOC) NEWSOC)))))(\IPSOCKET.DEFPRINT(LAMBDA (SOCKET STREAM) (* ; "Edited 25-Aug-88 17:51 by bvm") (* ;; "Print an object using its name, for example, #<FDev ERIS/76,5432>.  NAME is the object's name (or NIL if this one happens to be nameless), TYPENAME is a string giving the generic name you want to appear in front, e.g., %"FDev%"") (\OUTCHAR STREAM (fetch (READTABLEP HASHMACROCHAR) of *READTABLE*)) (\OUTCHAR STREAM (CHARCODE <)) (LET ((TYPE (CDR (ASSOC (fetch (IPSOCKET PROTOCOL) of SOCKET) *IP-PROTOCOL-NAME-FROM-NUMBER*))) (NUM (fetch (IPSOCKET IPSOCKET) of SOCKET)) (*PRINT-BASE* 10)) (\SOUT (if TYPE then (MKSTRING TYPE) else "IP") STREAM) (\SOUT " Socket" STREAM) (if (if (FIXP NUM) elseif (NULL NUM) then (* ; "I assume this is the master") (SETQ NUM "Head")) then (\OUTCHAR STREAM (CHARCODE SPACE)) (PRIN3 NUM STREAM))) (\OUTCHAR STREAM (CHARCODE /)) (\PRINTADDR SOCKET STREAM) (\OUTCHAR STREAM (CHARCODE >)) T))(\IP.BROADCAST.ADDRESS(LAMBDA (IPADDRESS) (* ; "Edited 26-Oct-88 14:59 by bvm") (* ;; "0's in the host field are now considered broadcasts, so this code works with Berkeley Unix") (LET (HOST MASK) (if (SMALLP IPADDRESS) then (OR (EQ IPADDRESS 0) (EQ IPADDRESS -1)) elseif (EQ (fetch (IPADDRESS CLASSA) of IPADDRESS) \IP.CLASS.A) then (if (AND \IP.SUBNET.MASKS (ASSOC (fetch (IPADDRESS CLASSANET) of IPADDRESS) \IP.LOCAL.NETWORKS)) then (* ; "If it's our subnet, check only the subnetted host part.  The LOGOR patches bogus subnet masks") (SETQ HOST (LOGAND IPADDRESS (SETQ MASK (LOGXOR (LOGOR (CDAR \IP.SUBNET.MASKS) -16777216) -1)))) (OR (EQ HOST 0) (EQL HOST MASK)) else (SETQ HOST (fetch (IPADDRESS CLASSAHOST) of IPADDRESS)) (OR (EQ HOST 0) (EQL HOST (MASK.1'S 0 24)))) elseif (EQ (fetch (IPADDRESS CLASSB) of IPADDRESS) \IP.CLASS.B) then (if (AND \IP.SUBNET.MASKS (ASSOC (fetch (IPADDRESS CLASSBNET) of IPADDRESS) \IP.LOCAL.NETWORKS)) then (SETQ HOST (LOGAND IPADDRESS (SETQ MASK (LOGXOR (LOGOR (CDAR \IP.SUBNET.MASKS) -65536) -1)))) (OR (EQ HOST 0) (EQ HOST MASK)) else (SETQ HOST (fetch (IPADDRESS CLASSBHOST) of IPADDRESS)) (OR (EQ HOST 0) (EQ HOST (MASK.1'S 0 16)))) elseif (EQ (fetch (IPADDRESS CLASSC) of IPADDRESS) \IP.CLASS.C) then (SETQ HOST (fetch (IPADDRESS CLASSCHOST) of IPADDRESS)) (* ; "No subnetting here") (OR (EQ HOST 0) (EQ HOST (MASK.1'S 0 8))) elseif (EQ (fetch (IPADDRESS CLASSBNET) of IPADDRESS) MAX.SMALLP) then (* ; "Sort of illegal, but recognize all ones as broadcast") (EQ (fetch (IPADDRESS CLASSBHOST) of IPADDRESS) MAX.SMALLP)))))(\IPADDRESSCLASS(LAMBDA (IPADDRESS) (* ; "Edited 26-Oct-88 12:49 by bvm") (if (SMALLP IPADDRESS) then (* ; "bogus unless it's broadcastp") (QUOTE \IP.CLASS.A) elseif (EQ \IP.CLASS.C (SETQ IPADDRESS (fetch (IPADDRESS CLASSC) of IPADDRESS))) then (QUOTE \IP.CLASS.C) elseif (EQ \IP.CLASS.B (SETQ IPADDRESS (LRSH IPADDRESS 1))) then (QUOTE \IP.CLASS.B) elseif (EQ \IP.CLASS.A (LRSH IPADDRESS 1)) then (QUOTE \IP.CLASS.A))))(\IPNETADDRESS(LAMBDA (IPADDRESS) (* ; "Edited 26-Oct-88 12:45 by bvm") (if (SMALLP IPADDRESS) then (* ; "bogus unless it's broadcastp") (if (< IPADDRESS 0) then -1 else 0) elseif (EQ (fetch (IPADDRESS CLASSA) of IPADDRESS) \IP.CLASS.A) then (fetch (IPADDRESS CLASSANET) of IPADDRESS) elseif (EQ (fetch (IPADDRESS CLASSB) of IPADDRESS) \IP.CLASS.B) then (fetch (IPADDRESS CLASSBNET) of IPADDRESS) elseif (EQ (fetch (IPADDRESS CLASSC) of IPADDRESS) \IP.CLASS.C) then (fetch (IPADDRESS CLASSCNET) of IPADDRESS))))(\IPHOSTADDRESS(LAMBDA (IPADDRESS) (* ; "Edited 26-Oct-88 12:43 by bvm") (if (SMALLP IPADDRESS) then (* ; "can only be class a or bogus") (LOGAND IPADDRESS MAX.SMALLP) elseif (EQ (fetch (IPADDRESS CLASSA) of IPADDRESS) \IP.CLASS.A) then (fetch (IPADDRESS CLASSAHOST) of IPADDRESS) elseif (EQ (fetch (IPADDRESS CLASSB) of IPADDRESS) \IP.CLASS.B) then (fetch (IPADDRESS CLASSBHOST) of IPADDRESS) elseif (EQ (fetch (IPADDRESS CLASSC) of IPADDRESS) \IP.CLASS.C) then (fetch (IPADDRESS CLASSCHOST) of IPADDRESS)))))(DEFINEQ(\IP.MAYBE.READ.HOSTS.TXT(LAMBDA (AFTEREXIT FILE) (* ; "Edited 20-Jan-89 11:56 by bvm") (* ;; "Read the hosts.txt file if it has changed") (if AFTEREXIT then (* ; "Have to wait until all devices are happy") (until \PROC.READY do (AWAIT.EVENT \PROCESS.AFTEREXIT.EVENT 10000))) (LET (FULLNAME) (COND ((NULL FILE)) (TCP.ALWAYS.READ.HOSTS.FILE (* ; "the user wants us to always read it fresh.") (\HTE.READ.FILE FILE)) ((NULL (SETQ FULLNAME (INFILEP FILE))) (CL:FORMAT PROMPTWINDOW "~%%Couldn't find hosts file ~A" FILE)) ((AND \TCP.LAST.HOSTS.FILE.DATE (STRING-EQUAL FULLNAME \TCP.LAST.HOSTS.FILE.READ) (EQUAL \TCP.LAST.HOSTS.FILE.DATE (GETFILEINFO FILE (QUOTE ICREATIONDATE)))) (* ; "the file names and the file write dates are the same, don't re-read the hosts file.") NIL) (T (* ; "Haven't read this particular file before, so snarf it") (\HTE.READ.FILE FILE))))))(\IP.REINITIALIZE.FROM.SCRATCH(LAMBDA (EVENT) (* ; "Edited 20-Jan-89 18:35 by bvm") (DECLARE (GLOBALVARS \IP.DEFAULT.CONFIGURATION \IP.LOCAL.ADDRESSES)) (* ;; "Called when we have never enabled IP, or the machine's address has changed.") (RESETBUFS (PROG (FILE ADDRESS.STRING HOSTS.FILE HOSTNAME ADDRESSES) (* ;; "This is a kludge until we know more about IP routing and reverse address resolution (??)") (SETQ \IP.DEFAULT.CONFIGURATION (COND ((AND (SETQ FILE (INFILEP (QUOTE {DSK}IP.INIT))) (\IP.READ.INIT.FILE FILE))) ((IP.DEFAULT.CONFIGURATION)) ((AND (SETQ FILE (\IP.PROMPT.FOR.FILE.NAME "Please enter the name of the IP initialization file for this host: ")) (\IP.READ.INIT.FILE FILE))) (T (* ; "User declined to specify, or init file failed, so give up") (PRINTOUT T "IP not initialized" T) (RETURN NIL)))) (COND ((SETQ FILE (OR (fetch (IPINIT HTE.FILE) of \IP.DEFAULT.CONFIGURATION) *IP-DEFAULT-HOSTS-FILE*)) (* ;; "there is a hosts file in the configuration.  Now see if we really want to read it.") (\IP.MAYBE.READ.HOSTS.TXT T FILE))) (COND ((AND (NOT (SETQ HOSTNAME (fetch (IPINIT HOSTNAME) of \IP.DEFAULT.CONFIGURATION))) (SETQ HOSTNAME (AND (EQ \PUP.READY T) (U-CASE (ETHERHOSTNAME))))) (replace (IPINIT HOSTNAME) of \IP.DEFAULT.CONFIGURATION with HOSTNAME))) (COND ((SETQ ADDRESSES (fetch (IPINIT LOCAL.ADDRESSES) of \IP.DEFAULT.CONFIGURATION)) (SETQ \IP.LOCAL.ADDRESSES (for ADDR in ADDRESSES collect (\IP.READ.STRING.ADDRESS ADDR)))) ((AND HOSTNAME (SETQ ADDRESSES (DODIP.HOSTP HOSTNAME))) (SETQ \IP.LOCAL.ADDRESSES (LIST ADDRESSES))) (T (until (SETQ ADDRESS.STRING (PROMPTFORWORD "Please enter this machine's IP host address (e.g. 39.9.0.9)"))) (SETQ \IP.LOCAL.ADDRESSES (LIST (\IP.READ.STRING.ADDRESS ADDRESS.STRING))) (COND (HOSTNAME (* ; "Associate name with local address(es)") (PUTHASH HOSTNAME (create HOSTS.TXT.ENTRY HTE.TYPE _ (QUOTE HOST) HTE.ADDRESSES _ \IP.LOCAL.ADDRESSES HTE.NAMES _ (LIST HOSTNAME) HTE.MACHINE.TYPE _ (SELECTQ (MACHINETYPE) (DOVE (QUOTE XEROX-1185)) (DANDELION (QUOTE XEROX-1108)) (DOLPHIN (QUOTE XEROX-1100)) (DORADO (QUOTE XEROX-1132)) (QUOTE XEROX-11XX)) HTE.OS.TYPE _ (QUOTE INTERLISP) HTE.PROTOCOLS _ (QUOTE ((TCP) (IP)))) \IP.HOSTNAMES))))) (\IP.RESTART.FROM.CONFIGURATION EVENT T)))))(\IP.ROUTE.PACKET(LAMBDA (IP READONLY) (* ; "Edited 19-Jan-89 18:00 by bvm") (* ;; "Encapsulates XIP, choosing the right network and immediate destination host.  Returns an NDB for the transmission.  Unless READONLY is true, defaults source and destination nets if needed") (DECLARE (GLOBALVARS \10MBLOCALNDB \3MBLOCALNDB \IP.LOCAL.NETWORKS \IP.DEFAULT.GATEWAY)) (PROG ((DESTADDRESS (fetch (IP IPDESTINATIONADDRESS) of IP)) DESTNET SUBNETMASK SOURCEHOSTADDRESS SUBNETINUSE PDH ROUTE NDB EPTYPE BROADCASTP) (SETQ DESTNET (\IPNETADDRESS DESTADDRESS)) (* ;; "Try to resolve a destination network of 0.0 If we have two attached networks, fail.") (COND ((AND (EQ 0 DESTADDRESS) \10MBLOCALNDB \3MBLOCALNDB) (RETURN)) ((EQ 0 DESTADDRESS) (QUOTE (SETQ DESTADDRESS (\IP.MAKE.BROADCAST.ADDRESS (fetch NDBIPHOST# of (OR \10MBLOCALNDB \3MBLOCALNDB))))) (SETQ DESTADDRESS -1) (SETQ BROADCASTP T) (QUOTE (SETQ DESTNET (\IPNETADDRESS DESTADDRESS))) (SETQ DESTNET (CAAR \IP.LOCAL.NETWORKS)))) (* ;; "First see if the destination network is one of our local networks") (COND ((AND (SETQ NDB (CDR (SASSOC DESTNET \IP.LOCAL.NETWORKS))) (SETQ SUBNETMASK (CDR (SASSOC (SETQ SOURCEHOSTADDRESS (fetch (NDB NDBIPHOST#) of NDB)) \IP.SUBNET.MASKS))) (OR (AND (\IP.BROADCAST.ADDRESS DESTADDRESS) (SETQ BROADCASTP T)) (EQP (LOGAND SOURCEHOSTADDRESS SUBNETMASK) (LOGAND DESTADDRESS SUBNETMASK)) (PROGN (SETQ SUBNETINUSE T) NIL))) (* ;; "A local net.  Try to find the Ethernet address of the host") (COND ((SETQ PDH (SELECTQ (fetch (NDB NETTYPE) of NDB) (10 (SETQ EPTYPE \EPT.IP) (COND (BROADCASTP BROADCASTNSHOSTNUMBER) (T (\AR.TRANSLATE.TO.10MB DESTADDRESS)))) (3 (SETQ EPTYPE \EET.IP) (\AR.TRANSLATE.TO.3MB DESTADDRESS)) (SHOULDNT)))) (T (* ; "Nope") (RETURN)))) (T (* ;; "The host is not on a local net.  See if we have a route to that host, or use the default route if necessary") (COND ((SETQ ROUTE (OR (COND (SUBNETINUSE (CDR (SASSOC (LOGAND DESTADDRESS SUBNETMASK) \IP.ROUTING.TABLE))) (T (CDR (SASSOC DESTNET \IP.ROUTING.TABLE)))) \IP.DEFAULT.GATEWAY)) (* ;; "We've got the IP address of the gateway") (COND ((SETQ NDB (CDR (SASSOC (\IPNETADDRESS ROUTE) \IP.LOCAL.NETWORKS))) (* ;; "We know what network it's on") (COND ((SETQ PDH (SELECTQ (fetch (NDB NETTYPE) of NDB) (10 (SETQ EPTYPE \EPT.IP) (\AR.TRANSLATE.TO.10MB ROUTE)) (3 (SETQ EPTYPE \EET.IP) (\AR.TRANSLATE.TO.3MB ROUTE)) (SHOULDNT)))) (T (RETURN)))) (T (ERROR "IP routing table contains non-local gateway address for network" DESTNET)))) (T (RETURN))))) (freplace EPNETWORK of IP with NDB) (ENCAPSULATE.ETHERPACKET NDB IP PDH (ffetch (IP IPTOTALLENGTH) of IP) EPTYPE) (replace EPTYPE of IP with EPTYPE) (COND ((NOT READONLY) (COND ((EQ 0 (fetch (IP IPDESTINATIONADDRESS) of IP)) (freplace (IP IPDESTINATIONADDRESS) of IP with DESTADDRESS))) (freplace (IP IPSOURCEADDRESS) of IP with (fetch NDBIPHOST# of NDB)))) (RETURN NDB))))(\IP.PROCESS.OPTIONS(LAMBDA (IP) (* ; "Edited 20-Jan-89 12:24 by bvm") (* ;;; "Process option fields in IP header.  Return T if OK, else handle internally needed actions like redirection or reporting of parameter problems") (bind (OPTIONSSTART _ (LOCF (ffetch (IP IPOPTIONSSTART) of IP))) (INDEX _ 0) (RESULT _ T) REROUTING OPTION until (OR (>= INDEX (- (UNFOLD (fetch (IP IPHEADERLENGTH) of IP) BYTESPERCELL) \IPOVLEN)) (EQ (SETQ OPTION (LDB (BYTE 5 0) (\GETBASEBYTE OPTIONSSTART INDEX))) IPOPT.END)) do (if (EQ OPTION IPOPT.NOP) then (* ; "This is the only one-byte option we know of other than IPOPT.END") (add INDEX 1) else (SELECTC OPTION ((LIST IPOPT.LSRR IPOPT.SSSR) (COND (REROUTING (SETQ RESULT INDEX)) ((NEQ (SETQ RESULT (\IP.OPTION.STRICT.SOURCE.ROUTE IP INDEX)) (QUOTE REROUTE)) (SETQ REROUTING T)))) (IPOPT.RECRT (SETQ RESULT (\IP.OPTION.RECORD.ROUTE IP INDEX))) (IPOPT.TIMESTAMP (\IP.OPTION.TIMESTAMP IP INDEX)) (IPOPT.SECURITY) (IPOPT.STREAMID) (PROGN (* ; "Unknown option code-- we can't continue, since it could be some unknown 1-byte option") (RETURN NIL))) (COND ((NUMBERP RESULT) (* ;; "If the result is a number then there was a parameter problem. We could process them here.") (RETURN NIL))) (add INDEX (\GETBASEBYTE OPTIONSSTART (ADD1 INDEX))) (* ; "Increment by the length field")) finally (RETURN RESULT)))))(ADDTOVAR *IP-PROTOCOL-NAME-FROM-NUMBER* (17 . "UDP")                                             (6 . "TCP")                                             (1 . "ICMP"))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS *IP-PROTOCOL-NAME-FROM-NUMBER*))(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(BLOCKRECORD IPADDRESS ((ADDRESS FIXP))                           (* ;; "Class A nets: high bit is 0")                           (BLOCKRECORD IPADDRESS ((CLASSA BITS 1)                                                   (CLASSANET BITS 7)                                                   (CLASSAHOST BITS 24)))                           (* ;; "Class B nets: high 2 bits are 10")                           (BLOCKRECORD IPADDRESS ((CLASSB BITS 2)))                           (BLOCKRECORD IPADDRESS ((CLASSBNET BITS 16)                                                   (CLASSBHOST BITS 16)))                           (* ;; "Class C nets: high 3 bits are 110")                           (BLOCKRECORD IPADDRESS ((CLASSC BITS 3)))                           (BLOCKRECORD IPADDRESS ((CLASSCNETB1 BITS 8)                                                   (CLASSCNETB2 BITS 8)                                                   (CLASSCNETB3 BITS 8)                                                   (CLASSCHOST BITS 8)))                                                             (* ;                           "I wish I could say just net bits 24, host bits 8, but BLOCKRECORD barfs")                           (BLOCKRECORD IPADDRESS ((CLASSCNETHI BITS 16)))                           [ACCESSFNS IPADDRESS ((CLASSCNET (\MAKENUMBER (FETCH CLASSCNETB1                                                                            OF DATUM)                                                                   (LOGOR (LLSH (FETCH                                                                                        CLASSCNETB2                                                                                   OF DATUM)                                                                                8)                                                                          (FETCH CLASSCNETB3                                                                             OF DATUM)))                                                        (PROGN (REPLACE CLASSCNETHI OF DATUM                                                                  WITH (LRSH NEWVALUE 8))                                                               (REPLACE CLASSCNETB3 OF DATUM                                                                  WITH (LOGAND NEWVALUE 255))                                                               DATUM])))(DECLARE%: DONTEVAL@LOAD DOCOPY (DEFPRINT 'IPSOCKET '\IPSOCKET.DEFPRINT))(* ; "UDP")(DEFINEQ(\UDP.HANDLE.ICMP(LAMBDA (ICMP SENTIP PROTOCOL) (* ; "Edited 13-Sep-88 14:26 by bvm") (* ;; "Handle an ICMP packet sent to a UDP socket.  We allow each UDP client to decide how to handle these.") (LET ((SOCKET (\IP.FIND.SOCKET (ffetch (UDP UDPSOURCEPORT) of SENTIP) PROTOCOL)) FN) (if (OR (NULL SOCKET) (EQ (SETQ FN (ffetch (IPSOCKET IPSICMPFN) of SOCKET)) (QUOTE \UDP.HANDLE.ICMP))) then (* ; "Sender went away already, or else didn't specify a handler (so inherited the default)") (\RELEASE.ETHERPACKET ICMP) else (CL:FUNCALL FN ICMP SENTIP SOCKET)))))(UDP.INIT(LAMBDA NIL (* ; "Edited 25-Aug-88 12:54 by bvm") (COND ((OR \IPFLG (SELECTQ (ASKUSER 15 (QUOTE Y) "IP is not running.  Shall I attempt to initialize it? ") (Y (\IPINIT) \IPFLG) NIL)) (\IP.ADD.PROTOCOL \UDP.PROTOCOL (FUNCTION \UDP.PORTCOMPARE) NIL NIL (FUNCTION \UDP.HANDLE.ICMP))))))(UDP.OPEN.SOCKET(LAMBDA (SKT# IFCLASH ICMPFN) (* ; "Edited 25-Aug-88 13:03 by bvm") (LET ((UDPCHAIN (\IP.FIND.PROTOCOL \UDP.PROTOCOL))) (if (OR UDPCHAIN (SETQ UDPCHAIN (UDP.INIT))) then (if (NULL SKT#) then (* ; "Open any free socket") (\IP.OPEN.SOCKET \UDP.PROTOCOL NIL NIL NIL NIL NIL ICMPFN) else (* ; "Check for clash") (LET ((IPSOCKET (\IP.FIND.SOCKET SKT# UDPCHAIN))) (if (NULL IPSOCKET) then (\IP.OPEN.SOCKET \UDP.PROTOCOL SKT# NIL NIL NIL NIL ICMPFN) else (SELECTQ IFCLASH ((T ACCEPT) (\UDP.FLUSH.SOCKET.QUEUE IPSOCKET) IPSOCKET) ((DON'T FAIL) NIL) (ERROR "UDP Port is already in use" SKT#))))) else (* ; "IP not inited") (SELECTQ IFCLASH ((DON'T FAIL) NIL) (ERROR!))))))(\UDP.FLUSH.SOCKET.QUEUE(LAMBDA (IPSOCKET) (* ; "Edited 25-Aug-88 12:57 by bvm") (* ;;; "Called to flush input packet queue on an IPSOCKET") (LET ((QUEUE (fetch (IPSOCKET IPSQUEUE) of IPSOCKET)) PACKET) (UNINTERRUPTABLY (while (SETQ PACKET (\DEQUEUE QUEUE)) do (\RELEASE.ETHERPACKET PACKET) finally (replace (IPSOCKET IPSQUEUELENGTH) of IPSOCKET with 0))))))(UDP.GET(LAMBDA (IPSOCKET WAIT) (* ; "Edited 13-Sep-88 11:59 by bvm") (* ;;; "Returns the next UDP packet on the queue, or NIL if none exist and WAIT is NIL.  If WAIT is T, this function waits forever.  If WAIT is an integer, it is interpreted as the number of milliseconds to wait before returning NIL or a packet which arrives during that time.  This function therefore is like GETXIP and GETPUP") (PROG ((QUEUE (fetch (IPSOCKET IPSQUEUE) of IPSOCKET)) UDP TIMER) LP (UNINTERRUPTABLY (COND ((SETQ UDP (\DEQUEUE QUEUE)) (add (fetch (IPSOCKET IPSQUEUELENGTH) of IPSOCKET) -1)))) (COND ((NULL UDP) (COND (WAIT (COND ((EQ WAIT T) (* ; "Wait forever")) (TIMER (COND ((TIMEREXPIRED? TIMER) (RETURN)))) (T (OR (FIXP WAIT) (LISPERROR "NON-NUMERIC ARG" WAIT)) (SETQ TIMER (SETUPTIMER WAIT)) T)) (AWAIT.EVENT (fetch (IPSOCKET IPSEVENT) of IPSOCKET) TIMER T) (GO LP)) (T (BLOCK)))) ((AND (EQ (fetch (IP IPPROTOCOL) of UDP) \UDP.PROTOCOL) (NEQ (fetch (UDP UDPCHECKSUM) of UDP) 0) (NOT (\IP.CHECKSUM.OK (\UDP.CHECKSUM UDP)))) (* ; "Bad checksum on UDP packet.  Any other kind of packet must have been put there by someone else") (\RELEASE.ETHERPACKET UDP) (GO LP))) (RETURN UDP)))))(DECLARE%: DONTEVAL@LOAD DOCOPY (UDP.INIT))(* ; "TCP")(DEFINEQ(\TCP.DELETE.TCB(LAMBDA (TCB) (* ; "Edited 25-Aug-88 18:39 by bvm") (WITH.FAST.MONITOR \TCP.LOCK (\TCP.TRACE.TRANSITION TCB (QUOTE CLOSED)) (replace TCB.STATE of TCB with (QUOTE CLOSED)) (\FLUSH.PACKET.QUEUE (fetch TCB.INPUT.QUEUE of TCB)) (\FLUSH.PACKET.QUEUE (fetch TCB.REXMT.QUEUE of TCB)) (SETQ \TCP.CONTROL.BLOCKS (DREMOVE TCB \TCP.CONTROL.BLOCKS)) (\IP.CLOSE.SOCKET (fetch TCB.IPSOCKET of TCB) \TCP.PROTOCOL T) (replace TCB.IPSOCKET of TCB with NIL) (LET ((WHENCLOSEDFN (PROCESSPROP (THIS.PROCESS) (QUOTE WHENCLOSEDFN)))) (COND (WHENCLOSEDFN (CL:FUNCALL WHENCLOSEDFN (fetch TCB.RCV.STREAM of TCB) (fetch TCB.SND.STREAM of TCB))))) (* ; "break circular links") (replace TCB.SND.STREAM of TCB with NIL) (replace TCB.RCV.STREAM of TCB with NIL) (* ; "wake up anyone waiting for events to occur") (NOTIFY.EVENT (fetch TCB.ESTABLISHED of TCB)) (NOTIFY.EVENT (fetch TCB.SND.EVENT of TCB)) (NOTIFY.EVENT (fetch TCB.RCV.EVENT of TCB)) (NOTIFY.EVENT (fetch TCB.URGENT.EVENT of TCB)) (NOTIFY.EVENT (fetch TCB.FINACKED.EVENT of TCB))))))(* ; "debugging")(DEFINEQ(\FINDPOINTERS(LAMBDA (LST) (* ; "Edited 25-Aug-88 17:21 by bvm") (for (TAIL _ LST) while TAIL bind PTR do (SETQ PTR (pop TAIL)) (* ;; "This odd control structure so that we get rid of the extra pointer from the list returned by \COLLECTINUSE") (RECLAIM) (RECLAIM) (\FINDPOINTER (PRINT PTR T)) (TERPRI T)))))(PUTPROPS IPRPCPATCH COPYRIGHT ("Xerox Corporation" 1988 1989 1990))(DECLARE%: DONTCOPY  (FILEMAP (NIL (2847 5022 (IPTRACE 2857 . 3022) (PRINTIP 3024 . 4492) (PRINTICMP 4494 . 5020)) (5023 5792 (\IP.READ.STRING.ADDRESS 5033 . 5790)) (5897 7717 (MAKE-NETWORK-TRACE-WINDOW 5907 . 7715)) (7745 10010 (\ICMP.INPUT 7755 . 8676) (\ICMP.HANDLE.REDIRECT 8678 . 10008)) (10793 18999 (\IP.ADD.PROTOCOL 10803 . 11795) (\IP.CLOSE.SOCKET 11797 . 12672) (\IP.FIND.PROTOCOL.SOCKET 12674 . 13592) (\IP.OPEN.SOCKET 13594 . 15045) (\IPSOCKET.DEFPRINT 15047 . 15960) (\IP.BROADCAST.ADDRESS 15962 . 17533) (\IPADDRESSCLASS 17535 . 17961) (\IPNETADDRESS 17963 . 18480) (\IPHOSTADDRESS 18482 . 18997)) (19000 26340 (\IP.MAYBE.READ.HOSTS.TXT 19010 . 19879) (\IP.REINITIALIZE.FROM.SCRATCH 19881 . 22124) (\IP.ROUTE.PACKET 22126 . 24998) (\IP.PROCESS.OPTIONS 25000 . 26338)) (29269 32373 (\UDP.HANDLE.ICMP 29279 . 29839) (UDP.INIT 29841 . 30140) (UDP.OPEN.SOCKET 30142 . 30827) (\UDP.FLUSH.SOCKET.QUEUE 30829 . 31193) (UDP.GET 31195 . 32371)) (32445 33494 (\TCP.DELETE.TCB 32455 . 33492)) (33521 33846 (\FINDPOINTERS 33531 . 33844)))))STOP