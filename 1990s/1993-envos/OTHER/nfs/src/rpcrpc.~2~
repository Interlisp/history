(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "RPC2")(IL:FILECREATED "23-Jul-90 17:12:28" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>RPCRPC.\;2 57069        IL:|changes| IL:|to:|  (IL:VARIABLES *DEBUG* *MSEC-UNTIL-TIMEOUT* *MSEC-BETWEEN-TRIES*                                     *RPC-OK-TO-CACHE* *RPC-SOCKET-CACHE* *RPC-WELL-KNOWN-SOCKETS*                                     *RPC-PROTOCOL-TYPES* *RPC-PROGRAMS* *RPC-PROTOCOLS* *XID-COUNT*                                     *XID-MAX* *STREAM* *PROGRAM* *PROCEDURE* *RPC-ACCEPT-STATS*                                     *STRING-RPC-METHODS* *TTY-RPC-METHODS* *AUTHENTICATION-TYPEDEF*                                     *NULL-AUTHENTICATION*)                             (IL:FUNCTIONS DEFINE-REMOTE-PROGRAM DEFINE-PROGRAM-INTERNAL                                     DEFINE-REMOTE-PROG CONS-UP-RPC-PROCS CLEAR-ANY-NAME-CONFLICTS                                     DEF-RPC-TYPES DEF-RPC-INHERITS DEF-RPC-PROCEDURES                                     DEF-RPC-PROCEDURE DEF-RPC-ARG-TAIL DEF-RPC-CONSTANTS                                     UNDEFINE-REMOTE-PROGRAM XDR-GENCODE-INLINE FORMAT-T                                     FIND-RPC-TYPEDEF FIND-RPC-TYPENAME FIND-XDR-CONSTANT                                     LIST-REMOTE-PROGRAMS FIND-RPC-PROGRAM FIND-RPC-PROCEDURE                                     FIND-RPC-HOST OPEN-RPCSTREAM RPC-CREATE-SOME-UDP-STREAM                                     CLOSE-RPCSTREAM CREATE-STRING-RPC-STREAM RPC-GET-STRING-RESULT                                     CREATE-TTY-RPC-STREAM PUTBASE-BIGNUM BIGNUM-MAKE-NUMBER                                     REMOTE-PROCEDURE-CALL CALL-VIA-PORTMAPPER SETUP-RPC PERFORM-RPC                                     RPC-RESOLVE-HOST RPC-RESOLVE-PROG RPC-RESOLVE-PROC                                     RPC-FIND-SOCKET ENCODE-RPC-ARGS PARSE-RPC-REPLY DECODE-RPC-ARGS                                     RPC-HANDLE-TIMEOUT RPC-SIGNAL-ERROR RPC-ARGUMENT-ERROR CREATE-XID                                    FIND-CACHED-SOCKET CACHE-SOCKET CLEAR-CACHE IPADDRESS-TO-STRING                                     CREATE-UNIX-AUTHENTICATION ENCODE-AUTHENTICATION                                     DECODE-AUTHENTICATION RPC-RESTART)      IL:|previous| IL:|date:| "13-Nov-89 18:50:29" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>RPCRPC.\;1); Copyright (c) 1987, 1988, 1989, 1990 by Stanford University and Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:RPCRPCCOMS)(IL:RPAQQ IL:RPCRPCCOMS           ((IL:PROPS (IL:RPCRPC IL:MAKEFILE-ENVIRONMENT IL:FILETYPE))           (EVAL-WHEN (EVAL COMPILE)                  (IL:FILES IL:RPCDECLS))           (IL:COMS                                          (IL:* IL:\; "Public variables")                  (IL:VARIABLES *DEBUG* *MSEC-UNTIL-TIMEOUT* *MSEC-BETWEEN-TRIES* *RPC-OK-TO-CACHE*                          *RPC-SOCKET-CACHE* *RPC-WELL-KNOWN-SOCKETS*)                                                             (IL:* IL:\; "Internal")                  (IL:VARIABLES *RPC-PROTOCOL-TYPES* *RPC-PROGRAMS* *RPC-PROTOCOLS* *XID-COUNT*                          *XID-MAX* *STREAM* *PROGRAM* *PROCEDURE*)                  (IL:VARIABLES *RPC-ACCEPT-STATS*))           (IL:COMS                                          (IL:* IL:\; "Defining RPC Programs")                  (IL:FUNCTIONS DEFINE-REMOTE-PROGRAM DEFINE-PROGRAM-INTERNAL DEFINE-REMOTE-PROG                          CONS-UP-RPC-PROCS CLEAR-ANY-NAME-CONFLICTS DEF-RPC-TYPES DEF-RPC-INHERITS                          DEF-RPC-PROCEDURES DEF-RPC-PROCEDURE DEF-RPC-ARG-TAIL DEF-RPC-CONSTANTS                          UNDEFINE-REMOTE-PROGRAM XDR-GENCODE-INLINE)                                                             (IL:* IL:\; "Utilities")                  (IL:FUNCTIONS FORMAT-T FIND-RPC-TYPEDEF FIND-RPC-TYPENAME FIND-XDR-CONSTANT)                                                             (IL:* IL:\;                                                            "User entries to data structures")                  (IL:FUNCTIONS LIST-REMOTE-PROGRAMS FIND-RPC-PROGRAM FIND-RPC-PROCEDURE                          FIND-RPC-HOST))           (IL:COMS                                          (IL:* IL:\; "RPC Streams")                  (IL:FUNCTIONS OPEN-RPCSTREAM RPC-CREATE-SOME-UDP-STREAM CLOSE-RPCSTREAM)                  (IL:VARIABLES *STRING-RPC-METHODS*)                  (IL:FUNCTIONS CREATE-STRING-RPC-STREAM RPC-GET-STRING-RESULT)                                                             (IL:* IL:\; "Debugging")                  (IL:VARIABLES *TTY-RPC-METHODS*)                  (IL:FUNCTIONS CREATE-TTY-RPC-STREAM))           (IL:COMS                                          (IL:* IL:\; "Bignum support")                  (IL:FUNCTIONS PUTBASE-BIGNUM BIGNUM-MAKE-NUMBER))           (IL:COMS                                          (IL:* IL:\; "Remote Procedure Call")                  (IL:FUNCTIONS REMOTE-PROCEDURE-CALL CALL-VIA-PORTMAPPER SETUP-RPC PERFORM-RPC                          RPC-RESOLVE-HOST RPC-RESOLVE-PROG RPC-RESOLVE-PROC RPC-FIND-SOCKET                          ENCODE-RPC-ARGS PARSE-RPC-REPLY DECODE-RPC-ARGS RPC-HANDLE-TIMEOUT                          RPC-SIGNAL-ERROR RPC-ARGUMENT-ERROR CREATE-XID)                                                             (IL:* IL:\; "RPC Utility Functions")                  (IL:FUNCTIONS FIND-CACHED-SOCKET CACHE-SOCKET CLEAR-CACHE IPADDRESS-TO-STRING))           (IL:COMS                                          (IL:* IL:\; "Authentication")                  (IL:VARIABLES *AUTHENTICATION-TYPEDEF* *NULL-AUTHENTICATION*)                  (IL:FUNCTIONS CREATE-UNIX-AUTHENTICATION ENCODE-AUTHENTICATION                          DECODE-AUTHENTICATION))           (IL:COMS                                          (IL:* IL:\;                                                            "Interface to RESTART.ETHER")                  (IL:FUNCTIONS RPC-RESTART)                  (IL:APPENDVARS (IL:RESTARTETHERFNS RPC-RESTART)))))(IL:PUTPROPS IL:RPCRPC IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE "RPC2"))(IL:PUTPROPS IL:RPCRPC IL:FILETYPE :COMPILE-FILE)(EVAL-WHEN (EVAL COMPILE)(IL:FILESLOAD IL:RPCDECLS))(IL:* IL:\; "Public variables")(DEFGLOBALPARAMETER *DEBUG* NIL   "T for printout, NUMBER for even more.")(DEFPARAMETER *MSEC-UNTIL-TIMEOUT* 10000   "Total time in msec before giving up on UDP exchange with remote host")(DEFPARAMETER *MSEC-BETWEEN-TRIES* 500   "Time in msec between UDP retries")(DEFPARAMETER *RPC-OK-TO-CACHE* T   "If NIL, does not attempt to cache socket numbers for non-well-known sockets")(DEFVAR *RPC-SOCKET-CACHE* NIL   "A list of (<iphost-address> <remote-program-name> <remote-program-version>           <protocol> <ipsocket-number>) quintuples.")(DEFGLOBALVAR *RPC-WELL-KNOWN-SOCKETS* '((* 100000 2 UDP 111)                                             (* 100000 2 TCP 111))                                           "List of well-known RPC programs and their sockets.Each element is a list:  (host-address prog-number prog-version protocol socket-number)Host-address may be *, in which case it matches any host address.Protocol should be either rpc2:UDP or rpc2:TCP.")(IL:* IL:\; "Internal")(DEFGLOBALPARAMETER *RPC-PROTOCOL-TYPES* '((UDP . RPC-CREATE-SOME-UDP-STREAM)                                               (TCP . RPC-CREATE-TCP-STREAM))                                             "Association list mapping protocol names into functions that create the corresponding type of RPC stream.")(DEFGLOBALVAR *RPC-PROGRAMS* NIL   "A list of RPC-PROGRAM structs.This list is consulted by various routines to find infomation about knownremote programs.It is assumed that a given NAME field uniquely identifies a (NUMBER, VERSION, PROTOCOL).On the other hand, there may be several NAMEs (and hence, several RPC-STRUCTs) fora given (NUMBER, VERSION, PROTOCOL).")(DEFGLOBALPARAMETER *RPC-PROTOCOLS* '((TCP . 6)                                          (UDP . 17))                                        "Portmapper codes for various RPC transports")(DEFGLOBALVAR *XID-COUNT* 0   "Contains the  XID stamp of the next remote procedure call")(DEFGLOBALPARAMETER *XID-MAX* 2147483647   "Upper bound on XID's for transactions.  See CREATE-XID for discussion.")(DEFVAR *STREAM* NIL   "The stream on which an RPC is being performed (for debugging and error recovery).")(DEFVAR *PROGRAM* NIL   "The rpc program object involved in current call (for debugging and error recovery).")(DEFVAR *PROCEDURE* NIL   "The rpc procedure object involved in current call (for debugging and error recovery).")(DEFCONSTANT *RPC-ACCEPT-STATS* '((0 . SUCCESS)                                      (1 . PROGRAM-UNAVAILABLE)                                      (2 . PROGRAM-MISMATCH)                                      (3 . PROCEDURE-UNAVAILABLE)                                      (4 . GARBAGE-ARGUMENTS)                                      (5 . SYSTEM-ERROR))                                    "Assoc list for internal use by PARSE-RPC-REPLY.")(IL:* IL:\; "Defining RPC Programs")(DEFMACRO DEFINE-REMOTE-PROGRAM (NAME NUMBER VERSION PROTOCOL &KEY CONSTANTS TYPES INHERITS                                           PROCEDURES)   "This macro expands into code to add a new RPC-PROGRAM struct to *RPC-PROGRAMS*.  The generated code checks first to see that there are no name conflicts with existing remote programs and then adds the new structure to *RPC-PROGRAMS*."   (LET ((ENAME (EVAL NAME))         (ENUMBER (EVAL NUMBER))         (EVERSION (EVAL VERSION))         (EPROTOCOL (OR (EVAL PROTOCOL)                        'UDP))         (ECONSTANTS (EVAL CONSTANTS))         (ETYPES (EVAL TYPES))         (EINHERITS (EVAL INHERITS))         (EPROCEDURES (EVAL PROCEDURES)))        (CHECK-TYPE ENAME SYMBOL)        (CHECK-TYPE ENUMBER NUMBER)        (CHECK-TYPE EVERSION NUMBER)        (SETQ EPROTOCOL (COND                           ((STRING-EQUAL EPROTOCOL "UDP")                            'UDP)                           ((STRING-EQUAL EPROTOCOL "TCP")                            (WHEN *USE-OS-NETWORKING* (WARN                                                 "TCP is an unsupported RPC protocol on this machine."                                                            ))                            'TCP)                           ((ERROR "~a is an unknown RPC protocol." EPROTOCOL))))        (LET ((RPROG (DEFINE-REMOTE-PROG ENAME ENUMBER EVERSION EPROTOCOL ECONSTANTS ETYPES EINHERITS                            EPROCEDURES)))             `(DEFINE-PROGRAM-INTERNAL ',ENAME ,ENUMBER ,EVERSION ',EPROTOCOL                     ',(RPC-PROGRAM-CONSTANTS RPROG)                     ',(RPC-PROGRAM-TYPES RPROG)                     ',(RPC-PROGRAM-INHERITS RPROG)                     ,(CONS-UP-RPC-PROCS (RPC-PROGRAM-PROCEDURES RPROG))))))(DEFUN DEFINE-PROGRAM-INTERNAL (NAME NUMBER VERSION PROTOCOL CONSTANTS TYPES INHERITS PROCEDURES)   (LET ((NEWPROG (MAKE-RPC-PROGRAM :NUMBER NUMBER :VERSION VERSION :NAME NAME :PROTOCOL PROTOCOL                          :TYPES TYPES :CONSTANTS CONSTANTS :INHERITS INHERITS :PROCEDURES PROCEDURES)                )         MINEISNEWEST NEWERVERSION V OLDPROG OLDPROG2)        (DOLIST (PGM *RPC-PROGRAMS*)            (WHEN (EQ (RPC-PROGRAM-NAME PGM)                      NAME)                  (SETQ OLDPROG PGM))            (WHEN (AND (EQL (RPC-PROGRAM-NUMBER PGM)                            NUMBER)                       (EQ (RPC-PROGRAM-PROTOCOL PGM)                           PROTOCOL))                (SETQ V (RPC-PROGRAM-VERSION PGM))                (COND                   ((EQL V VERSION)                    (RETURN (SETQ OLDPROG2 PGM)))                   ((< V VERSION)                    (UNLESS NEWERVERSION (SETQ MINEISNEWEST T))                    (RETURN NIL))                   (T (SETQ NEWERVERSION PGM)))))        (FORMAT *DEBUG-IO*                "~:[D~;Red~]efining remote program ~A, version ~D~@[ (~:[old~;new~] version)~]~%"               (OR OLDPROG OLDPROG2)               NAME VERSION (OR MINEISNEWEST NEWERVERSION)               MINEISNEWEST)        (WHEN OLDPROG            (SETQ *RPC-PROGRAMS* (DELETE OLDPROG *RPC-PROGRAMS*)))        (WHEN (AND OLDPROG2 (NOT (EQ OLDPROG2 OLDPROG)))            (SETQ *RPC-PROGRAMS* (DELETE OLDPROG2 *RPC-PROGRAMS*)))        (IF NEWERVERSION            (PUSH NEWPROG (CDR (MEMBER NEWERVERSION *RPC-PROGRAMS*)))            (PUSH NEWPROG *RPC-PROGRAMS*))        NAME))(DEFUN DEFINE-REMOTE-PROG (NAME NUMBER VERSION PROTOCOL CONSTANTS TYPES INHERITS PROCEDURES)   (FORMAT-T "Building XDR routines for remote program ~a, version ~a~%" NAME VERSION)   (LET ((RPROG (MAKE-RPC-PROGRAM :NUMBER NUMBER :VERSION VERSION :NAME NAME :PROTOCOL PROTOCOL)))        (SETF (RPC-PROGRAM-INHERITS RPROG)              (DEF-RPC-INHERITS RPROG INHERITS))        (SETF (RPC-PROGRAM-CONSTANTS RPROG)              (DEF-RPC-CONSTANTS RPROG CONSTANTS))        (SETF (RPC-PROGRAM-TYPES RPROG)              (DEF-RPC-TYPES RPROG TYPES))        (SETF (RPC-PROGRAM-PROCEDURES RPROG)              (DEF-RPC-PROCEDURES RPROG PROCEDURES))        RPROG))(DEFUN CONS-UP-RPC-PROCS (PROCS)   "Given a list of RPC-PROCEDURE structs, conses up code to produce that set of RPC-PROCEDURE structs."   `(LIST ,@(MAPCAR #'(LAMBDA (PROC)                             `(MAKE-RPC-PROCEDURE :NAME ',(RPC-PROCEDURE-NAME PROC)                                     :PROCNUM                                     ',(RPC-PROCEDURE-PROCNUM PROC)                                     :ARGTYPES                                     ,(RPC-PROCEDURE-ARGTYPES PROC)                                     :RESULTTYPES                                     ,(RPC-PROCEDURE-RESULTTYPES PROC)))                   PROCS)))(DEFUN CLEAR-ANY-NAME-CONFLICTS (NAME NUMBER VERSION PROTOCOL)   "Determines whether a proposed (NAME, NUMBER, VERSION, PROTOCOL) would violatethe assumption that a NAME uniquely specifies the other three components.If there exists a violation, the user is given a chance to remove the old program.Returns T if no violation of assumption (or violation is resolved by removing old program),Returns NIL if there is an unresolved violation."   (LET (OLDRPC)        (COND           ((AND (SETQ OLDRPC (FIND-RPC-PROGRAM :NAME NAME))                 (OR (/= NUMBER (RPC-PROGRAM-NUMBER OLDRPC))                     (/= VERSION (RPC-PROGRAM-VERSION OLDRPC))                     (NOT (EQL PROTOCOL (RPC-PROGRAM-PROTOCOL OLDRPC)))))            (FORMAT *QUERY-IO* "Remote program name conflict with existing program:~%   Name ~a, Protocol ~A, Number ~a, Version ~a~%"                   NAME (RPC-PROGRAM-PROTOCOL OLDRPC)                   (RPC-PROGRAM-NUMBER OLDRPC)                   (RPC-PROGRAM-VERSION OLDRPC))            (AND (YES-OR-NO-P "Do you want to remove the old program? ")                 (UNDEFINE-REMOTE-PROGRAM (RPC-PROGRAM-NAME OLDRPC)                        (RPC-PROGRAM-NUMBER OLDRPC)                        (RPC-PROGRAM-VERSION OLDRPC)                        (RPC-PROGRAM-PROTOCOL OLDRPC))))           (T T))))(DEFUN DEF-RPC-TYPES (CONTEXT TYPEDEFS)   "Essentially a no-op, as typedefs are copied directly from the DEFINE-REMOTE-PROGRAMinto the RPC-PROGRAM struct. Just prints out the name of each type as it is encountered."   (IF TYPEDEFS (FORMAT-T "    Types~%"))   (DOLIST (I TYPEDEFS)       (FORMAT-T "        ~A~%" (FIRST I)))   TYPEDEFS)(DEFUN DEF-RPC-INHERITS (CONTEXT PROGLIST)   "Checks remote program inherited by this one to make sure that it exists.Issues a warning if it cannot find the program to be inherited."   (IF PROGLIST (FORMAT-T "    Inherits~%"))   (DOLIST (PRG PROGLIST PROGLIST)       (FORMAT-T "        ~A~%" PRG)       (IF (NOT (AND (SYMBOLP PRG)                     (FIND-RPC-PROGRAM :NAME PRG)))           (WARN "Trying to inherit from remote program ~a, but ~a not found.~%" PRG PRG))))(DEFUN DEF-RPC-PROCEDURES (CONTEXT PROCS)   "Returns a list of RPC-PROCEDURE structs returned by DEF-RPC-PROCEDURE."   (CHECK-TYPE PROCS LIST "A list of RPC procedure declarations")   (IF PROCS (FORMAT-T "    Procedures~%"))   (MAPCAR #'(LAMBDA (PROC)                    (DEF-RPC-PROCEDURE CONTEXT PROC))          PROCS))(DEFUN DEF-RPC-PROCEDURE (CONTEXT PROC)   "For a procedure specified to DEFINE-REMOTE-PROGRAM's :PROCEDURES argument, creates and returns an RPC-PROCEDURE struct.XDR procedure code is generated via the call to XDR-GENCODE-MAKEFCN."   (CHECK-TYPE (FIRST PROC)          (AND SYMBOL (NOT NULL))          "a non-null symbol naming the RPC procedure.")   (CHECK-TYPE (SECOND PROC)          (INTEGER 0 *)          "a non-negative integer RPC procedure number")   (CHECK-TYPE (THIRD PROC)          LIST)   (LET ((NAME (FIRST PROC))         (ARGTYPES (THIRD PROC))         (RESULTS (FOURTH PROC)))        (FORMAT-T "        ~A~%" NAME)        (MAKE-RPC-PROCEDURE :NAME NAME :PROCNUM (SECOND PROC)               :ARGTYPES               (AND ARGTYPES `#'(LAMBDA (XDR-STREAM ARGS)                                       (PROG ((ARGTAIL ARGS))                                             ,(DEF-RPC-ARG-TAIL ARGTYPES CONTEXT T)                                             (RPC-ARGUMENT-ERROR ARGS ,(LENGTH ARGTYPES)))))               :RESULTTYPES               (AND RESULTS (LIST 'FUNCTION (XDR-CODEGEN CONTEXT (IF (CONSP RESULTS)                                                                     (CONS ':LIST RESULTS)                                                                     RESULTS)                                                   'READ))))))(DEFUN DEF-RPC-ARG-TAIL (ARGTYPES CONTEXT &OPTIONAL FIRSTTIME)   (IF ARGTYPES       `(WHEN ,(IF FIRSTTIME                   'ARGTAIL                   '(SETQ ARGTAIL (CDR ARGTAIL)))            ,(XDR-CODEGEN-1 CONTEXT (CAR ARGTYPES)                    'WRITE                    `(XDR-STREAM (CAR ARGTAIL)))            ,(DEF-RPC-ARG-TAIL (CDR ARGTYPES)                    CONTEXT))       '(WHEN (NULL (CDR ARGTAIL))              (RETURN))))(DEFUN DEF-RPC-CONSTANTS (CONTEXT PAIRS)   "Checks that constants specified to DEFINE-REMOTE-PROGRAM are syntacticallyreasonable."   (IF PAIRS (FORMAT-T "    Constants~%"))   (DOLIST (PAIR PAIRS)       (CHECK-TYPE (FIRST PAIR)              (AND (NOT NULL)                   SYMBOL))       (CHECK-TYPE (SECOND PAIR)              (AND (NOT NULL)                   NUMBER))       (FORMAT-T "        ~A~%" (FIRST PAIR)))   PAIRS)(DEFUN UNDEFINE-REMOTE-PROGRAM (NAME NUMBER VERSION &OPTIONAL PROTOCOL)   "If finds NAME-NUMBER-VERSION-PROTOCOL match in *RPC-PROGRAMS*, deletes.If finds NUMBER-VERSION match with NAME mismatch, asks first.If deletes something, returns NAME of DELETED program, otherwise NIL."   (LET ((RPC (FIND-RPC-PROGRAM :NUMBER NUMBER :VERSION VERSION :NAME NAME :PROTOCOL PROTOCOL)))        (WHEN (AND RPC (OR (EQL NAME (RPC-PROGRAM-NAME RPC))                           (YES-OR-NO-P "Do you really want to remove/overwrite RPC program ~a?"                                  (RPC-PROGRAM-NAME RPC))))            (SETQ *RPC-PROGRAMS* (DELETE RPC *RPC-PROGRAMS*))            (RPC-PROGRAM-NAME RPC))))(DEFMACRO XDR-GENCODE-INLINE (CONTEXT TYPEDEF OPER &REST VARS)   `(,(XDR-CODEGEN (IF (AND CONTEXT (SYMBOLP CONTEXT))                       (RPC-RESOLVE-PROG CONTEXT)                       CONTEXT)             (EVAL TYPEDEF)             (EVAL OPER))     ,.VARS))(IL:* IL:\; "Utilities")(DEFMACRO FORMAT-T (&REST ARGS)   "Use in low-level code in place of (FORMAT T ...) to avoid disaster. The problem is that Xerox Common Lisp, when given (FORMAT <stream> ...), rebinds*STANDARD-OUTPUT* to <stream> under the assumption that none of theimplementation of FORMAT will ever use *STANDARD-OUTPUT*.  Thus, if you try to write to *STANDARD-OUTPUT* in any code called by COMMON LISP I/O routines writingto another stream, the output goes into the other stream rather than the original *STANDARD-OUTPUT*.  This routine is a quick fix for a lot of (FORMAT T ...) calls to send their output to *DEBUG-IO*, which is where the output should have gone in the first place.  "   `(FORMAT *DEBUG-IO* ,@ARGS))(DEFUN FIND-RPC-TYPEDEF (CONTEXT TYPE)   "Returns the type definition for TYPE defined in RPC CONTEXT(CONTEXT may be a name or RPC-PROGRAM structure) if any, or elsereturns NIL."   (LET ((PRGSTR (ETYPECASE CONTEXT                     (SYMBOL (FIND-RPC-PROGRAM :NAME CONTEXT))                     (RPC-PROGRAM CONTEXT))))        (SECOND (ASSOC TYPE (RPC-PROGRAM-TYPES PRGSTR)))))(DEFUN FIND-RPC-TYPENAME (CONTEXT TYPE)   "Returns TYPE, if TYPE defined in RPC CONTEXT(CONTEXT may be a name or RPC-PROGRAM structure) if any, or elsereturns NIL."   (LET ((PRGSTR (ETYPECASE CONTEXT                     (SYMBOL (FIND-RPC-PROGRAM :NAME CONTEXT))                     (RPC-PROGRAM CONTEXT))))        (FIRST (ASSOC TYPE (RPC-PROGRAM-TYPES PRGSTR)))))(DEFUN FIND-XDR-CONSTANT (CONTEXT CONSTANT)   "Find (and return) the constant definition for symbol CONSTANT among the constants for RPC-PROGRAM structure CONTEXT. "   (CHECK-TYPE CONSTANT SYMBOL)   (SECOND (ASSOC CONSTANT (RPC-PROGRAM-CONSTANTS CONTEXT))))(IL:* IL:\; "User entries to data structures")(DEFUN LIST-REMOTE-PROGRAMS ()   (MAPCAR #'(LAMBDA (R)                    (LIST (RPC-PROGRAM-NAME R)                          (RPC-PROGRAM-NUMBER R)                          (RPC-PROGRAM-VERSION R)                          (RPC-PROGRAM-PROTOCOL R)))          *RPC-PROGRAMS*))(DEFUN FIND-RPC-PROGRAM (&KEY NAME NUMBER VERSION PROTOCOL)   "Returns the RPC-PROGRAM struct for the given identifiers from among all the remote programs defined.  VERSION defaults to the highest existing version."   (COND      (NAME (DOLIST (PGM *RPC-PROGRAMS*)                (WHEN (EQ NAME (RPC-PROGRAM-NAME PGM))                    (RETURN (AND (OR (NULL NUMBER)                                     (EQL NUMBER (RPC-PROGRAM-NUMBER PGM)))                                 (OR (NULL VERSION)                                     (EQL VERSION (RPC-PROGRAM-VERSION PGM)))                                 (OR (NULL PROTOCOL)                                     (EQ PROTOCOL (RPC-PROGRAM-PROTOCOL PGM)))                                 PGM)))))      (NUMBER (LET ((BESTPROTOCOL (OR PROTOCOL 'UDP))                    FIRSTONEFOUND)                   (DOLIST (PGM *RPC-PROGRAMS* FIRSTONEFOUND)                       (WHEN (AND (EQL NUMBER (RPC-PROGRAM-NUMBER PGM))                                  (OR (NULL VERSION)                                      (EQL VERSION (RPC-PROGRAM-VERSION PGM))))                           (COND                              ((EQ BESTPROTOCOL (RPC-PROGRAM-PROTOCOL PGM))                               (RETURN PGM))                              ((AND (NULL PROTOCOL)                                    (NULL FIRSTONEFOUND))                               (SETQ FIRSTONEFOUND PGM)))))))      (T (ERROR    "Invalid RPC Program Specifier: ~@[ Name: ~a~]~@[ Number: ~a~]~@[ Version: ~a~]~@[ Protocol: ~a~]"                NAME NUMBER VERSION PROTOCOL))))(DEFUN FIND-RPC-PROCEDURE (PROGRAM PROCID)   "Finds (and returns) RPC-PROCEDURE structure specified by PROCID from among the procedures of PROGRAM, an rpc-program object. PROCID may be either an integer or a symbol."   (LET ((PROCS (IF (CONSP PROGRAM)                    PROGRAM                    (RPC-PROGRAM-PROCEDURES PROGRAM))))        (CTYPECASE PROCID (INTEGER (DOLIST (P PROCS)                                       (WHEN (EQL PROCID (RPC-PROCEDURE-PROCNUM P))                                             (RETURN P))))               (SYMBOL (DOLIST (P PROCS)                           (WHEN (EQ PROCID (RPC-PROCEDURE-NAME P))                                 (RETURN P)))))))(DEFUN FIND-RPC-HOST (DESTINATION)     "Returns an IP host address (a number) for specified DESTINATION, or NIL if not known destination."   (ETYPECASE DESTINATION       (NUMBER DESTINATION)       ((OR SYMBOL STRING) (IF *USE-OS-NETWORKING*                               (OS-RESOLVE-HOST DESTINATION)                               (IL:IPHOSTADDRESS DESTINATION)))))(IL:* IL:\; "RPC Streams")(DEFUN OPEN-RPCSTREAM (PROTOCOL DESTADDR DESTSOCKET &OPTIONAL CREDENTIALS TIMEOUT-HANDLER)   "Create and return a new RPC-STREAM."   (LET ((HANDLER (CDR (ASSOC PROTOCOL *RPC-PROTOCOL-TYPES*)))         STREAM)        (UNLESS HANDLER (ERROR "Not a recognized RPC protocol: ~S" PROTOCOL))        (SETQ STREAM (FUNCALL HANDLER DESTADDR DESTSOCKET))        (SETF (RPC-STREAM-PROTOCOL STREAM)              PROTOCOL)        (SETF (RPC-STREAM-MONITORLOCK STREAM)              (IL:CREATE.MONITORLOCK "RPC"))        (SETF (RPC-STREAM-TIMEOUT-HANDLER STREAM)              TIMEOUT-HANDLER)        (SETF (RPC-STREAM-CREDENTIALS STREAM)              CREDENTIALS)        STREAM))(DEFUN RPC-CREATE-SOME-UDP-STREAM (DESTADDR DESTSOCKET)   (IF *USE-OS-NETWORKING*       (CREATE-OS-UDP-STREAM DESTADDR DESTSOCKET)       (RPC-CREATE-UDP-STREAM DESTADDR DESTSOCKET)))(DEFUN CLOSE-RPCSTREAM (RPCSTREAM)   "Deallocate an RPC Stream. Tries to cleanup after itself."   (RPC-CALL-METHOD CLOSE RPCSTREAM))(DEFGLOBALPARAMETER *STRING-RPC-METHODS*   (MAKE-RPC-METHODS :PROTOCOL 'STRING :INITIALIZE #'(LAMBDA (RPCSTREAM)                                                            (LET ((S (RPC-STREAM-OUTSTREAM RPCSTREAM)                                                                     ))                                                                 (FILE-POSITION S 0)                                                                 (IL:SETFILEINFO S 'IL:LENGTH 0)))          :PUTBYTE          #'(LAMBDA (RPCSTREAM VALUE)                   (WRITE-BYTE VALUE (RPC-STREAM-OUTSTREAM RPCSTREAM)))          :PUTCELL          #'(LAMBDA (RPCSTREAM VALUE)                   (LET ((OUTSTREAM (RPC-STREAM-OUTSTREAM RPCSTREAM)))                        (WRITE-BYTE (LDB (BYTE 8 24)                                         VALUE)                               OUTSTREAM)                        (WRITE-BYTE (LDB (BYTE 8 16)                                         VALUE)                               OUTSTREAM)                        (WRITE-BYTE (LDB (BYTE 8 8)                                         VALUE)                               OUTSTREAM)                        (WRITE-BYTE (LDB (BYTE 8 0)                                         VALUE)                               OUTSTREAM)))          :PUTRAWBYTES          #'(LAMBDA (RPCSTREAM BASE OFFSET NBYTES)                   (IL:\\BOUTS (RPC-STREAM-OUTSTREAM RPCSTREAM)                          BASE OFFSET NBYTES))          :ZEROBYTES          #'(LAMBDA (RPCSTREAM NBYTES)                   (LET ((STREAM (RPC-STREAM-OUTSTREAM RPCSTREAM)))                        (DOTIMES (I NBYTES)                            (IL:\\BOUT STREAM 0))))          :GETBYTE          #'(LAMBDA (RPCSTREAM)                   (READ-BYTE (RPC-STREAM-INSTREAM RPCSTREAM)))          :GETCELL          #'(LAMBDA (RPCSTREAM)                   (LET ((INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM)))                        (INTEGER-FROM-BYTES (IL:BIN INSTREAM)                               (IL:BIN INSTREAM)                               (IL:BIN INSTREAM)                               (IL:BIN INSTREAM))))          :GETUNSIGNED          #'(LAMBDA (RPCSTREAM)                   (LET ((INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM)))                        (UNSIGNED-FROM-BYTES (IL:BIN INSTREAM)                               (IL:BIN INSTREAM)                               (IL:BIN INSTREAM)                               (IL:BIN INSTREAM))))          :GETRAWBYTES          #'(LAMBDA (RPCSTREAM BASE OFFSET NBYTES)                   (IL:\\BINS (RPC-STREAM-INSTREAM RPCSTREAM)                          BASE OFFSET NBYTES))          :SKIPBYTES          #'(LAMBDA (RPCSTREAM NBYTES)                   (LET ((INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM)))                        (DOTIMES (I NBYTES)                            (IL:BIN INSTREAM))))          :CLOSE          #'IDENTITY))(DEFUN CREATE-STRING-RPC-STREAM (&OPTIONAL INSTRING)   "Create RPC STREAM that writes data to a string, retrievable as (RPC-GET-STRING-RESULT stream).  If you supply INSTRING, or store a string input stream in the INSTREAM slot, it will also read."   (MAKE-RPC-STREAM :METHODS *STRING-RPC-METHODS* :INSTREAM (AND INSTRING (MAKE-STRING-INPUT-STREAM                                                                           INSTRING))          :OUTSTREAM          (OPEN "{nodircore}" :DIRECTION :IO)))(DEFUN RPC-GET-STRING-RESULT (RPC-STREAM)   (LET* ((S (RPC-STREAM-OUTSTREAM RPC-STREAM))          (NBYTES (FILE-POSITION S))          (STR (MAKE-STRING NBYTES)))         (FILE-POSITION S 0)         (IL:\\BINS S (VECTOR-BASE STR)                0 NBYTES)         STR))(IL:* IL:\; "Debugging")(DEFGLOBALPARAMETER *TTY-RPC-METHODS*   (MAKE-RPC-METHODS :PUTCELL #'(LAMBDA (RPCSTREAM VALUE)                                       (FORMAT (RPC-STREAM-OUTSTREAM RPCSTREAM)                                              "~D,~D,~D,~D~%"                                              (LDB (BYTE 8 24)                                                   VALUE)                                              (LDB (BYTE 8 16)                                                   VALUE)                                              (LDB (BYTE 8 8)                                                   VALUE)                                              (LDB (BYTE 8 0)                                                   VALUE)))          :PUTRAWBYTES          #'(LAMBDA (RPCSTREAM BASE OFFSET NBYTES)                   (LET ((OUT (RPC-STREAM-OUTSTREAM RPCSTREAM)))                        (DOTIMES (I NBYTES)                            (FORMAT OUT "~D," (IL:\\GETBASEBYTE BASE (+ OFFSET I))))                        (TERPRI OUT)))          :PUTBYTE          #'(LAMBDA (RPCSTREAM VAL)                   (FORMAT (RPC-STREAM-OUTSTREAM RPCSTREAM)                          "~D~%" VAL))          :ZEROBYTES          #'(LAMBDA (RPCSTREAM NBYTES)                   (FORMAT (RPC-STREAM-OUTSTREAM RPCSTREAM)                          "~D*0~%" NBYTES))))(DEFUN CREATE-TTY-RPC-STREAM ()   "For debugging using the TTY as the output device."   (MAKE-RPC-STREAM :METHODS *TTY-RPC-METHODS* :OUTSTREAM *STANDARD-OUTPUT*))(IL:* IL:\; "Bignum support")(DEFUN PUTBASE-BIGNUM (BASE VALUE)   (UNLESS (TYPEP VALUE 'BIGNUM)       (ERROR 'TYPE-MISMATCH :EXPECTED-TYPE 'INTEGER :NAME VALUE :VALUE VALUE))   (DESTRUCTURING-BIND (LO MID HI . REST)          (IL:\\GETBASEPTR (IL:\\DTEST VALUE 'BIGNUM)                 0)          (WHEN (OR (NULL HI)                    (> HI 15)                    (< HI 0)                    (NOT (NULL REST)))                (ERROR "Unsigned value ~S exceeds 32 bits" VALUE))          (IL:\\PUTBASE BASE 1 (+ LO (IL:LLSH (LOGAND MID 3)                                            14)))          (IL:\\PUTBASE BASE 0 (+ (IL:LLSH HI 12)                                  (IL:LRSH MID 2)))))(DEFUN BIGNUM-MAKE-NUMBER (HIWORD LOWORD)   (LET ((N (IL:NCREATE 'BIGNUM)))        (IL:\\RPLPTR N 0 (LIST (LOGAND LOWORD 16383)                               (+ (IL:LRSH LOWORD 14)                                  (IL:LLSH (LOGAND HIWORD 4095)                                         2))                               (IL:LRSH HIWORD 12)))        N))(IL:* IL:\; "Remote Procedure Call")(DEFUN REMOTE-PROCEDURE-CALL (DESTINATION PROGRAM PROCID ARGLIST &REST KEYS &KEY PROTOCOL VERSION                                        REMOTESOCKET CREDENTIALS TIMEOUT-HANDLER DYNAMIC-PROGNUM                                         DYNAMIC-VERSION ERRORFLG MSEC-UNTIL-TIMEOUT                                         MSEC-BETWEEN-TRIES RETRY-UNTIL-SUCCESS NOTE-ADDRESS                                         &ALLOW-OTHER-KEYS)   "This is the high-level way of making a remote procedure call (PERFORM-RPC is the low-levelway).REMOTE-PROCEDURE-CALL resolves all the arguments, creates a new RPC-STREAM, makes the call, optionally closes the RPC-STREAM, and returns the results of the call.The resolution of arguments is designed such that all arguments may be eitherunresolved (e.g., a remote host name), or already resolved (e.g., an IP address)."   (LET (RPCSTREAM)        (UNWIND-PROTECT            (LET* ((PROGRAM (RPC-RESOLVE-PROG PROGRAM VERSION PROTOCOL))                   (PROCEDURE (RPC-RESOLVE-PROC (COND                                                   (DYNAMIC-PROGNUM (SETF PROGRAM (COPY-RPC-PROGRAM                                                                                   PROGRAM))                                                          (SETF (RPC-PROGRAM-NUMBER PROGRAM)                                                                DYNAMIC-PROGNUM)                                                          (SETF (RPC-PROGRAM-VERSION PROGRAM)                                                                (OR DYNAMIC-VERSION 1))                                                          PROGRAM)                                                   (T PROGRAM))                                     PROCID)))                  (SETQ RPCSTREAM (OPEN-RPCSTREAM (RPC-PROGRAM-PROTOCOL PROGRAM)                                         DESTINATION                                         (OR REMOTESOCKET PROGRAM)                                         CREDENTIALS TIMEOUT-HANDLER))                  (APPLY 'PERFORM-RPC NIL NIL PROGRAM PROCEDURE RPCSTREAM ARGLIST CREDENTIALS KEYS))            (WHEN RPCSTREAM (CLOSE-RPCSTREAM RPCSTREAM)))))(DEFUN CALL-VIA-PORTMAPPER (DESTINATION PROGRAM PROCEDURE ARGLIST &OPTIONAL CREDENTIALS)   (LET* ((*PROGRAM* (IF (TYPEP PROGRAM 'RPC-PROGRAM)                         PROGRAM                         (RPC-RESOLVE-PROG PROGRAM)))          (*PROCEDURE* (IF (TYPEP PROCEDURE 'RPC-PROCEDURE)                           PROCEDURE                           (RPC-RESOLVE-PROC *PROGRAM* PROCEDURE)))          (RETTYPES (RPC-PROCEDURE-RESULTTYPES *PROCEDURE*))          (RPC-STREAM (CREATE-STRING-RPC-STREAM)))         (MULTIPLE-VALUE-BIND (RESULTS SERVER-ADDRESS)                (LET (RPCSTREAM)                     (UNWIND-PROTECT                         (LET* ((PMAPPERPROG (RPC-RESOLVE-PROG 'PORTMAPPER))                                (PMAPPERPROC (RPC-RESOLVE-PROC PMAPPERPROG 'INDIRECT)))                               (SETQ RPCSTREAM (OPEN-RPCSTREAM (RPC-PROGRAM-PROTOCOL PMAPPERPROG)                                                      DESTINATION *PORTMAPPER-SOCKET*))                               (PERFORM-RPC NIL NIL PMAPPERPROG PMAPPERPROC RPCSTREAM                                      (LIST (RPC-PROGRAM-NUMBER *PROGRAM*)                                            (RPC-PROGRAM-VERSION *PROGRAM*)                                            (RPC-PROCEDURE-PROCNUM *PROCEDURE*)                                            (PROGN (ENCODE-RPC-ARGS RPC-STREAM ARGLIST *PROCEDURE*)                                                   (RPC-GET-STRING-RESULT RPC-STREAM)))                                      CREDENTIALS :NOTE-ADDRESS T))                         (WHEN RPCSTREAM (CLOSE-RPCSTREAM RPCSTREAM))))                (SETF (RPC-STREAM-INSTREAM RPC-STREAM)                      (MAKE-STRING-INPUT-STREAM (THIRD RESULTS)))                (VALUES (DECODE-RPC-ARGS RPC-STREAM RETTYPES)                       (SECOND RESULTS)                       (FIRST RESULTS)))))(DEFUN SETUP-RPC (DESTINATION PROGRAM PROCID &OPTIONAL DESTSOCKET VERSION DYNAMIC-PROGNUM                             DYNAMIC-VERSION PROTOCOL)   "Resolves arguments to REMOTE-PROCEDURE-CALL. Takes arguments in more or lessany reasonable form and returns multiple values (destination-address, socket-number,RPC-PROGRAM struct, RPC-PROCEDURE struct). See individual RPC-RESOLVE-* programs for details on what inputs are acceptable."   (LET* ((DESTADDR (RPC-RESOLVE-HOST DESTINATION))          (RPROG (RPC-RESOLVE-PROG PROGRAM VERSION PROTOCOL))          (RPROC (RPC-RESOLVE-PROC (COND                                      (DYNAMIC-PROGNUM (SETF RPROG (COPY-RPC-PROGRAM RPROG))                                             (SETF (RPC-PROGRAM-NUMBER RPROG)                                                   DYNAMIC-PROGNUM)                                             (SETF (RPC-PROGRAM-VERSION RPROG)                                                   DYNAMIC-VERSION)                                             RPROG)                                      (T RPROG))                        PROCID))          (SOCKET (OR DESTSOCKET (RPC-FIND-SOCKET DESTADDR RPROG (RPC-PROGRAM-PROTOCOL RPROG)))))         (VALUES DESTADDR SOCKET RPROG RPROC)))(DEFUN PERFORM-RPC (DESTADDR DESTSOCKET *PROGRAM* *PROCEDURE* *STREAM* ARGLIST CREDENTIALS &KEY                              (ERRORFLG T)                              ((:MSEC-UNTIL-TIMEOUT *MSEC-UNTIL-TIMEOUT*)                               *MSEC-UNTIL-TIMEOUT*)                              ((:MSEC-BETWEEN-TRIES *MSEC-BETWEEN-TRIES*)                               *MSEC-BETWEEN-TRIES*)                              NOTE-ADDRESS &ALLOW-OTHER-KEYS)   "The low-level remote procedure call function.  *STREAM* must be an rpc stream."   (UNLESS (RPC-PROGRAM-P *PROGRAM*)       (SETQ *PROGRAM* (RPC-RESOLVE-PROG *PROGRAM*)))   (UNLESS (RPC-PROCEDURE-P *PROCEDURE*)       (SETQ *PROCEDURE* (RPC-RESOLVE-PROC *PROGRAM* *PROCEDURE*)))   (IL:WITH.MONITOR (RPC-STREAM-MONITORLOCK *STREAM*)       (MACROLET ((PUTN (N)                        `(FUNCALL PUTFN *STREAM* ,N)))              (LET ((PUTFN (RPC-METHOD PUTCELL *STREAM*))                    (XID (CREATE-XID))                    RESULT)                   (REINITIALIZE-RPCSTREAM *STREAM* DESTADDR DESTSOCKET)                   (PUTN XID)                   (PUTN *RPC-MSG-CALL*)                   (PUTN *RPC-VERSION*)                   (PUTN (RPC-PROGRAM-NUMBER *PROGRAM*))                   (PUTN (RPC-PROGRAM-VERSION *PROGRAM*))                   (PUTN (RPC-PROCEDURE-PROCNUM *PROCEDURE*))                   (ENCODE-AUTHENTICATION *STREAM* (OR CREDENTIALS (RPC-STREAM-CREDENTIALS *STREAM*))                          )                   (ENCODE-AUTHENTICATION *STREAM* *NULL-AUTHENTICATION*)                   (ENCODE-RPC-ARGS *STREAM* ARGLIST *PROCEDURE*)                   (WHEN *DEBUG*                       (FORMAT *DEBUG-IO* "~&RPC[~A]: ~A.~A" (IPADDRESS-TO-STRING DESTADDR)                              (RPC-PROGRAM-NAME *PROGRAM*)                              (RPC-PROCEDURE-NAME *PROCEDURE*))                       (LET ((*PRINT-LENGTH* 5)                             (*PRINT-LEVEL* 2)                             (SEPR "["))                            (DOLIST (A ARGLIST)                                (PRINC SEPR *DEBUG-IO*)                                (PRIN1 A *DEBUG-IO*)                                (SETQ SEPR ", ")))                       (PRINC "]" *DEBUG-IO*))                   (COND                      ((EQ (SETQ RESULT (RPC-CALL-METHOD EXCHANGE *STREAM* ERRORFLG XID))                           T)                       (SETQ RESULT (PARSE-RPC-REPLY *STREAM* (RPC-PROCEDURE-RESULTTYPES *PROCEDURE*)                                           ERRORFLG))                       (WHEN *DEBUG* (FORMAT *DEBUG-IO* " => ~S~%" RESULT))                       (WHEN NOTE-ADDRESS                           (PUSH (IL:|fetch| IL:IPSOURCEADDRESS IL:|of| (RPC-STREAM-INSTREAM                                                                                 *STREAM*))                                 RESULT))))                   RESULT))))(DEFUN RPC-RESOLVE-HOST (DESTINATION)   "Takes an IPADDRESS, symbol, or string and tries to find an IPADDRESS for a remote host.  Signals an error if it cannot resolve the host."   (OR (FIND-RPC-HOST DESTINATION)       (ERROR "Could not find an IP address for destination ~A" DESTINATION)))(DEFUN RPC-RESOLVE-PROG (PROGRAM &OPTIONAL VERSION PROTOCOL)   "Takes an RPC-PROGRAM, a number, a symbol, or a string along with an optional VERSION and PROTOCOL and tries to find the matching RPC-PROGRAM.Signals an error if it cannot find the intended program."   (OR (TYPECASE PROGRAM           (RPC-PROGRAM PROGRAM)           (SYMBOL (FIND-RPC-PROGRAM :NAME PROGRAM :VERSION VERSION :PROTOCOL PROTOCOL))           (NUMBER (FIND-RPC-PROGRAM :NUMBER PROGRAM :VERSION VERSION :PROTOCOL PROTOCOL))           (STRING (FIND-RPC-PROGRAM :NAME (INTERN PROGRAM)                          :VERSION VERSION :PROTOCOL PROTOCOL)))       (ERROR "Could not find definition for program ~A~@[, version ~D~]~@[, protocol ~a~]." PROGRAM              VERSION PROTOCOL)))(DEFUN RPC-RESOLVE-PROC (PROGRAM PROCID)   "Given an RPC-PROGRAM struct PROGRAM, tries to find and return an RPC-PROCEDURE in RPROG specified by a number, string,  symbol, or RPC-PROCEDURE.Signals an error if it cannot find the intended rpc-procedure."   (COND      ((TYPEP PROCID 'RPC-PROCEDURE)       PROCID)      ((FIND-RPC-PROCEDURE PROGRAM PROCID))      (T (ERROR "Could not find definition for procedure ~a of program ~a~%" PROCID (RPC-PROGRAM-NAME                                                                                     PROGRAM)))))(DEFUN RPC-FIND-SOCKET (DESTADDR PROGRAM PROTOCOL &OPTIONAL ERRORFLG)   "Tries to find and return a remote socket number.(1) Looks in *RPC-WELL-KNOWN-SOCKETS*,(2) Looks in *RPC-SOCKET-CACHE*, but only if *RPC-OK-TO-CACHE*,(3) Requests socket number via remote procedure call to Portmapper on remote machine. If found and *RPC-OK-TO-CACHE*, caches the new socket number on *RPC-SOCKET-CACHE*.(4) If all the above have failed, signals an error."   (LET ((PROGNUM (RPC-PROGRAM-NUMBER PROGRAM))         (PROGVERS (RPC-PROGRAM-VERSION PROGRAM))         (DEBUG (AND (NUMBERP *DEBUG*)                     (> *DEBUG* 1)))         SKT ERROR)        (COND           ((SETQ SKT (FIND-CACHED-SOCKET '* PROGNUM PROGVERS PROTOCOL *RPC-WELL-KNOWN-SOCKETS*))            (WHEN DEBUG                (FORMAT-T "~&Using well-known socket ~D for program ~A~%" SKT (RPC-PROGRAM-NAME                                                                               PROGRAM)))            SKT)           ((AND *RPC-OK-TO-CACHE* (SETQ SKT (FIND-CACHED-SOCKET DESTADDR PROGNUM PROGVERS PROTOCOL                                                     *RPC-SOCKET-CACHE*)))            (WHEN DEBUG                (FORMAT-T "~&Using cached socket ~D for program ~A~%" SKT (RPC-PROGRAM-NAME PROGRAM)))            SKT)           ((SETQ ERROR                  (PROGN (WHEN DEBUG                             (FORMAT-T "~&Looking up socket for program ~a on ~a..." (                                                                                     RPC-PROGRAM-NAME                                                                                      PROGRAM)                                    (IPADDRESS-TO-STRING DESTADDR)))                         (COND                            ((NULL (SETQ SKT (REMOTE-PROCEDURE-CALL                                              DESTADDR                                              'PORTMAPPER                                              'LOOKUP                                              `(,PROGNUM ,PROGVERS                                                      ,(OR (CDR (ASSOC PROTOCOL *RPC-PROTOCOLS*))                                                           (ERROR "Unknown protocol ~S" PROTOCOL))                                                      0)                                              :REMOTESOCKET *PORTMAPPER-SOCKET* :ERRORFLG ERRORFLG)))                             '("No reply from Portmapper"))                            ((EQ (FIRST SKT)                                 'ERROR)                             (CDR SKT))                            ((<= (SETQ SKT (FIRST SKT))                                 0)                             `(PROGRAM-UNAVAILABLE ,PROGRAM "per portmapper")))))            (RPC-SIGNAL-ERROR ERRORFLG ERROR))           (T (WHEN DEBUG (FORMAT-T "found ~D.~%" SKT))              (WHEN *RPC-OK-TO-CACHE* (CACHE-SOCKET PROGRAM DESTADDR SKT))              SKT))))(DEFUN ENCODE-RPC-ARGS (STREAM ARGLIST *PROCEDURE*)   "Takes a list of arguments and the corresponding XDR procedure definition and converts the arguments into XDR, writing them into the RPC-STREAM."   (LET ((ENCODEFN (RPC-PROCEDURE-ARGTYPES *PROCEDURE*)))        (COND           ((NULL ENCODEFN)            (UNLESS (NULL ARGLIST)                   (RPC-ARGUMENT-ERROR ARGLIST 0)))           ((AND (CONSP ENCODEFN)                 (NOT (EQ (CAR ENCODEFN)                          'LAMBDA)))            (DO ((XDR-FNS ENCODEFN (REST XDR-FNS))                 (ARGS ARGLIST (REST ARGS)))                ((OR (NULL ARGS)                     (NULL XDR-FNS))                 (IF (OR XDR-FNS ARGS)                     (RPC-ARGUMENT-ERROR ARGLIST (LENGTH ENCODEFN))))              (FUNCALL (FIRST XDR-FNS)                     STREAM                     (FIRST ARGS))))           (T (FUNCALL ENCODEFN STREAM ARGLIST)))))(DEFUN PARSE-RPC-REPLY (RPCSTREAM RETTYPES &OPTIONAL ERRORFLG)   "Parses a reply message.  If all goes well, returns a list of the values returned (or T if RETTYPES is NIL).If RPC was REJECTED, or ACCEPTED but with an ACCEPT-STAT other than SUCCESS, then (Following Courier) the response depends on the value of ERRORFLG:	If ERRORFLG = 'NOERROR, then returns NIL	If ERRORFLG = 'RETURNERRORS, then returns a list of the form		(ERROR reply-stat accept-or-reject-stat otherinfo)	If ERRORFLG = anything else, signals Lisp error."   (MACROLET ((GETUNSIGNED NIL '(FUNCALL UFN RPCSTREAM)))          (LET* ((UFN (RPC-METHOD GETUNSIGNED RPCSTREAM))                 MSGTYPE REPLY-STAT)                (COND                   ((NOT (EQL (SETQ MSGTYPE (GETUNSIGNED))                              *RPC-MSG-REPLY*))                    (RPC-SIGNAL-ERROR ERRORFLG `(NOT-A-REPLY ,MSGTYPE)))                   ((EQL (SETQ REPLY-STAT (GETUNSIGNED))                         *RPC-REPLY-ACCEPTED*)                    (LET ((VERF (DECODE-AUTHENTICATION RPCSTREAM))                          (ACCEPT-STAT (GETUNSIGNED)))                         (COND                            ((NOT (EQL ACCEPT-STAT *RPC-ACCEPT-SUCCESS*))                             (RPC-SIGNAL-ERROR ERRORFLG (CONS (SETQ ACCEPT-STAT                                                                    (OR (CDR (ASSOC ACCEPT-STAT                                                                                    *RPC-ACCEPT-STATS*                                                                                    ))                                                                        ACCEPT-STAT))                                                              (CASE ACCEPT-STAT                                                                  (PROGRAM-MISMATCH (LIST (                                                                                          GETUNSIGNED                                                                                           )                                                                                          (                                                                                          GETUNSIGNED                                                                                           )))))))                            (T (DECODE-RPC-ARGS RPCSTREAM RETTYPES)))))                   ((EQL REPLY-STAT *RPC-REPLY-REJECTED*)                    (RPC-SIGNAL-ERROR ERRORFLG (XDR-GENCODE-INLINE                                                NIL                                                '(:UNION (:ENUMERATION :NOERRORS (                                                                                 RPC-VERSION-MISMATCH                                                                                  0)                                                                (AUTHENTICATION 1))                                                        (RPC-VERSION-MISMATCH (:LIST :UNSIGNED                                                                                      :UNSIGNED))                                                        (AUTHENTICATION (:ENUMERATION :NOERRORS                                                                               (BAD-CREDENTIALS                                                                                1)                                                                               (REJECTED-CREDENTIALS                                                                                2)                                                                               (BAD-VERIFIER 3)                                                                               (REJECTED-VERIFIER                                                                                4)                                                                               (TOO-WEAK 5))))                                                'READ RPCSTREAM)))                   (T (RPC-SIGNAL-ERROR ERRORFLG `(ILLEGAL-REPLY-TYPE ,REPLY-STAT)))))))(DEFMACRO DECODE-RPC-ARGS (RPCSTREAM RETTYPES)   `(COND       ((NULL ,RETTYPES)        T)       ((AND (CONSP ,RETTYPES)             (NOT (EQ (CAR ,RETTYPES)                      'LAMBDA)))        (MAPCAR #'(LAMBDA (FN)                         (FUNCALL FN ,RPCSTREAM))               ,RETTYPES))       (T (FUNCALL ,RETTYPES ,RPCSTREAM))))(DEFUN RPC-HANDLE-TIMEOUT (STREAM TIMEOUT-COUNT ERRORFLG)   (LET ((HANDLER (RPC-STREAM-TIMEOUT-HANDLER STREAM)))        (CASE HANDLER            ((NIL :NOERRORS :RETURNERRORS) (RPC-SIGNAL-ERROR (OR HANDLER ERRORFLG)                                                  '(RPC-TIMEOUT)))            (OTHERWISE (IF (EQ (SETQ HANDLER (FUNCALL HANDLER STREAM TIMEOUT-COUNT))                               T)                           :CONTINUE                           HANDLER)))))(DEFUN RPC-SIGNAL-ERROR (ERRORFLG ERRORFORM)   (CASE ERRORFLG       (:NOERRORS NIL)       (:RETURNERRORS (CONS 'ERROR ERRORFORM))       (OTHERWISE (CASE (CAR ERRORFORM)                      (RPC-TIMEOUT (ERROR 'RPC-TIMEOUT))                      (OTHERWISE (ERROR 'RPC-ERROR-REPLY :TYPE (CAR ERRORFORM)                                        :ARGS                                        (CDR ERRORFORM)))))))(DEFUN RPC-ARGUMENT-ERROR (ACTUALS EXPECTED#)   (ERROR "Wrong number of arguments to procedure ~A.~A:  Expected ~D, got ~D." (IF *PROGRAM*                                                                                    (RPC-PROGRAM-NAME                                                                                     *PROGRAM*)                                                                                    "?")          (IF *PROCEDURE*              (RPC-PROCEDURE-NAME *PROCEDURE*)              "?")          EXPECTED#          (LENGTH ACTUALS)))(DEFUN CREATE-XID ()   "Returns a number to use as the ID of a given transmisssion."   (IF (> (INCF *XID-COUNT*)          *XID-MAX*)       (SETQ *XID-COUNT* 1)       *XID-COUNT*))(IL:* IL:\; "RPC Utility Functions")(DEFUN FIND-CACHED-SOCKET (DESTADDR PROGNUM PROGVERS PROTOCOL CACHE)   "Looks up a given (DESTADDR, PROGNUM, PROGVERS, PROTOCOL) in the specified CACHE."   (DOLIST (ENTRY CACHE)       (WHEN (AND (EQL (CAR ENTRY)                       DESTADDR)                  (EQL (CAR (SETQ ENTRY (CDR ENTRY)))                       PROGNUM)                  (EQL (CAR (SETQ ENTRY (CDR ENTRY)))                       PROGVERS)                  (EQ (CAR (SETQ ENTRY (CDR ENTRY)))                      PROTOCOL))           (RETURN (CADR ENTRY)))))(DEFUN CACHE-SOCKET (PROGRAM ADDRESS SKT)   (UNLESS (INTEGERP ADDRESS)       (SETQ ADDRESS (RPC-RESOLVE-HOST ADDRESS)))   (CHECK-TYPE SKT INTEGER)   (PUSH `(,ADDRESS ,(RPC-PROGRAM-NUMBER PROGRAM)                 ,(RPC-PROGRAM-VERSION PROGRAM)                 ,(RPC-PROGRAM-PROTOCOL PROGRAM)                 ,SKT)         *RPC-SOCKET-CACHE*))(DEFUN CLEAR-CACHE (&OPTIONAL PROGRAM ADDRESS)   (SETQ *RPC-SOCKET-CACHE* (COND                               ((OR PROGRAM ADDRESS)                                (WHEN PROGRAM                                    (SETQ PROGRAM (RPC-RESOLVE-PROG PROGRAM)))                                (WHEN ADDRESS                                    (SETQ ADDRESS (RPC-RESOLVE-HOST ADDRESS)))                                (DELETE-IF #'(LAMBDA (ENTRY)                                                    (AND (OR (NULL ADDRESS)                                                             (EQL (FIRST ENTRY)                                                                  ADDRESS))                                                         (OR (NULL PROGRAM)                                                             (AND (EQ (SECOND ENTRY)                                                                      (RPC-PROGRAM-NUMBER PROGRAM))                                                                  (EQ (THIRD ENTRY)                                                                      (RPC-PROGRAM-VERSION PROGRAM)))                                                             )))                                       *RPC-SOCKET-CACHE*))))   T)(DEFUN IPADDRESS-TO-STRING (IPADDRESS)   "Render IPADDRESS in the canonical printed representation of i.j.k.l"   (FORMAT NIL "~D.~D.~D.~D" (LDB (BYTE 8 24)                                  IPADDRESS)          (LDB (BYTE 8 16)               IPADDRESS)          (LDB (BYTE 8 8)               IPADDRESS)          (LDB (BYTE 8 0)               IPADDRESS)))(IL:* IL:\; "Authentication")(DEFCONSTANT *AUTHENTICATION-TYPEDEF*   '(:STRUCT AUTHENTICATION (TYPE (:ENUMERATION (:NULL 0)                                         (:UNIX 1)                                         (:SHORT 2)))           (STRING :STRING)))(DEFCONSTANT *NULL-AUTHENTICATION* (MAKE-AUTHENTICATION :TYPE :NULL :STRING ""))(DEFUN CREATE-UNIX-AUTHENTICATION (STAMP MACHINE-NAME UID GID GIDS)   "Given the fields of a Unix authentication, creates an AUTHENTICATION struct with these fields encoded as a string."   (LET ((TEMPSTREAM (CREATE-STRING-RPC-STREAM)))        (PUTUNSIGNED TEMPSTREAM STAMP)        (XDR-STRING TEMPSTREAM MACHINE-NAME)        (PUTUNSIGNED TEMPSTREAM UID)        (PUTUNSIGNED TEMPSTREAM GID)        (XDR-GENCODE-INLINE NIL '(:LIST-OF :UNSIGNED)               'WRITE TEMPSTREAM GIDS)        (MAKE-AUTHENTICATION :TYPE :UNIX :STRING (RPC-GET-STRING-RESULT TEMPSTREAM))))(DEFUN ENCODE-AUTHENTICATION (RPCSTREAM AUTH)   "Given an AUTHENTICATION struct, converts the struct to its XDR encoding and writes it tothe RPC-STREAM specified."   (IF (NULL AUTH)       (SETQ AUTH *NULL-AUTHENTICATION*))   (CHECK-TYPE AUTH AUTHENTICATION)   (XDR-GENCODE-INLINE NIL *AUTHENTICATION-TYPEDEF* 'WRITE RPCSTREAM AUTH))(DEFUN DECODE-AUTHENTICATION (RPCSTREAM)   "Reads an authentication from specified RPC-STREAM and returns it as an AUTHENTICATION struct."   (LET ((TYPE (GETCELL RPCSTREAM))         (LEN (GETUNSIGNED RPCSTREAM)))        (COND           ((AND (EQL TYPE 0)                 (EQL LEN 0))            NIL)           (T (MAKE-AUTHENTICATION :TYPE (CASE TYPE                                             (0 :NULL)                                             (1 :UNIX)                                             (2 :SHORT)                                             (OTHERWISE NIL))                     :STRING                     (XDR-READ-ARRAY RPCSTREAM LEN))))))(IL:* IL:\; "Interface to RESTART.ETHER")(DEFUN RPC-RESTART (EVENT)   (SETQ *RPC-SOCKET-CACHE* NIL))(IL:APPENDTOVAR IL:RESTARTETHERFNS RPC-RESTART)(IL:PUTPROPS IL:RPCRPC IL:COPYRIGHT ("Stanford University and Xerox Corporation" 1987 1988 1989 1990))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP