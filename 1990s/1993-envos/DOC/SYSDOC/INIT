(FILECREATED " 3-Dec-87 16:26:53" {PHYLUM}<SYSDOCRELEASES>INIT.;18 17963        changes to:  (VARS INITCOMS)		   (FNS GREETFN.TEXT)      previous date: "13-Apr-87 14:26:00" {PHYLUM}<SYSDOCRELEASES>INIT.;17)(PRETTYCOMPRINT INITCOMS)(RPAQQ INITCOMS [(FNS GREETFN GREETFN.SCREEN GREETFN.TEXT GREETFN.LISP GREETFN.LOADMENU)		   (FNS WHY.FILE NO.FILE)		   (MACROS pushnewequal PUSHNEWEQUAL)		   (DECLARE: DONTEVAL@LOAD (P (GREETFN (QUOTE YourLoginName)						       (QUOTE YourRegistry)						       (QUOTE YourFirstName)						       (QUOTE YourInitials:)						       (QUOTE YourFileServer)						       (QUOTE ((" 6-JAN" . "Happy Epiphany")							       ("12-JUN" . "Happy Birthday")))						       (QUOTE MailMode])(DEFINEQ(GREETFN  [LAMBDA (GV.NAME REGISTRY FIRST.NAME INITIALS FILE.SERVER GREET.INFO MAIL.MODE)                                                             (* bbb "13-Apr-87 14:24")          (* * Set things up the way I like em.)          (* * Inform system of my first name and initials)    (pushnewequal INITIALSLST (LIST (U-CASE GV.NAME)				      FIRST.NAME INITIALS))    (pushnewequal INITIALSLST (LIST (U-CASE (PACK* GV.NAME "." REGISTRY))				      FIRST.NAME INITIALS))          (* * Where I want to end up after logging in.)    (RPAQ LOGINHOST/DIR (PACKFILENAME (QUOTE HOST)					  FILE.SERVER					  (QUOTE DIRECTORY)					  GV.NAME))          (* * Messages to be printed if greeted on special dates)    (for GREETING in GREET.INFO do (pushnewequal GREETDATES GREETING))          (* * Lay out windows, set up text subsystems, and tailor Lisp environment)    (GREETFN.SCREEN GV.NAME REGISTRY FIRST.NAME INITIALS FILE.SERVER GREET.INFO MAIL.MODE)    (GREETFN.TEXT GV.NAME REGISTRY FIRST.NAME INITIALS FILE.SERVER GREET.INFO MAIL.MODE)    (GREETFN.LISP GV.NAME REGISTRY FIRST.NAME INITIALS FILE.SERVER GREET.INFO MAIL.MODE)          (* * Fix Idle so I don't have to log in all the time. Also load some interesting things for Idle to do.)    (if (DEFINEDP (QUOTE IDLE.SET.OPTION))	then (IDLE.SET.OPTION (QUOTE ALLOWED.LOGINS)				  (QUOTE UNLOCKED))	       (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)			    IDLEHAX))          (* * Make prompt window not clear itself all the time so old prompt messages don't get wiped out before I get to 	  read them.)    (CHANGENAME (QUOTE CLRPROMPT)		  (QUOTE CLEARW)		  (QUOTE TERPRI))          (* * Straighten up background menu)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 BACKGROUNDMENU)    (BkgMenu.rename.item (QUOTE Lisp% Listener)			 " Exec ")    (SETQ BackgroundMenuTopLevelItems (QUOTE (" Exec " Snap CHAT PSW TEdit SendMail)))    (SETQ BackgroundMenuSuperItem " Exec ")    (BkgMenu.reorder.items BackgroundMenuTopLevelItems)    (BkgMenu.fixup)          (* * Add a background menu items that will load NoteCards and Sketch and delete themselves 	  (the menu items, that is) when done done. Also add an item that will allow me to change the background to 	  interesting bitmaps. Finally make it easy to change the default printer)    (GREETFN.LOADMENU (QUOTE NoteCards)			(QUOTE {QV}<NOTECARDS>1.2K>NOTECARDS))    (GREETFN.LOADMENU (QUOTE Sketch)			(QUOTE SKETCH))    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 BACKGROUNDIMAGES)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 SETDEFAULTPRINTER)          (* * Return NIL)    NIL])(GREETFN.SCREEN  [LAMBDA (GV.NAME REGISTRY FIRST.NAME INITIALS FILE.SERVER GREET.INFO)                                                             (* hts: "14-Jul-86 17:45")          (* * Lay out windows on the screen in a reasonable way.)          (* * RATIONALE for this particular layout: We read left-to-right, top-to-bottom, so naturally when we glance up at 	  the screen, we tend to look first at the upper left-hand corner of the screen. So naturally the thing we are most 	  interested in ought to be there. I argue that that is not the Lisp executive, the clock, or the prompt window;	  but rather a text, mail, or program editor window, since it is in these that we really traffic.	  (I spend a very low percentage of my time talking to the exec.) Consequently, the exec etc. are placed in the lower	  right hand corner, and editing things are placed predominately in the upper left. Lafite is given a particularly 	  large mail reading window, since reading long messages in small windows gives me a headache.)          (* * Load window manipulation package. This helps you manage screen space. It can clear the screen of inspector 	  windows, clear the screen of windows in a particular area, or allow you to remember the exact shape of windows so 	  that they can be temporarily moved aside and then moved back to their exact original spot (particularly useful if 	  the screen was originally carefully laid out.))    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 WDWHACKS)          (* * Nuke Logo window)    (if (WINDOWP LOGOW)	then (CLOSEW LOGOW))          (* * Other layout stuff)    (LET ((LAFITE.STATUS.HEIGHT 56)	  (LAFITE.STATUS.WIDTH 200)	  (LAFITE.DELIVERED.HEIGHT 41)	  (CALENDAR.ICON.WIDTH 64)	  (CALENDAR.ICON.HEIGHT 64)	  (CROCK.WIDTH 90)	  (CROCK.HEIGHT 90)	  (HALFSCREENWIDTH (QUOTIENT SCREENWIDTH 2))	  (HALFSCREENHEIGHT (QUOTIENT SCREENHEIGHT 2))	  (BOUNDARY 600)	  LOGO LOGOWIDTH LOGOHEIGHT)          (* * Make space for clock. There are a couple of other clocks of interest: one is BiClock, but it is kind of large 	  and cannot be scaled down; the other is VStats, which gives some system statistics in addition to the time, but it 	  is digital.)         (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		      CROCK)         (CROCK (CREATEREGION (DIFFERENCE SCREENWIDTH CROCK.WIDTH)				  0 CROCK.WIDTH CROCK.HEIGHT))          (* * Set up prompt window)         (WINDOWPROP PROMPTWINDOW (QUOTE TITLE)		       NIL)         (SHAPEW PROMPTWINDOW (CREATEREGION BOUNDARY 0 (DIFFERENCE SCREENWIDTH									 (PLUS BOUNDARY CROCK.WIDTH)									 )						CROCK.HEIGHT))          (* * Set up exec window)         (SHAPEW \TopLevelTtyWindow (CREATEREGION BOUNDARY CROCK.HEIGHT (DIFFERENCE SCREENWIDTH 											 BOUNDARY)						      (DIFFERENCE HALFSCREENHEIGHT CROCK.HEIGHT)))          (* * Set up name window)         (SETQ LOGO (LOGOW FIRST.NAME (CREATEPOSITION 0 0)			       (CONCAT FIRST.NAME "'s Lisp")))         [SETQ LOGOWIDTH (WIDTHIFWINDOW (WINDOWPROP LOGO (QUOTE WIDTH]         (SETQ LOGOHEIGHT (HEIGHTIFWINDOW (WINDOWPROP LOGO (QUOTE HEIGHT))					      T))         (MOVEW LOGO (DIFFERENCE (QUOTIENT BOUNDARY 2)				     (QUOTIENT LOGOWIDTH 2))		  SCROLLBARWIDTH)          (* * Set up Calendar to remind me of important dates. Dates for Calendar are kept on my directory in 	  calendar>calreminders; note that this subdirectory cannot be set till after Calendar is loaded, because the 	  variable is a VAR and not an INITVAR (yuk!) Also, the file must be present and readable as a Lisp file, or Calendar	  will crash (double yuk); the LET block creates an empty reminders file if need be.)         (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		      CALENDAR)         [RPAQ CALDEFAULTHOST&DIR (PACKFILENAME (QUOTE HOST)						    FILE.SERVER						    (QUOTE DIRECTORY)						    (PACK* GV.NAME ">" (QUOTE CALENDAR]         [LET [(REMINDERS (PACKFILENAME (QUOTE DIRECTORY)					  CALDEFAULTHOST&DIR					  (QUOTE NAME)					  (QUOTE CALREMINDERS]	      (if (NOT (INFILEP REMINDERS))		  then (LET [(S (OPENSTREAM REMINDERS (QUOTE OUTPUT]			      (PRINTOUT S (QUOTE STOP)					T)			      (CLOSEF S]         (CALENDAR (QUOTE THISMONTH))         (RPAQ? CALMONTHWINDOW NIL)         (if (WINDOWP CALMONTHWINDOW)	     then (WINDOWPROP CALMONTHWINDOW (QUOTE ICONPOSITION)				  (CREATEPOSITION (DIFFERENCE SCREENWIDTH CALENDAR.ICON.WIDTH)						    HALFSCREENHEIGHT))		    (SHRINKW CALMONTHWINDOW))          (* * Mail: Set up space for various Lafite windows and turn on Lafite. Mode is Grapevine (as opposed to NS). Batch 	  printout.)         (RPAQ LAFITESTATUSWINDOWPOSITION (CREATEPOSITION (DIFFERENCE SCREENWIDTH 									    LAFITE.STATUS.WIDTH)							      (IDIFFERENCE SCREENHEIGHT 									     LAFITE.STATUS.HEIGHT)))         (RPAQ LAFITEEDITORREGION (CREATEREGION BOUNDARY HALFSCREENHEIGHT (DIFFERENCE 										      SCREENWIDTH 											 BOUNDARY)						    (DIFFERENCE HALFSCREENHEIGHT 								  LAFITE.STATUS.HEIGHT)))         (RPAQ LAFITEBROWSERREGION (CREATEREGION SCROLLBARWIDTH SCROLLBARWIDTH (DIFFERENCE						       BOUNDARY SCROLLBARWIDTH)						     (DIFFERENCE 200 SCROLLBARWIDTH)))         (RPAQ LAFITEDISPLAYREGION (CREATEREGION SCROLLBARWIDTH 200 (DIFFERENCE BOUNDARY 										   SCROLLBARWIDTH)						     (DIFFERENCE SCREENHEIGHT 200)))          (* * Put initial TEdit window in the right place. There used to be a way to do this, but as far as I can tell, it 	  doesn't work any more.)          (* * (LET ((TEDITW (CREATEW (CREATEREGION SCROLLBARWIDTH 0 (DIFFERENCE BOUNDARY SCROLLBARWIDTH) 	  (DIFFERENCE SCREENHEIGHT 174)) "Text editing window"))) (TEDIT NIL TEDITW) (TEDIT.QUIT (TEXTSTREAM TEDITW))))          (* * CHAT stuff: put the initial chat window in a good spot)         [LET [(CHATREGION (CREATEREGION HALFSCREENWIDTH HALFSCREENHEIGHT HALFSCREENWIDTH					   (DIFFERENCE HALFSCREENHEIGHT LAFITE.STATUS.HEIGHT]	      (if (WINDOWP CHATWINDOW)		  then (SHAPEW CHATWINDOW CHATREGION)			 (CLOSEW CHATWINDOW)		else (RPAQ CHATWINDOW (CREATEW CHATREGION "Chat window" NIL T]          (* * Load and set up widget which will put up different background images.)         (FILESLOAD (SYSLOAD)		      BACKGROUNDIMAGES)         (BACKGROUND.SETUP])(GREETFN.TEXT  [LAMBDA NIL                                                (* edited: " 3-Dec-87 16:26")          (* * Gets text-related parts of the system set up.)          (* * Note: don't do TEdit related stuff if TEdit isn't loaded)    [if (DEFINEDP (QUOTE TEDIT))	then           (* * TEdit key-handling stuff. The queer KEYACTION thing used to be necessary to load TEditKey on Dorados;	  it may be obsolete.)	       (SELECTQ (MACHINETYPE)			  (DORADO (KEYACTION (QUOTE DEFAULTS)					       (KEYACTION (QUOTE FONT)))				  (KEYACTION (QUOTE TAB)					       (QUOTE (METADOWN . METAUP)))				  (SETQ TEDITKEY.NESTWIDTH 18)				  (FILESLOAD (SYSLOAD FROM VALUEOF DIRECTORIES)					       TEDITKEY))			  NIL)          (* * Load spelling checker and dictionary to run in TEdit)	       (FILESLOAD (SYSLOAD FROM VALUEOF DIRECTORIES)			    PROOFREADER DICTTOOL)          (* * Executive: Load a package that lets you create extra executives as necessary. Note: This used to be TExec, 	  which provided an editor-backed executive (so you could scroll, shift-select, etc.); however, TExec proved to have 	  too many problems to be worthwhile. Also: Load a package that records the name of the currently connected directory	  in the title bar of the Exec window.)	       (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)			    LISTEN)	       (WINDOWPROP \TopLevelTtyWindow (QUOTE TITLE)			     (QUOTE Exec))	       (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)			    CONNTITLE)          (* * Note: don't do Lafite related stuff if it isn't loaded)	       (if (DEFINEDP (QUOTE LAFITE))		   then           (* * Tell system where I keep my mail folders.)			  [RPAQ LAFITEDEFAULTHOST&DIR (PACKFILENAME (QUOTE HOST)									FILE.SERVER									(QUOTE DIRECTORY)									(PACK* GV.NAME ">"										 (QUOTE MAIL]          (* * Get the Lafite mail system set up. Message hardcopies should be batched together.)			  (RPAQQ LAFITEHARDCOPYBATCHFLG T)			  (LAFITEMODE (SELECTQ MAIL.MODE						   (NS (QUOTE NS))						   (QUOTE GV)))			  (LAFITE (QUOTE ON))           (* * Set up Lafite fonts. The following are actually the system defaults.)			  (RPAQ LAFITEDISPLAYFONT (FONTCREATE (QUOTE TIMESROMAN)								  12))			  (RPAQ LAFITEEDITORFONT (FONTCREATE (QUOTE TIMESROMAN)								 12))			  (RPAQ LAFITEHARDCOPYFONT (FONTCREATE (QUOTE TIMESROMAN)								   12))          (* * Load mail-related packages: maintain to modify distribution lists, and Lafitefind to facilitate finding 	  messages)			  (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)				       MAINTAIN LAFITEFIND))          (* * CHAT stuff: put TEdit stream behind chat windows; make chat windows close themselves when I'm done using them;	  register the dial out servers so that Chat will deal with them properly. Note: If you want to use Chat to run Emacs	  or some other screen editor on a remote machine, you will have to change CHAT.DISPLAYTYPES to 	  ((NIL 10 DM2500)) (or something like ((VAXC 10 DM2500) (NIL 10 TEDIT)) if VAXC is the only machine you Emacs on.))	       (RPAQQ CHAT.DISPLAYTYPES ((NIL 10 DM2500]    (RPAQQ CLOSECHATWINDOWFLG T)    (ADDTOVAR NETWORKOSTYPES (DLS . DLS)		(DLS+1200 . DLS])(GREETFN.LISP  [LAMBDA NIL                                                (* bbb "13-Jan-87 10:54")          (* * Tailors the Lisp environment the way I like it)          (* * General Lisp stuff)    (RPAQQ CLISPIFTRANFLG T)    (RPAQQ CLISPIFYPACKFLG NIL)    (RPAQ **COMMENT**FLG "(* ...)")    (RPAQQ AUTOBACKTRACEFLG ALWAYS)    (RPAQQ FIXSPELL.UPPERCASE.QUIET T)          (* * Set up DEdit in a reasonable sort of way: reset so it handles control-Y properly, windows should shut 	  themselves when done, and screen should be tiled, and DEdit menu should be somewhat expanded.)    (RESETDEDIT)    (SETQ DEditLinger NIL)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 DEDITK TILEDEDIT)    (DEDITK)          (* * Load package that will create indexes for program listings)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 SINGLEFILEINDEX)          (* * Load package that will try to prevent you from writing Lisp programs to the wrong directory.)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 SAMEDIR])(GREETFN.LOADMENU  [LAMBDA (PACKAGE FILE)                                     (* hts: "10-Mar-86 15:36")          (* * Puts an entry in the background menu which if buttoned will cause the package on FILE to be loaded and the 	  menu entry to be deleted.)    (FILESLOAD (SYSLOAD FROM VALUEOF LISPUSERSDIRECTORIES)		 BACKGROUNDMENU)    (LET ((ITEM (CONCAT "Load " PACKAGE)))         (BkgMenu.remove.item ITEM)         (push BackgroundMenuCommands (LIST ITEM [BQUOTE (QUOTE (RESETFORM									  (TTYDISPLAYSTREAM 										     PROMPTWINDOW)									  (BkgMenu.remove.item									    , ITEM)									  (BkgMenu.fixup)									  (SPAWN.MOUSE)									  (PROMPTPRINT									    "Loading "									    (QUOTE , PACKAGE)									    "...  ")									  (FILESLOAD (SYSLOAD)										       , FILE)									  (PROMPTPRINT									    "Done loading "									    (QUOTE , PACKAGE))									  (BkgMenu.fixup]						ITEM)))    (BkgMenu.fixup]))(DEFINEQ(WHY.FILE  [LAMBDA (FILE)                                             (* hts: "13-Jan-86 20:07")          (* * Make file package explain why it wants FILE dumped. FILE can be either a single file or a list of files.	  If it is T, it will be presumed to be the entire list of user-loaded files.)    (if (EQ FILE T)	then (SETQ FILE FILELST))    (for F inside FILE do (LET [(CHANGES (CDR (GETPROP F (QUOTE FILE]				     (if CHANGES					 then (PRINTOUT NIL T F ": " CHANGES T])(NO.FILE  [LAMBDA (FILE)                                             (* hts: "13-Jan-86 20:07")          (* * Trick file package into thinking that FILE does not need to be dumped. FILE can be either a single file or a 	  list of files. If it is T, it will be presumed to be the entire list of user-loaded files.)    (if (EQ FILE T)	then (SETQ FILE FILELST))    (for F inside FILE do (LET [(FPROP (GETPROP F (QUOTE FILE]				     (if (CDR FPROP)					 then (RPLACD FPROP NIL]))(DECLARE: EVAL@COMPILE (PUTPROPS pushnewequal MACRO ((list thing)	   ([LAMBDA ($$1)		    (if (MEMBER $$1 list)			then list else (push list $$1]	    thing)))(PUTPROPS PUSHNEWEQUAL MACRO (= . pushnewequal)))(DECLARE: DONTEVAL@LOAD (GREETFN (QUOTE YourLoginName)	 (QUOTE YourRegistry)	 (QUOTE YourFirstName)	 (QUOTE YourInitials:)	 (QUOTE YourFileServer)	 (QUOTE ((" 6-JAN" . "Happy Epiphany")		 ("12-JUN" . "Happy Birthday")))	 (QUOTE MailMode)))(PUTPROPS INIT COPYRIGHT (NONE))(DECLARE: DONTCOPY  (FILEMAP (NIL (739 16330 (GREETFN 749 . 3674) (GREETFN.SCREEN 3676 . 10570) (GREETFN.TEXT 10572 . 14125) (GREETFN.LISP 14127 . 15272) (GREETFN.LOADMENU 15274 . 16328)) (16331 17446 (WHY.FILE 16341 . 16889) (NO.FILE 16891 . 17444)))))STOP