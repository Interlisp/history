(DEFINE-FILE-INFO §PACKAGE "XCL-USER" §READTABLE "XCL" §BASE 10)(IL:FILECREATED " 7-Apr-87 19:56:45" IL:{ERIS}<LISPCORE>INTERNAL>LIBRARY>DO-TEST.\;15 16187        IL:|changes| IL:|to:|  (IL:VARIABLES *TEST-FILE-PATTERN*)      IL:|previous| IL:|date:| "25-Mar-87 16:19:44" IL:{ERIS}<LISPCORE>INTERNAL>LIBRARY>DO-TEST.\;14); Copyright (c) 1986, 1987 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:DO-TESTCOMS)(IL:RPAQQ IL:DO-TESTCOMS           ((IL:VARIABLES *ANY-ERRORS* *TEST-CLEANUP-FORMS* *TEST-COMPILE* *TEST-MODE*                   *TEST-BATCH-RESULTS* *TEST-FILE-PATTERN* *TEST-FILE-NAME*)           (IL:P (DEFPACKAGE "XCL-TEST" (:USE "LISP" "XCL")                        (:IMPORT DO-TEST-FILE DO-ALL-TESTS DO-TEST DO-TEST-GROUP CL-READFILE                                EXPECT-ERRORS TEST-DEFUN TEST-DEFMACRO TEST-SETQ *TEST-MODE*                                *TEST-COMPILE* *TEST-BATCH-RESULTS* *TEST-FILE-PATTERN*                                *TEST-FILE-NAME*)))           (IL:FUNCTIONS DO-TEST DO-TEST-GROUP TEST-DEFMACRO TEST-DEFUN TEST-SETQ                   WITHOUT-BATCH-MODE-ERRORS EXPECT-ERRORS DO-ALL-TESTS CURRENT-FILE-NAME CL-READFILE                   DO-TEST-FILE DO-TEST-LIST)           (IL:PROP (IL:MAKEFILE-ENVIRONMENT IL:FILETYPE)                  DO-TEST)))(DEFVAR *ANY-ERRORS* NIL)(DEFVAR *TEST-CLEANUP-FORMS* NIL)(DEFVAR *TEST-COMPILE* NIL)(DEFVAR *TEST-MODE* :BATCH)(DEFVAR *TEST-BATCH-RESULTS* "{eris}<lispcore>cml>test>test-results" )(DEFVAR *TEST-FILE-PATTERN* '("{ERIS}<LISPCORE>CML>TEST>*.TEST;" "{ERIS}<LISPCORE>CML>TEST>*.X;"                                     "{ERIS}<LISPCORE>PATCHES>TESTS>*.TEST;"                                     "{ERIS}<LISPCORE>TEST>*.TEST;") )(DEFVAR *TEST-FILE-NAME* "unknown" )(DEFPACKAGE "XCL-TEST" (:USE "LISP" "XCL")       (:IMPORT DO-TEST-FILE DO-ALL-TESTS DO-TEST DO-TEST-GROUP CL-READFILE EXPECT-ERRORS TEST-DEFUN               TEST-DEFMACRO TEST-SETQ *TEST-MODE* *TEST-COMPILE* *TEST-BATCH-RESULTS*               *TEST-FILE-PATTERN* *TEST-FILE-NAME*))(DEFMACRO DO-TEST (IL:NAME-AND-OPTIONS &BODY IL:BODY)   (LET ((IL:NAME NIL)         (IL:OPTIONS NIL))        (COND           ((CONSP IL:NAME-AND-OPTIONS)            (SETQ IL:NAME (CAR IL:NAME-AND-OPTIONS))            (SETQ IL:OPTIONS (CDR IL:NAME-AND-OPTIONS)))           (T (SETQ IL:NAME IL:NAME-AND-OPTIONS)))        (IF (OR (EQ *TEST-MODE* :INTERACTIVE)                (EQ *TEST-MODE* :BATCH-VERBOSE))            (FORMAT *ERROR-OUTPUT* "Testing... ~S~%" IL:NAME))        `(NOT (WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,@IL:BODY))                    (FORMAT *ERROR-OUTPUT* "Test \"~A\" failed in file \"~A\"~%" ',IL:NAME (                                                                                    CURRENT-FILE-NAME                                                                                            ))                    (IL:SETQ *ANY-ERRORS* T)))))(DEFMACRO DO-TEST-GROUP (IL:NAME-AND-OPTIONS &BODY IL:BODY)   (LET ((IL:NAME NIL)         (IL:OPTIONS NIL))        (COND           ((CONSP IL:NAME-AND-OPTIONS)            (SETQ IL:NAME (CAR IL:NAME-AND-OPTIONS))            (SETQ IL:OPTIONS (CDR IL:NAME-AND-OPTIONS)))           (T (SETQ IL:NAME IL:NAME-AND-OPTIONS)))                    (IL:* IL:|;;| "Hack: find :BEFORE and :AFTER clauses in the body and move them out")        (LOOP (IF (AND (SYMBOLP (CAR IL:BODY))                       (OR (EQ (CAR IL:BODY)                               :BEFORE)                           (EQ (CAR IL:BODY)                               :AFTER)))                  (PROGN (IL:SETQ IL:OPTIONS (IL:APPEND IL:OPTIONS (LIST (CAR IL:BODY)                                                                         (CADR IL:BODY))))                         (IL:SETQ IL:BODY (CDDR IL:BODY)))                  (RETURN NIL)))        `(LET ((*TEST-CLEANUP-FORMS* NIL))              (BLOCK ,IL:NAME ,(IF (OR (EQ *TEST-MODE* :INTERACTIVE)                                       (EQ *TEST-MODE* :BATCH-VERBOSE))                                   (FORMAT *ERROR-OUTPUT* "Testing... ~S~%" IL:NAME))                     ,(LET ((IL:BEFORE (IGNORE-ERRORS (GETF IL:OPTIONS :BEFORE))))                           (IF IL:BEFORE `(WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,IL:BEFORE T))                                                (FORMAT *ERROR-OUTPUT*                                                    ":BEFORE forms for test \"~A\" in file ~S failed."                                                       ',IL:NAME                                                       (CURRENT-FILE-NAME))                                                (IL:SETQ *ANY-ERRORS* T)                                                (RETURN-FROM ,IL:NAME))))                     ,@(IL:|for| IL:B IL:|in| IL:BODY                          IL:|join| (IL:|if| (AND (CONSP IL:B)                                                  (EQ (CAR IL:B)                                                      'DO-TEST))                                        IL:|then| (LIST IL:B)                                      IL:|else| (FORMAT *ERROR-OUTPUT*                                                        "Non DO-TEST form in ~S in ~S~%~S~%" IL:NAME                                                       (CURRENT-FILE-NAME)                                                       IL:B)))                     ,(LET ((IL:AFTER (IGNORE-ERRORS (GETF IL:OPTIONS :AFTER))))                           (IF IL:AFTER `(WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,IL:AFTER T))                                               (FORMAT *ERROR-OUTPUT*                                                     ":AFTER forms for test \"~A\" in file ~S failed."                                                      ',IL:NAME                                                      (CURRENT-FILE-NAME))                                               (SETQ *ANY-ERRORS* T)))))              (EVAL (CONS 'PROGN *TEST-CLEANUP-FORMS*))              NIL)))(DEFMACRO TEST-DEFMACRO (IL:NAME &REST IL:STUFF)   `(PROGN (IF (FBOUNDP ',IL:NAME)               (IF (MACRO-FUNCTION ',IL:NAME)                   (PUSH (LIST 'SETF (LIST 'SYMBOL-FUNCTION (LIST 'MACRO-FUNCTION                                                                  '',IL:NAME))                               (LIST 'QUOTE (SYMBOL-FUNCTION (MACRO-FUNCTION ',IL:NAME))))                         *TEST-CLEANUP-FORMS*)                   (ERROR "Please don't redefine ~A in a test form" ',IL:NAME))               (PUSH (LIST 'REMPROP '',IL:NAME ''IL:MACRO-FN)                     *TEST-CLEANUP-FORMS*))           (DEFMACRO (IL:\\\, IL:NAME) ,@IL:STUFF )))(DEFMACRO TEST-DEFUN (IL:NAME &REST IL:STUFF)   `(PROGN (IF (FBOUNDP ',IL:NAME)               (IF (OR (MACRO-FUNCTION ',IL:NAME)                       (SPECIAL-FORM-P ',IL:NAME))                   (ERROR "Please don't redefine ~A in a test form" ',IL:NAME)                   (PUSH (LIST 'SETF (LIST 'SYMBOL-FUNCTION '',IL:NAME)                               (LIST 'QUOTE (SYMBOL-FUNCTION ',IL:NAME)))                         *TEST-CLEANUP-FORMS*))               (PUSH (LIST 'FMAKUNBOUND '',IL:NAME)                     *TEST-CLEANUP-FORMS*))           (DEFUN (IL:\\\, IL:NAME) ,@IL:STUFF )))(DEFMACRO TEST-SETQ (&REST STUFF)   (LET (UNBINDLIST)        (DO ((X STUFF (CDDR X)))            ((NULL X))            (PUSH `(IF (BOUNDP ',(CAR X))                       (PUSH (LIST 'SETQ ',(CAR X) (LIST 'QUOTE (SYMBOL-VALUE                                                                 ',(CAR X))))                             *TEST-CLEANUP-FORMS*)                       (PUSH (LIST 'MAKUNBOUND '',(CAR X))                             *TEST-CLEANUP-FORMS*)) UNBINDLIST))        `(PROGN ,@UNBINDLIST (SETQ ,@STUFF))))(DEFMACRO WITHOUT-BATCH-MODE-ERRORS (&BODY IL:BODY) (COND                                                       ((EQ *TEST-MODE* :INTERACTIVE)                                                        `(PROGN ,@IL:BODY))                                                       (T `(IGNORE-ERRORS ,@IL:BODY))))(DEFMACRO EXPECT-ERRORS (IL:ERROR-TYPES &REST IL:FORMS) `(CONDITION-CASE (PROGN ,@IL:FORMS NIL)                                                                (,IL:ERROR-TYPES (CONDITION)                                                                       (VALUES T CONDITION))))(DEFUN DO-ALL-TESTS (&KEY (RESULTS *TEST-BATCH-RESULTS*)                          (PATTERNS (IF (CONSP *TEST-FILE-PATTERN*)                                        *TEST-FILE-PATTERN*                                        (LIST *TEST-FILE-PATTERN*)))                          (SYSOUT-TYPE NIL)                          (RESUME NIL))   (LET ((IL:NO-PROBLEMS T)         (*DEFAULT-PATHNAME-DEFAULTS* (PATHNAME "{ERIS}<LISPCORE>CML>TEST>"))         (*ERROR-OUTPUT* (IF (EQ RESULTS T)                             *ERROR-OUTPUT*                             (OPEN RESULTS :DIRECTION :OUTPUT :IF-EXISTS (IF RESUME :APPEND                                                                              :NEW-VERSION)))))        (UNWIND-PROTECT (PROGN (IF (NOT RESUME)                                   (PROGN (FORMAT *ERROR-OUTPUT*                                                  ";;; Test results for sysout of ~A~%" IL:MAKESYSDATE                                                 )                                          (IF SYSOUT-TYPE (FORMAT *ERROR-OUTPUT*                                                                  ";;; Sysout type is ~A~%"                                                                  SYSOUT-TYPE))                                          (IF *TEST-COMPILE* (FORMAT *ERROR-OUTPUT*                                                                     ";;; Tests are being compiled~%")                                              )                                          (FORMAT *ERROR-OUTPUT* ";;; Tests run on ~A~%" (IL:DATE))                                          (FORMAT *ERROR-OUTPUT* ";;; Running tests from ~A~2%"                                                  PATTERNS)                                          (SETQ *ALL-FILES-REMAINING* (IL:FOR DP IL:IN PATTERNS                                                                         IL:JOIN (IL:DIRECTORY DP))))                                   (FORMAT *ERROR-OUTPUT* ";;;Resuming after dying on file ~S~%"                                          (POP *ALL-FILES-REMAINING*)))                               (IL:|while| *ALL-FILES-REMAINING*                                  IL:|do| (IL:SETQ IL:NO-PROBLEMS (AND (DO-TEST-FILE (CAR                                                                                 *ALL-FILES-REMAINING*                                                                                          ))                                                                       IL:NO-PROBLEMS))                                        (IL:|pop| *ALL-FILES-REMAINING*))                               (FORMAT *ERROR-OUTPUT* "(END-OF-TESTS)"))               (UNLESS (EQ RESULTS T)                      (CLOSE *ERROR-OUTPUT*)))        IL:NO-PROBLEMS))(DEFUN CURRENT-FILE-NAME NIL *TEST-FILE-NAME*)(DEFUN CL-READFILE (IL:TEST-FILE &OPTIONAL (*READTABLE* IL:CMLRDTBL)                          (IL:ENDTOKEN "STOP"))              (IL:* IL:|Pavel| "23-Sep-86 12:40")   (IL:|if| (PROBE-FILE IL:TEST-FILE)       IL:|then| (LET (IL:FORMS-LIST IL:TEM (*PACKAGE* (FIND-PACKAGE 'XCL-TEST))                             (*FEATURES* (CONS :NO-STACK-OVERFLOW *FEATURES*)))                      (WITH-OPEN-STREAM (IL:TEST-FILE (IL:OPENTEXTSTREAM (IL:MKATOM IL:TEST-FILE)))                             (IL:|until| (OR (NULL (IGNORE-ERRORS (SETQ IL:TEM (READ IL:TEST-FILE))))                                             (AND (SYMBOLP IL:TEM)                                                  (STRING= IL:TEM IL:ENDTOKEN)))                                IL:|do| (PUSH IL:TEM IL:FORMS-LIST))                             (NREVERSE IL:FORMS-LIST)))     IL:|else| (PROGN (FORMAT *ERROR-OUTPUT* "~%Couldn't find file ~A~%" IL:TEST-FILE)                      NIL)))(DEFUN DO-TEST-FILE (IL:FILENAME)                            (IL:* IL:|Pavel| "23-Sep-86 12:19")   (LET* ((*PACKAGE* (FIND-PACKAGE 'XCL-TEST))          (IL:TEST-FORMS (CL-READFILE IL:FILENAME IL:CMLRDTBL))          (*TEST-FILE-NAME* (LET ((IL:PF (PATHNAME IL:FILENAME)))                                 (FORMAT NIL "~A.~A;~A" (PATHNAME-NAME IL:PF)                                        (PATHNAME-TYPE IL:PF)                                        (PATHNAME-VERSION IL:PF))))          (*ANY-ERRORS* NIL))         (DO-TEST-LIST IL:TEST-FORMS)         (IL:|if| *ANY-ERRORS*             IL:|then| (TERPRI *ERROR-OUTPUT*))         (NOT *ANY-ERRORS*)))(DEFUN DO-TEST-LIST (TEST-FORMS &OPTIONAL OPTIONS NAME)   (LET    ((IL:DFNFLG NIL))    (DECLARE (SPECIAL IL:DFNFLG))    (IL:|if| (NULL TEST-FORMS)        IL:|then| (FORMAT *ERROR-OUTPUT* "~%(Trouble reading ~A)~%" (CURRENT-FILE-NAME))              (SETQ *ANY-ERRORS* T)      IL:|else|      (IL:|for| FORM IL:|in| TEST-FORMS         IL:|do| (IL:BLOCK 0)               (IF (AND (CONSP FORM)                        (OR (EQ (CAR FORM)                                'DO-TEST)                            (EQ (CAR FORM)                                'DO-TEST-GROUP)))                   (IF *TEST-COMPILE*                       (BLOCK COMPILER-PUNT                              (LET ((COMPILED-FORM (IF (EQ *TEST-MODE* :INTERACTIVE)                                                       (COMPILE NIL `(LAMBDA NIL ,FORM))                                                       (IGNORE-ERRORS                                                        (COMPILE NIL `(LAMBDA NIL ,FORM))))))                                   (IF (NULL (COMPILED-FUNCTION-P COMPILED-FORM))                                       (LET ((*PRINT-LEVEL* 3)                                             (*PRINT-LENGTH* 3))                                            (FORMAT *ERROR-OUTPUT*                                                "Compilation of this form in file ~S failed:~%   ~S~%"                                                   (CURRENT-FILE-NAME)                                                   FORM)                                            (RETURN-FROM COMPILER-PUNT))                                       (IF (NULL (IF (EQ *TEST-MODE* :INTERACTIVE)                                                     (PROGN (FUNCALL COMPILED-FORM)                                                            T)                                                     (IGNORE-ERRORS (PROGN (FUNCALL COMPILED-FORM)                                                                           T))))                                           (LET ((*PRINT-LEVEL* 3)                                                 (*PRINT-LENGTH* 3))                                                (FORMAT *ERROR-OUTPUT*                                               "Compiled code failed for this form in file ~S :~%~S~%"                                                       (CURRENT-FILE-NAME)                                                       FORM))))))                       (EVAL FORM))                   (FORMAT *ERROR-OUTPUT* "Non DO-TEST form at top level in ~S~%~S~%" (                                                                                    CURRENT-FILE-NAME                                                                                       )                          FORM))))))(IL:PUTPROPS DO-TEST IL:MAKEFILE-ENVIRONMENT (:READTABLE "xcl" :PACKAGE "xcl"))(IL:PUTPROPS DO-TEST IL:FILETYPE COMPILE-FILE)(IL:PUTPROPS IL:DO-TEST IL:COPYRIGHT ("Xerox Corporation" 1986 1987))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP