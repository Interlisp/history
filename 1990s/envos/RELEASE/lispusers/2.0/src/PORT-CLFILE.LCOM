(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "XCL" BASE 10)
(IL:FILECREATED " 1-Oct-91 11:24:35" ("compiled on " 
IL:|{PELE:MV:ENVOS}<LISPUSERS>MEDLEY>PORT-CLFILE.;1|) "27-Aug-91 19:40:51" IL:|bcompl'd| IL:|in| 
"Medley 28-Aug-91 ..." IL:|dated| "28-Aug-91 09:16:07")
(IL:FILECREATED "23-Dec-87 16:56:46" 
"{FireFS:CS:Univ Rochester}<Koomen>LispUsers>Lyric>PORT-CLFILE.;14" 13433 IL:|changes| IL:|to:| (
IL:FUNCTIONS EXPORT-CLFILE) IL:|previous| IL:|date:| " 3-Nov-87 16:27:35" 
"{FireFS:CS:Univ Rochester}<Koomen>LispUsers>Lyric>PORT-CLFILE.;12")
(IL:PRETTYCOMPRINT IL:PORT-CLFILECOMS)
(IL:RPAQQ IL:PORT-CLFILECOMS ((IL:FUNCTIONS IMPORT-CLFILE EXPORT-CLFILE) (IL:P (EXPORT (QUOTE (
IMPORT-CLFILE EXPORT-CLFILE)) (FIND-PACKAGE "XCL")) (IMPORT (QUOTE (IMPORT-CLFILE EXPORT-CLFILE)) (
FIND-PACKAGE "INTERLISP"))) (IL:FUNCTIONS CLFILE-EXPORT-FILECOM CLFILE-PARSE-FORM CLFILE-PARSE-MODE 
CLFILE-READ-SEMI CLFILE-SET-MODE) (IL:PROP (IL:FILETYPE IL:MAKEFILE-ENVIRONMENT) IL:PORT-CLFILE)))
(DEFUN IMPORT-CLFILE (FILEPATH) "Load a standard CommonLisp file FILEPATH, creating COMS for FILEPATH"
 (WITH-OPEN-FILE (*STANDARD-INPUT* FILEPATH :DIRECTION :INPUT) (DECLARE (SPECIAL *STANDARD-INPUT*)) (
LET ((*PACKAGE* (FIND-PACKAGE "USER")) (*READTABLE* (COPY-READTABLE NIL)) (*READ-BASE* 10) (COMSLST 
NIL) (EOF-VALUE (LIST :EOF)) (FILE-ID (INTERN (STRING-UPCASE (PATHNAME-NAME *STANDARD-INPUT*)) (
FIND-PACKAGE "INTERLISP")))) (DECLARE (SPECIAL *PACKAGE* *READTABLE* *READ-BASE*)) (IL:* IL:|;;| 
"Copy readtable, change ; macro to preserve comments") (SET-MACRO-CHARACTER #\; (FUNCTION 
CLFILE-READ-SEMI) NIL *READTABLE*) (DO ((CLFORM (READ NIL NIL EOF-VALUE) (READ NIL NIL EOF-VALUE)) (
FIRSTCLFORMP T) (NEXTCOMSENTRY NIL) (LASTCOMSENTRY NIL) (NEXTCOMSWEIRDP NIL)) ((EQ CLFORM EOF-VALUE) (
IF LASTCOMSENTRY (PUSH LASTCOMSENTRY COMSLST)) (SETQ COMSLST (NREVERSE COMSLST))) (WHEN FIRSTCLFORMP (
SETQ FIRSTCLFORMP NIL) (COND ((AND (CONSP CLFORM) (EQ (CAR CLFORM) (QUOTE IL:*)) (DO ((CLTAIL (CDR 
CLFORM) (CDR CLTAIL))) ((NOT (CONSP CLTAIL)) NIL) (IF (STRINGP (CAR CLTAIL)) (RETURN (
CLFILE-PARSE-MODE (CAR CLTAIL) FILE-ID))))) (SETQ CLFORM NIL)))) (UNLESS (NULL CLFORM) (EVAL CLFORM) (
SETQ NEXTCOMSENTRY (CLFILE-PARSE-FORM CLFORM)) (SETQ NEXTCOMSWEIRDP (OR (EQ (CAR NEXTCOMSENTRY) (QUOTE
 IL:*)) (CONSP (CDDR NEXTCOMSENTRY)))) (WHEN (AND LASTCOMSENTRY (OR NEXTCOMSWEIRDP (NOT (EQ (CAR 
NEXTCOMSENTRY) (CAR LASTCOMSENTRY))))) (PUSH LASTCOMSENTRY COMSLST) (SETQ LASTCOMSENTRY NIL)) (COND (
NEXTCOMSWEIRDP (PUSH NEXTCOMSENTRY COMSLST)) (LASTCOMSENTRY (NCONC LASTCOMSENTRY (CDR NEXTCOMSENTRY)))
 (T (SETQ LASTCOMSENTRY NEXTCOMSENTRY))))) (SETF (GET FILE-ID (QUOTE IL:FILETYPE)) :COMPILE-FILE) (SET
 (IL:FILECOMS FILE-ID) (NCONC COMSLST (IL:BQUOTE ((IL:PROP (IL:FILETYPE IL:MAKEFILE-ENVIRONMENT) (
IL:\\\, FILE-ID)))))) (PUSHNEW FILE-ID IL:FILELST) (IL:MARKASCHANGED FILE-ID (QUOTE IL:FILES) (QUOTE 
IL:DEFINED)) FILE-ID)))
(DEFUN EXPORT-CLFILE (FILEPATH &OPTIONAL (LINELENGTH 72)) 
"Write a standard CommonLisp file FILEPATH, using COMS for FILEPATH" (DECLARE (GLOBAL IL:FILELINELENGTH
)) (IL:RESETVARS ((IL:FILELINELENGTH LINELENGTH)) (RETURN (WITH-OPEN-FILE (*STANDARD-OUTPUT* (
MAKE-PATHNAME :TYPE "LISP" :VERSION :NEWEST :DEFAULTS FILEPATH) :DIRECTION :OUTPUT) (DECLARE (SPECIAL 
*STANDARD-OUTPUT*)) (LET ((*PACKAGE* (FIND-PACKAGE "USER")) (*READTABLE* (IL:FIND-READTABLE "LISP")) (
*PRINT-BASE* 10) (*PRINT-ARRAY* T) (*PRINT-LEVEL* NIL) (*PRINT-LENGTH* NIL) (IL:FONTCHANGEFLG NIL) (
IL:\#RPARS NIL) (IL:**COMMENT**FLG NIL) (IL:*PRINT-SEMICOLON-COMMENTS* T) (IL:*PRINT-STRUCTURE* T) (
FILE-ID (INTERN (STRING-UPCASE (PATHNAME-NAME *STANDARD-OUTPUT*)) (FIND-PACKAGE "INTERLISP")))) (
DECLARE (SPECIAL *PACKAGE* *READTABLE* *PRINT-BASE* *PRINT-ARRAY* *PRINT-LEVEL* *PRINT-LENGTH* 
IL:FONTCHANGEFLG IL:\#RPARS IL:**COMMENT**FLG IL:*PRINT-SEMICOLON-COMMENTS* IL:*PRINT-STRUCTURE*)) (
CLFILE-SET-MODE (GET FILE-ID (QUOTE IL:MAKEFILE-ENVIRONMENT))) (FORMAT T 
";;; -*- Package: ~A; Syntax: ~A; Mode: Lisp; Base: ~D -*-" (STRING-CAPITALIZE (PACKAGE-NAME *PACKAGE*
)) (LET ((RDTBLNAME (IL:READTABLEPROP *READTABLE* (QUOTE IL:NAME)))) (COND ((OR (NOT (STRINGP 
RDTBLNAME)) (STRING-EQUAL RDTBLNAME "XCL") (STRING-EQUAL RDTBLNAME "LISP")) "Common-Lisp") (T (
STRING-CAPITALIZE RDTBLNAME)))) *PRINT-BASE*) (FORMAT T "~2%;;; File converted on ~A from source ~A" (
IL:DATE (IL:DATEFORMAT IL:NO.LEADING.SPACES)) (SYMBOL-NAME FILE-ID)) (LET ((DATES (GET FILE-ID (QUOTE 
IL:FILEDATES)))) (WHEN DATES (FORMAT T "~&;;; Original source ~A created ~A" (CDAR DATES) (CAAR DATES)
))) (TERPRI) (TERPRI) (IL:PRINTCOPYRIGHT FILE-ID) (MAPC (FUNCTION CLFILE-EXPORT-FILECOM) (IL:LISTP (
IL:GETTOPVAL (IL:FILECOMS FILE-ID)))) (NAMESTRING *STANDARD-OUTPUT*))))))
(EXPORT (QUOTE (IMPORT-CLFILE EXPORT-CLFILE)) (FIND-PACKAGE "XCL"))
(IMPORT (QUOTE (IMPORT-CLFILE EXPORT-CLFILE)) (FIND-PACKAGE "INTERLISP"))
(DEFUN CLFILE-EXPORT-FILECOM (COMMAND) (FLET ((SAVE-PROP (SYMBOL PROP VAL) (CASE PROP ((IL:FILETYPE 
IL:MAKEFILE-ENVIRONMENT) (IL:* IL:\; "IGNORE") NIL) (T (PPRINT (IL:BQUOTE (SETF (GET (QUOTE (IL:\\\, 
SYMBOL)) (QUOTE (IL:\\\, PROP))) (QUOTE (IL:\\\, VAL))))))))) (CASE (IL:GETFILEPKGTYPE (CAR COMMAND) (
QUOTE COMMAND)) (IL:FNS (MAPC (FUNCTION (LAMBDA (FN) (PPRINT (LET ((DEF (IL:GETDEF FN (QUOTE IL:FNS)))
) (ECASE (CAR DEF) ((LAMBDA) (IL:BQUOTE (DEFUN (IL:\\\, FN) (IL:\\\,@ (CDR DEF))))) ((IL:LAMBDA) (
IL:BQUOTE (DEFUN (IL:\\\, FN) (&OPTIONAL (IL:\\\,@ (SECOND DEF))) (IL:\\\,@ (CDDR DEF)))))))))) (
IL:PRETTYCOM1 COMMAND T T))) (IL:VARS (MAPC (FUNCTION (LAMBDA (VAR) (IF (LISTP VAR) (IL:BQUOTE (
DEFPARAMETER (FIRST VAR) (SECOND VAR))) (IL:BQUOTE (DEFPARAMETER (IL:\\\, VAR) (QUOTE (IL:\\\, (
IL:GETTOPVAL VAR)))))))) (IL:PRETTYCOM1 COMMAND T T))) (IL:DECLARE\: (LET ((CONTEXT (QUOTE (LOAD EVAL)
)) (WHEN-CLAUSE T)) (DO ((TAIL (IL:PRETTYCOM1 COMMAND T T) (CDR TAIL))) ((NULL TAIL)) (CASE (CAR TAIL)
 ((IL:EVAL@LOADWHEN) (PUSHNEW (QUOTE EVAL) CONTEXT) (SETQ WHEN-CLAUSE (IF (EQ WHEN-CLAUSE T) (CADR 
TAIL) (IL:BQUOTE (AND (IL:\\\, (CADR TAIL)) (IL:\\\, WHEN-CLAUSE))))) (SETQ TAIL (CDR TAIL)) (IL:* IL:\;
 " consumes two tokens, one by the DO")) ((IL:EVAL@COMPILEWHEN) (PUSHNEW (QUOTE COMPILE) CONTEXT) (
SETQ WHEN-CLAUSE (IF (EQ WHEN-CLAUSE T) (CADR TAIL) (IL:BQUOTE (AND (IL:\\\, (CADR TAIL)) (IL:\\\, 
WHEN-CLAUSE))))) (SETQ TAIL (CDR TAIL))) ((IL:COPYWHEN) (PUSHNEW (QUOTE LOAD) CONTEXT) (SETQ 
WHEN-CLAUSE (IF (EQ WHEN-CLAUSE T) (CADR TAIL) (IL:BQUOTE (AND (IL:\\\, (CADR TAIL)) (IL:\\\, 
WHEN-CLAUSE))))) (SETQ TAIL (CDR TAIL))) ((IL:FIRST IL:NOTFIRST) (IL:* IL:\; "IGNORE")) ((
IL:COMPILERVARS) (IL:* IL:|;;| "throw these out") (RETURN-FROM CLFILE-EXPORT-FILECOM NIL)) ((IL:COPY 
IL:DOCOPY) (PUSHNEW (QUOTE LOAD) CONTEXT)) ((IL:DOEVAL@COMPILE IL:EVAL@COMPILE) (PUSHNEW (QUOTE 
COMPILE) CONTEXT)) ((IL:DOEVAL@LOAD IL:EVAL@LOAD) (PUSHNEW (QUOTE EVAL) CONTEXT)) ((IL:DONTCOPY) (SETQ
 CONTEXT (REMOVE (QUOTE LOAD) CONTEXT))) ((IL:DONTEVAL@COMPILE) (SETQ CONTEXT (REMOVE (QUOTE COMPILE) 
CONTEXT))) ((IL:DONTEVAL@LOAD) (SETQ CONTEXT (REMOVE (QUOTE EVAL) CONTEXT))) (T (FORMAT T 
"~&(eval-when &S " CONTEXT) (CLFILE-EXPORT-FILECOM (CAR TAIL)) (FORMAT T ")")))))) ((IL:SPECVARS) (
PPRINT (IL:BQUOTE (PROCLAIM (QUOTE (SPECIAL (IL:\\\,@ (IL:PRETTYCOM1 COMMAND T T)))))))) ((IL:GLOBALVARS
) (PPRINT (IL:BQUOTE (PROCLAIM (QUOTE (GLOBAL (IL:\\\,@ (IL:PRETTYCOM1 COMMAND T T)))))))) ((
IL:LOCALVARS) (PPRINT (IL:BQUOTE (PROCLAIM (QUOTE (LEXICAL (IL:\\\,@ (IL:PRETTYCOM1 COMMAND T T)))))))
) ((IL:PROP IL:IFPROP) (PROG ((OPTIONAL (EQ (CAR COMMAND) (QUOTE IL:IFPROP))) (PROPS (CADR COMMAND)) (
NOT-FOUND "NOT ON ANY PROPERTY LIST") (SYMBOLS (IL:PRETTYCOM1 (CDR COMMAND) T T))) (IL:* IL:\; 
"IFPROP only dumps those property values that are non-NIL.") (MAPC (FUNCTION (LAMBDA (SYMBOL) (DECLARE
 (SPECIAL IL:SYSPROPS)) (FLET ((DO-PROP (PROP) (UNLESS (AND OPTIONAL (EQ NOT-FOUND (GET SYMBOL PROP 
NOT-FOUND))) (SAVE-PROP SYMBOL PROP (GET SYMBOL PROP))))) (COND ((CONSP PROPS) (MAPC (FUNCTION DO-PROP
) PROPS)) ((EQ PROPS (QUOTE IL:ALL)) (DO ((TAIL (SYMBOL-PLIST SYMBOL) (CDDR TAIL))) ((NULL TAIL)) (
UNLESS (MEMBER (CAR TAIL) IL:SYSPROPS) (DO-PROP (CAR TAIL))))) (T (DO-PROP PROPS)))))) SYMBOLS))) (IL:P
 (MAPC (FUNCTION (LAMBDA (X) (CASE (CAR X) ((IL:PUTPROPS) (DO ((TAIL (CDR X) (CDDDR TAIL))) ((NULL 
TAIL)) (SAVE-PROP (FIRST TAIL) (SECOND TAIL) (THIRD TAIL)))) (T (PPRINT X))))) (IL:PRETTYCOM1 COMMAND 
T))) (IL:INITVARS (MAPC (FUNCTION (LAMBDA (X) (DECLARE (SPECIAL IL:COMMENTFLG)) (PPRINT (COND ((LISTP 
X) (IF (EQ (CAR X) IL:COMMENTFLG) X (IL:BQUOTE (DEFVAR (IL:\\\,@ X))))) (T (HELP)))))) (IL:PRETTYCOM1 
COMMAND T T))) (IL:COMS (MAPC (FUNCTION CLFILE-EXPORT-FILECOM) (IL:PRETTYCOM1 COMMAND T))) ((IL:*) (
COND ((EQ (CADR COMMAND) (QUOTE IL:*)) (IL:* IL:\; 
"Form-feed if super-comment indicated.  Use * no matter what current COMMENTFLG is.") (WRITE-CHAR 
#\Page))) (PPRINT COMMAND)) (T (LET ((DEF (CDR (ASSOC (CAR COMMAND) IL:PRETTYDEFMACROS)))) (IF DEF (
MAPC (FUNCTION CLFILE-EXPORT-FILECOM) (IL:SUBPAIR (CAR DEF) (IL:PRETTYCOM1 COMMAND T T) (CDR DEF))) (
HELP "CAN'T HANDLE" (CAR COMMAND))))))))
(DEFUN CLFILE-PARSE-FORM (CLFORM) "Given CommonLisp FORM, creates (filepkgtype object)" (COND ((OR (
NOT (CONSP CLFORM)) (NOT (SYMBOLP (CAR CLFORM)))) (IL:BQUOTE (IL:P (IL:\\\, CLFORM)))) ((EQ (CAR 
CLFORM) (QUOTE IL:*)) CLFORM) ((LET ((COMSTYPE (GET (CAR CLFORM) (QUOTE IL:DEFINER-FOR))) (COMSNAME (
CADR CLFORM))) (IF COMSTYPE (LIST COMSTYPE (IF (CONSP COMSNAME) (IL:* IL:\; "e.g. STRUCTURES") (CAR 
COMSNAME) COMSNAME))))) ((CASE (CAR CLFORM) (PROCLAIM (LET ((DECLSPEC (CAR (IL:CONSTANTEXPRESSIONP (
CADR CLFORM))))) (CASE (CAR DECLSPEC) (GLOBAL (CONS (QUOTE IL:GLOBALVARS) (CDR DECLSPEC))) (SPECIAL (
CONS (QUOTE IL:SPECVARS) (CDR DECLSPEC))) (LEXICAL (CONS (QUOTE IL:LOCALVARS) (CDR DECLSPEC)))))) (
EVAL-WHEN (LET (EVALFLG LOADFLG COMPILEFLG) (DO ((CONTEXT (CADR CLFORM) (CDR CONTEXT))) ((NULL CONTEXT
)) (CASE (CAR CONTEXT) (EVAL (SETQ EVALFLG T)) (LOAD (SETQ LOADFLG T)) (COMPILE (SETQ COMPILEFLG T))))
 (IL:BQUOTE (IL:DECLARE\: (IL:\\\, (IF EVALFLG (QUOTE IL:EVAL@LOAD) (QUOTE IL:DONTEVAL@LOAD))) (IL:\\\,
 (IF LOADFLG (QUOTE IL:COPY) (QUOTE IL:DONTCOPY))) (IL:\\\, (IF COMPILEFLG (QUOTE IL:EVAL@COMPILE) (
QUOTE IL:DONTEVAL@COMPILE))) (COMS (IL:\\\,@ (MAPCAR (FUNCTION CLFILE-PARSE-FORM) (CADDR CLFORM)))))))
))) (T (IL:BQUOTE (IL:P (IL:\\\, CLFORM))))))
(DEFUN CLFILE-PARSE-MODE (MODE-STRING &OPTIONAL FILE-ID) 
"Setf *PACKAGE*, *READTABLE* and *READ-BASE* according to file mode comment" (DECLARE (SPECIAL 
*PACKAGE* *READTABLE* *READ-BASE*)) (WHEN (SEARCH "-*-" MODE-STRING :END2 3) (PROG ((MODESTR (
STRING-UPCASE MODE-STRING)) MODEPOS MODENAME OBJECT) (WHEN (SETQ MODEPOS (SEARCH "PACKAGE: " MODESTR))
 (SETQ MODENAME (STRING (READ-FROM-STRING MODESTR NIL NIL :START (+ MODEPOS (LENGTH "PACKAGE: "))))) (
SETQ OBJECT (FIND-PACKAGE MODENAME)) (COND ((PACKAGEP OBJECT) (SETQ *PACKAGE* OBJECT)) (T (ERROR 
"~&Non-existent package: ~A~%" MODENAME)))) (WHEN (SETQ MODEPOS (SEARCH "SYNTAX: " MODESTR)) (SETQ 
MODENAME (STRING (READ-FROM-STRING MODESTR NIL NIL :START (+ MODEPOS (LENGTH "SYNTAX: "))))) (IF (
STRING-EQUAL MODENAME "COMMON-LISP") (SETQ MODENAME "LISP")) (SETQ OBJECT (IL:FIND-READTABLE MODENAME)
) (COND ((READTABLEP OBJECT) (IL:* IL:|;;| "Need to continue intercepting comments!") (SETQ 
*READTABLE* (COPY-READTABLE OBJECT)) (IL:READTABLEPROP *READTABLE* (QUOTE IL:NAME) (IL:READTABLEPROP 
OBJECT (QUOTE IL:NAME))) (SET-MACRO-CHARACTER #\; (FUNCTION CLFILE-READ-SEMI) NIL *READTABLE*)) (T (
ERROR "~&Non-existent readtable: ~A~%" MODENAME)))) (WHEN (SETQ MODEPOS (SEARCH "BASE: " MODESTR)) (
SETQ OBJECT (READ-FROM-STRING MODESTR NIL NIL :START (+ MODEPOS (LENGTH "BASE: ")))) (COND ((AND (
NUMBERP OBJECT) (> OBJECT 0)) (SETQ *READ-BASE* (TRUNCATE OBJECT))) (T (ERROR "~&Bad read base: ~A~%" 
OBJECT)))) (WHEN FILE-ID (SETF (GET FILE-ID (QUOTE IL:MAKEFILE-ENVIRONMENT)) (LIST :PACKAGE (
PACKAGE-NAME *PACKAGE*) :READTABLE (LET ((RDTBLNAME (IL:READTABLEPROP *READTABLE* (QUOTE IL:NAME)))) (
COND ((OR (NOT (STRINGP RDTBLNAME)) (STRING-EQUAL RDTBLNAME "LISP")) "XCL") (T RDTBLNAME))) :BASE 
*READ-BASE*))) (RETURN T))))
(DEFUN CLFILE-READ-SEMI (STREAM RDTBL) "A ; was seen.  Collect more ;'s, then wrap comment in IL:*" (
DECLARE (IGNORE RDTBL)) (DO ((CH (READ-CHAR STREAM) (READ-CHAR STREAM)) (LVL 1) (COMMENT "")) ((OR (
NULL CH) (NOT (CHAR= CH #\;))) (UNREAD-CHAR CH STREAM) (COND ((SETQ COMMENT (READ-LINE STREAM)) (LIST 
(QUOTE IL:*) (COND ((> LVL 2) (QUOTE IL:|;;;|)) ((= LVL 2) (QUOTE IL:|;;|)) (T (QUOTE IL:\;))) (
STRING-TRIM (QUOTE (#\Space #\Tab)) COMMENT))))) (INCF LVL 1)))
(DEFUN CLFILE-SET-MODE (MAKEFILE-ENVIRONMENT) (IL:* IL:|;;;| 
"Using the MAKEFILE-ENVIRONMENT, sets the appropriate free vars (bound above in EXPORT-CLFILE) to the specified package, readtable and print base."
) (DECLARE (SPECIAL *PACKAGE* *READTABLE* *PRINT-BASE*)) (LET ((FILE-PACKAGE (GETF 
MAKEFILE-ENVIRONMENT :PACKAGE)) (READ-TABLE (GETF MAKEFILE-ENVIRONMENT :READTABLE)) (PRINT-BASE (GETF 
MAKEFILE-ENVIRONMENT :BASE))) (LET ((PKG (IF (STRINGP FILE-PACKAGE) (FIND-PACKAGE FILE-PACKAGE) (EVAL 
FILE-PACKAGE)))) (WHEN (PACKAGEP PKG) (SETQ *PACKAGE* PKG))) (LET ((RDTBL (IF (STRINGP READ-TABLE) (
IL:FIND-READTABLE READ-TABLE) (EVAL READ-TABLE)))) (WHEN (READTABLEP RDTBL) (SETQ *READTABLE* RDTBL)))
 (LET ((BASE (IF (NUMBERP PRINT-BASE) PRINT-BASE (EVAL PRINT-BASE)))) (WHEN (NUMBERP BASE) (SETQ 
*PRINT-BASE* BASE)))))
(IL:PUTPROPS IL:PORT-CLFILE IL:FILETYPE :COMPILE-FILE)
(IL:PUTPROPS IL:PORT-CLFILE IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE "XCL" :BASE 10))
(IL:PUTPROPS IL:PORT-CLFILE IL:COPYRIGHT ("Johannes Koomen, Larry Masinter" 1987))
NIL
