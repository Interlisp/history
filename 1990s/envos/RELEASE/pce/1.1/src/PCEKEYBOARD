(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "16-Dec-87 19:04:00" {ERIS}<LISPCORE>INTERNAL>LIBRARY>PCEKEYBOARD.;3 30961        changes to%:  (FNS \PCE.ENQUEUESCANCODE)      previous date%: "13-Feb-87 15:14:05" {ERIS}<LISPCORE>INTERNAL>LIBRARY>PCEKEYBOARD.;2)(* "Copyright (c) 1986, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT PCEKEYBOARDCOMS)(RPAQQ PCEKEYBOARDCOMS        ([DECLARE%: FIRST (P (* turn off PCE processes if already loaded and running)                            (NLSETQ (\PCE.TERMINATE]        [DECLARE%: DONTCOPY (P (LOADFNS NIL 'LLKEY NIL '(KEYBOARDEVENT]        (COMS (* user functions and variables)              (FNS PCE.ADD.KBD.SCANCODES PCE.ADD.KBD.STRING PCE.KBD.PROC)              (INITVARS (PCE.SHOW.LOCKS.FN)                     (PCE.KEYACTION.LIST))              (GLOBALVARS PCE.SHOW.LOCKS.FN PCE.KEYACTION.LIST))        (FNS \PCE.ADD.KEYACTIONS \PCE.CREATE.KEYACTIONTABLE \PCE.ENQUEUESCANCODE \PCE.FILL.ARRAY              \PCE.GETKEYS \PCE.KEYBOARD.BUFFER.PUSH \PCE.KEYBOARD.CONFIGURE \PCE.KEYBOARD.TERMINATE              \PCE.KEYBOARD.TTYENTRYFN \PCE.KEYBOARDINIT \PCE.NEWLOCKSTATE \PCE.RESET.LOCKSTATE              \PCE.SHOW.LOCKS)        (VARS \PCE.CAPSLOCK \PCE.KEY.STRING \PCE.KEY.TO.SCAN.LIST \PCE.KEYBOARD.STATE \PCE.NUMLOCK               \PCE.SCAN.CODE.ARRAY \PCE.SCROLLLOCK \PCE.SHIFT.KEY.STRING)        (INITVARS (\PCE.KEYBOARD.BUFFER)               (\PCE.KEYBOARD.BUFFER.ENDPTR)               (\PCE.KEYBOARD.EVENT)               (\PCE.KEYBOARD.PROCESS)               (\PCE.KEYBOARD.WAIT 500)               (\PCE.KEYBOARD.WAIT2 100))        (GLOBALVARS \PCE.CAPSLOCK \PCE.KEY.STRING \PCE.KEY.TO.SCAN.LIST \PCE.KEYBOARD.BUFFER                \PCE.KEYBOARD.BUFFER.ENDPTR \PCE.KEYBOARD.EVENT \PCE.KEYBOARD.PROCESS                \PCE.KEYBOARD.STATE \PCE.KEYBOARD.WAIT \PCE.KEYBOARD.WAIT2 \PCE.NUMLOCK                \PCE.SCAN.CODE.ARRAY \PCE.SCROLLLOCK \PCE.SHIFT.KEY.STRING)))(DECLARE%: FIRST (* turn off PCE processes if already loaded and running)(NLSETQ (\PCE.TERMINATE)))(DECLARE%: DONTCOPY (LOADFNS NIL 'LLKEY NIL '(KEYBOARDEVENT)))(* user functions and variables)(DEFINEQ(PCE.ADD.KBD.SCANCODES  [LAMBDA (LST)                                              (* mjs " 1-May-86 10:17")                    (* * Adds the list of PC keyboard scancodes to the end of the keyboard buffer.          Any non-SMALLP elements are ignored.)    (if (LISTP LST)        then (\PCE.KEYBOARD.BUFFER.PUSH (for X in LST when (SMALLP X)                                           collect                     (* Scan codes are distinquished from NS chars in the kbd buffer by putting them           in NS charset 3, which is an illegal charset.)                                                 (IPLUS 768 (LOGAND X 255])(PCE.ADD.KBD.STRING  [LAMBDA (X)                                                (* mjs " 1-May-86 10:17")                    (* * Adds the characters in X to the PC keyboard buffer)    (\PCE.KEYBOARD.BUFFER.PUSH (CHCON X])(PCE.KBD.PROC  [LAMBDA NIL                                                (* mjs " 1-May-86 10:19")                    (* * Returns the pce keyboard process, if it an active process, NIL otherwise.          PROCESSP is called because an inactive process is still non-NIL)    (if (PROCESSP \PCE.KEYBOARD.PROCESS)        then                     (* note that PROCESSP returns T, rather than its argument, if it is an active           process.)             \PCE.KEYBOARD.PROCESS      else NIL]))(RPAQ? PCE.SHOW.LOCKS.FN )(RPAQ? PCE.KEYACTION.LIST )(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS PCE.SHOW.LOCKS.FN PCE.KEYACTION.LIST))(DEFINEQ(\PCE.ADD.KEYACTIONS  [LAMBDA (KEYACTIONTABLE KEYACTIONLIST)                     (* mjs "25-Jul-86 16:31")    (for X in KEYACTIONLIST bind SCANDOWN SCANUP       do (KEYACTION (CAR X)                 (if (SMALLP (CDR X))                     then (SETQ SCANDOWN (IPLUS (CDR X)                                                768))                          (SETQ SCANUP (IPLUS 128 SCANDOWN))                          (CONS (LIST SCANDOWN SCANDOWN)                                (LIST SCANUP SCANUP))                   else (CDR X))                 KEYACTIONTABLE])(\PCE.CREATE.KEYACTIONTABLE  [LAMBDA NIL                                                (* mjs "25-Jul-86 16:46")                    (* * Returns a keyaction table that makes lisp keyboard transitions send the           appropriate PC keyboard scancodes.)    (PROG ((K (KEYACTIONTABLE)))          (DECLARE (SPECVARS K))          (\PCE.ADD.KEYACTIONS K \PCE.KEY.TO.SCAN.LIST)          (if (NULL (NLSETQ (\PCE.ADD.KEYACTIONS K PCE.KEYACTION.LIST)))              then (\PCE.SYSTEM.ERROR "Bad value for PCE.KEYACTION.LIST"))          (RETURN K])(\PCE.ENQUEUESCANCODE  [LAMBDA (BYTE)                                        (* ; "Edited 16-Dec-87 18:33 by murage")                    (* * Adds the scan code BYTE to the 64-byte PC kbd buffer <in the FCB>.        Unlike the Viewpoint implementation, if the buffer is full, we simply loop         until it isn't full, rather than causing an error)                    (* * See EnqueueScanCode in PCEKeyboard.mesa)    (with \PCE.KEYBOARD.FCB \PCE.KEYBOARD.FCBPTR           (PROG ((PTR KBBufferIN.BS))                    (* * PTR is an offset into kbd buffer of the last char put in the buffer.        Increment this, wrapping around the ring buffer.)                 (SETQ PTR (if (IGEQ PTR 63)                               then 0                             else (ADD1 PTR)))                    (* * If the buffer is full, wait until it is not full.)                 (while (EQ PTR KBBufferOUT.BS) do (BLOCK))                    (* * Put BYTE into the buffer)                 (\PUTBASEBYTE (LOCF (fetch (\PCE.KEYBOARD.FCB KBBuffer) of                                                                                  \PCE.KEYBOARD.FCBPTR                                            ))                        PTR BYTE)                    (* * Update inptr in FCB)                 (SETQ KBBufferIN.BS PTR)                    (* * If the IOP kbd handler is sleeping, or the buffer is full, then notify         the kbd handler. Note that we check the special case where the INPTR is at 0         and the output is at 63.0)                 (if (OR (EQ 0 KeyboardHandlerState.BS)                             (EQ KBBufferIN.BS (ADD1 KBBufferOUT.BS))                             (AND (EQ 0 KBBufferIN.BS)                                  (EQ 63 KBBufferOUT.BS)))                     then (\PCE.NOTIFY \PCE.KeyboardDNMask])(\PCE.FILL.ARRAY  [LAMBDA NIL                                                (* mjs " 1-May-86 10:53")                    (* * Utility function used to set up \PCE.SCAN.CODE.ARRAY so that it maps from           charcodes |0-127| to PC key transitions.          This array is used when interpreting chars that are copy-selected into the           keyboard buffer.)                    (* * The values in \PCE.SCAN.CODE.ARRAY are decoded as follows%: The lower 6           bits are the PC down scancode. The 128 bit indicates whether the char should be           shifted. The 256 bit indicates whether the char should be CNTRL-ed.          If the value is 0, no character is sent.)    (PROG NIL                    (* * Clear array)          (for X from 0 to 127 do (SETA \PCE.SCAN.CODE.ARRAY X 0))                    (* * Set normal unshifted and shifted chars.)          (for I from 1 to 57 do (SETA \PCE.SCAN.CODE.ARRAY (NTHCHARCODE \PCE.KEY.STRING I)                                       I)                                 (SETA \PCE.SCAN.CODE.ARRAY (NTHCHARCODE \PCE.SHIFT.KEY.STRING I)                                       (PLUS 128 I)))                    (* * Do CTRL chars from CTRL-A to CTRL-Z.)          [for KEYRANGE in '((16 25)                             (30 38)                             (44 50)) do (for I from (CAR KEYRANGE) to (CADR KEYRANGE)                                            do (SETA \PCE.SCAN.CODE.ARRAY                                                     (ADD1 (IDIFFERENCE (NTHCHARCODE \PCE.KEY.STRING                                                                                I)                                                                  (CHARCODE a)))                                                     (PLUS 256 I]                    (* * Do the escape key)          (SETA \PCE.SCAN.CODE.ARRAY 27 1])(\PCE.GETKEYS  [LAMBDA NIL                                                (* mjs "25-Jul-86 16:47")                    (* * This is the PC keyboard agent, spawned as a process to wait for keyboard           chars, and to send them to the PC. Handles the keyboard transactions, and           copy-select from other windows which use BKSYSBUF.          This function knows about up/down transitions so it can time them and do           repeats, etc.)    (while T bind CH CH.IS.KEYBOARD.SCANCODE KBD.REPEAT.TIMER       do (PROG NIL                (BLOCK)                    (* * If the keyboard buffer is empty, and we are not the tty process, wait for           the event \PCE.KEYBOARD.EVENT. This event is notified whenever the TTY is           switched to this process <in \PCE.KEYBOARD.TTYENTRYFN> or whenever any chars           are added to the keyboard buffer <in \PCE.KEYBOARD.BUFFER.PUSH>.)                (OR \PCE.KEYBOARD.BUFFER (TTY.PROCESSP)                    (AWAIT.EVENT \PCE.KEYBOARD.EVENT))                    (* * Get a character from the keyboard buffer <if not empty>, or from the           keyboard, or from the repeat of a held-down key.)                (if \PCE.KEYBOARD.BUFFER                    then (SETQ CH (pop \PCE.KEYBOARD.BUFFER))                         (SETQ CH.IS.KEYBOARD.SCANCODE NIL)                  elseif (\SYSBUFP)                    then (SETQ CH (\GETKEY))                     (* CH.IS.KEYBOARD.SCANCODE is non-NIL if CH is a scancode received from the           physical keyboard. This is used to trigger key-repeating and setting shift-key           flags)                         (SETQ CH.IS.KEYBOARD.SCANCODE (EQ 768 (LOGAND CH 65280)))                         (BLOCK)                  elseif (AND CH.IS.KEYBOARD.SCANCODE (NOT (BITTEST CH 128))                              (NUMBERP \PCE.KEYBOARD.WAIT)                              (NUMBERP \PCE.KEYBOARD.WAIT2))                    then                     (* if the last char was a scancode from the keyboard, it was a down-transition,           and autorepeat is enabled <the keyboard wait variables are both numbers>, then           process autorepeating for this key.)                         (if KBD.REPEAT.TIMER                             then                            (* handle first and subsequent                                                              repeats.)                                  (if (TIMEREXPIRED? KBD.REPEAT.TIMER)                                      then                   (* note%: only repeat DOWN key                                                              transitions)                                           (\PCE.ENQUEUESCANCODE CH)                                           (SETQ KBD.REPEAT.TIMER (SETUPTIMER \PCE.KEYBOARD.WAIT2)))                           else                              (* setup timer for first repeat)                                (SETQ KBD.REPEAT.TIMER (SETUPTIMER \PCE.KEYBOARD.WAIT)))                         (RETURN)                  else                                       (* if no chars at all, just loop)                       (RETURN))                    (* * We must have a real non-autorepeat char.          Reset autorepeat timer.)                (SETQ KBD.REPEAT.TIMER NIL)                (BLOCK)                    (* * Wait to process non-kbd chars <from BKSYSBUF or kbd buffer> until the FCB           buffer is empty, to prevent dropping any chars)                (if (NOT CH.IS.KEYBOARD.SCANCODE)                    then (until (with \PCE.KEYBOARD.FCB \PCE.KEYBOARD.FCBPTR (EQ KBBufferIN.BS                                                                                  KBBufferOUT.BS))                            do (BLOCK)))                    (* * If CH is a 16-bit char from char set 3, this is an encoded scancode from           the keyboard or the keyboard buffer. Otherwise, it is a character from BKSYSBUF           or the keyboard buffer. Handle these two cases seperately.)                (if (EQ 768 (LOGAND CH 65280))                    then                     (* * extract 8-bit scan code, and send to the PC)                         (SETQ CH (LOGAND CH 255))                         (\PCE.ENQUEUESCANCODE CH)                     (* * set shift flags in \LASTKEYSTATE, so that copybutton eventfns that call           SHIFTDOWNP to see if they should do copy selection will work.          Note that we only change shift flgs for scancodes from kbd.)                         (if CH.IS.KEYBOARD.SCANCODE                             then (SELECTQ CH                                      (42                    (* left shift down)                                          (if (KEYDOWNP 'LSHIFT)                                              then (replace (KEYBOARDEVENT 1SHIFT) of \LASTKEYSTATE                                                      with T)))                                      (170                   (* left shift up)                                           (if (NOT (KEYDOWNP 'LSHIFT))                                               then (replace (KEYBOARDEVENT 1SHIFT) of \LASTKEYSTATE                                                       with NIL)))                                      (54                    (* right shift down)                                          (if (KEYDOWNP 'RSHIFT)                                              then (replace (KEYBOARDEVENT 2SHIFT) of \LASTKEYSTATE                                                      with T)))                                      (182                   (* right shift up)                                           (if (NOT (KEYDOWNP 'RSHIFT))                                               then (replace (KEYBOARDEVENT 2SHIFT) of \LASTKEYSTATE                                                       with NIL)))                                      NIL))                     (* * If any of the lock keys go down or up, update the lock state variables and           display the new lock state.)                         (if (MEMB CH '(58 186 69 197 70 198))                             then (SELECTQ CH                                      (58 (SETQ \PCE.CAPSLOCK (\PCE.NEWLOCKSTATE \PCE.CAPSLOCK                                                                     'DOWN)))                                      (186 (SETQ \PCE.CAPSLOCK (\PCE.NEWLOCKSTATE \PCE.CAPSLOCK                                                                      'UP)))                                      (69 (SETQ \PCE.NUMLOCK (\PCE.NEWLOCKSTATE \PCE.NUMLOCK                                                                    'DOWN)))                                      (197 (SETQ \PCE.NUMLOCK (\PCE.NEWLOCKSTATE \PCE.NUMLOCK                                                                     'UP)))                                      (70 (SETQ \PCE.SCROLLLOCK (\PCE.NEWLOCKSTATE \PCE.SCROLLLOCK                                                                       'DOWN)))                                      (198 (SETQ \PCE.SCROLLLOCK (\PCE.NEWLOCKSTATE \PCE.SCROLLLOCK                                                                        'UP)))                                      NIL)                                  (\PCE.SHOW.LOCKS))                  else                     (* * CH is not in charset 3, so it must be a copy-selected copy-selected           character from another window, or a character inserted into the keyboard buffer           by PCE.ADD.KBD.STRING)                       (PROG [(CODE (ELT \PCE.SCAN.CODE.ARRAY (LOGAND CH 127]                             (if (ZEROP CODE)                                 then                        (* ignore charcode 0)                                      (RETURN))                             (if (BITTEST CODE 256)                                 then                     (* put cntrl char down if CH is a cntrl char)                                      (\PCE.ENQUEUESCANCODE 29))                             (if (BITTEST CODE 128)                                 then                     (* If it is a shift-lock character, then send shift char)                                      (\PCE.ENQUEUESCANCODE 42))                    (* send both the down and up transitions of the char)                             (\PCE.ENQUEUESCANCODE (LOGAND CODE 127))                             (\PCE.ENQUEUESCANCODE (LOGOR (LOGAND CODE 127)                                                          128))                             (if (BITTEST CODE 128)                                 then                        (* puts shift state back like it was)                                      (\PCE.ENQUEUESCANCODE (IPLUS 42 128)))                             (if (BITTEST CODE 256)                                 then                        (* restore the CTRL key state as it                                                              was)                                      (\PCE.ENQUEUESCANCODE (PLUS 128 29])(\PCE.KEYBOARD.BUFFER.PUSH  [LAMBDA (LST)                                              (* mjs " 1-May-86 11:26")                    (* * Add list of charcodes or scan codes to \PCE.KEYBOARD.BUFFER, and notify           kbd event. \PCE.KEYBOARD.BUFFER.ENDPTR points to the last CONS cell in the           list, so that we can quickly add to the end of the buffer list.)    (if (LISTP LST)        then (if \PCE.KEYBOARD.BUFFER                 then                     (* there are other chars, so add LST to the end of the list)                      (RPLACD \PCE.KEYBOARD.BUFFER.ENDPTR LST)               else                                          (* if no other chars, LST is it)                    (SETQ \PCE.KEYBOARD.BUFFER LST))             (SETQ \PCE.KEYBOARD.BUFFER.ENDPTR (LAST LST))                     (* Notify kbd event, in case the kbd process is waiting.)             (if (TYPENAMEP \PCE.KEYBOARD.EVENT 'EVENT)                 then (NOTIFY.EVENT \PCE.KEYBOARD.EVENT])(\PCE.KEYBOARD.CONFIGURE  [LAMBDA (CONFIG)                                           (* mjs " 1-May-86 11:27")                    (* * Initialize vars used by keyboard agent.)    (\PCE.KEYBOARD.TERMINATE)    [SETQ \PCE.KEYBOARD.WAIT (MKATOM (LISTGET CONFIG 'KEYBOARDWAIT]    (SETQ \PCE.KEYBOARD.WAIT2 (MKATOM (LISTGET CONFIG 'KEYBOARDWAIT2])(\PCE.KEYBOARD.TERMINATE  [LAMBDA NIL                                                (* mjs " 1-May-86 11:28")                    (* * Flush keyboard agent process.)    (if (PROCESSP \PCE.KEYBOARD.PROCESS)        then (DEL.PROCESS \PCE.KEYBOARD.PROCESS))    (SETQ \PCE.KEYBOARD.PROCESS NIL])(\PCE.KEYBOARD.TTYENTRYFN  [LAMBDA (PROC)                                             (* mjs " 1-May-86 11:29")                    (* * When the tty is switched to the kbd process, wake up the kbd process in           case it is waiting.)    (if (TYPENAMEP \PCE.KEYBOARD.EVENT 'EVENT)        then (NOTIFY.EVENT \PCE.KEYBOARD.EVENT])(\PCE.KEYBOARDINIT  [LAMBDA NIL                                                (* mjs "28-Jul-86 11:57")                    (* * Set up keyboard agent vars, spawn keyboard agent process, and attach it to           the PC window.)    (SETQ \PCE.KEYBOARD.EVENT (CREATE.EVENT 'PCE-KEYBOARD-EVENT))    (SETQ \PCE.KEYBOARD.BUFFER NIL)    (SETQ \PCE.KEYBOARD.BUFFER.ENDPTR NIL)                   (* Set state of                                                              CAPSLOCK,NUMLOCK,SCROLLLOCK keys to                                                              off)    (\PCE.RESET.LOCKSTATE)                    (* break links between PC window and old proc, if any)    (\PCE.WINDOW.DETACH.PROCESS)    [SETQ \PCE.KEYBOARD.PROCESS (ADD.PROCESS (LIST (FUNCTION \PCE.GETKEYS))                                       'NAME                                       'PCE-KEYBOARD                                       'AFTEREXIT                                       'DELETE                                       'TTYENTRYFN                                       (FUNCTION \PCE.KEYBOARD.TTYENTRYFN)                                       'KEYACTION                                       (\PCE.CREATE.KEYACTIONTABLE)                                       'RESTARTABLE                                       'HARDRESET                                       'RESTARTFORM                                       (LIST (FUNCTION \PCE.KEYBOARDINIT]    (\PCE.WINDOW.ATTACH.PROCESS])(\PCE.NEWLOCKSTATE  [LAMBDA (OLDSTATE UP/DOWN)                                 (* mjs " 4-Apr-86 13:43")                    (* \PCE.NEWLOCKSTATE controls how the lock key state changes at each key           transition. We need to keep track of what the PC thinks the lockstate is so           that <A> we can correctly update the lock key indicators in the title of the           PCE window, and <B> so we can know whether chars will be shifted by the PC when           we copy-select chars into the window)                    (* the lock keys have to handled specially%: though they change state on           keydown, they do not change state again unless there is a keyup before the next           keydown. Therefore, it is necessary to save into about the current state of the           key <up or down> as well as the state of the lock <on or off>.          This state is saved for the three lock keys using the three variables          (\PCE.CAPSLOCK \PCE.NUMLOCK \PCE.SCROLLLOCK)%, each of which can have as value           one of the atoms (LOCKOFF.KEYUP LOCKON.KEYDOWN LOCKON.KEYUP LOCKOFF.KEYDOWN))    (if (EQ UP/DOWN 'DOWN)        then                     (* on key down, change lock state iff the key was up)             (SELECTQ OLDSTATE                 (LOCKOFF.KEYUP 'LOCKON.KEYDOWN)                 (LOCKON.KEYDOWN                       'LOCKON.KEYDOWN)                 (LOCKON.KEYUP 'LOCKOFF.KEYDOWN)                 (LOCKOFF.KEYDOWN                       'LOCKOFF.KEYDOWN)                 'LOCKON.KEYDOWN)      else                     (* on key up, don't change lock state, but remember that key is now up)           (SELECTQ OLDSTATE               (LOCKOFF.KEYUP 'LOCKOFF.KEYUP)               (LOCKON.KEYDOWN                     'LOCKON.KEYUP)               (LOCKON.KEYUP 'LOCKON.KEYUP)               (LOCKOFF.KEYDOWN                     'LOCKOFF.KEYUP)               'LOCKOFF.KEYUP])(\PCE.RESET.LOCKSTATE  [LAMBDA NIL                                                (* mjs " 1-May-86 11:36")                    (* * Reset lock state to all lock keys off, and update lock display)    (SETQ \PCE.CAPSLOCK 'LOCKOFF.KEYUP)    (SETQ \PCE.NUMLOCK 'LOCKOFF.KEYUP)    (SETQ \PCE.SCROLLLOCK 'LOCKOFF.KEYUP)    (\PCE.SHOW.LOCKS])(\PCE.SHOW.LOCKS  [LAMBDA NIL                                                (* mjs " 1-May-86 11:45")                    (* * Update the lock key state, by calling the function that is the value of           the global variable PCE.SHOW.LOCKS.FN with the state <on/off> of the three lock           keys. If PCE.SHOW.LOCKS.FN is NIL, don't do anything.)    (PROG [[CAPSLOCK (OR (EQ \PCE.CAPSLOCK 'LOCKON.KEYDOWN)                         (EQ \PCE.CAPSLOCK 'LOCKON.KEYUP]           [NUMLOCK (OR (EQ \PCE.NUMLOCK 'LOCKON.KEYDOWN)                        (EQ \PCE.NUMLOCK 'LOCKON.KEYUP]           (SCROLLLOCK (OR (EQ \PCE.SCROLLLOCK 'LOCKON.KEYDOWN)                           (EQ \PCE.SCROLLLOCK 'LOCKON.KEYUP]          (if PCE.SHOW.LOCKS.FN              then (APPLY* PCE.SHOW.LOCKS.FN CAPSLOCK NUMLOCK SCROLLLOCK]))(RPAQQ \PCE.CAPSLOCK LOCKOFF.KEYUP)(RPAQQ \PCE.KEY.STRING "vanMelle18 Sep  shih.pa 3 Oct   shih.pa 3 Oct   shih.pa 2")(RPAQQ \PCE.KEY.TO.SCAN.LIST ((65 . 1)                                  (ONE . 2)                                  (TWO . 3)                                  (THREE . 4)                                  (FOUR . 5)                                  (FIVE . 6)                                  (SIX . 7)                                  (SEVEN . 8)                                  (EIGHT . 9)                                  (NINE . 10)                                  (ZERO . 11)                                  (- . 12)                                  (= . 13)                                  (BS . 14)                                  (TAB . 15)                                  (q . 16)                                  (w . 17)                                  (e . 18)                                  (r . 19)                                  (t . 20)                                  (y . 21)                                  (u . 22)                                  (i . 23)                                  (o . 24)                                  (p .25)                                  (%[ . 26)                                  (%] . 27)                                  (CR . 28)                                  (PROP'S . 29)                                  (a . 30)                                  (s . 31)                                  (d . 32)                                  (f . 33)                                  (g . 34)                                  (h . 35)                                  (j . 36)                                  (k . 37)                                  (l . 38)                                  (; . 39)                                  (71 . 40)                                  (108 . 41)                                  (LSHIFT . 42)                                  (KEYPAD, . 43)                                  (z . 44)                                  (x . 45)                                  (c . 46)                                  (v . 47)                                  (b . 48)                                  (n . 49)                                  (m . 50)                                  (%, . 51)                                  (%. . 52)                                  (/ . 53)                                  (RSHIFT . 54)                                  (PRTSC . 55)                                  (KEYBOARD . 56)                                  (SPACE . 57)                                  (KEYPAD+ . 58)                                  (CENTER . 59)                                  (BOLD . 60)                                  (ITALICS . 61)                                  (CASE . 62)                                  (STRIKEOUT . 63)                                  (UNDERLINE . 64)                                  (SUPER/SUB . 65)                                  (LARGER . 66)                                  (MARGINS . 67)                                  (FONT . 68)                                  (KEYPAD- . 69)                                  (KEYPAD* . 70)                                  (KEYPAD7 . 71)                                  (KEYPAD8 . 72)                                  (KEYPAD9 . 73)                                  (EXPAND . 74)                                  (KEYPAD4 . 75)                                  (KEYPAD5 . 76)                                  (KEYPAD6 . 77)                                  (NEXT . 78)                                  (KEYPAD1 . 79)                                  (KEYPAD2 . 80)                                  (KEYPAD3 . 81)                                  (KEYPAD0 . 82)                                  (DEL . 83)                                  (KEYPAD. . 83)))(RPAQQ \PCE.KEYBOARD.STATE 0)(RPAQQ \PCE.NUMLOCK LOCKOFF.KEYUP)(RPAQ \PCE.SCAN.CODE.ARRAY (READARRAY-FROM-LIST 128 (QUOTE SMALLPOSP) 0 (QUOTE (0 286 304 302 288 274 289 290 291 279 292 293 294 306 305 280 281 272 275 287 276 278 303 273 301 277 300 1 0 0 0 306 185 130 168 132 133 134 136 40 138 139 137 141 51 12 52 53 11 2 3 4 5 6 7 8 9 10 167 39 179 13 180 181 131 158 176 174 160 146 161 162 163 151 164 165 166 178 177 152 153 144 147 159 148 150 175 145 173 149 172 26 43 27 135 140 0 30 48 46 32 18 33 34 35 23 36 37 38 50 49 24 25 16 19 31 20 22 47 17 45 21 44 154 171 155 169 0 NIL))))(RPAQQ \PCE.SCROLLLOCK LOCKOFF.KEYUP)(RPAQQ \PCE.SHIFT.KEY.STRING " !@#$%%^&*()_+ 	QWERTYUIOP{} ASDFGHJKL:%"~ |ZXCVBNM<>?      ")(RPAQ? \PCE.KEYBOARD.BUFFER )(RPAQ? \PCE.KEYBOARD.BUFFER.ENDPTR )(RPAQ? \PCE.KEYBOARD.EVENT )(RPAQ? \PCE.KEYBOARD.PROCESS )(RPAQ? \PCE.KEYBOARD.WAIT 500)(RPAQ? \PCE.KEYBOARD.WAIT2 100)(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \PCE.CAPSLOCK \PCE.KEY.STRING \PCE.KEY.TO.SCAN.LIST \PCE.KEYBOARD.BUFFER        \PCE.KEYBOARD.BUFFER.ENDPTR \PCE.KEYBOARD.EVENT \PCE.KEYBOARD.PROCESS \PCE.KEYBOARD.STATE        \PCE.KEYBOARD.WAIT \PCE.KEYBOARD.WAIT2 \PCE.NUMLOCK \PCE.SCAN.CODE.ARRAY \PCE.SCROLLLOCK        \PCE.SHIFT.KEY.STRING))(PUTPROPS PCEKEYBOARD COPYRIGHT ("Xerox Corporation" 1986 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (2222 3721 (PCE.ADD.KBD.SCANCODES 2232 . 2924) (PCE.ADD.KBD.STRING 2926 . 3173) (PCE.KBD.PROC 3175 . 3719)) (3875 25585 (\PCE.ADD.KEYACTIONS 3885 . 4497) (\PCE.CREATE.KEYACTIONTABLE 4499 . 5091) (\PCE.ENQUEUESCANCODE 5093 . 7049) (\PCE.FILL.ARRAY 7051 . 9057) (\PCE.GETKEYS 9059 . 18665) (\PCE.KEYBOARD.BUFFER.PUSH 18667 . 19733) (\PCE.KEYBOARD.CONFIGURE 19735 . 20103) (\PCE.KEYBOARD.TERMINATE 20105 . 20427) (\PCE.KEYBOARD.TTYENTRYFN 20429 . 20796) (\PCE.KEYBOARDINIT 20798 . 22334) (\PCE.NEWLOCKSTATE 22336 . 24360) (\PCE.RESET.LOCKSTATE 24362 . 24725) (\PCE.SHOW.LOCKS 24727 . 25583)))))STOP 