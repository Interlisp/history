(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "18-Aug-88 15:26:56" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>SOURCES>ROOMS-OVERVIEW.;13| 14228        il:|changes| il:|to:|  (il:functions ov-layout-placement-editors ov-suite-body)      il:|previous| il:|date:| " 1-Aug-88 14:52:33" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>SOURCES>ROOMS-OVERVIEW.;12|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-overviewcoms)(il:rpaqq il:rooms-overviewcoms ((file-environments il:rooms-overview) (il:p (export (quote (reset-overview room-unwind-save)) "ROOMS") (require "ROOMS")) (il:coms (il:* il:\; "the room") (il:variables *overview-room*) (il:functions go-to-overview ov-entry-fn ov-exit-fn ov-room-changed-fn ov-suite-body)) (il:coms (il:* il:\; "tiling code") (il:variables *ov-border-size*) (il:functions ov-layout-placement-editors ov-rows&columns)) (il:coms (il:* il:\; "buttons") (il:variables *ov-buttons* *ov-selected-button-window* *ov-changed?*) (il:functions make-ov-keyaction-table ov-watch-keyboard ov-select-button ov-deselect-button ov-operation) (il:variables *ov-keyaction-table*)) (il:functions reset-overview) (il:coms (il:variables *room-unwinders*) (il:functions room-unwind-save room-unwind) (eval-when (load) (il:p (pushnew (quote (reset-overview)) *reset-forms* :test (quote equal)) (pushnew (quote reset-overview) *screen-changed-functions*) (pushnew (quote room-unwind) *room-exit-functions*) (pushnew (quote ov-room-changed-fn) *room-changed-functions*))))))(define-file-environment il:rooms-overview :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (reset-overview room-unwind-save)) "ROOMS")(require "ROOMS")(il:* il:\; "the room")(defglobalvar *overview-room* nil)(defun go-to-overview nil (go-to-room *overview-room*))(defun ov-entry-fn (overview-room) (il:* il:|;;| "the entry function of the overview room.  called whenever we enter the overview room.") (let ((keyboard-watcher (il:add.process (quote (ov-watch-keyboard)) (quote il:keyaction) *ov-keyaction-table* (quote il:restartable) t))) (il:* il:|;;| "add the keyboard watcher") (room-unwind-save (il:* il:|;;| "make sure it will get deleted when we exit") (il:del.process keyboard-watcher t)) (il:* il:|;;| "make sure it will have the TTY when we enter the overview") (setf (room-tty-process overview-room) keyboard-watcher)) (il:* il:|;;| "place a PE for each room") (ov-layout-placement-editors (all-rooms t) (internalize-region (make-region :left 0 :bottom 1/4 :width 1.0 :height 3/4))) (il:* il:|;;| "make sure PE's don't get placed again") (setf (room-placements overview-room) (with-collection (dolist (placement (room-placements overview-room)) (unless (placement-editor-p (il:windowprop (placement-window placement) :placement-editor)) (collect placement))))) (il:* il:|;;| "select GO-TO button initially") (ov-select-button (gethash :enter *ov-buttons*)))(defun ov-exit-fn (overview-room) (when *ov-selected-button-window* (ov-deselect-button *ov-selected-button-window*)))(defun ov-room-changed-fn (room reason) (il:* il:|;;| "called whenever a room is changed") (when (and (eq *current-room* *overview-room*) (not (eq room *overview-room*))) (il:* il:|;;| "when we're in the overview") (case reason ((:created :deleted) (il:* il:|;;| "have to re-layout placement editors") (maphash (function (lambda (name pe) (when (il:openwp (pe-window pe)) (il:closew (pe-window pe))))) *placement-editors*) (il:* il:|;;| "hack: signal OV-WATCH-KEYBOARD process that re-layout is required.  this makes multiple deletes & adds appear as one event.") (setq *ov-changed?* t)))))(defun ov-suite-body nil (il:bquote ((:version 0) (:window :space-bar :type :button :text (il:\\\, (let ((filler (make-string (- (floor (/ il:screenwidth (* (il:charwidth (char-code #\Space) *default-text-font*) 6))) 4) :initial-element #\Space))) (concatenate (quote string) filler "GO TO" filler))) :shadows :ark :type :stretchy-ark :help "GO TO mode - selected rooms will be entered" :action ov-select-button :ov-button :enter :protected? t) (:window :edit :type :button :text "EDIT" :shadows :ark :type :ark :help "EDIT mode - selected rooms will be edited" :action ov-select-button :ov-button :edit :protected? t) (:window :expand :type :button :text "EXPAND" :shadows :ark :type :ark :help "EDIT mode - selected rooms will be edited" :action ov-select-button :ov-button :expand :protected? t) (:window :move :type :button :text "MOVE" :shadows :ark :type :ark :help "MOVE mode - selected placements will be moved, rooms renamed" :action ov-select-button :ov-button :move :protected? t) (:window :copy :type :button :text "COPY" :shadows :ark :type :ark :help "COPY mode - selected rooms & placements will be copied" :action ov-select-button :ov-button :copy :protected? t) (:window :delete :type :button :text "DELETE" :shadows :ark :type :ark :help "DELETE mode - selected rooms & placements will be deleted" :action ov-select-button :ov-button :delete :protected? t) (:window :prompt-window :type :prompt-window) (:room "Overview" :placements ((:prompt-window :region (0 3/16 1.0 1/16) :border 0 :shade 65535 :operation il:invert :title nil :font (il:helvetica 12 (il:bold il:regular il:regular))) (:space-bar :region (1/3 1/60 100 100)) (:expand :region (7/8 1/60 100 100)) (il:\\\,@ (case (il:machinetype) (il:maiko (quote ((:delete :region (26 1/60 100 100)) (:copy :region (26 1/20 100 100)) (:move :region (26 1/12 100 100)) (:edit :region (125 1/20 100 100))))) (t (quote ((:edit :region (1/40 1/60 100 100)) (:move :region (1/40 1/20 100 100)) (:copy :region (1/40 1/12 100 100)) (:delete :region (1/40 7/60 100 100)))))))) :inclusions t :background ((:whole-screen 25500 :border 2) (:region (0 0 1.0 3/16) :shade 31710 :border 2) (:text "Rooms  Overview" :position (0.5 . 1/8) :alignment :center) (:text "TM" :position (0.47 . 1/7) :alignment :center :font (:eval il:bigfont)) (:text "Copyright (c) Envos Corporations, 1988; Patent Pending" :position (0.5 . 5/64) :alignment :center :font (:eval il:bigfont))) :before-entry-functions (ov-entry-fn) :before-exit-functions (ov-exit-fn)))))(il:* il:\; "tiling code")(defglobalparameter *ov-border-size* 10)(defun ov-layout-placement-editors (rooms containing-region) (il:* il:|;;| "layout placement editors for ROOMS in rows & columns within SCREEN-REGION, attempting to use screen space as best as possible") (when rooms (let* ((n-rooms (length rooms)) (title-font-height (il:fontheight *pe-title-font*)) (title-height (il:* il:|;;| "height of title including shadows") (+ title-font-height 1 (ceiling title-font-height *text-shadow-factor*)))) (multiple-value-bind (rows columns tile-width tile-height scale) (ov-rows&columns n-rooms (region-width containing-region) (region-height containing-region) *ov-border-size* title-height) (let* ((width (floor (* il:screenwidth scale))) (height (floor (* il:screenheight scale))) (x-offset (+ (region-left containing-region) *ov-border-size* (il:* il:|;;| "center within borders") (floor (- tile-width width) 2))) (y-offset (+ (region-bottom containing-region) *ov-border-size* (il:* il:|;;| "center within borders") (floor (- tile-height height) 2)))) (do* ((rooms rooms (rest rooms)) (room (first rooms) (first rooms)) (column 0 (mod (1+ column) columns)) (row (1- rows) (if (= column 0) (1- row) row))) ((endp rooms)) (get-pe (room-name room) (make-region :left (+ (* column tile-width) (* column *ov-border-size*) x-offset) :bottom (+ (* row tile-height) (* row title-height) y-offset) :width width :height (+ height title-height)))))))))(defun ov-rows&columns (n width height border title-height) (il:* il:|;;;| "compute the optimal (in terms of use of screen space) tiling for n tiles within WIDTH & HEIGHT with the constraint that each tile must preserve the screen aspect ratio. ") (il:* il:|;;;| "returns 5 values:  1. the number of rows; 2; the number of columns; 3. the tile width; 4. the tile height and 5. the scale factor to use. ") (let ((rows 0) (max-scale 0) tile-width-at-max-scale tile-height-at-max-scale) (loop (il:* il:|;;| "go through each possible tiling & maximize the scale we'd have to use at that tiling.  with a little algebra we could probably find a formula which directly gave us this maximum, but this code is plenty fast & easy to understand, so why bother?") (incf rows) (let* ((columns (ceiling n rows)) (il:* il:|;;| "there's one more border than rows & columns, but the same number of titles as rows.") (x-borders (* (1+ columns) border)) (y-borders (+ border (* rows title-height) border)) (il:* il:|;;| "subtract off the borders from the available space") (useful-width (- width x-borders)) (useful-height (- height y-borders)) (il:* il:|;;| "divide up the useful space") (tile-width (/ useful-width columns)) (tile-height (/ useful-height rows)) (il:* il:|;;| "calculate the scale w.r.t the screen dimensions") (x-scale (/ tile-width il:screenwidth)) (y-scale (/ tile-height il:screenheight)) (il:* il:|;;| "in order to preserve aspect ratio the X & Y scales must be the same.  we must chose the lesser so we stay within the tile.  we'll center within the tile when we actually lay things out.  ") (scale (min x-scale y-scale))) (il:* il:|;;| "scale will smoothly increase until it reaches it maximum value, then decrease. we return the previous value as soon as it begins to decrease.  ") (when (< scale max-scale) (return (values (1- rows) (ceiling n (1- rows)) (floor tile-width-at-max-scale) (floor tile-height-at-max-scale) max-scale))) (setf max-scale scale) (setf tile-width-at-max-scale tile-width) (setf tile-height-at-max-scale tile-height)))))(il:* il:\; "buttons")(defglobalvar *ov-buttons* (make-hash-table :test (quote eq)))(defglobalvar *ov-selected-button-window* nil)(defglobalvar *ov-changed?* nil)(defun make-ov-keyaction-table nil (il:* il:|;;;| "make keyaction table for overview") (il:* il:|;;| "want to get users' mods to shift, ctrl & meta, but don't want users' interrupts") (let ((table (il:keyactiontable il:\\defaultkeyaction))) (declare (global il:\\defaultkeyaction)) (il:* il:|;;| "install default interrupts") (il:interruptchar t nil nil table) (il:* il:|;;| "we need delete key & don't care about type ahead, so remove delete interrupt so screen doesn't flash") (il:interruptchar (char-code #\Rubout) nil nil table) table))(defun ov-watch-keyboard nil (il:* il:|;;;| "added as process when in overview.") (loop (il:* il:|;;| "watch the keyboard") (let* ((key (cond ((edit-key-down-p) :edit) ((move-key-down-p) :move) ((copy-key-down-p) :copy) ((delete-key-down-p) :delete) ((expand-key-down-p) :expand) ((il:keydownp (quote il:space)) :enter)))) (when key (let ((button-window (gethash key *ov-buttons*))) (unless (eq button-window *ov-selected-button-window*) (il:* il:|;;| "select the button") (ov-select-button button-window :redisplay t))))) (il:* il:|;;| "watch for room creation/deletion signal.  this flag is set by OV-ROOM-CHANGED-FN.  doing this in a separate process makes DELETE-SUITE only re-layout once.  this hack depends upon non-preemptive scheduling.    ") (when *ov-changed?* (il:* il:|;;| "have to re-layout placement editors") (setq *ov-changed?* nil) (ov-layout-placement-editors (all-rooms t) (internalize-region (make-region :left 0 :bottom 1/4 :width 1.0 :height 3/4)))) (il:* il:|;;| "clear any type ahead") (il:\\clearsysbuf) (il:* il:|;;| "don't want to cycle too fast, else chords won't be sticky") (il:block 50)))(defun ov-select-button (window) (declare (ignore rest)) (il:* il:|;;;| "called when one of the overview buttons is selected") (unless (eq window *ov-selected-button-window*) (when *ov-selected-button-window* (il:* il:|;;| "first unselect the previously selected button ") (ov-deselect-button *ov-selected-button-window*)) (il:* il:|;;| "mark us as the selected button") (let ((button (il:windowprop window (quote button)))) (setq *ov-selected-button-window* window) (setf (button-inverted? button) t) (il:redisplayw window))))(defun ov-deselect-button (window) (let ((button (il:windowprop window (quote button)))) (setf (button-inverted? button) nil) (setq *ov-selected-button-window* nil) (il:redisplayw window)))(defun ov-operation nil (il:* il:|;;;| "call this to find out what key is down in the overview") (and *ov-selected-button-window* (eq *current-room* *overview-room*) (button-prop (il:windowprop *ov-selected-button-window* (quote button)) :ov-button)))(defglobalparameter *ov-keyaction-table*)(defun reset-overview nil (setq *ov-keyaction-table* (make-ov-keyaction-table)) (when *overview-room* (il:* il:|;;| "clean up existing overview") (delete-room *overview-room*)) (let ((room-named-overview (room-named "Overview"))) (il:* il:|;;| "make an un-named room from the description in *OVERVIEW-SUITE-BODY*") (unwind-protect (progn (install-suite-body (copy-tree (ov-suite-body))) (setq *overview-room* (room-named "Overview"))) (if room-named-overview (setf (room-named "Overview") room-named-overview) (remhash "Overview" *rooms*))) (when (eq *current-room* *overview-room*) (il:* il:|;;| "re-tile Overview to get rid of pe for Overview") (ov-room-changed-fn nil :deleted)) (dolist (placement (room-placements *overview-room*)) (let ((button (il:windowprop (placement-window placement) (quote button)))) (when button (il:* il:|;;| "save pointers to buttons in *OV-BUTTONS*") (setf (gethash (button-prop button :ov-button) *ov-buttons*) (placement-window placement))))) *overview-room*))(defglobalvar *room-unwinders* nil)(defmacro room-unwind-save (&body body) (il:bquote (push (function (lambda nil (il:\\\,@ body))) *room-unwinders*)))(defun room-unwind (room) (declare (ignore room)) (dolist (unwinder (prog1 *room-unwinders* (setq *room-unwinders* nil))) (funcall unwinder)))(eval-when (load)(pushnew (quote (reset-overview)) *reset-forms* :test (quote equal))(pushnew (quote reset-overview) *screen-changed-functions*)(pushnew (quote room-unwind) *room-exit-functions*)(pushnew (quote ov-room-changed-fn) *room-changed-functions*))(il:putprops il:rooms-overview il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop