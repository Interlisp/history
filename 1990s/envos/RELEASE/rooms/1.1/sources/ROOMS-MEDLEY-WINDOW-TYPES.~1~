(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 1-Nov-88 12:09:36" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-MEDLEY-WINDOW-TYPES.;2| 11932        il:|changes| il:|to:|  (il:vars il:rooms-medley-window-typescoms)      il:|previous| il:|date:| "28-Jul-88 19:15:24" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-MEDLEY-WINDOW-TYPES.;1|); Copyright (c) 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-medley-window-typescoms)(il:rpaqq il:rooms-medley-window-typescoms ((il:* il:|;;| "window types for various modules") (file-environments il:rooms-medley-window-types) (il:p (require "ROOMS")) (il:window-types :exec :inspector :spy-button :chat :textstream :tedit :button) (il:coms (il:* il:|;;| "the prompt window") (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window)))))) (il:window-types :prompt-window) (il:globalvars il:promptwindow)) (il:coms (il:* il:|;;| "SEdit") (il:advise (il:openwp :in sedit::get-context)) (il:window-types :sedit)) (il:coms (il:* il:|;;| "File Browser") (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:filebrowser)) (il:eval (il:sysreclook1 (quote il:filebrowser)))) (or (il:reclook (quote il:tablebrowser)) (il:eval (il:sysreclook1 (quote il:tablebrowser)))))) (il:window-types :file-browser :table-browser)) (il:coms (il:* il:|;;| "Sketch") (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:sketch)) (il:loaddef (quote il:sketch) (quote il:records) (quote il:sketch))))) (il:window-types :sketch)) (il:coms (il:* il:|;;| "Logo Window") (il:window-types :logo-window) (il:advise il:logow)) (il:coms (il:* il:|;;| "PSW") (il:window-types :psw))))(il:* il:|;;| "window types for various modules")(define-file-environment il:rooms-medley-window-types :compiler :compile-file :readtable "XCL" :package "ROOMS")(require "ROOMS")(def-window-type :exec :recognizer (lambda (window) (il:eqmemb (quote xcl::exec-closefn) (il:windowprop window (quote il:closefn)))) :abstracter (lambda (window) (let* ((process (il:windowprop window (quote il:process)))) (when process (let ((profile (il:processprop process (quote il:profile)))) (il:bquote (:region (il:\\\, (externalize-region (window-region window))) :package (il:\\\, (if profile (package-name (getf profile (quote *package*))) "IL")) :readtable (il:\\\, (if profile (il:readtableprop (getf profile (quote *readtable*)) (quote il:name)) "OLD-INTERLISP-T")))))))) :reconstituter (lambda (args) (let ((process (add-exec :region (internalize-region (getf args :region (list 0 0 400 100))) :profile (or (getf args :profile) (il:bquote (*package* (il:\\\, (or (find-package (getf args :package)) (find-package "XCL-USER"))) *readtable* (il:\\\, (or (il:find-readtable (getf args :readtable)) (il:find-readtable "XCL"))))))))) (il:* il:|;;| "this is really grody.  why doesn't ADD-EXEC just take a window?") (il:block) (il:wfromds (il:process.evalv process (quote *standard-output*))))) :title (lambda (placement region dsp) (print-pep-title-string (il:windowprop (placement-window placement) (quote il:title)) region dsp)))(def-window-type :inspector :recognizer (il:lambda (window) (il:windowprop window (quote il:datum))) :title "Inspector")(def-window-type :spy-button :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:spy.buttona0001))) :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data) (global il:spy.button)) (unless (boundp (quote il:spy.button)) (il:filesload "spy")) (if il:spy.button il:spy.button (progn (il:spy.button (make-position 0 0)) il:spy.button))) :no-shape t :title (lambda (placement region dsp) (print-pep-title-string "Spy" region dsp :no-title-bar? t)))(def-window-type :chat :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:chat.buttonfn))) :abstracter (lambda (window) (list :host (il:canonical.hostname (first (il:windowprop window (quote il:chathost)))) :region (il:windowregion window))) :reconstituter (lambda (data) (let ((window (il:createw (getf data :region) "Chat"))) (il:* il:|;;| "start the chat process") (il:chat (getf data :host) nil nil window) (il:* il:|;;| "return the window") window)) :title (lambda (placement region dsp) (print-pep-title-string (format nil "Chat ~A" (first (il:windowprop (placement-window placement) (quote il:chathost)))) region dsp)))(def-window-type :textstream :recognizer (lambda (window) (il:type? il:textobj (il:windowprop window (quote il:textobj)))) :title "Text")(def-window-type :tedit :dependencies (:textstream) :recognizer (lambda (window) (or (il:windowprop window (quote il:teditcreated)) (let ((textobj (il:windowprop window (quote il:textobj)))) (and (il:type? il:textobj textobj) (getf (il:ffetch (il:textobj il:editprops) il:of textobj) (quote il:teditcreatedwindow)))))) :abstracter (lambda (window) (let* ((stream (il:fetch (il:textobj il:txtfile) il:of (il:textobj window)))) (when stream (il:bquote (:region (il:\\\, (externalize-region (window-region window))) :pathname (il:\\\, (make-pathname :version :newest :defaults (pathname stream)))))))) :reconstituter (lambda (props) (il:filesload (il:sysload) il:tedit) (let* ((pathname (getf props :pathname)) (found (when pathname (probe-file pathname))) (namestring (when found (namestring found))) (window (il:\\tedit.createw.from.region (internalize-region (getf props :region (list 0 0 200 200))) (if found namestring)))) (il:tedit (if found (intern namestring "INTERLISP") (if pathname (format nil "Couldn't edit file ~A" (namestring pathname)))) window nil (list (quote il:teditcreatedwindow) t (quote il:leavetty) t)) window)) :title "TEdit")(def-window-type :button :recognizer (lambda (window) (typep (il:windowprop window (quote button)) (quote button))) :abstracter (lambda (window) (externalize-button (il:windowprop window (quote button)))) :reconstituter (lambda (args) (make-button-window (apply (function make-button) args) (internalize-position (getf args :position (make-position 0 0))))) :title (lambda (placement region dsp) (let ((button (il:windowprop (placement-window placement) (quote button)))) (when button (print-pep-title-string (text-string (button-text button)) region dsp :no-title-bar? t)))))(il:* il:|;;| "the prompt window")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window)))))(def-window-type :prompt-window :recognizer (lambda (window) (eq window il:promptwindow)) :abstracter (lambda (window) nil) :reconstituter (lambda (data) il:promptwindow) :updater (lambda (placement) (let ((font (il:dspfont nil il:promptwindow))) (placement-prop placement :font (externalize-font font))) (placement-prop placement :border (il:windowprop il:promptwindow (quote il:border))) (placement-prop placement :shade (il:dsptexture nil il:promptwindow)) (placement-prop placement :title (il:windowprop il:promptwindow (quote il:title))) (placement-prop placement :operation (il:dspoperation nil il:promptwindow))) :placer (lambda (placement) (do* ((changed? nil) (prop-list (placement-props placement) (cddr prop-list)) (prop (car prop-list) (car prop-list)) (value (cadr prop-list) (cadr prop-list))) ((null prop-list) (when changed? (il:* il:|;;| "this is how we change the border & title without changing the region") (il:closew il:promptwindow) (il:advisewds il:promptwindow) (il:showwframe il:promptwindow) (il:clearw il:promptwindow))) (case prop (:border (unless (eql value (il:fetch (il:window il:wborder) il:of il:promptwindow)) (il:replace (il:window il:wborder) il:of il:promptwindow il:with value) (setq changed? t))) (:font (let ((new-font (il:fontcreate value nil nil nil (quote il:display)))) (unless (eq (il:dspfont new-font il:promptwindow) new-font) (setq changed? t)))) (:operation (unless (eq value (il:dspoperation value il:promptwindow)) (setq changed? t))) (:shade (unless (eq value (il:dsptexture value il:promptwindow)) (setq changed? t))) (:title (unless (eql value (il:fetch (il:window il:wtitle) il:of il:promptwindow)) (il:replace (il:window il:wtitle) il:of il:promptwindow il:with value) (setq changed? t)))))) :title (lambda (placement region dsp) (il:dspfill region il:blackshade (quote il:paint) dsp)))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:promptwindow))(il:* il:|;;| "SEdit")(reinstall-advice (quote (il:openwp :in sedit::get-context)) :before (quote ((:first (locally (declare (special il:window)) (un-hide-window il:window))))))(il:readvise (il:openwp :in sedit::get-context))(def-window-type :sedit :recognizer (lambda (window) (il:eqmemb (quote sedit::closefn) (il:windowprop window (quote il:closefn)))) :title "SEdit")(il:* il:|;;| "File Browser")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:filebrowser)) (il:eval (il:sysreclook1 (quote il:filebrowser))))(or (il:reclook (quote il:tablebrowser)) (il:eval (il:sysreclook1 (quote il:tablebrowser)))))(def-window-type :file-browser :dependencies (:table-browser) :recognizer (lambda (window) (il:type? il:filebrowser (il:windowprop window (quote il:filebrowser)))) :abstracter (lambda (window) (let ((fb (il:windowprop window (quote il:filebrowser)))) (list :region (externalize-region (window-region window)) :pattern (il:fetch (il:filebrowser il:pattern) il:of fb) :info (il:fetch (il:filebrowser il:infomenuchoices) il:of fb)))) :reconstituter (lambda (props) (let ((window (il:filebrowser (getf props :pattern "*") (getf props :info) (list (quote il:region) (internalize-region (getf props :region)))))) (il:* il:|;;| "wait for FB to recompute") (il:block) (il:with.monitor (il:fetch (il:filebrowser il:fblock) il:of (il:windowprop window (quote il:filebrowser))) window))) :title "FB" :files (il:filebrowser))(def-window-type :table-browser :recognizer (lambda (window) (il:type? il:tablebrowser (il:windowprop window (quote il:tablebrowser)))))(il:* il:|;;| "Sketch")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:sketch)) (il:loaddef (quote il:sketch) (quote il:records) (quote il:sketch))))(def-window-type :sketch :recognizer (lambda (w) (il:windowprop w (quote il:sketch))) :abstracter (lambda (w) (list :file (il:fetch (il:sketch il:sketchname) il:of (il:windowprop w (quote il:sketch))) :region (externalize-region (window-region w)))) :reconstituter (lambda (data) (when (fboundp (quote il:sketch)) (il:sketch (getf data :file) (il:createw (internalize-region (getf data :region (list 0 0 500 500))) "Sketch")))) :title "Sketch")(il:* il:|;;| "Logo Window")(def-window-type :logo-window :recognizer (lambda (window) (eq (il:windowprop window (quote type)) (quote il:logow))) :abstracter (lambda (window) (il:windowprop window (quote abstraction))) :reconstituter (lambda (abstraction) (il:logow (getf abstraction :string) nil (getf abstraction :title) (getf abstraction :title-location))) :title (lambda (placement region dsp) (print-pep-title-string "Envos" region dsp :no-title-bar? t)))(reinstall-advice (quote il:logow) :after (quote ((:last (il:windowprop il:!value (quote abstraction) (il:bquote ((il:\\\,@ (when string (il:bquote (:string (il:\\\, string))))) (il:\\\,@ (when il:title (il:bquote (:title (il:\\\, il:title))))) (il:\\\,@ (when il:title-location (il:bquote (:title-location (il:\\\, il:title-location))))))))))))(il:readvise il:logow)(il:* il:|;;| "PSW")(def-window-type :psw :recognizer (lambda (window) (declare (global il:process.status.window)) (eq window il:process.status.window)) :title (lambda (placement region dsp) (print-pep-title-string "PSW" region dsp :no-title-bar? t)))(il:putprops il:rooms-medley-window-types il:copyright ("Xerox Corporation" 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop