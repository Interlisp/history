(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 1-Nov-88 14:00:11" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-D.;4| 11017        il:|changes| il:|to:|  (il:functions get-message-stream) (il:vars il:rooms-dcoms)      il:|previous| il:|date:| " 1-Nov-88 13:10:42" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-D.;3|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-dcoms)(il:rpaqq il:rooms-dcoms ((il:* il:|;;| "Rooms' interface to Interlisp-D window system") (file-environments il:rooms-d) (il:p (export (quote (*who-line-entry*)))) (il:types bitmap font texture) (il:* il:\; "windows") (il:functions move-window shape-window open-window close-window) (il:functions window-region main-window window-title window-visible-p) (il:* il:\; "regions") (il:structures region) (il:functions (il:* il:\; " positions") make-position position-x position-y get-position) (il:functions (il:* il:\; "icons") shrink-window expand-window icon? shrunken? icon-position window-position window-icon delete-window-icon) (il:* il:\; "user interface") (il:functions menu prompt-user confirm notify-user get-message-stream select-window select-baggage externalize-font) (il:functions (il:* il:\; "keyboard interpretation") (il:* il:|;;| "these have gotten out of control.  it might be worth converting these to one function which returns a keyword naming the selected operation.  EDITCALLERS, anyone? ") copy-key-down-p help-key-down-p delete-key-down-p edit-key-down-p move-key-down-p expand-key-down-p) (il:coms (il:* il:|;;| "add a lafite form for bug reports") (il:functions make-rooms-support-form) (il:variables il:roomssupport) (il:addvars (il:lafitespecialforms ("Rooms Report" (il:function make-rooms-support-form) "A form to report a Rooms bug or suggestion"))) (il:p (setq il:lafiteformsmenu nil)) (il:* il:|;;| "provide a who line entry") (il:variables *who-line-entry*) (il:p (when (boundp (quote il:*who-line-entry-registry*)) (pushnew *who-line-entry* il:*who-line-entry-registry* :test (quote equal) :key (quote car))))) (il:globalvars il:promptwindow il:crosshairs il:windowbackgroundshade il:wholescreen il:lafitespecialforms il:lafiteformsmenu il:defaulticonfn il:*who-line-entry-registry*)))(il:* il:|;;| "Rooms' interface to Interlisp-D window system")(define-file-environment il:rooms-d :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (*who-line-entry*)))(deftype bitmap nil (il:bquote (satisfies il:bitmapp)))(deftype font nil (il:bquote (satisfies il:fontp)))(deftype texture nil (il:bquote (satisfies il:texturep)))(il:* il:\; "windows")(defun move-window (window pos &optional (current-region (window-region window))) (unless (il:eqmemb (quote il:don\'t) (il:windowprop window (quote il:movefn))) (let ((current-main-window-region (il:windowprop window (quote il:region)))) (il:* il:|;;| "have to compensate for (possible) windows attached at left or bottom.  IL:SHAPEW does this for us, but not IL:MOVEW...") (il:movew window (+ (position-x pos) (- (region-left current-main-window-region) (region-left current-region))) (+ (position-y pos) (- (region-bottom current-main-window-region) (region-bottom current-region)))))))(defun shape-window (window desired-region &key (current-region (window-region window)) no-shape) (il:* il:|;;| "open up IL:SHAPEW a bit") (multiple-value-bind (value condition) (ignore-errors (if (or (il:* il:|;;| "if we don't really need to reshape") (and (= (region-width desired-region) (region-width current-region)) (= (region-height desired-region) (region-height current-region))) (il:* il:|;;| "or we're not supposed to reshape") (il:\\userfnisdon\'t (il:windowprop window (quote il:reshapefn))) no-shape) (il:* il:|;;| "then just move") (move-window window (make-position (region-left desired-region) (region-bottom desired-region)) current-region) (il:* il:|;;| "otherwise do the reshape") (funcall (or (il:windowprop window (quote il:doshapefn)) (quote il:shapew1)) window (copy-region desired-region)))) (when condition (notify-user "Error reshaping ~A: ~A" window condition)) value))(defmacro open-window (window) (il:bquote (il:openw (il:\\\, window))))(defmacro close-window (window) (il:bquote (il:closew (il:\\\, window))))(defmacro window-region (window) (il:bquote (il:windowregion (il:\\\, window))))(defmacro main-window (window) (il:bquote (let ((window (il:\\\, window))) (or (il:windowprop window (quote il:iconfor)) (il:mainwindow window t)))))(defmacro window-title (window) (il:bquote (il:windowprop (il:\\\, window) (quote il:title))))(defun window-visible-p (window) (and (il:openwp window) (il:regionsintersectp (window-region window) il:wholescreen)))(il:* il:\; "regions")(defstruct (region (:type list)) (il:* il:|;;;| "overlay onto an Interlisp-D region, so we don't have to use il:fetch cruft.") left bottom width height)(defmacro make-position (x y) (il:bquote (cons (il:\\\, x) (il:\\\, y))))(defmacro position-x (pos) (il:bquote (car (il:\\\, pos))))(defmacro position-y (pos) (il:bquote (cdr (il:\\\, pos))))(defun get-position (message &rest message-args) (apply (function notify-user) message message-args) (il:getposition))(defmacro shrink-window (window pos) (il:bquote (il:shrinkw (il:\\\, window) nil (il:\\\, pos))))(defun expand-window (window) (il:bquote (il:expandw (window-icon (il:\\\, window)))))(defmacro icon? (window) (il:bquote (il:windowprop (il:\\\, window) (quote il:iconfor))))(defun shrunken? (window) (il:eqmemb (il:function il:closeiconwindow) (il:windowprop window (quote il:openfn))))(defun icon-position (window) (let ((icon-window (window-icon window))) (when icon-window (window-position icon-window))))(defun window-position (window) (let ((region (window-region window))) (make-position (region-left region) (region-bottom region))))(defmacro window-icon (window) (il:bquote (il:windowprop (il:\\\, window) (quote il:iconwindow))))(defun delete-window-icon (window) (il:* il:|;;;| "delete the icon for WINDOW, if any.  We know WINDOW is expanded.") (il:windowprop window (quote il:iconwindow) nil) (il:windowprop window (quote il:iconposition) nil))(il:* il:\; "user interface")(defun menu (items &optional title message &rest message-args) (when message (apply (function notify-user) message message-args)) (il:menu (il:create il:menu il:items il:_ items il:title il:_ title il:centerflg il:_ t)))(defun prompt-user (prompt &optional message &rest message-args) (il:* il:|;;;| "prompt the user for a string.  input should end when CR is typed.") (when message (apply (function notify-user) message message-args)) (il:resetform (il:ttydisplaystream (get-message-stream)) (il:promptforword prompt nil nil nil nil (quote il:tty) (il:charcode (il:eol)))))(defun confirm (&optional message &rest message-args) (il:* il:|;;| "make sure prompt-window is un-hidden") (let ((stream (get-message-stream))) (il:* il:|;;| "use IL:MOUSECONFIRM") (prog2 (terpri stream) (il:mouseconfirm (when message (apply (function format) nil message message-args)) nil stream t) (terpri stream))))(defun notify-user (format-string &rest args) (let ((stream (get-message-stream))) (terpri stream) (apply (function format) stream format-string args) (terpri stream)))(defun get-message-stream nil (il:* il:|;;;| "return an output stream for user messages ") (when (%window-hidden? il:promptwindow) (un-hide-window il:promptwindow)) (il:getstream il:promptwindow))(defun select-window (&optional message &rest message-args) (il:* il:|;;;| "get the user to select a window on the screen") (when message (apply (function notify-user) message message-args)) (il:resetform (il:cursor il:crosshairs) (let (window) (loop (when (il:mousestate (or il:left il:middle)) (return (let ((window (il:whichw))) (when window (unwind-protect (progn (il:invertw window) (loop (when (not (il:mousestate (or il:left il:middle))) (return (let ((new-window (il:whichw))) (when (and new-window (eq (main-window new-window) (main-window window))) (main-window window))))))) (il:invertw window))))))))))(defun select-baggage nil (il:* il:|;;;| "returns a list of selected placements.") (il:* il:|;;;| "we presume UPDATE-PLACEMENTS has just been called & won't be called again by GO-TO-ROOM.") (let (window placement room baggage) (loop (let ((op (cond ((move-key-down-p) :move) ((copy-key-down-p) :copy) (t (return))))) (setq window (select-window "Select placement to ~A" op)) (unless window (return)) (multiple-value-setq (placement room) (find-placement window)) (when placement (case op (:move (delete-placement placement room)) (:copy (setq placement (copy-placement-internal placement)))) (pushnew placement baggage :key (function placement-window) :test (quote eq))))) baggage))(defun externalize-font (font) (list (il:fontprop font (quote il:family)) (il:fontprop font (quote il:size)) (il:fontprop font (quote il:face))))(defmacro copy-key-down-p nil (il:bquote (or (il:keydownp (quote il:copy)) (and (il:shiftdownp (quote il:shift)) (not (or (il:shiftdownp (quote il:ctrl)) (il:shiftdownp (quote il:meta))))))))(defmacro help-key-down-p nil (il:bquote (or (il:keydownp (quote help)) (il:keydownp (quote il:dbk-help)))))(defmacro delete-key-down-p nil (il:bquote (or (il:keydownp (quote il:delete)) (and (il:shiftdownp (quote il:ctrl)) (il:shiftdownp (quote il:meta)) (not (il:shiftdownp (quote il:shift)))))))(defmacro edit-key-down-p nil (il:bquote (and (il:shiftdownp (quote il:ctrl)) (not (or (il:shiftdownp (quote il:shift)) (il:shiftdownp (quote il:meta)))))))(defmacro move-key-down-p nil (il:bquote (or (il:keydownp (quote il:move)) (and (il:shiftdownp (quote il:ctrl)) (il:shiftdownp (quote il:shift)) (not (il:shiftdownp (quote il:meta)))))))(defmacro expand-key-down-p nil (il:bquote (or (il:keydownp (quote il:expand)) (il:keydownp (quote il:escape)))))(il:* il:|;;| "add a lafite form for bug reports")(defun make-rooms-support-form nil (il:makexxxsupportform "Rooms" il:roomssupport *rooms-system-date*))(defglobalvar il:roomssupport "RoomsSupport^.PA")(il:addtovar il:lafitespecialforms ("Rooms Report" (il:function make-rooms-support-form) "A form to report a Rooms bug or suggestion"))(setq il:lafiteformsmenu nil)(il:* il:|;;| "provide a who line entry")(defparameter *who-line-entry* (il:bquote ("Room:" (and *current-room* (room-name *current-room*)) 10 (il:\\\, (function (lambda nil (interactive-go-to-room :allow-new? t)))))))(when (boundp (quote il:*who-line-entry-registry*)) (pushnew *who-line-entry* il:*who-line-entry-registry* :test (quote equal) :key (quote car)))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:promptwindow il:crosshairs il:windowbackgroundshade il:wholescreen il:lafitespecialforms il:lafiteformsmenu il:defaulticonfn il:*who-line-entry-registry*))(il:putprops il:rooms-d il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop