(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 1-Nov-88 14:52:49" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-BIOS.;2| 5117         il:|changes| il:|to:|  (il:functions bio-putfn)      il:|previous| il:|date:| " 7-Sep-88 12:05:08" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-BIOS.;1|); Copyright (c) 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-bioscoms)(il:rpaqq il:rooms-bioscoms ((il:* il:|;;| "button image objects") (il:files (il:sysload) il:rooms-buttons) (file-environments il:rooms-bios) (il:p (export (quote (make-bio *bio-selection-border*)) "ROOMS")) (il:variables *bio-selection-border*) (il:functions make-bio bio-button bio-copyfn bio-imageboxfn bio-putfn il:bio-getfn bio-displayfn bio-buttoneventinfn bio-buttoneventinfn-internal) (il:variables *bio-imagefns*)))(il:* il:|;;| "button image objects")(il:filesload (il:sysload) il:rooms-buttons)(define-file-environment il:rooms-bios :compiler :compile-file :package "ROOMS" :readtable "XCL")(export (quote (make-bio *bio-selection-border*)) "ROOMS")(defglobalvar *bio-selection-border* 4 "Width of mouse-insensitive strip around outside edge of button image objects")(defun make-bio (button) (check-type button button) (il:imageobjcreate button *bio-imagefns*))(defmacro bio-button (bio) (il:bquote (il:imageobjprop (il:\\\, bio) (quote il:objectdatum))))(defun bio-copyfn (bio source destination) (make-bio (copy-button (bio-button bio))))(defun bio-imageboxfn (bio image-stream current-x right-margin) (let ((button (bio-button bio)) (scale (il:dspscale nil image-stream))) (update-button button) (il:|create| il:imagebox il:xsize il:_ (* (button-width button) scale) il:ysize il:_ (* (button-height button) scale) il:ydesc il:_ (* (il:fontdescent (text-font (button-text button))) scale) il:xkern il:_ 0)))(defun bio-putfn (bio file-stream) (let ((*print-pretty* nil) (*print-array* t) (*print-structure* t) (*package* (find-package "USER")) (*print-base* 10) (*readtable* (il:find-readtable "LISP"))) (print (externalize-button (bio-button bio)) file-stream)))(defun il:bio-getfn (file-stream) (il:* il:|;;| "TEdit presumes GETFNS are in package IL.  sigh.") (make-bio (apply (function make-button) (let ((*package* (find-package "USER")) (*read-base* 10) (*readtable* (il:find-readtable "LISP"))) (read file-stream)))))(defun bio-displayfn (bio image-stream image-stream-type host-stream) (let ((button (bio-button bio))) (update-button button) (let* ((width (button-width button)) (height (button-height button)) (scratch (il:dspcreate (il:bitmapcreate width height)))) (il:* il:|;;| "this rather crude approach solves lots of scaling & offset problems") (display-button button scratch :no-update t :width width :height height) (il:bitblt scratch 0 0 image-stream (il:dspxposition nil image-stream) (il:* il:|;;| "adjust for descent") (- (il:dspyposition nil image-stream) (* (il:fontdescent (text-font (button-text button))) (il:dspscale nil image-stream)))))))(defun bio-buttoneventinfn (bio dsp) (let ((button (bio-button bio))) (if (update-button button) (quote il:changed) (let ((x-offset (il:dspxoffset nil dsp)) (y-offset (il:dspyoffset nil dsp)) (clipping-region (il:dspclippingregion nil dsp))) (il:* il:|;;| "applications don't always adjust coordinates so we're at 0,0 but they are good about setting the clipping region.  we move 0,0 to the bottom-left of the clipping region.") (unwind-protect (progn (il:dspxoffset (+ x-offset (region-left clipping-region)) dsp) (il:dspyoffset (+ y-offset (region-bottom clipping-region)) dsp) (il:dspclippingregion (il:createregion 0 0 (region-width clipping-region) (region-height clipping-region)) dsp) (when (and (il:lastmousestate (or il:left il:middle)) (il:insidep (make-region :left *bio-selection-border* :bottom *bio-selection-border* :width (- (button-width button) (* *bio-selection-border* 2)) :height (- (button-height button) (* *bio-selection-border* 2))) (il:lastmousex dsp) (il:lastmousey dsp))) (bio-buttoneventinfn-internal bio dsp))) (il:dspxoffset x-offset dsp) (il:dspyoffset y-offset dsp) (il:dspclippingregion clipping-region dsp))))))(defun bio-buttoneventinfn-internal (bio dsp) (let ((button (bio-button bio))) (if (and (il:lastmousestate (il:only il:middle)) (not (button-prop button :protected?))) (case (menu (quote (("Edit Button" :edit "Edit this button") ("Copy to Screen" :copy "Copy this button to the screen ")))) (:edit (let ((new-button (edit-button button))) (unless (eq new-button button) (il:imageobjprop bio (quote il:objectdatum) new-button) (quote il:changed)))) (:copy (make-button-window (copy-button button)) nil)) (when (and (button-track-mouse button dsp) (update-button button)) (il:* il:|;;| "button's action caused it to need redisplay") (quote il:changed)))))(defglobalparameter *bio-imagefns* (il:imagefnscreate (quote bio-displayfn) (quote bio-imageboxfn) (quote bio-putfn) (quote il:bio-getfn) (quote bio-copyfn) (quote bio-buttoneventinfn)))(il:putprops il:rooms-bios il:copyright ("Xerox Corporation" 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop