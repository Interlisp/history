(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (DEFPACKAGE "ROOMS" (USE "LISP" "XCL") (SHADOW CLROOM)))(il:filecreated " 1-Nov-88 12:11:29" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-BUTTONS.;2| 41804        il:|changes| il:|to:|  (file-environments il:rooms-buttons) (il:vars il:rooms-buttonscoms) (il:functions make-button externalize-button bw-buttoneventfn) (il:structures button-type) (il:variables *screen-changed-functions*)      il:|previous| il:|date:| "21-Jul-88 16:42:06" il:|{EG:PARC:XEROX}<CUTTING>ROOMS>ROOMS-BUTTONS.;1|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-buttonscoms)(il:rpaqq il:rooms-buttonscoms ((file-environments il:rooms-buttons) (il:files (il:sysload) il:rooms-d il:rooms-text il:rooms-bios) (il:p (export (quote (button *default-button-type* def-button-type make-button button-prop *button-help-delay* *button-selection-shade* make-button-window set-button-window-text-string with-button *default-button-shadows* make-east-west-bitmap make-north-south-bitmap make-nsew-bitmap)) "ROOMS")) (il:coms (il:* il:\; "button types") (il:define-types il:button-types) (il:structures button-type) (il:variables *button-types* *default-button-type*) (il:functions def-button-type button-type-prop select-button-type button-type-named) (il:sedit-formats def-button-type)) (il:coms (il:* il:\; "the button object") (il:structures button updated-button margins) (il:variables *default-button-shadows*) (il:functions (il:* il:\; "core code") make-button copy-button display-button update-button set-button-text-string button-prop) (il:functions (il:* il:\; "text") set-button-text-string compute-button-text-position button-text-x-coord button-text-y-coord text-from-text-form) (il:functions (il:* il:\; "mouse code") button-track-mouse perform-button-action edit-button button-copy-selected shade-button print-button-help)) (il:coms (il:* il:\; "button windows") (il:variables *button-help-delay* *button-selection-shade*) (il:functions make-button-window bw-repaintfn bw-totopfn bw-buttoneventfn bw-buttoneventfn-internal set-button-window-text-string maybe-resize-button-window bw-screen-changed-function) (il:variables (il:* il:|;;| "this variable also on ROOMS-CORE, but here so we can be loaded w/o loading all of rooms") *screen-changed-functions*) (il:p (pushnew (quote bw-screen-changed-function) *screen-changed-functions*))) (il:coms (il:* il:\; "button bitmaps") (il:structures north-south-bitmap east-west-bitmap nsew-bitmap) (il:functions display-button-image display-button-mask button-width button-height button-bitmap-bitblt ew-bitblt ns-bitblt nsew-bitblt paint-region)) (il:* il:\; "externalization") (il:functions edit-button-window externalize-button externalize-font) (il:functions with-button) (il:button-types :door :shadowed :transparent :porthole :ark :round-ark :stretchy-ark :stretchy-round-ark) (il:globalvars il:menuheldwait)))(define-file-environment il:rooms-buttons :compiler :compile-file :package (defpackage "ROOMS" (:use "LISP" "XCL") (:shadow cl:room)) :readtable "XCL")(il:filesload (il:sysload) il:rooms-d il:rooms-text il:rooms-bios)(export (quote (button *default-button-type* def-button-type make-button button-prop *button-help-delay* *button-selection-shade* make-button-window set-button-window-text-string with-button *default-button-shadows* make-east-west-bitmap make-north-south-bitmap make-nsew-bitmap)) "ROOMS")(il:* il:\; "button types")(def-define-type il:button-types "Button types" :undefiner (lambda (name) (remhash name *button-types*)))(defstruct button-type name (il:* il:|;;| "name of the type") image-bitmap (il:* il:|;;| "the background for the text") mask-bitmap (il:* il:|;;| "to allow non-rectangular buttons.  should be a bitmap the same size as IMAGE-BITMAP.  designates the set of bits of IMAGE-BITMAP which are the region to be displayed. ") (margins (make-margins)) (il:* il:|;;| "a MARGINS record.") props)(defglobalvar *button-types* (make-hash-table :test (quote eq)))(defparameter *default-button-type* :shadowed)(defdefiner def-button-type il:button-types (name &rest rest-keys &key image mask (margins (make-margins)) &allow-other-keys) (il:bquote (setf (gethash (quote (il:\\\, name)) *button-types*) (make-button-type :name (quote (il:\\\, name)) :image-bitmap (quote (il:\\\, image)) :mask-bitmap (quote (il:\\\, mask)) :margins (quote (il:\\\, margins)) :props (quote (il:\\\, (let ((props (copy-list rest-keys))) (dolist (keyword (quote (:image :mask :margins))) (remf props keyword)) props)))))))(defmacro button-type-prop (button-type prop &optional (new-value nil new-value-supplied)) (if new-value-supplied (il:bquote (setf (getf (button-type-props (il:\\\, button-type)) (il:\\\, prop)) (il:\\\, new-value))) (il:bquote (getf (button-type-props (il:\\\, button-type)) (il:\\\, prop)))))(defun select-button-type (&optional (reason "Select Button Type")) (il:* il:|;;| "returns the name of a button type or NIL") (menu (with-collection (dolist (type (sort (with-collection (maphash (function (lambda (name type) (collect type))) *button-types*)) (function string-lessp) :key (function button-type-name))) (let ((name (button-type-name type))) (collect (il:bquote ((il:\\\, (or (button-type-prop type :sample-image) (il:* il:|;;| "cache sample images on button type") (let* ((button (make-button :type name :text (let ((*print-case* :capitalize) (*readtable* (il:find-readtable "XCL"))) (princ-to-string name)))) (image (il:bitmapcreate (button-width button) (button-height button)))) (display-button button image) (button-type-prop type :sample-image image) image))) (quote (il:\\\, name)))))))) reason))(defmacro button-type-named (type-name) (il:bquote (gethash (il:\\\, type-name) *button-types*)))(sedit:def-list-format def-button-type :args (nil :keyword nil) :indent (1))(il:* il:\; "the button object")(defstruct (button (:constructor make-button-internal) (:print-function (lambda (button stream depth) (let ((type (button-type button)) (text (button-text button))) (format stream "#<~A button ~S>" (typecase type (button-type (button-type-name type)) (t type)) (typecase (button-text button) (text (text-string text)) (t text)))))) (:copier copy-button-internal)) (type *default-button-type* :type button-type) (il:* il:|;;| "a BUTTON-TYPE structure") (text nil :type text) (il:* il:|;;| "a TEXT structure") (action nil :type list) (il:* il:|;;| "form to EVAL when this button is pressed") (help-string nil :type string) (il:* il:|;;| "printed when button is held") (inverted? nil :type (member t nil)) (il:* il:|;;| "if true, button image will be inverted") (%selected? nil :type (member t nil)) (il:* il:|;;| "non-nil when button appears selected") %mask %image (il:* il:|;;| "caches used by redisplay") (props nil :type list))(defstruct (updated-button (:include button) (:print-function (lambda (button stream depth) (format stream "#<Updated ~A button ~S>" (let ((type (button-type button))) (typecase type (button-type (button-type-name type)) (t type))) (updated-button-text-form button))))) (text-form nil :type t))(defstruct (margins (:type list)) (il:* il:|;;;| "defines the region within a button intended for the text.  We cannot use a region, as buttons may be strechable.") (left 0 :type integer) (bottom 0 :type integer) (right 0 :type integer) (top 0 :type integer))(defvar *default-button-shadows* nil "Default for :SHADOWS arg to MAKE-BUTTON.Overridden when button type has default shadows.")(defun make-button (&rest rest-keys &key (type *default-button-type*) (text nil text-provided) (text-form nil text-form-provided) (shadows nil shadows-provided) action help font inverted? &allow-other-keys) (il:* il:|;;;| "make & return a button.  use MAKE-BUTTON-WINDOW to put this button in a window.") (let* ((button-type (or (if (button-type-p type) type) (button-type-named type) (error "No button type named ~S exists." type))) (text (make-text :string (if (and (not text-provided) text-form-provided) (text-from-text-form text-form) text) :alignment :center :font (if font (il:fontcreate font) *default-text-font*) :shadows (if shadows-provided shadows (il:* il:|;;| "default shadows per button type") (getf (button-type-props button-type) :default-shadows *default-button-shadows*)))) (button (apply (if text-form-provided (function make-updated-button) (function make-button-internal)) :type button-type :text text :action action :help-string help :inverted? inverted? :props (let ((props (copy-list rest-keys))) (dolist (keyword (quote (:type :text :action :help :font :shadows :text-form :inverted?))) (remf props keyword)) props) (when text-form-provided (il:bquote (:text-form (il:\\\, text-form))))))) (compute-button-text-position button) button))(defun copy-button (old) (let ((new (etypecase old (updated-button (copy-updated-button old)) (button (copy-button-internal old))))) (setf (button-text new) (copy-text (button-text old))) new))(defun display-button (button dsp &key no-update width height) (when (and (null no-update) (or width height)) (error "Illegal to pass WIDTH & HEIGHT unless NO-UPDATE specified")) (unless no-update (update-button button)) (let* ((width (or width (button-width button))) (height (or height (button-height button))) (type (button-type button))) (when (or (button-type-mask-bitmap type) (not (button-type-image-bitmap type))) (il:* il:|;;| "erase what's in the mask (or if button is transparent)") (display-button-mask button dsp width height)) (il:* il:|;;| "paint the image on") (display-button-image button dsp width height) (when (button-%selected? button) (il:* il:|;;| "rationalize the selection") (setf (button-%selected? button) nil) (shade-button button dsp))))(defun update-button (button dsp) (il:* il:|;;;| "should really be called BUTTON-NEEDS-REDISPLAY?") (when (updated-button-p button) (il:* il:|;;| "set the text string of WINDOW's BUTTON to the value of its TEXT-FORM.") (let ((new-text-string (text-from-text-form (updated-button-text-form button) dsp button))) (unless (equal new-text-string (text-string (button-text button))) (il:* il:|;;| "optimization: don't bother if string is same") (set-button-text-string button new-text-string) (il:* il:|;;| "return T if things have changed") (return-from update-button t)))) (il:* il:|;;| "a null image cache means button needs redisplay") (null (button-%image button)))(defun set-button-text-string (button string) (il:* il:|;;;| "does everything but redisplay") (set-text-string (button-text button) string) (compute-button-text-position button) (il:* il:|;;| "clear caches") (setf (button-%mask button) nil) (setf (button-%image button) nil))(defmacro button-prop (button prop &optional (new-value nil new-value-supplied)) (if new-value-supplied (il:bquote (setf (getf (button-props (il:\\\, button)) (il:\\\, prop)) (il:\\\, new-value))) (il:bquote (getf (button-props (il:\\\, button)) (il:\\\, prop)))))(defun set-button-text-string (button string) (il:* il:|;;;| "does everything but redisplay") (set-text-string (button-text button) string) (compute-button-text-position button) (il:* il:|;;| "clear caches") (setf (button-%mask button) nil) (setf (button-%image button) nil))(defun compute-button-text-position (button) (setf (text-position (button-text button)) (make-position (button-text-x-coord button) (button-text-y-coord button))))(defun button-text-x-coord (button) (let ((text (button-text button)) (margins (button-type-margins (button-type button)))) (ecase (text-alignment text) (:center (+ (margins-left margins) (floor (max (text-%width text) (- (button-width button) (margins-left margins) (margins-right margins))) 2))) ((:left-bottom :left-top) (margins-left margins)) ((:right-bottom :right-top) (margins-right margins)))))(defun button-text-y-coord (button) (let ((text (button-text button)) (margins (button-type-margins (button-type button)))) (ecase (text-alignment text) (:center (+ (margins-bottom margins) (floor (max (text-%height text) (- (button-height button) (margins-bottom margins) (margins-top margins))) 2))) ((:left-bottom :right-bottom) (margins-bottom margins)) ((:left-top :right-top) (margins-top margins)))))(defun text-from-text-form (text-form &optional dsp button) (il:* il:|;;;| "return the text string for an updated button in WINDOW.") (typecase text-form (list (eval text-form)) (il:* il:|;;| "note: when an updated button is first created this is called with WINDOW=NIL.  text form functions are required to handle this condition gracefully. ") (t (funcall text-form dsp button))))(defun button-track-mouse (button dsp) (il:* il:|;;;| "a mouse key has gone down in BUTTON.  watch the mouse with button shaded 'til either the key goes up or the mouse leaves BUTTON.  if key went up then perform button action & return true.   ") (let ((region (make-region :left 0 :bottom 0 :width (button-width button) :height (button-height button))) (timer (il:setuptimer *button-help-delay*))) (unwind-protect (progn (shade-button button dsp :region region) (loop (il:getmousestate) (unless (il:insidep region (il:lastmousex dsp) (il:lastmousey dsp)) (return)) (unless (il:lastmousestate (or il:left il:middle)) (perform-button-action button dsp) (il:* il:|;;| "return true if we performed action") (return t)) (when (and timer (il:timerexpired? timer)) (setq timer nil) (print-button-help button)))) (shade-button button dsp :region region :deselect t))))(defun perform-button-action (button dsp) (let ((action (button-action button))) (typecase action (list (eval action)) (t (funcall action dsp button)))))(defun edit-button (button) (il:allow.button.events) (let* ((external-form (externalize-button button t)) (copy (copy-tree external-form)) (edited (with-profile (find-profile "XCL") (il:edite external-form nil (text-string (button-text button)) nil nil :close-on-completion)))) (if (equal edited copy) button (apply (function make-button) edited))))(defun button-copy-selected (button) (if (fboundp (quote make-bio)) (il:* il:|;;| "if ROOMS-BIO is loaded") (let* ((destination (il:wfromds (il:process.tty (il:tty.process)))) (copyinsertfn (and destination (il:windowprop destination (quote il:copyinsertfn))))) (il:* il:|;;| "fake IL:COPYINSERT, but instead of punting to IL:BKSYSBUF punt to copying the window") (if copyinsertfn (funcall copyinsertfn (make-bio (copy-button button)) destination) (make-button-window (copy-button button)))) (make-button-window (copy-button button))))(defun shade-button (button dsp &key (region (make-region :left 0 :bottom 0 :width (button-width button) :height (button-height button))) deselect) (il:* il:|;;;| "called when mouse key down in BUTTON.") (il:* il:|;;| "DESELECT? tells the intention of the call.") (il:* il:|;;| "see also DISPLAY-BUTTON") (let ((mask (button-%mask button)) (selected? (button-%selected? button))) (when (eq deselect selected?) (il:* il:|;;| "invert MASK with *BUTTON-SELECTION-SHADE*") (il:bitblt mask nil nil dsp 0 0 (region-width region) (region-height region) (if (null mask) (quote il:texture) (quote il:merge)) (quote il:invert) *button-selection-shade*) (il:* il:|;;| "toggle SELECTED? bit") (setf (button-%selected? button) (not selected?)))))(defun print-button-help (button) (notify-user (or (button-help-string button) "No help provided for this button.")))(il:* il:\; "button windows")(defglobalvar *button-help-delay* il:menuheldwait)(defparameter *button-selection-shade* 32768)(defun make-button-window (button &optional position) (let* ((width (button-width button)) (height (button-height button)) (position (or (il:positionp position) (il:getboxposition width height))) (window (il:createw (il:createregion (position-x position) (position-y position) width height) nil 0))) (il:windowprop window (quote button) button) (il:windowprop window (quote il:buttoneventfn) (quote bw-buttoneventfn)) (il:windowprop window (quote il:aftermovefn) (quote bw-repaintfn)) (il:windowprop window (quote il:openfn) (quote bw-repaintfn)) (il:windowprop window (quote il:totopfn) (quote bw-totopfn)) (il:windowprop window (quote il:repaintfn) (quote bw-repaintfn)) (il:windowprop window (quote il:reshapefn) (quote il:don\'t)) (il:windowprop window (quote il:shrinkfn) (quote il:don\'t)) (when (button-prop button :protected?) (il:windowprop window (quote il:rightbuttonfn) (quote il:totopw))) (bw-repaintfn window) window))(defun bw-repaintfn (window &rest rest &key no-update) (declare (ignore rest)) (il:totopw window t) (let* ((button (il:windowprop window (quote button))) (dsp (il:windowprop window (quote il:dsp))) (type (button-type button))) (unless no-update (when (updated-button-p button) (update-button button))) (let ((width (button-width button)) (height (button-height button))) (maybe-resize-button-window window button width height) (if (and (button-type-image-bitmap type) (not (button-type-mask-bitmap type))) (il:* il:|;;| "OK to clear - don't care what's behind ") (il:clearw window) (il:* il:|;;| "copy what's behind the window through ") (il:bitblt (il:windowprop window (quote il:imagecovered)) 0 0 dsp 0 0 width height (quote il:input) (quote il:replace))) (display-button button dsp :no-update t :width width :height height))))(defun bw-totopfn (window) (il:* il:|;;| "called when window is un-hidden or brought to top") (let ((button (il:windowprop window (quote button)))) (when (button-p button) (when (or (il:* il:|;;| "needs redisplay because of update") (update-button button) (il:* il:|;;| "or it has a mask & needs background copied through") (button-type-mask-bitmap (button-type button)) (il:* il:|;;| "or it has no mask and no image, i.e. it's transparent & needs background copied through.") (null (button-type-image-bitmap (button-type button)))) (bw-repaintfn window :no-update t)))))(defun bw-buttoneventfn (window) (let ((button (il:windowprop window (quote button)))) (if (il:mousestate il:middle) (cond ((button-prop button :protected?) (bw-buttoneventfn-internal button window)) ((edit-key-down-p) (edit-button-window button window)) ((copy-key-down-p) (button-copy-selected button)) ((move-key-down-p) (il:movew window)) ((delete-key-down-p) (if (fboundp (quote interactive-close-window)) (interactive-close-window window) (close-window window))) ((help-key-down-p) (print-button-help button)) (t (bw-buttoneventfn-internal button window))) (bw-buttoneventfn-internal button window))))(defun bw-buttoneventfn-internal (window button) (let ((window window) (button button)) (loop (when (button-p button) (il:totopw window) (when (button-track-mouse button window) (when (update-button button) (il:* il:|;;| "button's action caused it to need redisplay") (bw-repaintfn window :no-update t)) (return))) (unless (il:mousestate (or il:left il:middle)) (return)) (setq window (il:whichw)) (setq button (when window (il:windowprop window (quote button)))))))(defun set-button-window-text-string (window string) (il:* il:|;;;| "note: this does everything but the redisplay.") (let ((button (il:windowprop window (quote button)))) (set-button-text-string button string) (maybe-resize-button-window window button)))(defun maybe-resize-button-window (window button &optional (width (button-width button)) (height (button-height button))) (let ((old-region (window-region window))) (unless (and (= width (region-width old-region)) (= height (region-height old-region))) (unwind-protect (progn (il:totopw window t) (il:windowprop window (quote il:reshapefn) (quote il:nill)) (il:shapew1 window (make-region :left (region-left old-region) :bottom (region-bottom old-region) :width width :height height)) (il:* il:|;;| "return true if we shaped") t) (il:windowprop window (quote il:reshapefn) (quote il:don\'t))))))(defun bw-screen-changed-function nil (let ((old-default-font *default-text-font*) (new-default-font (set-default-text-font))) (unless (eq old-default-font new-default-font) (dolist (window (all-windows t)) (let ((button (il:windowprop window (quote button)))) (when (and (button-p button) (eq old-default-font (text-font (button-text button)))) (il:* il:|;;| "upgrade buttons with default font") (setf (text-font (button-text button)) new-default-font) (update-text-caches (button-text button)) (compute-button-text-position button) (il:* il:|;;| "force redisplay") (setf (button-%image button) nil) (setf (button-%mask button) nil)))))))(defglobalvar *screen-changed-functions* (list (quote %internalize-all-placements)))(pushnew (quote bw-screen-changed-function) *screen-changed-functions*)(il:* il:\; "button bitmaps")(defstruct (north-south-bitmap (:conc-name "NS-BITMAP-")) north center south)(defstruct (east-west-bitmap (:conc-name "EW-BITMAP-")) east center west)(defstruct nsew-bitmap north nw ne south sw se east center west)(defun display-button-image (button dsp width height) (let ((cached-image (button-%image button)) (inverted? (button-inverted? button)) (mask? (button-%mask button))) (unless cached-image (setq cached-image (il:bitmapcreate width height)) (let ((type-image (button-type-image-bitmap (button-type button)))) (when type-image (button-bitmap-bitblt type-image cached-image width height))) (display-text (button-text button) cached-image) (setf (button-%image button) cached-image)) (il:bitblt cached-image 0 0 dsp 0 0 width height (if (and inverted? (not mask?)) (quote il:invert) (quote il:source)) (if (and inverted? mask?) (quote il:invert) (quote il:paint)))))(defun display-button-mask (button dsp width height) (let ((cached-mask (button-%mask button))) (unless cached-mask (setq cached-mask (il:bitmapcreate width height)) (let ((type-mask (button-type-mask-bitmap (button-type button)))) (when type-mask (button-bitmap-bitblt type-mask cached-mask width height))) (display-text (button-text button) cached-mask :mask-only t) (setf (button-%mask button) cached-mask)) (il:bitblt cached-mask 0 0 dsp 0 0 width height (quote il:source) (if (button-inverted? button) (quote il:paint) (quote il:erase)))))(defun button-width (button) (let* ((button-type (button-type button)) (margins (button-type-margins button-type)) (bitmap (button-type-image-bitmap button-type)) (text-width (text-%width (button-text button)))) (etypecase bitmap (bitmap (il:bitmapwidth bitmap)) (null text-width) (north-south-bitmap (il:bitmapwidth (ns-bitmap-north bitmap))) ((or nsew-bitmap east-west-bitmap) (let* ((width (+ text-width (margins-left margins) (margins-right margins))) (east-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-east bitmap)) (east-west-bitmap (ew-bitmap-east bitmap))))) (center-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-center bitmap)) (east-west-bitmap (ew-bitmap-center bitmap))))) (west-width (il:bitmapwidth (typecase bitmap (nsew-bitmap (nsew-bitmap-west bitmap)) (east-west-bitmap (ew-bitmap-west bitmap)))))) (il:* il:|;;| "we could use WIDTH directly but we'd rather tile in an even number of CENTER bitmaps, in case it's a pattern that needs to blend with the EAST and WEST.") (max (+ width (- center-width (mod (- width east-width west-width) center-width))) (+ east-width west-width)))))))(defun button-height (button) (let* ((button-type (button-type button)) (margins (button-type-margins button-type)) (bitmap (button-type-image-bitmap button-type)) (text-height (text-%height (button-text button)))) (etypecase bitmap (bitmap (il:bitmapheight bitmap)) (null text-height) (east-west-bitmap (il:bitmapheight (ew-bitmap-east bitmap))) ((or nsew-bitmap north-south-bitmap) (let* ((height (+ text-height (margins-bottom margins) (margins-top margins))) (north-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-north bitmap)) (north-south-bitmap (ns-bitmap-north bitmap))))) (center-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-center bitmap)) (north-south-bitmap (ns-bitmap-center bitmap))))) (south-height (il:bitmapheight (typecase bitmap (nsew-bitmap (nsew-bitmap-south bitmap)) (north-south-bitmap (ns-bitmap-south bitmap)))))) (il:* il:|;;| "we could use HEIGHT directly but we'd rather tile in an even number of CENTER bitmaps, in case it's a pattern that needs to blend with the EAST and WEST.") (max (+ height (- center-height (mod (- height north-height south-height) center-height))) (+ north-height south-height)))))))(defun button-bitmap-bitblt (bitmap destination width height) (etypecase bitmap (bitmap (il:bitblt bitmap 0 0 destination 0 0 width height)) (east-west-bitmap (ew-bitblt (ew-bitmap-west bitmap) (ew-bitmap-center bitmap) (ew-bitmap-east bitmap) destination width 0)) (north-south-bitmap (ns-bitblt (ns-bitmap-south bitmap) (ns-bitmap-center bitmap) (ns-bitmap-north bitmap) destination height 0)) (nsew-bitmap (nsew-bitblt bitmap destination width height))))(defun ew-bitblt (west center east destination width bottom) (let* ((west-width (il:bitmapwidth west)) (center-width (il:bitmapwidth center)) (east-width (il:bitmapwidth east)) (east-left (- width east-width)) (height (il:bitmapheight center))) (il:* il:|;;| "blt the west bitmap down the left ") (il:bitblt west 0 0 destination 0 bottom west-width height) (when (> east-left west-width) (il:* il:|;;| "blt in one copy of center") (il:bitblt center 0 0 destination west-width bottom center-width height) (do* ((width center-width (+ width width)) (left (+ west-width width) (+ west-width width))) ((>= left east-left)) (il:* il:|;;| "blt the center bitmap across the middle") (il:bitblt destination west-width bottom destination left bottom (min width (- east-left left)) height))) (il:* il:|;;| "blt the east bitmap on the right end") (il:bitblt east 0 0 destination east-left bottom east-width height)))(defun ns-bitblt (south center north destination height left &optional (do-ends? t)) (let* ((south-height (il:bitmapheight south)) (center-height (il:bitmapheight center)) (north-height (il:bitmapheight north)) (north-bottom (- height north-height)) (width (il:bitmapwidth center))) (when do-ends? (il:* il:|;;| "blt the south bitmap across the bottom") (il:bitblt south 0 0 destination left 0 width south-height)) (when (> north-bottom south-height) (il:* il:|;;| "blt in one copy of center") (il:bitblt center 0 0 destination left south-height width center-height) (do* ((height center-height (+ height height)) (bottom (+ south-height height) (+ south-height height))) ((>= bottom north-bottom)) (il:* il:|;;| "blt the center bitmap up the middle") (il:bitblt destination left south-height destination left bottom width (min height (- north-bottom bottom))))) (when do-ends? (il:* il:|;;| "blt the north bitmap across the top") (il:bitblt north 0 0 destination left north-bottom width north-height))))(defun nsew-bitblt (nsew-bitmap destination width height) (let* ((sw (nsew-bitmap-sw nsew-bitmap)) (se (nsew-bitmap-se nsew-bitmap)) (nw (nsew-bitmap-nw nsew-bitmap)) (ne (nsew-bitmap-ne nsew-bitmap)) (north-bottom (- height (il:bitmapheight nw))) (east-left (- width (il:bitmapwidth se)))) (il:* il:|;;| "across the bottom") (ew-bitblt sw (nsew-bitmap-south nsew-bitmap) se destination width 0) (il:* il:|;;| "across the top") (ew-bitblt nw (nsew-bitmap-north nsew-bitmap) ne destination width north-bottom) (il:* il:|;;| "up the left") (ns-bitblt sw (nsew-bitmap-west nsew-bitmap) nw destination height 0 nil) (il:* il:|;;| "up the right") (ns-bitblt se (nsew-bitmap-east nsew-bitmap) ne destination height east-left nil) (il:* il:|;;| "tile the center") (paint-region destination (let ((left (il:bitmapwidth sw)) (bottom (il:bitmapheight sw))) (make-region :left left :bottom bottom :width (- east-left left) :height (- north-bottom bottom))) (nsew-bitmap-center nsew-bitmap))))(defun paint-region (destination region shade &optional clipping-region) (il:* il:|;;| "fill REGION of DESTINATION with SHADE") (typecase shade (bitmap (il:* il:|;;| "tile the bitmap within REGION") (let* ((region-left (region-left region)) (region-bottom (region-bottom region)) (region-width (region-width region)) (region-height (region-height region)) (bitmap-width (il:bitmapwidth shade)) (bitmap-height (il:bitmapheight shade)) (region-right (+ region-left region-width)) (region-top (+ region-bottom region-height)) (clipping-region (if clipping-region (il:intersectregions clipping-region region) region))) (il:* il:|;;| "blt in one copy in lower left corner") (il:bitblt shade 0 0 destination region-left region-bottom bitmap-width bitmap-height nil nil nil clipping-region) (il:* il:|;;| "blt across bottom, doubling size each time") (let ((left bitmap-width)) (loop (when (>= left region-right) (return)) (il:bitblt destination region-left region-bottom destination (+ left region-left) region-bottom left bitmap-height nil nil nil clipping-region) (setf left (+ left left)))) (il:* il:|;;| "blt up, doubling size each time") (let ((bottom bitmap-height)) (loop (when (>= bottom region-top) (return)) (il:bitblt destination region-left region-bottom destination region-left (+ region-bottom bottom) region-width bottom nil nil nil clipping-region) (setf bottom (+ bottom bottom)))))) (texture (il:* il:|;;| "squirt the texture onto the screen within REGION") (il:bltshade shade destination (region-left region) (region-bottom region) (region-width region) (region-height region) nil clipping-region))))(il:* il:\; "externalization")(defun edit-button-window (button window) (unless (il:windowprop window (quote button-being-edited)) (unwind-protect (progn (il:windowprop window (quote button-being-edited) t) (let ((new-button (edit-button button))) (unless (eq button new-button) (il:windowprop window (quote button) new-button) (bw-repaintfn window)))) (il:remwindowprop window (quote button-being-edited)))))(defun externalize-button (button &optional verbose) (il:* il:|;;;| "returns a property list to which MAKE-BUTTON can be applied") (let* ((text (button-text button)) (type (button-type button)) (type-name (button-type-name type)) (shadows (text-shadows text)) (font (text-font text)) (inverted? (button-inverted? button))) (il:bquote ((il:\\\,@ (etypecase button (updated-button (il:bquote (:text-form (il:\\\, (updated-button-text-form button))))) (button (il:bquote (:text (il:\\\, (text-string text))))))) :action (il:\\\, (copy-tree (button-action button))) :help (il:\\\, (button-help-string button)) (il:\\\,@ (when (or verbose (not (eq font *default-text-font*))) (list :font (externalize-font font)))) (il:\\\,@ (when (or verbose (not (equal shadows (getf (button-type-props type) :default-shadows *default-button-shadows*)))) (list :shadows (externalize-text-shadows shadows)))) (il:\\\,@ (when (or (null type-name) verbose (not (equal type-name *default-button-type*))) (list :type (if (null type-name) type type-name)))) (il:\\\,@ (when (or verbose inverted?) (list :inverted? inverted?))) (il:\\\,@ (copy-tree (button-props button)))))))(defun externalize-font (font) (list (il:fontprop font (quote il:family)) (il:fontprop font (quote il:size)) (il:fontprop font (quote il:face))))(defun with-button (action text help) (if (copy-key-down-p) (prog1 nil (make-button-window (make-button :type *default-button-type* :text text :help help :action action) text help)) (eval action)))(def-button-type :door :imagemask nil :margins (2 18 3 2) :default-shadows nil)(def-button-type :shadowed :image #S(nsew-bitmap north #*(2 4)L@@@L@@@@@@@@@@@ nw #*(5 4)CH@@GH@@N@@@L@@@ ne #*(7 4)O@@@OH@@CL@@AN@@ south #*(2 6)@@@@L@@@L@@@D@@@H@@@L@@@ sw #*(5 6)N@@@OH@@GH@@C@@@AH@@@H@@ se #*(7 6)GJ@@OF@@OJ@@EN@@JL@@OH@@ east #*(7 2)CF@@CJ@@ center #*(2 2)@@@@@@@@ west #*(5 2)L@@@L@@@) :mask #S(nsew-bitmap north #*(2 4)L@@@L@@@L@@@L@@@ nw #*(5 4)CH@@GH@@OH@@OH@@ ne #*(7 4)O@@@OH@@OL@@ON@@ south #*(2 6)L@@@L@@@L@@@D@@@H@@@L@@@ sw #*(5 6)OH@@OH@@GH@@C@@@AH@@@H@@ se #*(7 6)OJ@@OF@@OJ@@EN@@JL@@OH@@ east #*(7 2)OF@@OJ@@ center #*(2 2)L@@@L@@@ west #*(5 2)OH@@OH@@) :margins (3 5 7 3))(def-button-type :transparent :image nil :mask nil :margins (0 0 0 0) :default-shadows t)(def-button-type :porthole :image #S(nsew-bitmap north #*(15 36)OOONOOON@@@@@@@@L@@FN@@NG@ALCHAHCHAHGHALOH@NO@@FN@@B@@@@@@@@OOONOOON@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ nw #*(36 36)@@@@@@@CO@@@@@@@@@GOO@@@@@@@@AON@@@@@@@@@OL@@@@@@@@@CO@@C@@@@@@@GH@@G@@@@@@AN@@@N@@@@@@CL@@@L@@@@@@G@O@@L@@@@@@NAOH@N@@@@@ALCIL@G@@@@@CHC@N@C@@@@@G@C@N@A@@@@@N@CIN@@@@@@AL@AON@@@@@@CH@@OLCO@@@@C@@@GIOO@@@@G@@@@CO@@@@@NCL@@OL@@@@@LGN@AO@@@@@ALNG@CL@@@@@AHLCHGH@@@@@AHLCHO@@@@@@CHNGIN@@@@@@C@GOKL@@@@@@G@COCH@@@@@@F@ANG@@@@@@@F@@@G@@@@@@@F@@@N@@@@@@@F@@@N@@@@@@@N@@AL@@@@@@@L@@AL@@@@@@@LCLAH@@@@@@@LGNAH@@@@@@@LNGAH@@@@@@@LLCIH@@@@@@@ ne #*(36 36)OL@@@@@@@@@@OON@@@@@@@@@@GOH@@@@@@@@@@CO@@@@@@@@L@@OL@@@@@@@N@@AN@@@@@@@G@@@GH@@@@@@CH@@CL@@@@@@CHAN@N@@@@@@GHCO@G@@@@@@OHGCHCH@@@@@O@FALAL@@@@@N@FAL@N@@@@@@@GCL@G@@@@@@@COL@CH@@@@OHAOH@AL@@@@OO@O@@@L@@@@@GL@@GHN@@@@@AO@@OLG@@@@@@GHALNC@@@@@@ALAHGCH@@@@@@NAHGAH@@@@@@GALOAH@@@@@@CHOOAL@@@@@@ALGN@L@@@@@@@LCL@N@@@@@@@N@@@F@@@@@@@F@@@F@@@@@@@G@@@F@@@@@@@C@@@F@@@@@@@C@@@G@@@@@@@CH@@C@@@@@@@AHGHC@@@@@@@AHOLC@@@@@@@AILNC@@@@@@@AIHGC@@@ south #*(15 36)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOONOOON@@@@@@@@L@@FN@@NG@ALCHAHCHAHGH@LOH@NO@@FN@@B@@@@@@@@OOONOOON sw #*(36 36)LLCIH@@@@@@@LNGIH@@@@@@@LGOIH@@@@@@@LCOAH@@@@@@@LANAH@@@@@@@N@@@L@@@@@@@F@@@L@@@@@@@F@@@N@@@@@@@F@@@F@@@@@@@F@CLG@@@@@@@G@GNC@@@@@@@C@NGCH@@@@@@CHLCIL@@@@@@AHLCHN@@@@@@AHNGHG@@@@@@ALGOHCH@@@@@@LCO@AN@@@@@@NAN@@OH@@@@@G@@@@CO@@@@@C@@@O@OO@@@@CH@AOHAO@@@@AL@CIL@@@@@@@N@C@N@@@@@@@G@C@N@C@@@@@CHCIN@G@@@@@ALAON@N@@@@@@N@OL@L@@@@@@G@GH@L@@@@@@CL@@@N@@@@@@AN@@@G@@@@@@@GH@@C@@@@@@@CO@@A@@@@@@@@OL@@@@@@@@@@AON@@@@@@@@@@GOO@@@@@@@@@@CO@@@ se #*(36 36)@@@@AIHGC@@@@@@@AILOC@@@@@@@AHOOC@@@@@@@AHGNC@@@@@@@AHCLC@@@@@@@C@@@G@@@@@@@C@@@F@@@@@@@G@@@F@@@@@@@F@@@F@@@@@@@NCL@F@@@@@@@LGN@N@@@@@@ALNG@L@@@@@@CHLCIL@@@@@@G@LCIH@@@@@@N@NGIH@@@@@AL@GOKH@@@@@GH@COCH@@@@AO@@ANG@@@@@GL@@@@O@@@@OO@GH@@N@@@@OH@OL@AL@@@@@@ALN@CL@@@@@@AHG@GH@@@@L@AHG@O@@@@@N@ALOAN@@@@@G@@OOCL@@@@@CH@GNGH@@@@@CH@CLO@@@@@@GH@@CN@@@@@@OH@@GL@@@@@@O@@AO@@@@@@@N@@OL@@@@@@@@@COH@@@@@@@@GOL@@@@@@@@OON@@@@@@@@@OL@@@@@@@@@@ east #*(36 15)@@@@AIHGC@@@@@@@AILOC@@@@@@@AHOOC@@@@@@@AHGNC@@@@@@@AHCLC@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AH@@C@@@@@@@AHGHC@@@@@@@AHOLC@@@@@@@AILNC@@@@@@@AIHGC@@@ center #*(15 15)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ west #*(36 15)LLCIH@@@@@@@LNGIH@@@@@@@LGOIH@@@@@@@LCOAH@@@@@@@LANAH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@L@@AH@@@@@@@LCLAH@@@@@@@LGNAH@@@@@@@LNGAH@@@@@@@LLCIH@@@@@@@) :mask #S(nsew-bitmap north #*(15 36)OOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOON@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ nw #*(36 36)@@@@@@@CO@@@@@@@@@GOO@@@@@@@@AOOO@@@@@@@@OOOO@@@@@@@COOOO@@@@@@@GOOOO@@@@@@AOOOOO@@@@@@COOOOO@@@@@@GOOOOO@@@@@@OOOOOO@@@@@AOOOOOO@@@@@COOOOOO@@@@@GOOOOOO@@@@@OOOOOOO@@@@AOOOOOOO@@@@COOOOOOO@@@@COOOOOOO@@@@GOOOOOO@@@@@OOOOOOL@@@@@OOOOOO@@@@@AOOOOOL@@@@@AOOOOOH@@@@@AOOOOO@@@@@@COOOON@@@@@@COOOOL@@@@@@GOOOOH@@@@@@GOOOO@@@@@@@GOOOO@@@@@@@GOOON@@@@@@@GOOON@@@@@@@OOOOL@@@@@@@OOOOL@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@ ne #*(36 36)OL@@@@@@@@@@OON@@@@@@@@@OOOH@@@@@@@@OOOO@@@@@@@@OOOOL@@@@@@@OOOON@@@@@@@OOOOOH@@@@@@OOOOOL@@@@@@OOOOON@@@@@@OOOOOO@@@@@@OOOOOOH@@@@@OOOOOOL@@@@@OOOOOON@@@@@OOOOOOO@@@@@OOOOOOOH@@@@OOOOOOOL@@@@OOOOOOOL@@@@@GOOOOON@@@@@AOOOOOO@@@@@@GOOOOO@@@@@@AOOOOOH@@@@@@OOOOOH@@@@@@GOOOOH@@@@@@COOOOL@@@@@@AOOOOL@@@@@@@OOOON@@@@@@@OOOON@@@@@@@GOOON@@@@@@@GOOON@@@@@@@COOON@@@@@@@COOOO@@@@@@@COOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@ south #*(15 36)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@OOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOONOOON sw #*(36 36)OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOL@@@@@@@GOOOL@@@@@@@GOOON@@@@@@@GOOON@@@@@@@GOOOO@@@@@@@GOOOO@@@@@@@COOOOH@@@@@@COOOOL@@@@@@AOOOON@@@@@@AOOOOO@@@@@@AOOOOOH@@@@@@OOOOON@@@@@@OOOOOOH@@@@@GOOOOOO@@@@@COOOOOOO@@@@COOOOOOO@@@@AOOOOOOO@@@@@OOOOOOO@@@@@GOOOOOO@@@@@COOOOOO@@@@@AOOOOOO@@@@@@OOOOOO@@@@@@GOOOOO@@@@@@COOOOO@@@@@@AOOOOO@@@@@@@GOOOO@@@@@@@COOOO@@@@@@@@OOOO@@@@@@@@AOOO@@@@@@@@@GOO@@@@@@@@@@CO@@@ se #*(36 36)@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@COOOO@@@@@@@COOON@@@@@@@GOOON@@@@@@@GOOON@@@@@@@OOOON@@@@@@@OOOON@@@@@@AOOOOL@@@@@@COOOOL@@@@@@GOOOOH@@@@@@OOOOOH@@@@@AOOOOOH@@@@@GOOOOOH@@@@AOOOOOO@@@@@GOOOOOO@@@@OOOOOOON@@@@OOOOOOOL@@@@OOOOOOOL@@@@OOOOOOOH@@@@OOOOOOO@@@@@OOOOOON@@@@@OOOOOOL@@@@@OOOOOOH@@@@@OOOOOO@@@@@@OOOOON@@@@@@OOOOOL@@@@@@OOOOO@@@@@@@OOOOL@@@@@@@OOOOH@@@@@@@OOOL@@@@@@@@OON@@@@@@@@@OL@@@@@@@@@@ east #*(36 15)@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@@@@@AOOOO@@@ center #*(15 15)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ west #*(36 15)OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@OOOOH@@@@@@@) :margins (17 17 17 17) :default-shadows t)(def-button-type :ark :image #S(north-south-bitmap north #*(86 5)OOOOOOOOOOOOOOOOOOOOOL@@JBBBBBBBBBBBBBBBBBBBBL@@HHHHHHHHHHHHHHHHHHHHID@@JBBBBBBBBBBBBBBBBBBBCL@@HHHHHHHHHHHHHHHHHHHHOD@@ center #*(86 2)JEEEEEEEEEEEEEEEEEEEEL@@HJJJJJJJJJJJJJJJJJJJOD@@ south #*(86 5)JMMMMMMMMMMMMMMMMMMMML@@IGGGGGGGGGGGGGGGGGGGGD@@KMMMMMMMMMMMMMMMMMMMML@@OGGGGGGGGGGGGGGGGGGGGD@@OOOOOOOOOOOOOOOOOOOOOL@@) :margins (4 5 5 6) :default-shadows :ark)(def-button-type :round-ark :image #*(74 24)@@@@@@@@@@@@@@@@@@@@@AOOOOOOOOOOOOOOH@@@@GAAAAAAAAAAAAAAF@@@AL@DDDDDDDDDDDDDEH@@A@EEEEEEEEEEEEEEAH@@BBJJJJJJJJJJJJJJJL@@BEEEEEEEEEEEEEEEED@@FJJJJJJJJJJJJJJJJJ@@DEEEEEEEEEEEEEEEEF@@FJJJJJJJJJJJJJJJJJ@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJJJ@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJJN@@EEEEEEEEEEEEEEEEEF@@GJJJJJJJJJJJJJJJKN@@CMEEEEEEEEEEEEEEFL@@CFJJJJJJJJJJJJJJOL@@AMMMMMMMMMMMMMMMKH@@@GGGGGGGGGGGGGGGN@@@@AOOOOOOOOOOOOOOH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ :mask #*(74 24)@@@@@@@@@@@@@@@@@@@@@AOOOOOOOOOOOOOOH@@@@GOOOOOOOOOOOOOON@@@AOOOOOOOOOOOOOOOOH@@AOOOOOOOOOOOOOOOOH@@COOOOOOOOOOOOOOOOL@@COOOOOOOOOOOOOOOOL@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@GOOOOOOOOOOOOOOOON@@COOOOOOOOOOOOOOOOL@@COOOOOOOOOOOOOOOOL@@AOOOOOOOOOOOOOOOOH@@@GOOOOOOOOOOOOOON@@@@AOOOOOOOOOOOOOOH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ :margins (5 4 5 2) :default-shadows :ark)(def-button-type :stretchy-ark :image #S(nsew-bitmap north #*(4 5)O@@@D@@@A@@@D@@@A@@@ nw #*(5 5)OH@@J@@@HH@@J@@@HH@@ ne #*(5 5)OH@@EH@@BH@@GH@@NH@@ south #*(4 5)K@@@N@@@K@@@N@@@O@@@ sw #*(5 5)JH@@I@@@KH@@O@@@OH@@ se #*(5 5)KH@@NH@@KH@@NH@@OH@@ east #*(5 4)KH@@NH@@KH@@NH@@ center #*(4 4)J@@@E@@@J@@@E@@@ west #*(5 4)J@@@HH@@J@@@HH@@) :margins (6 6 6 6) :default-shadows :ark)(def-button-type :stretchy-round-ark :image #S(nsew-bitmap north #*(4 6)O@@@D@@@A@@@E@@@J@@@E@@@ nw #*(7 6)@B@@@N@@CH@@B@@@DD@@DJ@@ ne #*(9 6)N@@@EH@@AF@@DF@@JK@@EE@@ south #*(4 6)J@@@E@@@J@@@G@@@M@@@O@@@ sw #*(7 6)OD@@GJ@@FL@@CJ@@@N@@@B@@ se #*(9 6)JOH@EK@@KO@@FN@@OH@@N@@@ east #*(9 8)JJH@EEH@JJH@EEH@JJH@EEH@JJH@EEH@ center #*(4 8)J@@@E@@@J@@@E@@@J@@@E@@@J@@@E@@@ west #*(7 8)OD@@JJ@@OD@@JJ@@OD@@JJ@@OD@@JJ@@) :mask #S(nsew-bitmap north #*(4 6)O@@@O@@@O@@@O@@@O@@@O@@@ nw #*(7 6)@B@@@N@@CN@@CN@@GN@@GN@@ ne #*(9 6)N@@@OH@@ON@@ON@@OO@@OO@@ south #*(4 6)O@@@O@@@O@@@O@@@O@@@O@@@ sw #*(7 6)ON@@GN@@GN@@CN@@@N@@@B@@ se #*(9 6)OOH@OO@@OO@@ON@@OH@@N@@@ east #*(9 8)OOH@OOH@OOH@OOH@OOH@OOH@OOH@OOH@ center #*(4 8)O@@@O@@@O@@@O@@@O@@@O@@@O@@@O@@@ west #*(7 8)ON@@ON@@ON@@ON@@ON@@ON@@ON@@ON@@) :margins (4 1 4 2) :default-shadows :ark)(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:menuheldwait))(il:putprops il:rooms-buttons il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop