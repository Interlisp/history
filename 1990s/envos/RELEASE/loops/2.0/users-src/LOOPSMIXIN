(DEFINE-FILE-INFO PACKAGE "IL" READTABLE "INTERLISP" BASE 10)(FILECREATED "25-Feb-88 17:36:21" |{POGO:AISNORTH:XEROX}<LOOPSCORE>LYRIC>USERS>LOOPSMIXIN.;4| 41059        changes to%:  (METHOD-FNS Template.Specialize Template.New Template.Copy TempClass.New                            StrucMeta.New NamedObject.UnSetName NamedObject.SetName NamedObject.Copy                            ListMetaClass.New ListMetaClass.DestroyInstance                            IndirectObj.MessageNotUnderstood IndirectObj.IVMissing                            Perspective.MakePersp Perspective.ListViews Perspective.GetPersp                            Perspective.FindReceiver Perspective.FindIVHolder Perspective.Destroy!                            Perspective.Destroy Perspective.DeletePersp Perspective.DeleteMeAsPersp                            Perspective.Copy Perspective.AddPersp Node.ListViews Node.ListViewNames                            Node.GetPersp Node.FindReceiver Node.FindIVHolder Node.Destroy!                            Node.Destroy Node.DeletePersp Node.Copy Node.AddPersp)      previous date%: "15-Dec-87 12:48:57" |{POGO:AISNORTH:XEROX}<LOOPSCORE>LYRIC>USERS>LOOPSMIXIN.;3|)(* "Copyright (c) 1983, 1984, 1985, 1986, 1987, 1988 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT LOOPSMIXINCOMS)(RPAQQ LOOPSMIXINCOMS        ((DECLARE%: DONTCOPY (PROP MAKEFILE-ENVIRONMENT LOOPSMIXIN))        (COMS (* * USEFUL MIXINS)              (CLASSES DatedObject GlobalNamedObject IndirectObj ListMetaClass NamedObject StrucMeta                      TempClass Template TextItem)              (VARS (DefaultObject ($ Object)))              (FNS GlobalName IndirectObj.ForwardMessage RememberName TemplateCopy)              (METHODS IndirectObj.IVMissing IndirectObj.MessageNotUnderstood                      ListMetaClass.DestroyInstance ListMetaClass.New NamedObject.Copy                      NamedObject.SetName NamedObject.UnSetName StrucMeta.New TempClass.New                      Template.Copy Template.New Template.Specialize))        (COMS (* * Classes and methods for perspectives - A group of objects can be associated                  together as different perspectives of the same thing. This is implemented by having                  them all point to a Node instance which has all the associated objects on a property                  list of the variable perspectives. Each object has a perspective name                 (unique in the associated group, but perhaps used in many groups)                 that is used to identify it by the other objects. The user does not need to see the                  perspectiveNode, but can simply get from one object to another by means of the                  message GetPersp with argument perspName.)              (CLASSES Node Perspective)              (METHODS Node.AddPersp Node.Copy Node.DeletePersp Node.Destroy Node.Destroy!                      Node.FindIVHolder Node.FindReceiver Node.GetPersp Node.ListViewNames                      Node.ListViews Perspective.AddPersp Perspective.Copy Perspective.DeleteMeAsPersp                      Perspective.DeletePersp Perspective.Destroy Perspective.Destroy!                      Perspective.FindIVHolder Perspective.FindReceiver Perspective.GetPersp                      Perspective.ListViews Perspective.MakePersp))))(DECLARE%: DONTCOPY (PUTPROPS LOOPSMIXIN MAKEFILE-ENVIRONMENT (:PACKAGE "IL" :READTABLE "INTERLISP" :BASE 10)))(* * USEFUL MIXINS)(DEFCLASSES DatedObject GlobalNamedObject IndirectObj ListMetaClass NamedObject StrucMeta TempClass        Template TextItem)(DEFCLASS DatedObject   (MetaClass Class doc "Mixin to record the creator and date of creation for objects." Edited%:                                                              (* RBGMartin "19-Feb-87 14:21"))   (Supers Object)   (InstanceVariables (created NIL %:initForm (DATE)                             doc "date and time of creation of object")          (creator NIL %:initForm (USERNAME)                 doc "USERNAME of creator of object")))(DEFCLASS GlobalNamedObject   (MetaClass Class Edited%:                                 (* dgb%: "22-NOV-82 13:49")          doc "Mixin for object to give it a name in the global name table. Note that this name is unique. See NamedObject."          )   (Supers NamedObject)   (InstanceVariables (name #,($A NIL NIL GlobalName) doc "name is stored in nameTable and as IV")))(DEFCLASS IndirectObj   (MetaClass Class Edited%:                                 (* dgb%: "18-MAR-83 14:25")          doc "This is the default metaClass for all classes")   (Supers Object))(DEFCLASS ListMetaClass   (MetaClass MetaClass Edited%:                             (* dgb%: "23-NOV-82 02:21"))   (Supers Class))(DEFCLASS NamedObject   (MetaClass Class doc "Mixin to give instances of this class unique names, stored in the name instance variable. Note that Object.SetName already provides a facility by which objects can be given an arbitrary number of names. This mixin is used give an object a unique name, and to indicate classes whose instances are normally expected to have unique names."           Edited%:                                           (* dgb%: "18-OCT-83 15:10"))   (Supers Object)   (InstanceVariables (name #,($A NIL NIL RememberName) doc "name is stored in nameTable and as IV")))(DEFCLASS StrucMeta   (MetaClass MetaClass doc "Mixin for a meta class which uses its own structure as a template for new classes. See StrucMeta.New"           Edited%:                                           (* dgb%: "18-MAR-83 16:25"))   (Supers MetaClass))(DEFCLASS TempClass   (MetaClass MetaClass Edited%:                             (* dgb%: "23-NOV-82 02:02"))   (Supers Class))(DEFCLASS Template   (MetaClass MetaClass doc "Special Class used for composite objects." Edited%:                                                              (* dgb%: "12-JAN-83 15:17"))   (Supers Class))(DEFCLASS TextItem   (MetaClass Class doc "Simplest structured text object" Edited%:                                                              (* dgb%: "12-OCT-82 23:09"))   (Supers NamedObject)   (InstanceVariables (subs NIL doc "list of other elemetns which are subparts of this one")          (text "" doc "local text for this item")))(RPAQ DefaultObject ($ Object))(DEFINEQ(GlobalName  [LAMBDA (self varName name prop av type)                   (* smL " 2-Apr-86 15:06")                    (* * Used as an attached procedure for fields which are supposed to be global           names. See GlobalNamedObject. Deletes an old name if necessary, and adds the           new name to the name table)    (RememberName self varName name prop av type])(IndirectObj.ForwardMessage  [LAMBDA (self dummyArg1 dummyArg2 dummyArg3 dummyArg4 dummyArg5)                                                             (* dgb%: "18-MAR-83 14:39")                    (* will forward messages with up to five arguments          (a design choice) to object in DefaultObject, using selector in           ForwardedSelector)    (ApplyMethod DefaultObject ForwardedSelector (LIST dummyArg1 dummyArg2 dummyArg3 dummyArg4                                                        dummyArg5])(RememberName  [LAMBDA (self varName name prop av type)                   (* dgb%: "24-Feb-84 10:44")                    (* * Used as an attached procedure for fields which are supposed to be names           known by the database system. Deletes an old name if necessary, and adds the           new name to the name table)    (PROG (oldName (GetValue self varName))          (NameEntity self name)          (MARKASCHANGED name (SELECTQ (TYPENAME self)                                  (class 'CLASSES)                                  'INSTANCES))          (COND             ((EQ oldName name)              (RETURN name))             (oldName (DeleteObjectName self oldName)))          (PutLocalState av name self varName prop type)          (RETURN name))    name])(TemplateCopy  [LAMBDA (oldValue alist specSelector)                      (* smL "24-Sep-85 13:39")                    (* Subroutine of NewTemplateIVs. Copies a value from the Instance Variable           Description, making substitutions for classes appearing in alist.          If a class is encountered whose metaClass is Template, then creates new           instantiation recursively using New message.)    (SELECTQ (TYPENAME oldValue)        (annotatedValue              [LET* ((ls (GetValueOnly (fetch annotatedValue of oldValue)                               'localState))                    (newLs (TemplateCopy ls alist specSelector)))                   (if (EQ ls newLs)                       then oldValue                     else (create annotatedValue                                 annotatedValue _ (LET ((avObj (_ (fetch annotatedValue of oldValue)                                                                  CopyShallow)))                                                       (PutValueOnly avObj 'localState newLs)                                                       avObj])        (LISTP                     (* Here if oldValue is a list. Invoke TemplateCopy recursively on the elements           of the list. specSelector)               [COND                  ((EQ (CAR oldValue)                       '*)                   oldValue)                  (T (PROG ((A (TemplateCopy (CAR oldValue)                                      alist specSelector))                            (D (TemplateCopy (CDR oldValue)                                      alist specSelector)))                           (RETURN (COND                                      ((AND (EQ A (CAR oldValue))                                            (EQ D (CDR oldValue)))                                                             (* If no copying done in elements,                                                              don't copy now)                                       oldValue)                                      (T (CONS A D])        (class (COND                  [(_ oldValue InstOf! 'Template)                    (* If class is a template, then return the substitution.          If class is not on alist, then first instantiate it recursively.)                   (OR (CDR (FASSOC oldValue alist))                       (COND                          (specSelector (DoMethod oldValue specSelector NIL alist))                          (T (_ oldValue New alist)]                  (T                                         (* Non-template classes treated as                                                              constants.)                     oldValue)))        oldValue]))(\BatchMethodDefs)(METH IndirectObj  IVMissing (ivName propName typeFlg newValue)      "Find a perspective which has the IV requested, and return its object description"      (category (Object)))(METH IndirectObj  MessageNotUnderstood (selector messageArgs superFlg)      "forward message appropriately" (category (Tofu)))(METH ListMetaClass  DestroyInstance (object)      "Remove saved object from list and then destroy" (category (Class)))(METH ListMetaClass  New (name)      "Create an object, and keep a list in the class property AllInstances" (category (Class)))(METH NamedObject  Copy (name)      "Copy the contents and then name the object" (category (NamedObject)))(METH NamedObject  SetName (name)      "Set the name IV in this object" (category (Object)))(METH NamedObject  UnSetName (name)      "P ut NotSetValue in name" (category (Object)))(METH StrucMeta  New (name supers)      "Construct a new class, copying IV descriptions in this class as IV descriptions for New class, and copying CV descriptions, except for those CVs which have a property Local with value T"      (category (Class)))(METH TempClass  New NIL      "All objects of this class will be temp objects" (category (Class)))(METH Template  Copy (class alist)      "Copies a template class . alist pairs template subclasses found in the IVs with their new specializations. Most of the work is done by TemplateCopy"      (category (Class)))(METH Template  New (alist)      "Fills in the new instance substituting for template instances. alist pairs template subclasses found in the IVs with their instantiations. Most of the work is done by TemplateCopy"      (category (Class)))(METH Template  Specialize (alist)      "Specializes a template class . alist pairs template subclasses found in the IVs with their new specializations. Most of the work is done by TemplateCopy"      (category (Class)))(Method ((IndirectObj IVMissing) self ivName propName typeFlg newValue) "edited:  3-Apr-86 17:38"   "Find a perspective which has the IV requested, and return its object description"   [LET ((defaultObject (_ self FindIVHolder ivName)))        (COND           (defaultObject                     (* Get the description from the instance, or return the one from the class)                  (SELECTQ typeFlg                      ((GetValue GetValueOnly)                            (APPLY* typeFlg defaultObject ivName propName))                      ((PutValue PutValueOnly)                            (APPLY* typeFlg defaultObject ivName newValue propName))                      (SHOULDNT "Error in IVMissing")))           (T (_Super self IVMissing ivName createDescrFlg)])(Method ((IndirectObj MessageNotUnderstood) self selector messageArgs superFlg)                                                                                "dgb: 16-Nov-84 17:25"   "forward message appropriately" [LET ((forwardObj (_ self FindReceiver selector)))                                        (COND                                           [forwardObj                     (* If there is an object who will receive this message, send msg to it)                                                  (\ApplyMethod selector (CONS forwardObj                                                                               (CDR messageArgs]                                           (T (_Super self MessageNotUnderstood selector messageArgs                                                            superFlg)])(Method ((ListMetaClass DestroyInstance) class object) "dgb: 22-SEP-83 12:44"   "Remove saved object from list and then destroy" (PutClass class [DREMOVE                                                                     object                                                                     (LISTP (GetClass class                                                                                   'AllInstances]                                                           'AllInstances)         (_Super class DestroyInstance object))(Method ((ListMetaClass New) class name) "dgb: 22-SEP-83 12:41"   "Create an object, and keep a list in the class property AllInstances"   (PROG ((newInstance (_Super class New name)))         (PutClass class [CONS newInstance (LISTP (GetClass class 'AllInstances]                'AllInstances)         (RETURN newInstance)))(Method ((NamedObject Copy) self name) "dgb: 18-OCT-83 14:28"                                                          "Copy the contents and then name the object"                                                              (PROG ((obj (_Super self Copy)))                                                                    (_ obj SetName name)                                                                    (RETURN obj)))(Method ((NamedObject SetName) self name) "dgb:  2-MAR-82 17:42" "Set the name IV in this object"                                                                 (_@ name name)                                                                 self)(Method ((NamedObject UnSetName) self name) "dgb:  6-DEC-83 16:55" "P ut NotSetValue in name"                                                                   (_Super self UnSetName name)                                                                   (PutValueOnly self 'name                                                                           NotSetValue)                                                                   self)(Method ((StrucMeta New) self name supers) "smL 11-Apr-86 15:01"   "Construct a new class, copying IV descriptions in this class as IV descriptions for New class, and copying CV descriptions, except for those CVs which have a property Local with value T"   (PROG ((newClass (_Super self New name supers)))         (for iv in (_ self ListAttribute! 'IVs) do (_ self CopyIV iv newClass))         (for cv in (_ self ListAttribute 'CVs) when (NEQ T (GetCVHere self cv 'Local))            do (_ self CopyCV cv newClass))         (RETURN newClass)))(Method ((TempClass New) self) "dgb: 23-NOV-82 01:56"                                                      "All objects of this class will be temp objects"                                                      (_ self NewTemp))(Method ((Template Copy) self class alist) "edited: 31-Dec-84 10:14"   "Copies a template class . alist pairs template subclasses found in the IVs with their new specializations. Most of the work is done by TemplateCopy"                    (* ;; "JRB - for some perverse reason the Copy below used to be a _Super")   (PROG ((newClass (_ class Copy))          oldValue tcValue)         (SETQ alist (NCONC1 alist (CONS class newClass)))         [MapIVs! self (FUNCTION (LAMBDA (self varName propName)                                   (PROG (tcValue oldValue)                                         (COND                                            ([NEQ (SETQ oldValue (GetValueOnly self varName propName)                                                   )                                                  (SETQ tcValue (TemplateCopy oldValue alist                                                                       'Copy]                                             (PutValueOnly self varName tcValue propName]         (RETURN newClass)))(Method ((Template New) class alist) "dgb: 24-NOV-82 15:21"   "Fills in the new instance substituting for template instances. alist pairs template subclasses found in the IVs with their instantiations. Most of the work is done by TemplateCopy"   (PROG ((instance (_Super class New))          oldValue tcValue)         (SETQ alist (NCONC1 alist (CONS class instance)))         [MapIVs! instance (FUNCTION (LAMBDA (self varName propName)                                       (PROG (tcValue oldValue)                                             (COND                                                ((NEQ (SETQ oldValue (GetValueOnly self varName                                                                             propName))                                                      (SETQ tcValue (TemplateCopy oldValue alist)))                                                 (PutValueOnly self varName tcValue propName]         (RETURN instance)))(Method ((Template Specialize) class alist) "dgb: 19-APR-83 15:29"   "Specializes a template class . alist pairs template subclasses found in the IVs with their new specializations. Most of the work is done by TemplateCopy"   (PROG [oldValue tcValue (newClass (_Super class Specialize (AND alist (LITATOM alist)                                                                   (PROG1 alist (SETQ alist NIL))))]         (SETQ alist (NCONC1 alist (CONS class newClass)))         [MapIVs! class (FUNCTION (LAMBDA (self varName propName)                                    (PROG (tcValue oldValue)                                          (COND                                             ([NEQ (SETQ oldValue (GetValueOnly self varName propName                                                                         ))                                                   (SETQ tcValue (TemplateCopy oldValue alist                                                                        'Specialize]                                              (OR (_ newClass HasIV varName)                                                  (AddCIV newClass varName))                                              (PutClassIV newClass varName tcValue propName]         (RETURN newClass)))(\UnbatchMethodDefs)(* * Classes and methods for perspectives - A group of objects can be associated together as different perspectives of the same thing. This is implemented by having them all point to a Node instance which has all the associated objects on a property list of the variable perspectives. Each object has a perspective name (unique in the associated group, but perhaps used in many groups) that is used to identify it by the other objects. The user does not need to see the perspectiveNode, but can simply get from one object to another by means of the message GetPersp with argument perspName.)(DEFCLASSES Node Perspective)(DEFCLASS Node   (MetaClass Class Edited%:                                 (* dgb%: "18-MAR-83 14:44")          doc "Perspective nodes associate together a group of objects, allowing them to find each other via their perspective names."          )   (Supers IndirectObj)   (InstanceVariables (perspectives NIL doc                  "Associated objects are stored on this property list under their perspective names."                             )))(DEFCLASS Perspective   (MetaClass AbstractClass Edited%:                         (* dgb%: "18-MAR-83 14:45")          doc "This is a mixin which provides the perpsectiveNode instanceVariable for an object. This IV is used to point to an object of type Node which itself points to all the perspectives of this object."          )   (Supers IndirectObj)   (InstanceVariables (perspectiveNode NIL doc                     "Indirect pointer to all perspectives of this object. Created when first needed."                             )))(\BatchMethodDefs)(METH Node  AddPersp (viewName view dontCauseError)      "Checks for consistency with old views if any. On IV pespectiveNode of view, stores self as value, and viewName as property myViewName."      (category (Node)))(METH Node  Copy NIL      "Copy node and all its perspectives" (category (Node)))(METH Node  DeletePersp (viewName view dontCauseError)      "Deletes a perspective of a node on the IV perspectives on property viewName. Checks for consistency. Removes from IV pespectiveNode of view, self as value, and viewName from property myViewName. If view is not that perspective, then causes an error, unless surpressed."      (category (Node)))(METH Node  Destroy NIL      "Destroy the node after detaching all its perspectives" (category (Object)))(METH Node  Destroy! NIL      "Destroy the node and all its perspectives" (category (Object)))(METH Node  FindIVHolder (ivName)      "Find a perspective which has iv named" (category (Node)))(METH Node  FindReceiver (selector)      "Find a perpective that understands selector" (category (Node)))(METH Node  GetPersp (perspName causeError)      "Returns the perspective of this node with viewName perspName" (category (Node)))(METH Node  ListViewNames NIL      "List all the viewNames of perspectives on this node" (category (Node)))(METH Node  ListViews NIL      "List all the perspectives on this node" (category (Node)))(METH Perspective  AddPersp (viewName view)      "Adds a perspective to my node." (category (Perspective)))(METH Perspective  Copy NIL      "Copy this perspectives and all perspectives form it. Work done by CopyPesp on Node"      (category (Perspective)))(METH Perspective  DeleteMeAsPersp NIL      "Delete this object as a perspective of node" (category (Perspective)))(METH Perspective  DeletePersp (viewName view dontCauseError)      "Deletes a perspective from node" (category (Perspective)))(METH Perspective  Destroy NIL      "Destroy self but leave other perspectives on Node" (category (Object)))(METH Perspective  Destroy! NIL      "Destroy self, Node and all other perspectives on Node" (category (Object)))(METH Perspective  FindIVHolder (ivName)      "Find perspective having IV with name ivName" (category (Perspective)))(METH Perspective  FindReceiver (selector)      "Find a receiver for a message which is not understood by me" (category (Perspective)))(METH Perspective  GetPersp (perspName causeError)      "Returns the perspective of this instance with viewName perspName" (category (Perspective)))(METH Perspective  ListViews NIL      "List all the views of this perspective, including self" (category (Perspective)))(METH Perspective  MakePersp (viewName nodeType)      "If no current perspectiveNode exists, then a node will be created of class nodeType (or Node if nodeType=NIL) . nodeType should be a subclass of Node. self will be made the value of the property viewName on IV perspectivesof node. If self already has a node, then it is used."      (category (Perspective)))(Method ((Node AddPersp) self viewName view dontCauseError)  (* ; "edited: 31-Dec-84 10:17") "Adds a perspective to a node on the IV perspectives as value of property viewName."   "Checks for consistency with old views if any. On IV pespectiveNode of view, stores self as value, and viewName as property myViewName."   (PROG (oldViewName oldView (oldNode (@ view perspectiveNode)))         [COND            (oldNode (SETQ oldViewName (GetValue view 'perspectiveNode 'myViewName))                   (COND                      ((NEQ oldNode self)                       (OR dontCauseError (HELPCHECK view " already has node " oldNode                                               " as a Node.Type OK to replace oldNode with new node.")))                      ((EQ oldViewName viewName)             (* Already done, just return)                       (RETURN view))                      (oldViewName (OR dontCauseError (HELPCHECK view " was stored under viewName "                                                              oldViewName                                                     " previously.Type OK to change to new view name"))                             (_ oldNode DeletePersp oldViewName view)]         (COND            ((AND (NEQ NotSetValue (SETQ oldView (GetValue self 'perspectives viewName)))                  oldView                  (NEQ oldView view))             (OR dontCauseError (HELPCHECK oldView " is currently the " viewName                                        " perspective of self.  Type OK to replace it."))             (_ self DeletePersp viewName oldView)))         (* All error checks have been passed)         (_@ view perspectiveNode self)         (_@ view perspectiveNode myViewName viewName)         (RETURN (PutValue self 'perspectives view viewName))))(Method ((Node Copy) self)                                   (* ; "smL 11-Apr-86 14:46") "dgb: 17-NOV-82 23:27" "Copy node and all its perspectives"                        (_ self Sublis (for view persp in (_ self ListAttribute 'IVPROPS '                                                                  perspectives)                                          collect (SETQ persp (GetIVHere self 'perspectives view))                                                (PutValue persp 'perspectiveNode view 'myViewName)                                                (LIST persp))))(Method ((Node DeletePersp) self viewName view dontCauseError) "dgb:  3-SEP-82 00:15"   "Deletes a perspective of a node on the IV perspectives on property viewName. Checks for consistency. Removes from IV pespectiveNode of view, self as value, and viewName from property myViewName. If view is not that perspective, then causes an error, unless surpressed."   (PROG ((oldView (GetValue self 'perspectives viewName)))         (COND            ((EQ NotSetValue oldView)             (OR dontCauseError (HELPCHECK viewName " is not a perspective of " self                                        "Type OK to continue without changing node."))             (RETURN NIL))            ((NULL view)             (SETQ view oldView))            ((NEQ view oldView)             (OR dontCauseError (HELPCHECK view " is not the " viewName                                        " of self.Type OK to continue without changing node."))             (RETURN NIL)))         (_@ view perspectiveNode NIL)         (_@ view perspectiveNode viewName NIL)         (RETURN (PutValue self 'perspectives NIL viewName))))(Method ((Node Destroy) self) "dgb: 10-Sep-84 12:49"                                               "Destroy the node after detaching all its perspectives"                                                     (for viewName in (_ self ListViewNames)                                                        do (_ self DeletePersp viewName)                                                        finally (_Super self Destroy)))(Method ((Node Destroy!) self) "dgb: 10-Sep-84 12:56" "Destroy the node and all its perspectives"                                                      (for viewName view                                                         in (_ self ListViewNames)                                                         do (SETQ view (GetValue self 'perspectives                                                                               viewName))                                                            (_ self DeletePersp viewName)                                                            (_ view Destroy)                                                         finally (_Super self Destroy!)))(Method ((Node FindIVHolder) self ivName) "dgb: 18-MAR-83 15:16"                                                               "Find a perspective which has iv named"                                                                 (for v in (_ self ListViews)                                                                    do (AND (_ v HasIV ivName)                                                                            (RETURN v))))(Method ((Node FindReceiver) self selector) "smL 11-Apr-86 14:47"   "Find a perpective that understands selector" (for p v in (_ self ListAttribute 'IVPROPS                                                                     'perspectives)                                                    do (AND (_ (SETQ v (GetValue self 'perspectives p                                                                              ))                                                               Understands selector)                                                            (RETURN v))))(Method ((Node GetPersp) self perspName causeError) "edited:  3-Apr-86 18:07"   "Returns the perspective of this node with viewName perspName"   (LET ((persp (GetValue self 'perspectives perspName)))        (COND           ((AND (NOT (NotSetValue persp))                 persp)            persp)           (causeError (HELPCHECK self " has no perspective " perspName)                  NIL)           (T NIL))))(Method ((Node ListViewNames) self) "smL 11-Apr-86 14:47"                                                 "List all the viewNames of perspectives on this node"                                                          (for viewName                                                             in (_ self ListAttribute 'IVPROPS                                                                        'perspectives)                                                             when (type? instance (GetValue                                                                                   self                                                                                   'perspectives                                                                                    viewName))                                                             collect viewName))(Method ((Node ListViews) self) "smL 11-Apr-86 14:47" "List all the perspectives on this node"                                                      (for viewName view                                                         in (_ self ListAttribute 'IVPROPS                                                                    'perspectives)                                                         when (type? instance (SETQ view                                                                               (GetValue self                                                                                      'perspectives                                                                                       viewName)))                                                         collect view))(Method ((Perspective AddPersp) self viewName view) "dgb:  3-SEP-82 00:15"                                                                      "Adds a perspective to my node."                                                                           (PROG (myNode)                                                                             LP  (SETQ myNode                                                                                  (@ perspectiveNode)                                                                                  )                                                                                 (COND                                                                                    ((NULL myNode)                                                                                     (HELPCHECK                                                                                      self " has no perspectiveNode.To go on, make self a perspective using(_ self MakePersp viewName nodeType). Then type OK.")                                                                                     (GO LP)))                                                                                 (RETURN (_ myNode                                                                                            AddPersp                                                                                             viewName                                                                                             view))))(Method ((Perspective Copy) self)                            (* ; "mjs: 17-FEB-83 12:49") "dgb: 17-NOV-82 23:44"                  "Copy this perspectives and all perspectives form it. Work done by CopyPesp on Node"                        (GetValue (_ (@ perspectiveNode)                                     Copy)                               'perspectives                               (@ self perspectiveNode myViewName)))(Method ((Perspective DeleteMeAsPersp) self) "dgb:  3-SEP-82 00:15"                                                         "Delete this object as a perspective of node"                                                                    (_ self DeletePersp                                                                            (@ self perspectiveNode                                                                                     myViewName)                                                                            self))(Method ((Perspective DeletePersp) self viewName view dontCauseError) "dgb:  3-SEP-82 00:15"   "Deletes a perspective from node" (PROG ((myNode (@ perspectiveNode)))                                           [COND                                              ((NULL myNode)                                               (RETURN (OR dontCauseError (HELPCHECK self                                                          " has no perspectiveNode.  Type OK to go on"                                                                                 ]                                           (_ myNode DeletePersp viewName view dontCauseError)))(Method ((Perspective Destroy) self) "dgb:  3-SEP-82 00:15"                                                   "Destroy self but leave other perspectives on Node"                                                            (PROG ((myNode (@ perspectiveNode)))                                                                  (COND                                                                     (myNode                                                              (* Delete linkage to node)                                                                            (_ self DeleteMeAsPersp))                                                                     )                                                                  (_Super self Destroy)))(Method ((Perspective Destroy!) self) "dgb:  3-SEP-82 00:15"                                               "Destroy self, Node and all other perspectives on Node"                                                             [PROG ((myNode (@ perspectiveNode)))                                                                   (COND                                                                      (myNode                                                              (* ;                                                   "If I have a node, then let it control destruction")                                                                             (_ myNode Destroy!))                                                                      (T                                                              (* ;                                                         "else this is already isolated, just destroy")                    (* ;; "JRB - used to be _Super for some reason")                                                                         (_ self Destroy)])(Method ((Perspective FindIVHolder) self ivName) "dgb: 18-MAR-83 15:24"                                                         "Find perspective having IV with name ivName"                                                                        (_ (@ perspectiveNode)                                                                           FindIVHolder ivName))(Method ((Perspective FindReceiver) self selector) "dgb: 18-MAR-83 14:50"                                         "Find a receiver for a message which is not understood by me"                                                                          (_ (@ perspectiveNode)                                                                             FindReceiver selector))(Method ((Perspective GetPersp) self perspName causeError) "edited:  3-Apr-86 17:35"   "Returns the perspective of this instance with viewName perspName"   (LET (persp (node (@ perspectiveNode)))        (COND           ((AND node (SETQ persp (GetValue node 'perspectives perspName))                 (NOT (NotSetValue persp)))            persp)           (causeError (HELPCHECK self " has no perspective " perspName)                  NIL)           (T NIL))))(Method ((Perspective ListViews) self) "dgb: 18-MAR-83 15:19"                                              "List all the views of this perspective, including self"                                                              (_ (@ perspectiveNode)                                                                 ListViews))(Method ((Perspective MakePersp) self viewName nodeType) "dgb: 17-NOV-82 23:35"   "If no current perspectiveNode exists, then a node will be created of class nodeType (or Node if nodeType=NIL) . nodeType should be a subclass of Node. self will be made the value of the property viewName on IV perspectivesof node. If self already has a node, then it is used."   (_ (OR (@ perspectiveNode)          (_ (COND                (nodeType (GetClassRec nodeType))                (T ($ Node)))             New))      AddPersp      (OR viewName (ClassName self))      self))(\UnbatchMethodDefs)(PUTPROPS LOOPSMIXIN COPYRIGHT ("Xerox Corporation" 1983 1984 1985 1986 1987 1988))(DECLARE%: DONTCOPY  (FILEMAP (NIL (6523 11147 (GlobalName 6533 . 6937) (IndirectObj.ForwardMessage 6939 . 7486) (RememberName 7488 . 8296) (TemplateCopy 8298 . 11145)))))STOP