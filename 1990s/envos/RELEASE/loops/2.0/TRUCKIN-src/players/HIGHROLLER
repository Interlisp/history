(DEFINE-FILE-INFO PACKAGE "IL" READTABLE "INTERLISP" BASE 10)(FILECREATED "15-Jul-88 16:02:58" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>PLAYERS>HIGHROLLER.;2| 88262        changes to%:  (CLASSES HighRoller)                    (METHODS HighRoller.TakeTurn HighRoller.SellGoods HighRoller.GoToStoppingPlace                            HighRoller.FindStoppingPlace HighRoller.BuyGoods)                    (VARS HIGHROLLERCOMS)      previous date%: "15-Sep-87 19:27:51" |{POGO:AISNORTH:XEROX}<LOOPSCORE>TRUCKIN>PLAYERS>HIGHROLLER.;1|)(* "Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT HIGHROLLERCOMS)(RPAQQ HIGHROLLERCOMS ((DECLARE%: DONTCOPY (PROP MAKEFILE-ENVIRONMENT HIGHROLLER))                       (INSTANCES)                       (CLASSES HighRoller)                       (FNS HighRoller.BuyGoods HighRoller.FindStoppingPlace                             HighRoller.GoToStoppingPlace HighRoller.SellGoods HighRoller.TakeTurn)                       (METHODS HighRoller.BuyGoods HighRoller.FindStoppingPlace                               HighRoller.GoToStoppingPlace HighRoller.SellGoods HighRoller.TakeTurn)))(DECLARE%: DONTCOPY (PUTPROPS HIGHROLLER MAKEFILE-ENVIRONMENT (:PACKAGE "IL" :READTABLE "INTERLISP" :BASE 10)))(DEFCLASSES HighRoller)(DEFCLASS HighRoller   (MetaClass PlayerMeta doc "HighRoller is a player who specializes in LuxuryGoods. It has a simple endgame strategy which usually works. This is a slightly modified version of the winner of the knowledge competition in the first Loops course in January 1983 (Toyota by Dick Lyon)"           Edited%:                                           (* mjs%: "18-FEB-83 19:54"))   (Supers Traveler)   (InstanceVariables (destination NIL doc "Current destination.")          (direction NIL doc "Forward or Backward direction of travel on the highway.")          (sitCount 0 doc "Number of turns sitting at Alices Restaurant during an EndGame.")          (goal NIL doc "Buy, Sell, SitTight, or GoToAlices.")))(DEFINEQ(HighRoller.BuyGoods  [LAMBDA (self)    (CL:MACROLET [[ArgsOfMethodBeingCompiled NIL ''(self]                  (ClassNameOfMethodOwner NIL ''HighRoller)                  (SelectorOfMethodBeingCompiled NIL ''BuyGoods)                  (SelfOfMethodBeingCompiled NIL 'self)                  (_Super (&REST Send-Super-Args)                          [COND                             ((NULL Send-Super-Args)                              '(DOAPPLY* (FindSuperMethod self 'BuyGoods (LOADTIMECONSTANT                                                                          (OldClass HighRoller)))                                      self))                             ((NEQ 'BuyGoods (CADR Send-Super-Args))                              (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                               )))                             ((NEQ 'self (CAR Send-Super-Args))                              (ERROR "Can't _Super to other then first arg of method" (CDR                                                                                       Send-Super-Args                                                                                           )))                             (T (APPEND '(DOAPPLY* (FindSuperMethod self 'BuyGoods                                                          (LOADTIMECONSTANT (OldClass HighRoller)))                                                self) (CDDR Send-Super-Args])                  [_Super?                   (&REST Send-Super-Args)                   (COND                      ((NULL Send-Super-Args)                       '(DOAPPLY* (FindSuperMethod self 'BuyGoods (LOADTIMECONSTANT (OldClass                                                                                            HighRoller                                                                                           ))                                         (FUNCTION NILL))                               self))                      ((NEQ 'BuyGoods (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (APPEND '(DOAPPLY* (FindSuperMethod self 'BuyGoods (LOADTIMECONSTANT                                                                             (OldClass HighRoller))                                                   (FUNCTION NILL))                                         self) (CDDR Send-Super-Args]                  (_SuperFringe                   (&REST Send-Super-Args)                   (COND                      [(NULL Send-Super-Args)                       (LIST 'for 'cls 'in (LIST 'fetch 'localSupers 'of (LIST 'LOADTIMECONSTANT                                                                               (LIST 'OldClass                                                                                      class-name)))                             'do                             (LIST* 'DOAPPLY* [LIST* 'OR (LIST 'FetchMethod 'cls (LIST 'QUOTE                                                                                        selector))                                                     '((FUNCTION NILL]                                    (NCONC args]                      ((NEQ 'BuyGoods (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (LIST* 'for 'cls 'in '(fetch localSupers of (LOADTIMECONSTANT (OldClass                                                                                        HighRoller)))                                'bind                                [LIST 'argList '_ (LIST* 'MAPCAR [LIST 'QUOTE                                                                       (CONS (CAR Send-Super-Args)                                                                             (NCONC (CDDR                                                                                       Send-Super-Args                                                                                          ]                                                         '((FUNCTION EVAL]                                '(do (APPLY (OR (FetchMethod cls 'BuyGoods)                                                (FUNCTION NILL))                                            argList]           (PROG (^auditRecord ^value commodity volumeCapacity weightCapacity volumeLimit weightLimit                         cashLimit producerLimit numBuy)             ^firstRules                 [SETQ ^value (SETQ commodity (GetClassValue (GetValue (GetValue self 'truck)                                                                    'location)                                                     'Commodity]                 [COND                    ((NOT (SUBCLASS commodity ($ LuxuryGoods)))                     (SETQ ^value (PROGN                     (* ^value set by RuleSetStop)                                         (RuleSetStop NIL 'NoBuy 'NotLuxury)                                         (GO QUIT]                 [SETQ ^value (PROGN [SETQ volumeCapacity (DIFFERENCE (GetClassValue                                                                       (GetValue self 'truck)                                                                       'MaxVolume)                                                                 (GetValue (GetValue self                                                                                  'truck)                                                                        'volume]                                     [SETQ weightCapacity (DIFFERENCE (GetClassValue                                                                       (GetValue self 'truck)                                                                       'MaxWeight)                                                                 (GetValue (GetValue self                                                                                  'truck)                                                                        'weight]                                     [SETQ volumeLimit (QUOTIENT volumeCapacity (GetClassValue                                                                                 commodity                                                                                 'VolPerQty]                                     [SETQ weightLimit (QUOTIENT weightCapacity (GetClassValue                                                                                 commodity                                                                                 'WtPerQty]                                     [SETQ cashLimit (QUOTIENT (GetValue (GetValue self 'truck)                                                                      'cashBox)                                                            (PricePerUnit (GetValue                                                                           (GetValue self                                                                                  'truck)                                                                           'location]                                     (SETQ producerLimit (GetValue (GetValue (GetValue self                                                                                    'truck)                                                                          'location)                                                                'qty))                                     (SETQ numBuy (MIN volumeLimit weightLimit cashLimit                                                        producerLimit]                 [COND                    ((GEQ numBuy 1)                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 589]                                         (_ gameMaster Buy self numBuy)                                         (PutAuditRec self 'goal 'Sell ^auditRecord)                                         (PutAuditRec self 'destination (NearestRoadStop (Buyers                                                                                          commodity))                                                ^auditRecord]             QUIT             ^lastRules                 (RETURN ^value])(HighRoller.FindStoppingPlace  [LAMBDA (self)    (CL:MACROLET [[ArgsOfMethodBeingCompiled NIL ''(self]                  (ClassNameOfMethodOwner NIL ''HighRoller)                  (SelectorOfMethodBeingCompiled NIL ''FindStoppingPlace)                  (SelfOfMethodBeingCompiled NIL 'self)                  (_Super (&REST Send-Super-Args)                          [COND                             ((NULL Send-Super-Args)                              '(DOAPPLY* (FindSuperMethod self 'FindStoppingPlace (LOADTIMECONSTANT                                                                                   (OldClass                                                                                           HighRoller)                                                                                   ))                                      self))                             ((NEQ 'FindStoppingPlace (CADR Send-Super-Args))                              (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                               )))                             ((NEQ 'self (CAR Send-Super-Args))                              (ERROR "Can't _Super to other then first arg of method" (CDR                                                                                       Send-Super-Args                                                                                           )))                             (T (APPEND '(DOAPPLY* (FindSuperMethod self 'FindStoppingPlace                                                          (LOADTIMECONSTANT (OldClass HighRoller)))                                                self) (CDDR Send-Super-Args])                  [_Super?                   (&REST Send-Super-Args)                   (COND                      ((NULL Send-Super-Args)                       '(DOAPPLY* (FindSuperMethod self 'FindStoppingPlace (LOADTIMECONSTANT                                                                            (OldClass HighRoller))                                         (FUNCTION NILL))                               self))                      ((NEQ 'FindStoppingPlace (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (APPEND '(DOAPPLY* (FindSuperMethod self 'FindStoppingPlace                                                   (LOADTIMECONSTANT (OldClass HighRoller))                                                   (FUNCTION NILL))                                         self) (CDDR Send-Super-Args]                  (_SuperFringe                   (&REST Send-Super-Args)                   (COND                      [(NULL Send-Super-Args)                       (LIST 'for 'cls 'in (LIST 'fetch 'localSupers 'of (LIST 'LOADTIMECONSTANT                                                                               (LIST 'OldClass                                                                                      class-name)))                             'do                             (LIST* 'DOAPPLY* [LIST* 'OR (LIST 'FetchMethod 'cls (LIST 'QUOTE                                                                                        selector))                                                     '((FUNCTION NILL]                                    (NCONC args]                      ((NEQ 'FindStoppingPlace (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (LIST* 'for 'cls 'in '(fetch localSupers of (LOADTIMECONSTANT (OldClass                                                                                        HighRoller)))                                'bind                                [LIST 'argList '_ (LIST* 'MAPCAR [LIST 'QUOTE                                                                       (CONS (CAR Send-Super-Args)                                                                             (NCONC (CDDR                                                                                       Send-Super-Args                                                                                          ]                                                         '((FUNCTION EVAL]                                '(do (APPLY (OR (FetchMethod cls 'FindStoppingPlace)                                                (FUNCTION NILL))                                            argList]           (PROG (^auditRecord ^value wStation gasStation)             ^firstRules                 [COND                    [(EQ (GetValue (GetValue self 'truck)                                'fuel)                         0)                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 591]                                         (PutAuditRec self 'stoppingPlace (AnyRoadStop ($ UnionHall))                                                ^auditRecord]                    [[AND [LESSP (GetValue (GetValue self 'truck)                                        'fuel)                                 (TIMES 0.25 (GetClassValue (GetValue self 'truck)                                                    'MaxFuel]                          (GREATERP (GetValue (GetValue self 'truck)                                           'cashBox)                                 0)                          (SETQ gasStation (NearestRoadStop (RoadStops ($ GasStation)                                                                   (_ self Range1)                                                                   NIL                                                                   'Room]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 592]                                         (PutAuditRec self 'stoppingPlace gasStation ^auditRecord]                    [[AND [SETQ wStation (NearestRoadStop (RoadStops ($ WeighStation)                                                                 (_ self Range1)                                                                 (GetValue self 'direction)                                                                 'Room]                          (LESSP (Distance wStation)                                 (Distance (GetValue self 'destination]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 593]                                         (PutAuditRec self 'stoppingPlace wStation ^auditRecord]                    [[AND (LEQ (Distance (GetValue self 'destination))                               (_ self Range1))                          (RoomToParkP (GetValue self 'destination]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 594]                                         (PutAuditRec self 'stoppingPlace (GetValue self 'destination                                                                                 )                                                ^auditRecord]                    [[SETQ gasStation (FurthestRoadStop (RoadStops ($ GasStation)                                                               (_ self Range1)                                                               (GetValue self 'direction)                                                               'Room]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 595]                                         (PutAuditRec self 'stoppingPlace gasStation ^auditRecord]                    (T (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                  (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                        New))                                                  (PutValue ^auditRecord 'rule                                                         (GetObjFromUID '(LOX0.%:F5.o28.D_; . 596]                                           (PutAuditRec self 'stoppingPlace                                                  (NthRoadStop (GetValue self 'maxMove)                                                         (GetValue self 'direction)                                                         NIL                                                         'Room)                                                  ^auditRecord]             QUIT             ^lastRules                 (RETURN ^value])(HighRoller.GoToStoppingPlace  [LAMBDA (self)    (CL:MACROLET [[ArgsOfMethodBeingCompiled NIL ''(self]                  (ClassNameOfMethodOwner NIL ''HighRoller)                  (SelectorOfMethodBeingCompiled NIL ''GoToStoppingPlace)                  (SelfOfMethodBeingCompiled NIL 'self)                  (_Super (&REST Send-Super-Args)                          [COND                             ((NULL Send-Super-Args)                              '(DOAPPLY* (FindSuperMethod self 'GoToStoppingPlace (LOADTIMECONSTANT                                                                                   (OldClass                                                                                           HighRoller)                                                                                   ))                                      self))                             ((NEQ 'GoToStoppingPlace (CADR Send-Super-Args))                              (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                               )))                             ((NEQ 'self (CAR Send-Super-Args))                              (ERROR "Can't _Super to other then first arg of method" (CDR                                                                                       Send-Super-Args                                                                                           )))                             (T (APPEND '(DOAPPLY* (FindSuperMethod self 'GoToStoppingPlace                                                          (LOADTIMECONSTANT (OldClass HighRoller)))                                                self) (CDDR Send-Super-Args])                  [_Super?                   (&REST Send-Super-Args)                   (COND                      ((NULL Send-Super-Args)                       '(DOAPPLY* (FindSuperMethod self 'GoToStoppingPlace (LOADTIMECONSTANT                                                                            (OldClass HighRoller))                                         (FUNCTION NILL))                               self))                      ((NEQ 'GoToStoppingPlace (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (APPEND '(DOAPPLY* (FindSuperMethod self 'GoToStoppingPlace                                                   (LOADTIMECONSTANT (OldClass HighRoller))                                                   (FUNCTION NILL))                                         self) (CDDR Send-Super-Args]                  (_SuperFringe                   (&REST Send-Super-Args)                   (COND                      [(NULL Send-Super-Args)                       (LIST 'for 'cls 'in (LIST 'fetch 'localSupers 'of (LIST 'LOADTIMECONSTANT                                                                               (LIST 'OldClass                                                                                      class-name)))                             'do                             (LIST* 'DOAPPLY* [LIST* 'OR (LIST 'FetchMethod 'cls (LIST 'QUOTE                                                                                        selector))                                                     '((FUNCTION NILL]                                    (NCONC args]                      ((NEQ 'GoToStoppingPlace (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (LIST* 'for 'cls 'in '(fetch localSupers of (LOADTIMECONSTANT (OldClass                                                                                        HighRoller)))                                'bind                                [LIST 'argList '_ (LIST* 'MAPCAR [LIST 'QUOTE                                                                       (CONS (CAR Send-Super-Args)                                                                             (NCONC (CDDR                                                                                       Send-Super-Args                                                                                          ]                                                         '((FUNCTION EVAL]                                '(do (APPLY (OR (FetchMethod cls 'GoToStoppingPlace)                                                (FUNCTION NILL))                                            argList]           (PROG (^auditRecord ^value realLocation)             ^firstRules                 (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                            (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                  New))                                            (PutValue ^auditRecord 'rule (GetObjFromUID                                                                          '(LOX0.%:F5.o28.D_; . 598]                                     (PutAuditRec self 'direction (DirectionOf (GetValue self                                                                                      'destination))                                            ^auditRecord)))                 [SETQ ^value (PROGN (_ self FindStoppingPlace)                                     (_ gameMaster Move self (GetValue self 'stoppingPlace))                                     (SETQ realLocation (GetValue (GetValue self 'truck)                                                               'location]                 [COND                    ((NEQ realLocation (GetValue self 'stoppingPlace))                     (SETQ ^value (WriteGameStatus NIL "I've been intercepted!"]                 [COND                    ((ISA realLocation ($ GasStation))                     (SETQ ^value (_ self BuyGas)]                 [COND                    ((AND (ISA realLocation ($ Producer))                          (SUBCLASS (GetClassValue realLocation 'Commodity)                                 ($ LuxuryGoods))                          (EQ (GetValue self 'goal)                              'Buy))                     (SETQ ^value (_ self BuyGoods)]                 [COND                    ((AND (ISA realLocation ($ Consumer))                          (GetValue (GetValue self 'truck)                                 'cargo)                          (EQ (GetValue self 'goal)                              'Sell))                     (SETQ ^value (_ self SellGoods)]             QUIT             ^lastRules                 (RETURN ^value])(HighRoller.SellGoods  [LAMBDA (self)    (CL:MACROLET [[ArgsOfMethodBeingCompiled NIL ''(self]                  (ClassNameOfMethodOwner NIL ''HighRoller)                  (SelectorOfMethodBeingCompiled NIL ''SellGoods)                  (SelfOfMethodBeingCompiled NIL 'self)                  (_Super (&REST Send-Super-Args)                          [COND                             ((NULL Send-Super-Args)                              '(DOAPPLY* (FindSuperMethod self 'SellGoods (LOADTIMECONSTANT                                                                           (OldClass HighRoller)))                                      self))                             ((NEQ 'SellGoods (CADR Send-Super-Args))                              (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                               )))                             ((NEQ 'self (CAR Send-Super-Args))                              (ERROR "Can't _Super to other then first arg of method" (CDR                                                                                       Send-Super-Args                                                                                           )))                             (T (APPEND '(DOAPPLY* (FindSuperMethod self 'SellGoods                                                          (LOADTIMECONSTANT (OldClass HighRoller)))                                                self) (CDDR Send-Super-Args])                  [_Super?                   (&REST Send-Super-Args)                   (COND                      ((NULL Send-Super-Args)                       '(DOAPPLY* (FindSuperMethod self 'SellGoods (LOADTIMECONSTANT (OldClass                                                                                            HighRoller                                                                                            ))                                         (FUNCTION NILL))                               self))                      ((NEQ 'SellGoods (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (APPEND '(DOAPPLY* (FindSuperMethod self 'SellGoods (LOADTIMECONSTANT                                                                              (OldClass HighRoller))                                                   (FUNCTION NILL))                                         self) (CDDR Send-Super-Args]                  (_SuperFringe                   (&REST Send-Super-Args)                   (COND                      [(NULL Send-Super-Args)                       (LIST 'for 'cls 'in (LIST 'fetch 'localSupers 'of (LIST 'LOADTIMECONSTANT                                                                               (LIST 'OldClass                                                                                      class-name)))                             'do                             (LIST* 'DOAPPLY* [LIST* 'OR (LIST 'FetchMethod 'cls (LIST 'QUOTE                                                                                        selector))                                                     '((FUNCTION NILL]                                    (NCONC args]                      ((NEQ 'SellGoods (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (LIST* 'for 'cls 'in '(fetch localSupers of (LOADTIMECONSTANT (OldClass                                                                                        HighRoller)))                                'bind                                [LIST 'argList '_ (LIST* 'MAPCAR [LIST 'QUOTE                                                                       (CONS (CAR Send-Super-Args)                                                                             (NCONC (CDDR                                                                                       Send-Super-Args                                                                                          ]                                                         '((FUNCTION EVAL]                                '(do (APPLY (OR (FetchMethod cls 'SellGoods)                                                (FUNCTION NILL))                                            argList]           (PROG (^auditRecord ^value cargo sellQty)             ^firstRules                 [COND                    ((NOT (GetValue (GetValue self 'truck)                                 'cargo))                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 600]                                         (PutAuditRec self 'destination NIL ^auditRecord)                                         (WriteGameStatus "Yipes! My cargo is gone!")                                         (PROGN              (* ^value set by RuleSetStop)                                                (RuleSetStop NIL 'NoSale 'NoCargo)                                                (GO QUIT]                 [SETQ ^value (SETQ cargo (CAR (GetValue (GetValue self 'truck)                                                      'cargo]                 [COND                    ((AND [SETQ sellQty (MIN (GetValue (GetValue (GetValue self 'truck)                                                              'location)                                                    'qty)                                             (GetValue cargo 'qty]                          (GREATERP sellQty 0))                     (SETQ ^value (_ gameMaster Sell self cargo sellQty)]                 [COND                    ((AND [SETQ cargo (CAR (GetValue (GetValue self 'truck)                                                  'cargo]                          (GREATERP (GetValue cargo 'qty)                                 0))                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 601]                                         (PutAuditRec self 'destination (NearestRoadStop (Buyers                                                                                          cargo))                                                ^auditRecord)                                         (PutAuditRec self 'direction (DirectionOf                                                                       (GetValue self 'destination))                                                ^auditRecord)                                         (PROGN              (* ^value set by RuleSetStop)                                                (RuleSetStop NIL 'NoSale 'CantSell)                                                (GO QUIT]             QUIT             ^lastRules                 (RETURN ^value])(HighRoller.TakeTurn  [LAMBDA (self)    (CL:MACROLET [[ArgsOfMethodBeingCompiled NIL ''(self]                  (ClassNameOfMethodOwner NIL ''HighRoller)                  (SelectorOfMethodBeingCompiled NIL ''TakeTurn)                  (SelfOfMethodBeingCompiled NIL 'self)                  (_Super (&REST Send-Super-Args)                          [COND                             ((NULL Send-Super-Args)                              '(DOAPPLY* (FindSuperMethod self 'TakeTurn (LOADTIMECONSTANT                                                                          (OldClass HighRoller)))                                      self))                             ((NEQ 'TakeTurn (CADR Send-Super-Args))                              (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                               )))                             ((NEQ 'self (CAR Send-Super-Args))                              (ERROR "Can't _Super to other then first arg of method" (CDR                                                                                       Send-Super-Args                                                                                           )))                             (T (APPEND '(DOAPPLY* (FindSuperMethod self 'TakeTurn                                                          (LOADTIMECONSTANT (OldClass HighRoller)))                                                self) (CDDR Send-Super-Args])                  [_Super?                   (&REST Send-Super-Args)                   (COND                      ((NULL Send-Super-Args)                       '(DOAPPLY* (FindSuperMethod self 'TakeTurn (LOADTIMECONSTANT (OldClass                                                                                            HighRoller                                                                                           ))                                         (FUNCTION NILL))                               self))                      ((NEQ 'TakeTurn (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (APPEND '(DOAPPLY* (FindSuperMethod self 'TakeTurn (LOADTIMECONSTANT                                                                             (OldClass HighRoller))                                                   (FUNCTION NILL))                                         self) (CDDR Send-Super-Args]                  (_SuperFringe                   (&REST Send-Super-Args)                   (COND                      [(NULL Send-Super-Args)                       (LIST 'for 'cls 'in (LIST 'fetch 'localSupers 'of (LIST 'LOADTIMECONSTANT                                                                               (LIST 'OldClass                                                                                      class-name)))                             'do                             (LIST* 'DOAPPLY* [LIST* 'OR (LIST 'FetchMethod 'cls (LIST 'QUOTE                                                                                        selector))                                                     '((FUNCTION NILL]                                    (NCONC args]                      ((NEQ 'TakeTurn (CADR Send-Super-Args))                       (ERROR "Selector to _Super does not match method selector" (CADR                                                                                       Send-Super-Args                                                                                        )))                      ((NEQ 'self (CAR Send-Super-Args))                       (ERROR "Can't _Super to other then first arg of method" (CDR Send-Super-Args))                       )                      (T (LIST* 'for 'cls 'in '(fetch localSupers of (LOADTIMECONSTANT (OldClass                                                                                        HighRoller)))                                'bind                                [LIST 'argList '_ (LIST* 'MAPCAR [LIST 'QUOTE                                                                       (CONS (CAR Send-Super-Args)                                                                             (NCONC (CDDR                                                                                       Send-Super-Args                                                                                          ]                                                         '((FUNCTION EVAL]                                '(do (APPLY (OR (FetchMethod cls 'TakeTurn)                                                (FUNCTION NILL))                                            argList]           (PROG (^auditRecord ^value alice)             ^firstRules                 [COND                    ([AND (NOT (GetValue self 'goal))                          (NOT (GetValue self 'destination]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 603]                                         (PutAuditRec self 'goal 'Buy ^auditRecord]                 [COND                    ((EQ (GetValue self 'goal)                         'Buy)                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 604]                                         (PutAuditRec self 'destination (NearestRoadStop                                                                         (Sellers ($ LuxuryGoods)))                                                ^auditRecord]                 [COND                    ((OR (NOT (GetValue self 'destination))                         (ISA (GetValue (GetValue self 'truck)                                     'location)                              ($ UnionHall)))                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 605]                                         (PutAuditRec self 'destination (NearestRoadStop                                                                         (Sellers ($ LuxuryGoods)))                                                ^auditRecord)                                         (PutAuditRec self 'goal 'Buy ^auditRecord]                 [COND                    ((AND (NOT (GetValue self 'destination))                          (NOT (Sellers ($ LuxuryGoods)))                          (EQ (GetValue self 'goal)                              'Buy))                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 606]                                         (PutAuditRec self 'goal 'GetClose ^auditRecord)                                         [SETQ alice (NearestRoadStop (RoadStops ($ AlicesRestaurant]                                         (PutAuditRec self 'destination (GetValue alice 'prev)                                                ^auditRecord]                 [COND                    ((AND (LESSP (GetValue Simulator 'timeLeft)                                 50)                          (NEQ (GetValue self 'goal)                               'SitTight)                          (NEQ (GetValue self 'goal)                               'GoToAlices))                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 607]                                         [SETQ alice (NearestRoadStop (RoadStops ($ AlicesRestaurant]                                         (PutAuditRec self 'destination (GetValue alice 'prev)                                                ^auditRecord)                                         (PutAuditRec self 'goal 'GetClose ^auditRecord]                 [COND                    ([AND (LESSP (GetValue Simulator 'timeLeft)                                 20)                          (NOT (ISA (GetValue (GetValue self 'truck)                                           'location)                                    ($ AlicesRestaurant]                     (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                                (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                      New))                                                (PutValue ^auditRecord 'rule                                                       (GetObjFromUID '(LOX0.%:F5.o28.D_; . 608]                                         (PutAuditRec self 'destination (NearestRoadStop                                                                         (RoadStops ($                                                                                      AlicesRestaurant                                                                                       )))                                                ^auditRecord)                                         (PutAuditRec self 'goal 'GoToAlices ^auditRecord]                 (SETQ ^value (_ self GoToStoppingPlace))             QUIT             ^lastRules                 (RETURN ^value]))(\BatchMethodDefs)(METH HighRoller  BuyGoods NIL      "Method implementing a RuleSet" (method HighRoller.BuyGoods RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588)) methodClass RuleSet UID (LOX0.%:F5.o28.D_; . 588))            (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 694)))            (name #,($A HighRoller.BuyGoods NIL RememberName))            (compiledRules HighRoller.BuyGoods)            (workSpace HighRoller)            (tempVars (commodity volumeCapacity weightCapacity volumeLimit weightLimit cashLimit                              producerLimit numBuy))            (taskVars NIL)            (debugVars NIL)            (numRules 4)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions (A))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH HighRoller  FindStoppingPlace NIL      "Method implementing a RuleSet" (method HighRoller.FindStoppingPlace RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590)) methodClass RuleSet UID (LOX0.%:F5.o28.D_; . 590))            (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 695)))            (name #,($A HighRoller.FindStoppingPlace NIL RememberName))            (compiledRules HighRoller.FindStoppingPlace)            (workSpace HighRoller)            (tempVars (wStation gasStation))            (taskVars NIL)            (debugVars NIL)            (numRules 6)            (controlStructure DO1)            (whileCondition NIL)            (compilerOptions (PR A))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH HighRoller  GoToStoppingPlace NIL      "Method implementing a RuleSet" (method HighRoller.GoToStoppingPlace RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597)) methodClass RuleSet UID (LOX0.%:F5.o28.D_; . 597))            (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 696)))            (name #,($A HighRoller.GoToStoppingPlace NIL RememberName))            (compiledRules HighRoller.GoToStoppingPlace)            (workSpace HighRoller)            (tempVars (realLocation))            (taskVars NIL)            (debugVars NIL)            (numRules 6)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions (PR A))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH HighRoller  SellGoods NIL      "Method implementing a RuleSet" (method HighRoller.SellGoods RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599)) methodClass RuleSet UID (LOX0.%:F5.o28.D_; . 599))            (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 697)))            (name #,($A HighRoller.SellGoods NIL RememberName))            (compiledRules HighRoller.SellGoods)            (workSpace HighRoller)            (tempVars (cargo sellQty))            (taskVars NIL)            (debugVars NIL)            (numRules 4)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions (A))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(METH HighRoller  TakeTurn NIL      "Method implementing a RuleSet" (method HighRoller.TakeTurn RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602)) methodClass RuleSet UID (LOX0.%:F5.o28.D_; . 602))            (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 698)))            (name #,($A HighRoller.TakeTurn NIL RememberName))            (compiledRules HighRoller.TakeTurn)            (workSpace HighRoller)            (tempVars (alice))            (taskVars NIL)            (debugVars NIL)            (numRules 7)            (controlStructure DOALL)            (whileCondition NIL)            (compilerOptions (A))            (auditClass NIL)            (metaAssignments NIL)            (ruleClass NIL))(DEFINST RuleSetNode ((LOX0.%:F5.o28.D_; . 694))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588)) Source #,($& RuleSetSource (LOX0.%:F5.o28.D_; . 699))))(DEFINST RuleSetNode ((LOX0.%:F5.o28.D_; . 695))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590)) Source #,($& RuleSetSource (LOX0.%:F5.o28.D_; . 700))))(DEFINST RuleSetNode ((LOX0.%:F5.o28.D_; . 696))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597)) Source #,($& RuleSetSource (LOX0.%:F5.o28.D_; . 701))))(DEFINST RuleSetNode ((LOX0.%:F5.o28.D_; . 697))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599)) Source #,($& RuleSetSource (LOX0.%:F5.o28.D_; . 702))))(DEFINST RuleSetNode ((LOX0.%:F5.o28.D_; . 698))         (perspectives #,NotSetValue RuleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602)) Source #,($& RuleSetSource (LOX0.%:F5.o28.D_; . 703))))(DEFINST RuleSetSource ((LOX0.%:F5.o28.D_; . 699))         (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 694)))         (created "15-Jul-88 15:33:38")         (creator "BANE")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleList (#,($& Rule (LOX0.%:F5.o28.D_; . 704)) #,($& Rule (LOX0.%:F5.o28.D_; . 705)) #,($& Rule (LOX0.%:F5.o28.D_; . 706)) #,($& Rule (LOX0.%:F5.o28.D_; . 707)))))(DEFINST RuleSetSource ((LOX0.%:F5.o28.D_; . 700))         (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 695)))         (created "15-Jul-88 15:33:43")         (creator "BANE")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleList (#,($& Rule (LOX0.%:F5.o28.D_; . 708)) #,($& Rule (LOX0.%:F5.o28.D_; . 709)) #,($& Rule (LOX0.%:F5.o28.D_; . 710)) #,($& Rule (LOX0.%:F5.o28.D_; . 711)) #,($& Rule (LOX0.%:F5.o28.D_; . 712)) #,($& Rule (LOX0.%:F5.o28.D_; . 713)))))(DEFINST RuleSetSource ((LOX0.%:F5.o28.D_; . 701))         (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 696)))         (created "15-Jul-88 15:33:50")         (creator "BANE")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleList (#,($& Rule (LOX0.%:F5.o28.D_; . 714)) #,($& Rule (LOX0.%:F5.o28.D_; . 715)) #,($& Rule (LOX0.%:F5.o28.D_; . 716)) #,($& Rule (LOX0.%:F5.o28.D_; . 717)) #,($& Rule (LOX0.%:F5.o28.D_; . 718)) #,($& Rule (LOX0.%:F5.o28.D_; . 719)))))(DEFINST RuleSetSource ((LOX0.%:F5.o28.D_; . 702))         (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 697)))         (created "15-Jul-88 15:33:54")         (creator "BANE")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleList (#,($& Rule (LOX0.%:F5.o28.D_; . 720)) #,($& Rule (LOX0.%:F5.o28.D_; . 721)) #,($& Rule (LOX0.%:F5.o28.D_; . 722)) #,($& Rule (LOX0.%:F5.o28.D_; . 723)))))(DEFINST RuleSetSource ((LOX0.%:F5.o28.D_; . 703))         (perspectiveNode #,($& RuleSetNode (LOX0.%:F5.o28.D_; . 698)))         (created "15-Jul-88 15:33:59")         (creator "BANE")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleList (#,($& Rule (LOX0.%:F5.o28.D_; . 724)) #,($& Rule (LOX0.%:F5.o28.D_; . 725)) #,($& Rule (LOX0.%:F5.o28.D_; . 726)) #,($& Rule (LOX0.%:F5.o28.D_; . 727)) #,($& Rule (LOX0.%:F5.o28.D_; . 728)) #,($& Rule (LOX0.%:F5.o28.D_; . 729)) #,($& Rule (LOX0.%:F5.o28.D_; . 730)))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 704))         (source        "	(* Rules for deciding what and how much to buy.)-> commodity _	truck:location::Commodity;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 705))         (source "IF ~(SUBCLASS commodity $LuxuryGoods)THEN (STOP NIL 'NoBuy 'NotLuxury);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 706))         (source "(* Sale can be limited by volume, weight, cash, or availability.)-> volumeCapacity _ truck::MaxVolume-truck:volume   weightCapacity _ truck::MaxWeight-truck:weight      volumeLimit _ volumeCapacity / commodity::VolPerQty   weightLimit _ weightCapacity / commodity::WtPerQty   cashLimit _ truck:cashBox / (PricePerUnit truck:location)   producerLimit _ truck:location:qty   numBuy _ (MIN volumeLimit weightLimit cashLimit producerLimit);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 707))         (source "(* Buy as much as possible, then decide to sell it.)IF numBuy>=1THEN (_ gameMaster Buy self numBuy)     goal_'Sell     destination_(NearestRoadStop (Buyers commodity));")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 588))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 708))         (source "(* Returns a stopping place en route to a destination.)IF truck:fuel=0THEN stoppingPlace_(AnyRoadStop $UnionHall);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 709))         (source "(* Dont run out if gas.)IF truck:fuel < .25 * truck::MaxFuel   truck:cashBox>0   gasStation_(NearestRoadStop (RoadStops $GasStation .Range1 NIL 'Room))THEN stoppingPlace_gasStation;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 710))         (source "(* Obey the law - stop at WeighStations.)IF wStation_(NearestRoadStop (RoadStops $WeighStation .Range1 direction 'Room))   (Distance wStation)<(Distance destination)THEN stoppingPlace_wStation;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 711))         (source        "IF (Distance destination)<=.Range1 (RoomToParkP destination)THEN stoppingPlace_destination;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 712))         (source "IF gasStation_(FurthestRoadStop (RoadStops $GasStation .Range1 direction 'Room))THEN stoppingPlace_gasStation;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 5)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 713))         (source "THEN stoppingPlace_(NthRoadStop  maxMove direction NIL 'Room);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 6)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 590))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 714))         (source "	-> direction_(DirectionOf destination);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 715))         (source "	THEN .FindStoppingPlace	(_ gameMaster Move self stoppingPlace)        realLocation_truck:location;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 716))         (source            "	IF realLocation~=stoppingPlace 	THEN (WriteGameStatus NIL %"I've been intercepted!%");")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 717))         (source "	IF (ISA realLocation $GasStation)	THEN .BuyGas;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 718))         (source "	IF (ISA realLocation $Producer)	   (SUBCLASS  realLocation::Commodity $LuxuryGoods)	   goal='Buy 	THEN .BuyGoods;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 5)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 719))         (source "	IF (ISA realLocation $Consumer) truck:cargo	   goal='Sell 	THEN .SellGoods;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 6)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 597))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 720))         (source "(* Abort sale if cargo has disappeared.)	IF ~truck:cargo	THEN destination_NIL	(WriteGameStatus %"Yipes! My cargo is gone!%")	(STOP NIL 'NoSale 'NoCargo);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 721))         (source "        -> cargo_(CAR truck:cargo);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 722))         (source "(* Make sale as limited by cargo and consumer.)	IF sellQty_(MIN truck:location:qty cargo:qty) sellQty>0 	THEN (_ gameMaster Sell self cargo sellQty);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 723))         (source "(* Find another buyer if all not sold.)	IF cargo_(CAR truck:cargo) cargo:qty>0	THEN destination_(NearestRoadStop (Buyers cargo))	     direction_(DirectionOf destination)	     (STOP NIL 'NoSale 'CantSell);")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 599))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 724))         (source   "    (* Top Level RuleSet.  Sets goal and destination.)	IF ~goal ~destination	THEN goal_'Buy;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 1)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 725))         (source "   (* Fix up destination in case it sold out.)	IF goal='Buy	THEN destination_(NearestRoadStop (Sellers $LuxuryGoods ));")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 2)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 726))         (source "   (* Initialization for beginning of game or restarting from Union Hall.)	IF (OR ~destination (ISA truck:location  $UnionHall))	THEN destination_(NearestRoadStop (Sellers $LuxuryGoods))	     goal_'Buy;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 3)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 727))         (source "   (* Just get close if Luxury goods are running low.)	IF ~destination ~(Sellers $LuxuryGoods) goal='Buy	THEN goal_'GetClose	      alice_ (NearestRoadStop (RoadStops $AlicesRestaurant))	      destination_ alice:prev;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 4)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 728))         (source "   (* Get near to Alices when time gets close)			IF Simulator:timeLeft < 50 goal~='SitTight goal~='GoToAlices  	THEN  alice_ (NearestRoadStop (RoadStops $AlicesRestaurant))	      destination_ alice:prev	      goal_'GetClose;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 5)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 729))         (source "   (* Go right to Alice's now that it is time)        IF Simulator:timeLeft < 20            ~(ISA truck:location $AlicesRestaurant)   	THEN destination_ (NearestRoadStop (RoadStops $AlicesRestaurant))             goal_'GoToAlices ;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 6)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(DEFINST Rule ((LOX0.%:F5.o28.D_; . 730))         (source "	-> .GoToStoppingPlace;")         (edited "11-Jul-88 21:48:50")         (editor BANE)         (ruleNumber 7)         (ruleSet #,($& RuleSet (LOX0.%:F5.o28.D_; . 602))))(Method ((HighRoller BuyGoods) self) "Method implementing a RuleSet"   (PROG (^auditRecord ^value commodity volumeCapacity weightCapacity volumeLimit weightLimit                 cashLimit producerLimit numBuy)     ^firstRules         [SETQ ^value (SETQ commodity (GetClassValue (GetValue (GetValue self 'truck)                                                            'location)                                             'Commodity]         [COND            ((NOT (SUBCLASS commodity ($ LuxuryGoods)))             (SETQ ^value (PROGN                             (* ^value set by RuleSetStop)                                 (RuleSetStop NIL 'NoBuy 'NotLuxury)                                 (GO QUIT]         [SETQ ^value (PROGN [SETQ volumeCapacity (DIFFERENCE (GetClassValue (GetValue self                                                                                    'truck)                                                                     'MaxVolume)                                                         (GetValue (GetValue self 'truck)                                                                'volume]                             [SETQ weightCapacity (DIFFERENCE (GetClassValue (GetValue self                                                                                    'truck)                                                                     'MaxWeight)                                                         (GetValue (GetValue self 'truck)                                                                'weight]                             [SETQ volumeLimit (QUOTIENT volumeCapacity (GetClassValue commodity                                                                               'VolPerQty]                             [SETQ weightLimit (QUOTIENT weightCapacity (GetClassValue commodity                                                                               'WtPerQty]                             [SETQ cashLimit (QUOTIENT (GetValue (GetValue self 'truck)                                                              'cashBox)                                                    (PricePerUnit (GetValue (GetValue self                                                                                   'truck)                                                                         'location]                             (SETQ producerLimit (GetValue (GetValue (GetValue self 'truck)                                                                  'location)                                                        'qty))                             (SETQ numBuy (MIN volumeLimit weightLimit cashLimit producerLimit]         [COND            ((GEQ numBuy 1)             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 589]                                 (_ gameMaster Buy self numBuy)                                 (PutAuditRec self 'goal 'Sell ^auditRecord)                                 (PutAuditRec self 'destination (NearestRoadStop (Buyers commodity))                                        ^auditRecord]     QUIT     ^lastRules         (RETURN ^value)))(Method ((HighRoller FindStoppingPlace) self) "Method implementing a RuleSet"   (PROG (^auditRecord ^value wStation gasStation)     ^firstRules         [COND            [(EQ (GetValue (GetValue self 'truck)                        'fuel)                 0)             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 591]                                 (PutAuditRec self 'stoppingPlace (AnyRoadStop ($ UnionHall))                                        ^auditRecord]            [[AND [LESSP (GetValue (GetValue self 'truck)                                'fuel)                         (TIMES 0.25 (GetClassValue (GetValue self 'truck)                                            'MaxFuel]                  (GREATERP (GetValue (GetValue self 'truck)                                   'cashBox)                         0)                  (SETQ gasStation (NearestRoadStop (RoadStops ($ GasStation)                                                           (_ self Range1)                                                           NIL                                                           'Room]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 592]                                 (PutAuditRec self 'stoppingPlace gasStation ^auditRecord]            [[AND [SETQ wStation (NearestRoadStop (RoadStops ($ WeighStation)                                                         (_ self Range1)                                                         (GetValue self 'direction)                                                         'Room]                  (LESSP (Distance wStation)                         (Distance (GetValue self 'destination]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 593]                                 (PutAuditRec self 'stoppingPlace wStation ^auditRecord]            [[AND (LEQ (Distance (GetValue self 'destination))                       (_ self Range1))                  (RoomToParkP (GetValue self 'destination]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 594]                                 (PutAuditRec self 'stoppingPlace (GetValue self 'destination)                                        ^auditRecord]            [[SETQ gasStation (FurthestRoadStop (RoadStops ($ GasStation)                                                       (_ self Range1)                                                       (GetValue self 'direction)                                                       'Room]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 595]                                 (PutAuditRec self 'stoppingPlace gasStation ^auditRecord]            (T (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                          (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                                New))                                          (PutValue ^auditRecord 'rule (GetObjFromUID                                                                        '(LOX0.%:F5.o28.D_; . 596]                                   (PutAuditRec self 'stoppingPlace (NthRoadStop (GetValue                                                                                  self                                                                                  'maxMove)                                                                           (GetValue self                                                                                  'direction)                                                                           NIL                                                                           'Room)                                          ^auditRecord]     QUIT     ^lastRules         (RETURN ^value)))(Method ((HighRoller GoToStoppingPlace) self) "Method implementing a RuleSet"   (PROG (^auditRecord ^value realLocation)     ^firstRules         (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                    (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                          New))                                    (PutValue ^auditRecord 'rule (GetObjFromUID '(LOX0.%:F5.o28.D_; . 598                                                                                  ]                             (PutAuditRec self 'direction (DirectionOf (GetValue self 'destination))                                    ^auditRecord)))         [SETQ ^value (PROGN (_ self FindStoppingPlace)                             (_ gameMaster Move self (GetValue self 'stoppingPlace))                             (SETQ realLocation (GetValue (GetValue self 'truck)                                                       'location]         [COND            ((NEQ realLocation (GetValue self 'stoppingPlace))             (SETQ ^value (WriteGameStatus NIL "I've been intercepted!"]         [COND            ((ISA realLocation ($ GasStation))             (SETQ ^value (_ self BuyGas)]         [COND            ((AND (ISA realLocation ($ Producer))                  (SUBCLASS (GetClassValue realLocation 'Commodity)                         ($ LuxuryGoods))                  (EQ (GetValue self 'goal)                      'Buy))             (SETQ ^value (_ self BuyGoods)]         [COND            ((AND (ISA realLocation ($ Consumer))                  (GetValue (GetValue self 'truck)                         'cargo)                  (EQ (GetValue self 'goal)                      'Sell))             (SETQ ^value (_ self SellGoods)]     QUIT     ^lastRules         (RETURN ^value)))(Method ((HighRoller SellGoods) self) "Method implementing a RuleSet"   (PROG (^auditRecord ^value cargo sellQty)     ^firstRules         [COND            ((NOT (GetValue (GetValue self 'truck)                         'cargo))             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 600]                                 (PutAuditRec self 'destination NIL ^auditRecord)                                 (WriteGameStatus "Yipes! My cargo is gone!")                                 (PROGN                      (* ^value set by RuleSetStop)                                        (RuleSetStop NIL 'NoSale 'NoCargo)                                        (GO QUIT]         [SETQ ^value (SETQ cargo (CAR (GetValue (GetValue self 'truck)                                              'cargo]         [COND            ((AND [SETQ sellQty (MIN (GetValue (GetValue (GetValue self 'truck)                                                      'location)                                            'qty)                                     (GetValue cargo 'qty]                  (GREATERP sellQty 0))             (SETQ ^value (_ gameMaster Sell self cargo sellQty)]         [COND            ((AND [SETQ cargo (CAR (GetValue (GetValue self 'truck)                                          'cargo]                  (GREATERP (GetValue cargo 'qty)                         0))             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 601]                                 (PutAuditRec self 'destination (NearestRoadStop (Buyers cargo))                                        ^auditRecord)                                 (PutAuditRec self 'direction (DirectionOf (GetValue self                                                                                  'destination))                                        ^auditRecord)                                 (PROGN                      (* ^value set by RuleSetStop)                                        (RuleSetStop NIL 'NoSale 'CantSell)                                        (GO QUIT]     QUIT     ^lastRules         (RETURN ^value)))(Method ((HighRoller TakeTurn) self) "Method implementing a RuleSet"   (PROG (^auditRecord ^value alice)     ^firstRules         [COND            ([AND (NOT (GetValue self 'goal))                  (NOT (GetValue self 'destination]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 603]                                 (PutAuditRec self 'goal 'Buy ^auditRecord]         [COND            ((EQ (GetValue self 'goal)                 'Buy)             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 604]                                 (PutAuditRec self 'destination (NearestRoadStop (Sellers                                                                                  ($ LuxuryGoods)))                                        ^auditRecord]         [COND            ((OR (NOT (GetValue self 'destination))                 (ISA (GetValue (GetValue self 'truck)                             'location)                      ($ UnionHall)))             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 605]                                 (PutAuditRec self 'destination (NearestRoadStop (Sellers                                                                                  ($ LuxuryGoods)))                                        ^auditRecord)                                 (PutAuditRec self 'goal 'Buy ^auditRecord]         [COND            ((AND (NOT (GetValue self 'destination))                  (NOT (Sellers ($ LuxuryGoods)))                  (EQ (GetValue self 'goal)                      'Buy))             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 606]                                 (PutAuditRec self 'goal 'GetClose ^auditRecord)                                 [SETQ alice (NearestRoadStop (RoadStops ($ AlicesRestaurant]                                 (PutAuditRec self 'destination (GetValue alice 'prev)                                        ^auditRecord]         [COND            ((AND (LESSP (GetValue Simulator 'timeLeft)                         50)                  (NEQ (GetValue self 'goal)                       'SitTight)                  (NEQ (GetValue self 'goal)                       'GoToAlices))             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 607]                                 [SETQ alice (NearestRoadStop (RoadStops ($ AlicesRestaurant]                                 (PutAuditRec self 'destination (GetValue alice 'prev)                                        ^auditRecord)                                 (PutAuditRec self 'goal 'GetClose ^auditRecord]         [COND            ([AND (LESSP (GetValue Simulator 'timeLeft)                         20)                  (NOT (ISA (GetValue (GetValue self 'truck)                                   'location)                            ($ AlicesRestaurant]             (SETQ ^value (PROGN [PROGN                     (* Make an audit record for this rule and set its audit values.)                                        (SETQ ^auditRecord (_ ($ StandardAuditRecord)                                                              New))                                        (PutValue ^auditRecord 'rule (GetObjFromUID                                                                      '(LOX0.%:F5.o28.D_; . 608]                                 (PutAuditRec self 'destination (NearestRoadStop (RoadStops                                                                                  ($ AlicesRestaurant                                                                                     )))                                        ^auditRecord)                                 (PutAuditRec self 'goal 'GoToAlices ^auditRecord]         (SETQ ^value (_ self GoToStoppingPlace))     QUIT     ^lastRules         (RETURN ^value)))(\UnbatchMethodDefs)(PUTPROPS HIGHROLLER COPYRIGHT ("Xerox Corporation" 1987 1988))(DECLARE%: DONTCOPY  (FILEMAP (NIL (2074 51142 (HighRoller.BuyGoods 2084 . 11793) (HighRoller.FindStoppingPlace 11795 . 23305) (HighRoller.GoToStoppingPlace 23307 . 30951) (HighRoller.SellGoods 30953 . 39500) (HighRoller.TakeTurn 39502 . 51140)))))STOP