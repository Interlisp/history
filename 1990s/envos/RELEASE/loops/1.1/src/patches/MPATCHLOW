(DEFINE-FILE-INFO READTABLE "INTERLISP" PACKAGE "INTERLISP")(FILECREATED "12-Aug-88 17:46:50" |{POGO:AISNORTH:XEROX}<LIPKIS>SYSTEM>MPATCHLOW.;5| 30355        changes to%:  (VARS MPATCHLOWCOMS) (FNS \MyTTW1 \MyTEDIT.WINDOW.TITLE)      previous date%: "27-Jul-88 08:44:34" |{POGO:AISNORTH:XEROX}<LIPKIS>SYSTEM>MPATCHLOW.;3|)(* "Copyright (c) 1988 by Savoir, Inc..  All rights reserved.")(PRETTYCOMPRINT MPATCHLOWCOMS)(RPAQQ MPATCHLOWCOMS ((* ;;; "Local fixes and additions that require EXPORTS.ALL") (COMS (FNS FastSTREQUAL \RESETSTRINGSTREAM \ThinString) (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MOVD? (QUOTE STREQUAL) (QUOTE OLDSTREQUAL)) (MOVD (QUOTE FastSTREQUAL) (QUOTE STREQUAL))))) (COMS (* ;; "\TTW1 conses excessively.  Use WHOSCREEN instead of (SCREEN SCREGION)") (FNS \MyTTW1) (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MOVD? (QUOTE \TTW1) (QUOTE \OldTTW1)) (MOVD (QUOTE \MyTTW1) (QUOTE \TTW1))))) (COMS (* ;; "Set DSPRIGHTMARGIN high for wide scrollable menus") (FNS MyUPDATE/MENU/IMAGE) (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MOVD? (QUOTE UPDATE/MENU/IMAGE) (QUOTE OldUPDATE/MENU/IMAGE)) (MOVD (QUOTE MyUPDATE/MENU/IMAGE) (QUOTE UPDATE/MENU/IMAGE))))) (COMS (* ;; "TEdit feature to create attached promptwindow when needed, bug fix in TEDIT.GETINPUT and cheapo hack to cause redisplay when scrolling tedit windows from off screen") (FNS TEDIT.GETINPUT TEDIT.PROMPTPRINT \MyTEDIT.SCROLLFN \MyTEDIT.WINDOW.TITLE) (DECLARE%: DONTEVAL@LOAD DOCOPY (P (MOVD? (QUOTE \TEDIT.SCROLLFN) (QUOTE \OldTEDIT.SCROLLFN)) (MOVD (QUOTE \MyTEDIT.SCROLLFN) (QUOTE \TEDIT.SCROLLFN))) (P (MOVD? (QUOTE \TEDIT.WINDOW.TITLE) (QUOTE \OldTEDIT.WINDOW.TITLE)) (MOVD (QUOTE \MyTEDIT.WINDOW.TITLE) (QUOTE \TEDIT.WINDOW.TITLE))))) (COMS (* ;; "SPP mods not yet done for Lyric") (FNS SPP.OTHERPROP)) (PROP FILETYPE MPATCHLOW) (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA) (NLAML) (LAMA SPP.OTHERPROP)))))(* ;;; "Local fixes and additions that require EXPORTS.ALL")(DEFINEQ(FastSTREQUAL  [LAMBDA (X Y)                                              (* ; "Edited 10-Jun-88 16:16 by TAL")    (DECLARE (LOCALVARS . T))    (AND (STRINGP X)         (STRINGP Y)         (PROG ((LEN (ffetch (STRINGP LENGTH) of X)))               (COND                  ((NEQ LEN (ffetch (STRINGP LENGTH) of Y))                   (RETURN)))               (RETURN (PROG ((BASEX (ffetch (STRINGP BASE) of X))                              (BNX (ffetch (STRINGP OFFST) of X))                              (FATPX (ffetch (STRINGP FATSTRINGP) of X))                              (BASEY (ffetch (STRINGP BASE) of Y))                              (BNY (ffetch (STRINGP OFFST) of Y))                              (FATPY (ffetch (STRINGP FATSTRINGP) of Y)))                             (COND                                ((OR (NEQ 0 BNX)                                     (NEQ 0 BNY)                                     FATPX FATPY)                                 (GO SLOWLP)))                         LP  (COND                                ((EQ 0 LEN)                                 (RETURN T)))                             (add LEN -1)                             (COND                                ((NEQ (\GETBASEBYTE BASEX LEN)                                      (\GETBASEBYTE BASEY LEN))                                 (RETURN)))                             (GO LP)                         SLOWLP                             (COND                                ((EQ 0 LEN)                                 (RETURN T))                                ((NEQ (\GETBASECHAR FATPX BASEX BNX)                                      (\GETBASECHAR FATPY BASEY BNY))                                 (RETURN))                                (T (add BNX 1)                                   (add BNY 1)                                   (add LEN -1)                                   (GO SLOWLP])(\RESETSTRINGSTREAM  [LAMBDA (STREAM)                                           (* ; "Edited 10-Jun-88 17:05 by TAL")                    (* ;; "Don't know why \MBS.OUTCHARFN insists on incrementing this, but it overflows after reusing the stream too many times")    (replace BBSNCHARS of STREAM with 0)    STREAM])(\ThinString  [LAMBDA (FatString)                                        (* ; "Edited 10-Jun-88 17:08 by TAL")    (DECLARE (LOCALVARS . T))    (COND       ((fetch (STRINGP FATSTRINGP) of FatString)        (LET ((fatBase (fetch (STRINGP BASE) of FatString))              (fatOff (fetch (STRINGP OFFST) of FatString))              (len (fetch (STRINGP LENGTH) of FatString))              thin thinBase thinOff)          (SETQ thin (ALLOCSTRING len))          (SETQ thinBase (fetch (STRINGP BASE) of thin))          (SETQ thinOff (fetch (STRINGP OFFST) of thin))          [for i from 0 to (SUB1 len) do (\PUTBASETHIN thinBase (IPLUS thinOff i)                                                (LOGAND 255 (\GETBASEFAT fatBase (IPLUS fatOff i]          thin))       (T FatString]))(DECLARE%: DONTEVAL@LOAD DOCOPY (MOVD? (QUOTE STREQUAL) (QUOTE OLDSTREQUAL))(MOVD (QUOTE FastSTREQUAL) (QUOTE STREQUAL)))(* ;; "\TTW1 conses excessively.  Use WHOSCREEN instead of (SCREEN SCREGION)")(DEFINEQ(\MyTTW1(LAMBDA (WINDOW WS) (* ; "Edited 12-Aug-88 17:46 by TAL") (DECLARE (GLOBALVARS WHOLESCREEN \SCREENBITMAPS \CURSORDESTINATION \SOFTCURSORUPP \SOFTCURSORP)) (* ;;; "This seems to swap the intersection of bitmaps.") (COND ((fetch (WINDOW NEXTW) of WS) (PROG (ISECT SCREEN) (SETQ SCREEN (fetch (WINDOW SCREEN) of WINDOW)) (.WHILE.TOP.DS. \TOPWDS (SETQ ISECT (INTERSECTREGIONS (fetch (WINDOW REG) of WINDOW) (fetch (WINDOW REG) of WS) WHOLESCREEN)) (AND ISECT (\SW2BM (fetch (WINDOW SAVE) of WS) (TRANSLATEREG ISECT (fetch (WINDOW REG) of WS)) (fetch (SCREEN SCDESTINATION) of SCREEN) ISECT)) (COND ((EQ WINDOW (fetch (WINDOW NEXTW) of WS)) (* ; "doesn't have to be uninterruptable here because TOTOPW is.") (replace (WINDOW NEXTW) of WS with (fetch (WINDOW NEXTW) of WINDOW)) (replace (WINDOW NEXTW) of WINDOW with (fetch (SCREEN SCTOPW) of SCREEN)) (replace (SCREEN SCTOPW) of SCREEN with WINDOW) (SETQ \TOPWDS (fetch (WINDOW DSP) of WINDOW))) (T (\MyTTW1 WINDOW (fetch (WINDOW NEXTW) of WS)))) (AND ISECT (\SW2BM (fetch (WINDOW SAVE) of WINDOW) (TRANSLATEREG ISECT (fetch (WINDOW REG) of WINDOW)) (fetch (WINDOW SAVE) of WS) (TRANSLATEREG ISECT (fetch (WINDOW REG) of WS))))))) ((type? WINDOW WINDOW) (* ; "must be closed window;  reopen it") (OPENW WINDOW))))))(DECLARE%: DONTEVAL@LOAD DOCOPY (MOVD? (QUOTE \TTW1) (QUOTE \OldTTW1))(MOVD (QUOTE \MyTTW1) (QUOTE \TTW1)))(* ;; "Set DSPRIGHTMARGIN high for wide scrollable menus")(DEFINEQ(MyUPDATE/MENU/IMAGE  [LAMBDA (MNU SCREEN)                                   (* ; "Edited 21-Jun-88 13:42 by TAL")    (DECLARE (GLOBALVARS MENUFONT MENUSUBITEMMARK))      (* ;                                                        "recomputes the menu image from its labels.")    (PROG (NUMCOLS NUMROWS WIDTH HEIGHT DSP BLK COLWIDTH ROWHEIGHT BITSPERPIXEL MENUITEMS NITEMS                  BORDER OUTLINE FONT TITLEFONT TITLEHEIGHT TITLEWIDTH WINDOW TITLE ANYSUBITEMS?                  CENTER?)          [COND             ((NULL SCREEN)              (COND                 [(type? WINDOW (fetch (MENU IMAGE) of MNU))                  (SETQ SCREEN (fetch (WINDOW SCREEN) of (fetch (MENU IMAGE) of                                                                                         MNU]                 (T (SETQ SCREEN LASTSCREEN]          (SETQ MENUITEMS (fetch (MENU ITEMS) of MNU))          (SETQ CENTER? (fetch (MENU CENTERFLG) of MNU))                                                             (* ; "check the font.")          (COND             [(FONTP (SETQ FONT (AND (fetch (MENU MENUFONT) of MNU)                                     (\COERCEFONTDESC (fetch (MENU MENUFONT) of MNU)                                            'DISPLAY T]             (T [SETQ FONT (COND                              ((FONTP MENUFONT))                              (T (SETQ MENUFONT (FONTCREATE 'HELVETICA 10]                                                             (* ; "keep font in the menu")                (replace (MENU MENUFONT) of MNU with FONT)))          (COND             ((SETQ TITLE (fetch (MENU TITLE) of MNU))                                                             (* ; "set the title font")              (SETQ TITLEFONT (MENUTITLEFONT MNU SCREEN))              (SETQ TITLEHEIGHT (FONTPROP TITLEFONT 'HEIGHT))              (SETQ TITLEWIDTH (STRINGWIDTH TITLE TITLEFONT)))             (T (SETQ TITLEHEIGHT 0)                (SETQ TITLEWIDTH 0)))                        (* ;                                                          "calculate the number of columns and rows")          (SETQ NITEMS (LENGTH MENUITEMS))          (COND             [(SETQ NUMCOLS (NUMBERP (fetch (MENU MENUCOLUMNS) of MNU)))              (SETQ NUMROWS (COND                               ((NUMBERP (fetch (MENU MENUROWS) of MNU)))                               (T (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NUMCOLS]             [(SETQ NUMROWS (NUMBERP (fetch (MENU MENUROWS) of MNU)))              (SETQ NUMCOLS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                         NUMROWS]             (T (SETQ NUMCOLS 1)                (SETQ NUMROWS NITEMS)))     (* ;; "set BORDER to the size of the outline around each menu item and OUTLINE to the size of the outline around the whole menu.")          (SETQ BORDER (OR (FIXP (fetch (MENU MENUBORDERSIZE) of MNU))                           (replace (MENU MENUBORDERSIZE) of MNU with 0)))          [SETQ OUTLINE (OR (FIXP (fetch (MENU MENUOUTLINESIZE) of MNU))                            (replace (MENU MENUOUTLINESIZE) of MNU with (IMAX BORDER 1]          (SETQ ANYSUBITEMS? (for I in (fetch (MENU ITEMS) of MNU)                                when (\MENUSUBITEMS MNU I) do (RETURN T)))          (COND             ((IGREATERP (SETQ COLWIDTH (fetch (MENU ITEMWIDTH) of MNU))                     5000)              (* ;; "If ITEMWIDTH is greater than 5000, it was probably default clipping region.  if no columnwidth is given {common case}, calculate it from the items widths.")              [SETQ COLWIDTH (IPLUS (MAXMENUITEMWIDTH MNU T)                                    (ITIMES (ADD1 BORDER)                                           2)                                    (COND                                       (ANYSUBITEMS? (BITMAPWIDTH MENUSUBITEMMARK))                                       (T 0]              [COND                 ((IGREATERP (IPLUS TITLEWIDTH 2)                         (ITIMES COLWIDTH NUMCOLS))          (* ;                                                            "adjust column width to cover title.")                  (SETQ COLWIDTH (IQUOTIENT (IPLUS TITLEWIDTH (SUB1 NUMCOLS))                                        NUMCOLS]              (replace (MENU ITEMWIDTH) of MNU with COLWIDTH)))          (COND             ((ILESSP (SETQ ROWHEIGHT (fetch (MENU ITEMHEIGHT) of MNU))                     5000)              ROWHEIGHT)             (T (SETQ ROWHEIGHT (IPLUS (MAXMENUITEMHEIGHT MNU)                                       (ITIMES BORDER 2)))                (replace (MENU ITEMHEIGHT) of MNU with ROWHEIGHT)))          (SETQ WIDTH (IPLUS (ITIMES COLWIDTH NUMCOLS)                             (ITIMES OUTLINE 2)))          (SETQ HEIGHT (IPLUS (ITIMES NUMROWS ROWHEIGHT)                              (ITIMES OUTLINE 2)                              TITLEHEIGHT))          [COND             [(AND (IGREATERP HEIGHT (fetch (SCREEN SCHEIGHT) of SCREEN))                   (NULL (fetch (MENU MENUCOLUMNS) of MNU))                   (NULL (fetch (MENU MENUROWS) of MNU)))              (* ;; "it is too large to fit on the screen and menu is defaulting the number of columns and rows If the user specified either the number of rows or columns, assume they knew what they were doing.")              (PROG (NITEMSTOFIT)                            (* ;                                                          "menu is defaulting the number of columns")                    (SETQ NITEMSTOFIT (IQUOTIENT (IDIFFERENCE (fetch (SCREEN SCHEIGHT)                                                                 of SCREEN)                                                        TITLEHEIGHT)                                             ROWHEIGHT))                    (SETQ NUMCOLS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NITEMSTOFIT)))                    (SETQ NUMROWS (ADD1 (IQUOTIENT (SUB1 NITEMS)                                               NUMCOLS)))                    (SETQ WIDTH (IPLUS (ITIMES COLWIDTH NUMCOLS)                                       (ITIMES OUTLINE 2)))                    (SETQ HEIGHT (IPLUS (ITIMES NUMROWS ROWHEIGHT)                                        (ITIMES OUTLINE 2)                                        TITLEHEIGHT))               (* ;; "changing the items field is suspect since conceivably the user might be depending upon it.  At least the fact that MENUCOLUMNS is NIL keeps it from happening twice if it gets called again.")                    (replace (MENU ITEMS) of MNU with (SETQ MENUITEMS                                                                   (\MAKE.ITEMS.VERT.ORDER MENUITEMS                                                                          NUMROWS NUMCOLS]             ((AND (NULL (fetch (MENU MENUCOLUMNS) of MNU))                   (fetch (MENU MENUROWS) of MNU))              (* ;; "user wants a certain number of rows but doesn't care about the columns, switch to vertical order so the blanks items appear in the last row.")              (replace (MENU ITEMS) of MNU with (SETQ MENUITEMS (\MAKE.ITEMS.VERT.ORDER                                                                             MENUITEMS NUMROWS                                                                              NUMCOLS]          (replace (MENU MENUCOLUMNS) of MNU with NUMCOLS)          (replace (MENU MENUROWS) of MNU with NUMROWS)          (SETQ BITSPERPIXEL (fetch (BITMAP BITMAPBITSPERPIXEL) of (fetch (SCREEN                                                                                         SCDESTINATION                                                                                             )                                                                              of SCREEN)))          [SETQ BLK (COND                       ((AND [SETQ BLK (COND                                          ((type? BITMAP (SETQ BLK (fetch (MENU IMAGE)                                                                          of MNU)))                                           BLK)                                          ((type? WINDOW BLK)                                                             (* ;                                               "if it is a window, make sure it is not active, then")                                           (CLOSEW BLK)                                           (fetch (WINDOW SAVE) of BLK]                             (EQ (fetch (BITMAP BITMAPWIDTH) of BLK)                                 WIDTH)                             (EQ (fetch (BITMAP BITMAPHEIGHT) of BLK)                                 HEIGHT)                             (EQ (fetch (BITMAP BITMAPBITSPERPIXEL) of BLK)                                 BITSPERPIXEL))              (* ; "reuse current image bitmap")                        BLK)                       (T                                    (* ; "create a new one")                          (BITMAPCREATE WIDTH HEIGHT BITSPERPIXEL]          (BITBLT NIL NIL NIL BLK 0 0 WIDTH HEIGHT 'TEXTURE 'REPLACE BLACKSHADE)                                                             (* ; "Draw box by nested BitBlts")                                                             (* ; "leave outline")          (BITBLT NIL NIL NIL BLK OUTLINE OUTLINE (IDIFFERENCE WIDTH (ITIMES OUTLINE 2))                 (IDIFFERENCE HEIGHT (IPLUS TITLEHEIGHT (ITIMES OUTLINE 2)))                 'TEXTURE                 'REPLACE WHITESHADE)          (SETQ DSP (DSPCREATE BLK))          (DSPXOFFSET OUTLINE DSP)          (DSPYOFFSET OUTLINE DSP)          (DSPRIGHTMARGIN MAX.SMALLP DSP)                    (* ;                                                         "Avoid wraparound in wide scrollable menus")          (replace (REGION LEFT) of (fetch (MENU MENUGRID) of MNU) with 0)          (replace (REGION BOTTOM) of (fetch (MENU MENUGRID) of MNU) with 0)          (GRID (fetch (MENU MENUGRID) of MNU)                NUMCOLS NUMROWS BORDER DSP)          (DSPOPERATION 'INVERT DSP)                         (* ;           "calculate the offset from the top of the item box to the base line of the printed item.")          [COND             (TITLE                                          (* ; "if there is a title, display it")                    (DSPFONT TITLEFONT DSP)                    (\SHOWMENULABEL TITLE (create REGION                                                 LEFT _ BORDER                                                 BOTTOM _ (IDIFFERENCE (IPLUS HEIGHT BORDER)                                                                 (IPLUS TITLEHEIGHT (ITIMES OUTLINE 2                                                                                           )))                                                 WIDTH _ WIDTH                                                 HEIGHT _ TITLEHEIGHT)                           MNU DSP CENTER?)                    (SETQ HEIGHT (IDIFFERENCE HEIGHT TITLEHEIGHT]          [PROG (ITEMREGION MAJOR#)                [SETQ ITEMREGION (create REGION                                        LEFT _ BORDER                                        BOTTOM _ (IDIFFERENCE (IPLUS HEIGHT BORDER)                                                        (IPLUS ROWHEIGHT (ITIMES OUTLINE 2)))                                        WIDTH _ (IDIFFERENCE (IDIFFERENCE (fetch (REGION WIDTH)                                                                             of                                                                             (fetch (MENU                                                                                              MENUGRID                                                                                              )                                                                                of MNU))                                                                    (ITIMES BORDER 2))                                                       (COND                                                          (ANYSUBITEMS?                                                              (* ;                                           "the subitem mark goes outside of the normal title space")                                                                 (BITMAPWIDTH MENUSUBITEMMARK))                                                          (T 0)))                                        HEIGHT _ (IDIFFERENCE ROWHEIGHT (ITIMES BORDER 2]                (SETQ MAJOR# 1)                (DSPFONT FONT DSP)            LP  (COND                   (MENUITEMS (\SHOWMENULABEL (CAR MENUITEMS)                                     ITEMREGION MNU DSP CENTER?)                          (SETQ MENUITEMS (CDR MENUITEMS))                          [COND                             ((EQ MAJOR# NUMCOLS)            (* ; "advance to the next row")                              (SETQ MAJOR# 1)                              (replace (REGION BOTTOM) of ITEMREGION                                 with (IDIFFERENCE (fetch (REGION BOTTOM) of ITEMREGION)                                                 ROWHEIGHT))                              (replace (REGION LEFT) of ITEMREGION with BORDER))                             (T (SETQ MAJOR# (ADD1 MAJOR#))                                (replace (REGION LEFT) of ITEMREGION                                   with (IPLUS (fetch (REGION LEFT) of ITEMREGION)                                                   COLWIDTH]                          (GO LP]          [COND             ((NULL (fetch (MENU MENUOFFSET) of MNU))              (* ;; "set offset so cursor will be be in middle of the menu on first display if it is to move with the cursor.  If it is fixed offset, initialize it to 0")              (replace (MENU MENUOFFSET) of MNU                 with (COND                             ((fetch (MENU CHANGEOFFSETFLG) of MNU)                              (create POSITION                                     XCOORD _ (IQUOTIENT WIDTH 2)                                     YCOORD _ (IQUOTIENT HEIGHT 2)))                             (T (create POSITION                                       XCOORD _ 0                                       YCOORD _ 0]     (* ;;    "The following avoids extra windows for fixed menus, but not sure how it interacts with Lyric.")     (* ;; "(COND ((AND (type? WINDOW (SETQ WINDOW (fetch (MENU IMAGE) of MNU))) (EQ (fetch (WINDOW SCREEN) of WINDOW) SCREEN)) (* menu has a window, replace its save image.) (replace (WINDOW SAVE) of WINDOW with BLK) (replace (WINDOW WBORDER) of WINDOW with OUTLINE) (* tell the window about its border) (ADVISEWDS WINDOW)) (T (replace (MENU IMAGE) of MNU with BLK))) (RETURN BLK)")          [COND             ((AND (type? WINDOW (SETQ WINDOW (fetch (MENU IMAGE) of MNU)))                   (EQ (fetch (WINDOW SCREEN) of WINDOW)                       SCREEN))                              (* ;                                                        "menu has a window, replace its save image.")              (replace (WINDOW SAVE) of WINDOW with BLK))             (T (replace (MENU IMAGE) of MNU with (SETQ WINDOW (CREATEWFROMIMAGE BLK                                                                                   SCREEN]                                                             (* ;                                                            "tell the window about its border")          (replace (WINDOW WBORDER) of WINDOW with OUTLINE)          (ADVISEWDS WINDOW)                                 (* ;                "snap circular link between the display stream created for printing and its stream.")          (RETURN (fetch (WINDOW SAVE) of (fetch (MENU IMAGE) of MNU]))(DECLARE%: DONTEVAL@LOAD DOCOPY (MOVD? (QUOTE UPDATE/MENU/IMAGE) (QUOTE OldUPDATE/MENU/IMAGE))(MOVD (QUOTE MyUPDATE/MENU/IMAGE) (QUOTE UPDATE/MENU/IMAGE)))(* ;; "TEdit feature to create attached promptwindow when needed, bug fix in TEDIT.GETINPUT and cheapo hack to cause redisplay when scrolling tedit windows from off screen")(DEFINEQ(TEDIT.GETINPUT  [LAMBDA (STREAM PROMPTSTRING DEFAULTSTRING DELIMITER.LIST)                                                            (* ; "Edited 27-Jun-88 14:38 by lipkis")    (* ;; "Ask for input (file names, &c) for TEdit, perhaps with a default.")    (PROG* ((TEXTOBJ (TEXTOBJ STREAM))            (TPROMPT (fetch PROMPTWINDOW of TEXTOBJ)))           (SETQ TPROMPT (SELECTQ TPROMPT                             (DON'T [COND                                       ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)                                        (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])                             (NIL [GETPROMPTWINDOW (\TEDIT.MAINW STREAM)                                         NIL NIL (NOT (TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND])                             TPROMPT))           (COND              (TPROMPT                                       (* ;                                                      "If it's our own promptwindow, just clear it.")                     (CLEARW TPROMPT))              (T                                             (* ;                                             "If it's the system's window, just move to a new line.")                 (FRESHLINE PROMPTWINDOW)))           (RETURN (PROG1 (PROMPTFORWORD PROMPTSTRING DEFAULTSTRING NIL (OR TPROMPT PROMPTWINDOW)                                 NIL                                 'TTY                                 (OR DELIMITER.LIST (CHARCODE (EOL LF TAB ESCAPE)))                                 NIL)                        (* ;                                                            "Get what the guy wants to tell us")                       (WINDOWPROP (OR TPROMPT PROMPTWINDOW)                              'PROCESS NIL)                  (* ;                            "Now detach the prompt window from its process, to avoid a circularity.")                       )])(TEDIT.PROMPTPRINT  [LAMBDA (TEXTSTREAM MSG CLEAR?)                       (* ; "Edited 27-Jun-88 14:38 by lipkis")    (* ;; "Print a message in the editor's prompt window (if none, use the global promptwindow).  Optionally clear the window first.")    (PROG (WINDOW PWINDOW (TEXTOBJ (TEXTOBJ TEXTSTREAM))                 MAINTEXTOBJ)          (COND             [(AND TEXTOBJ (fetch MENUFLG of TEXTOBJ))                                                             (* ;                "There is a known textobj, and it's a menu.  Go use the main editor's promptwindow.")              (SETQ MAINTEXTOBJ (WINDOWPROP (\TEDIT.MAINW TEXTOBJ)                                       'TEXTOBJ))            (* ;                          "Find the TEXTOBJ for the main edit window, and use ITS prompting window.")              (SETQ WINDOW (AND MAINTEXTOBJ (fetch PROMPTWINDOW of MAINTEXTOBJ]             (TEXTOBJ (SETQ WINDOW (fetch PROMPTWINDOW of TEXTOBJ))                                                             (* ;                                       "There IS an editor window to get to;  use its prompt window")                    ))          [SETQ WINDOW (CAR (NLSETQ (SELECTQ WINDOW                                        (DON'T [COND                                                  ((TEXTPROP TEXTOBJ 'PWINDOW.ON.DEMAND)                                                   (GETPROMPTWINDOW (\TEDIT.MAINW STREAM])                                        (NIL [GETPROMPTWINDOW (\TEDIT.MAINW TEXTSTREAM)                                                    NIL NIL (NOT (TEXTPROP TEXTOBJ                                                                         'PWINDOW.ON.DEMAND])                                        WINDOW]              (* ;                                             "Try to find an editor's prompt window for our message")          (COND             (WINDOW                                         (* ;                                                     "We found a window to use.  Print the message.")                    (* ;; "WAS (RESETLST (RESETSAVE (TTYDISPLAYSTREAM WINDOW)) (COND (CLEAR? (CLEARW WINDOW))) (PRIN1 MSG WINDOW))")                    (COND                       ((AND CLEAR? (WINDOWP WINDOW))                        (CLEARW WINDOW)))                    (PRIN1 MSG WINDOW))             (T                                              (* ;                                                            "Failing all else, use PROMPTWINDOW.")                (FRESHLINE PROMPTWINDOW)                (printout PROMPTWINDOW MSG])(\MyTEDIT.SCROLLFN  [LAMBDA (W DX DY)                                          (* TAL "14-Nov-86 15:22")    (PROG1 (\OldTEDIT.SCROLLFN W DX DY)           (COND              ([NOT (SUBREGIONP WHOLESCREEN (WINDOWPROP W 'REGION]               (REDISPLAYW W])(\MyTEDIT.WINDOW.TITLE(LAMBDA (TEXTSTREAM NEW.TITLE) (* ; "Edited 12-Aug-88 14:48 by TAL") (LET (tit w) (COND ((AND NEW.TITLE (SETQ tit (TEXTPROP TEXTSTREAM (QUOTE FISTITLE))) (SETQ w (\TEDIT.PRIMARYW TEXTSTREAM))) (WINDOWPROP w (QUOTE TITLE) (SELCHARQ (NTHCHARCODE NEW.TITLE 1) (* (CONCAT "* " tit)) tit))) (T (\OldTEDIT.WINDOW.TITLE TEXTSTREAM NEW.TITLE)))))))(DECLARE%: DONTEVAL@LOAD DOCOPY (MOVD? (QUOTE \TEDIT.SCROLLFN) (QUOTE \OldTEDIT.SCROLLFN))(MOVD (QUOTE \MyTEDIT.SCROLLFN) (QUOTE \TEDIT.SCROLLFN))(MOVD? (QUOTE \TEDIT.WINDOW.TITLE) (QUOTE \OldTEDIT.WINDOW.TITLE))(MOVD (QUOTE \MyTEDIT.WINDOW.TITLE) (QUOTE \TEDIT.WINDOW.TITLE)))(* ;; "SPP mods not yet done for Lyric")(DEFINEQ(SPP.OTHERPROP  [LAMBDA X                                                  (* ; "Edited 13-Jun-88 14:04 by TAL")                    (* ;; "(LET ((CON (ARG X 1)) (PROP (ARG X 2)) LST) (COND ((type? SPPCON CON)) (T (SETQ CON (GETSPPCON CON)))) (SETQ LST (fetch SPPSPARE of CON)) (PROG1 (LISTGET LST PROP) (COND ((EQ X 3) (COND (LST (LISTPUT LST PROP (ARG X 3))) (T (replace SPPSPARE of CON with (LIST PROP (ARG X 3)))))))))")    NIL]))(PUTPROPS MPATCHLOW FILETYPE :BCOMPL)(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDTOVAR NLAMA)(ADDTOVAR NLAML)(ADDTOVAR LAMA SPP.OTHERPROP))(PUTPROPS MPATCHLOW COPYRIGHT ("Savoir, Inc." 1988))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1994 5255 (FastSTREQUAL 2004 . 4031) (\RESETSTRINGSTREAM 4033 . 4381) (\ThinString 4383 . 5253)) (5470 6755 (\MyTTW1 5480 . 6753)) (6936 23641 (MyUPDATE/MENU/IMAGE 6946 . 23639)) (23987 29305 (TEDIT.GETINPUT 23997 . 25964) (TEDIT.PROMPTPRINT 25966 . 28660) (\MyTEDIT.SCROLLFN 28662 . 28934) (\MyTEDIT.WINDOW.TITLE 28936 . 29303)) (29643 30108 (SPP.OTHERPROP 29653 . 30106)))))STOP