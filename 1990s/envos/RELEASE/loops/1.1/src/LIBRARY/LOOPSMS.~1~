(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(filecreated " 8-Jul-88 12:23:27" |{POGO:AISNORTH:XEROX}<LOOPSCORE>LYRIC>LIBRARY>LOOPSMS.;15| 38152        |changes| |to:|  (vars loopsmscoms)      |previous| |date:| "16-Jun-88 11:10:30" |{POGO:AISNORTH:XEROX}<LOOPSCORE>LYRIC>LIBRARY>LOOPSMS.;14|); Copyright (c) 1985, 1986, 1987, 1988 by Xerox Corporation.  All rights reserved.(prettycomprint loopsmscoms)(rpaqq loopsmscoms        ((* |;;;| "Tailor MasterScope to understand Loops constructs")        (* |;;;| "Load MasterScope, since its a library module.")        (p (cond ((eq makesysname ':lyric)                                      (* |;;|          "Nuke the FILEDATES properties so we're sure the Lyric compiled Medley versions are loaded.")                  (remprop 'masterscope 'filedates)                  (remprop 'msanalyze 'filedates)                  (remprop 'msparse 'filedates)))           (filesload (from valueof loopslibrarydirectory)                  masterscope msparse))        (coms (* |;;;| "The verb SEND")              (p (msaddrelation '(send sends sending sent) '(sendnotself sendself))                 (msaddmodifier 'send 'self 'sendself)                 (msaddmodifier 'send 'notself 'sendnotself))              (addvars (describelst ("sends msgs to self: " (getrelation fn '(send self)))                              ("sends msgs:  " (getrelation fn '(send notself)))))              (* |;;;| "Need templates for _Apply")              (templates |DefineClass| |DeleteCIV| |DeleteCV| |DeleteIV| _ _! _iv |_New| |_Process|                      |_Process!| |_Proto| |_Super| send |_SuperFringe| |_Super?| |_Try|                      |\\BindMethodInfo| |AddCIV| |AddCV| |AddIV| |ApplyMethod|))        (coms (* |;;;| "The verbs IMPLEMENT, SPECIALIZE and OVERRIDE")              (fns |LoopsMethodMSGETDEF| |LoopsSELFp| |MethodOverrides?| |QuotedArg?|                    |_PutGetTemplate|)              (p (msaddrelation '(implement implements implementing implemented))                 (setsynonym '(specializes &) '(@ (|MethodOverrides?| x)                                                  implements 1))                 (setsynonym '(specializing &) '(@ (|MethodOverrides?| x)                                                   implements 1))                 (setsynonym '(overrides &) '(@ (|MethodOverrides?| x t)                                                implements 1))                 (setsynonym '(overriding &) '(@ (|MethodOverrides?| x t)                                                 implements 1))))        (coms (* |;;;| "The verb GET")              (p (msaddrelation '(get gets getting gotten) '(getnotself getself))                 (msaddmodifier 'get 'iv '(getnotself getself))                 (msaddmodifier 'get 'self 'getself)                 (msaddmodifier 'get 'notself 'getnotself)                 (setsynonym 'got 'gotten))              (addvars (describelst ("gets IVs of self: " (getrelation fn '(get self)))                              ("gets IVs:  " (getrelation fn '(get notself)))))              (templates |GetClassIV| |GetIVHere| |GetValue| |GetValueOnly| |GetClassIVHere|)              (p (addtemplateword 'getcvself)                 (addtemplateword 'getcvnotself)                 (msaddmodifier 'get 'cv '(getcvself getcvnotself))                 (msaddmodifier 'get 'cvself 'getcvself)                 (msaddmodifier 'get 'cvnotself 'getcvnotself))              (templates |GetCVHere| |GetClassValue| |GetClassValueOnly|)              (addvars (describelst ("gets CVs of self: " (getrelation fn '(get cvself)))                              ("gets CVs:  " (getrelation fn '(get cvnotself))))))        (coms (* |;;;| "The verb PUT")              (p (msaddrelation '(put puts putting put) '(putnotself putself))                 (msaddmodifier 'put 'iv '(putnotself putself))                 (msaddmodifier 'put 'self 'putself)                 (msaddmodifier 'put 'notself 'putnotself))              (addvars (describelst ("puts IVs of self: " (getrelation fn '(put self)))                              ("puts IVs:  " (getrelation fn '(put notself)))))              (templates |PutClassIV| |PutValue| |PutValueOnly|)              (p (addtemplateword 'putcvself)                 (addtemplateword 'putcvnotself)                 (msaddmodifier 'put 'cv '(putcvself putcvnotself))                 (msaddmodifier 'put 'cvself 'putcvself)                 (msaddmodifier 'put 'cvnotself 'putcvnotself))              (templates |PutClassValue| |PutClassValueOnly| |PutCVHere|)              (addvars (describelst ("puts CVs of self: " (getrelation fn '(put cvself)))                              ("puts CVs:  " (getrelation fn '(put cvnotself))))))        (coms (* |;;;| "...  USE THE IV/CV/OBJECT/MSG ...")              (p (msaddtype 'iv '(putnotself putself getnotself getself) '(ivs))                 (msaddtype 'cv '(putcvnotself putcvself getcvnotself getcvself) '(cvs))                 (addtemplateword 'object)                 (msaddtype 'object '(object) '(objects))                 (msaddtype 'msg '(sendnotself sendself) '(message selector msgs messages selectors))                 )              (templates $ $!))        (coms (* |;;;| "Extend the CHECK MasterScope command to verify certain constraints in Loops")              (fns |CheckLoopsFiles|)              (methods |Class.MSCheck| |Method.MSCheck|)              (addvars (mscheckfns |CheckLoopsFiles|)))        (coms (* |;;;| "A hook that lets method objects check their MasterScope data")              (fns |LoopsAnalyzeHook|)              (methods |Method.CheckMSData|)              (addvars (analyzeuserfns |LoopsAnalyzeHook|)))        (coms (* |;;;| "Teach MasterScope how to analyze Classes and Methods")              (fns |AnalyzeClass| |AnalyzeMethod|)              (methods |Class.MSAnalyze| |Method.MSAnalyze|)              (p (msaddanalyze 'classes 'class)                 (msaddanalyze 'methods 'method 'method-fns '|LoopsMethodMSGETDEF|)))))(* |;;;| "Tailor MasterScope to understand Loops constructs")(* |;;;| "Load MasterScope, since its a library module.")(cond ((eq makesysname ':lyric)                    (* |;;|          "Nuke the FILEDATES properties so we're sure the Lyric compiled Medley versions are loaded.")       (remprop 'masterscope 'filedates)       (remprop 'msanalyze 'filedates)       (remprop 'msparse 'filedates)))(filesload (from valueof loopslibrarydirectory)       masterscope msparse)(* |;;;| "The verb SEND")(msaddrelation '(send sends sending sent) '(sendnotself sendself))(msaddmodifier 'send 'self 'sendself)(msaddmodifier 'send 'notself 'sendnotself)(addtovar describelst ("sends msgs to self: " (getrelation fn '(send self)))                      ("sends msgs:  " (getrelation fn '(send notself))))(* |;;;| "Need templates for _Apply")(settemplate '|DefineClass| '(@ expr `(|if| (|QuotedArg?| (car expr))                                            |then|                                            '(nil object) |else| 'eval)                                     `(|if| (|QuotedArg?| (cadr expr))                                            |then|                                            '(nil (|..| object)) |else| 'eval) eval . ppe))(settemplate '|DeleteCIV| '(@ expr `(eval ,(|if| (|QuotedArg?| (cadr expr))                                                 |then|                                                 '(nil putnotself) |else| 'eval) prop . ppe)))(settemplate '|DeleteCV| '(@ expr `(eval ,(|if| (|QuotedArg?| (car expr))                                                |then|                                                '(nil putcvnotself) |else| 'eval) prop)))(settemplate '|DeleteIV|       '(@ expr `(eval ,(|if| (|QuotedArg?| (cadr expr))                              |then|                              (|if| (|LoopsSELFp| (car expr))                                    |then|                                    '(nil putself) |else| '(nil putnotself))                              |else|                              'eval) prop . ppe)))(settemplate '_ '(@ expr (|_PutGetTemplate| expr)))(settemplate '_! '(@ `(,(car expr) ,(cond                                       ((and (listp (cadr expr))                                             (eq 'quote (car (cadr expr))))                                        (cadr (cadr expr)))                                       (t '*unknown*)) ,@(cddr expr)) (gettemplate '_)))(settemplate '_iv '(@ expr (cond                              ((|LoopsSELFp| (car expr))                               '(eval getself |..| eval))                              (t '(eval getnotself |..| eval)))))(settemplate '|_New| '(@ expr (gettemplate '_)))(settemplate '|_Process| '(@ expr (gettemplate '_)))(settemplate '|_Process!| '(@ expr (gettemplate '_!)))(settemplate '|_Proto| '(@ expr (gettemplate '_)))(settemplate '|_Super| '(@ expr (cond                                   ((|LoopsSELFp| (car expr))                                    '(eval sendself |..| eval))                                   (t '(eval sendnotself |..| eval)))))(settemplate 'send '(@ expr (|_PutGetTemplate| expr)))(settemplate '|_SuperFringe| '(@ expr (|_PutGetTemplate| expr)))(settemplate '|_Super?| '(@ expr (|_PutGetTemplate| expr)))(settemplate '|_Try| '(@ expr (|_PutGetTemplate| expr)))(settemplate '|\\BindMethodInfo| '(! nil nil eval))(settemplate '|AddCIV| '(@ expr `(eval ,(|if| (|QuotedArg?| (cadr expr))                                              |then|                                              '(nil putnotself) |else| 'eval) eval (prop eval) . ppe))       )(settemplate '|AddCV| '(@ expr `(eval ,(|if| (|QuotedArg?| (car expr))                                             |then|                                             '(nil putcvnotself) |else| 'eval) eval)))(settemplate '|AddIV|       '(@ expr `(eval ,(|if| (|QuotedArg?| (cadr expr))                              |then|                              (|if| (|LoopsSELFp| (car expr))                                    |then|                                    '(nil putself) |else| '(nil putnotself))                              |else|                              'eval) eval prop . ppe)))(settemplate '|ApplyMethod| '(both (eval eval eval eval . ppe)                                   (@ `(,(car expr) ,(cadr expr)) (gettemplate '_!))))(* |;;;| "The verbs IMPLEMENT, SPECIALIZE and OVERRIDE")(defineq(|LoopsMethodMSGETDEF|  (lambda (name type source options)                     (* \; "Edited  8-Jun-88 17:01 by JAMES.PA")    (let* ((methbody (cdr (remove-comments (getdef name 'method-fns source options))))           clp?           (name&args (|if| (eq (car methbody)                                ':function-type)                            |then|                            (|pop| methbody)                            (setq clp? (eq (|pop| methbody)                                           ':cl))                            (|pop| methbody)                            |else|                            (|pop| methbody))))                    (* |;;| "If the source can be found, this will return something of the form:")                    (* |;;| "(Method ((class-name selector) arg1 arg2...) body1...)")                    (* |;;| "Masterscope wants to analyze something of the form:")                    (* |;;| "(LAMBDA (ARGS) BODY...) or (CL:LAMBDA (ARGS) BODY...) depending on whether :FUNCTION-TYPE is specified")          (and methbody `(,(|if| clp? |then| 'cl:lambda |else| 'lambda) ,(cdr name&args) ,@methbody))          )))(|LoopsSELFp|  (lambda (instance-name)                                    (* |edited:| " 6-Oct-87 13:06")    (or (eq instance-name 'self)        (eq instance-name '|self|))))(|MethodOverrides?|  (lambda (|meth| |noSendSuper?|)                            (* |smL| " 9-Apr-87 16:33")                    (* * |Does| |this| |method| |override| \a |super| |method?|)    (let ((|methObj| ($! |meth|)))         (and |methObj| (_ |methObj| |InstOf!| '|Method|)              (|for| |class| |in| (_ ($! (@ |methObj| |className|))                                     |ListAttribute|                                     '|Supers|)                     |thereis|                               (* |gee,| |is| |there| |any| |super|                                                              |method| |at| |all?|)                     (and (|type?| |class| ($! |class|))                          (|FetchMethod| ($! |class|)                                 (@ |methObj| |selector|))))              (let ((|specialize?| (or (testrelation |meth| '(call) '|_Super|)                                       (testrelation |meth| '(call) '|_SuperFringe|)                                       (testrelation |meth| '(call) '|_Super?|))))                                                             (* |does| |this| |override| |or|                                                              |specialize?|)                   (|if| |noSendSuper?| |then| (not |specialize?|)                         |else| |specialize?|))))))(|QuotedArg?|  (lambda (thing)                                            (* \; "Edited  2-Dec-87 13:13 by jrb:")    (and (listp thing)         (eq (car thing)             'quote))))(|_PutGetTemplate|  (lambda (ex)                                               (* \; "Edited 11-Apr-88 15:08 by jrb:")(* |;;;| "If the method is something special like Get, Put, or a naming method, return an appropriately munged template.")    (let     ((|self?| (|LoopsSELFp| (car ex)))      (|firstquoted?| (|QuotedArg?| (caddr ex)))      (|secondquoted?| (|QuotedArg?| (cadddr ex))))     `(eval ,(|if| |self?| |then| 'sendself |else| 'sendnotself)            ,@(selectq (cadr ex)                  (|Get| `(,(|if| |firstquoted?| |then| (|if| |self?| |then| '(nil getself) |else|                                                              '(nil getnotself))                                  |else|                                  'eval) prop . ppe))                  (|Put| `(,(|if| |firstquoted?| |then| (|if| |self?| |then| '(nil putself) |else|                                                              '(nil putnotself))                                  |else|                                  'eval) eval prop . ppe))                  (|AddIV| `(,(|if| |firstquoted?| |then| (|if| |self?| |then| '(nil putself) |else|                                                                '(nil putnotself))                                    |else|                                    'eval) eval prop . ppe))                  (|DeleteIV| `(,(|if| |firstquoted?| |then| (|if| |self?| |then| '(nil putself)                                                                    |else| '(nil putnotself))                                       |else|                                       'eval) prop . ppe))                  ((|SetName| |UnSetName| |Rename|)                        `(,(|if| |firstquoted?| |then| '(nil object) |else| 'eval) . ppe))                  (|New| `(,(|if| |firstquoted?| |then| '(nil object) |else| 'eval) . ppe))                  (|NewWithValues|                        `(,(|if| |firstquoted?| |then| '(nil |..| (putnotself nil prop nil)) |else|                                'eval) . ppe))                  (|CreateClass| `(,(|if| |firstquoted?| |then| '(nil object) |else| 'eval)                                   ,(|if| |secondquoted?| |then| '(nil (|..| object)) |else|                                          'eval)))                  (|Copy| `(,(|if| |firstquoted?| |then| '(nil object) |else| 'eval) . ppe))                  ((|AddCV| |CopyCV|)                        `(,(|if| |firstquoted?| |then| '(nil putcvnotself) |else| 'eval) eval))                  (|CopyIV| `(,(|if| |firstquoted?| |then| '(nil putnotself) |else| 'eval) eval))                  nil))))))(msaddrelation '(implement implements implementing implemented))(setsynonym '(specializes &) '(@ (|MethodOverrides?| x)                                 implements 1))(setsynonym '(specializing &) '(@ (|MethodOverrides?| x)                                  implements 1))(setsynonym '(overrides &) '(@ (|MethodOverrides?| x t)                               implements 1))(setsynonym '(overriding &) '(@ (|MethodOverrides?| x t)                                implements 1))(* |;;;| "The verb GET")(msaddrelation '(get gets getting gotten) '(getnotself getself))(msaddmodifier 'get 'iv '(getnotself getself))(msaddmodifier 'get 'self 'getself)(msaddmodifier 'get 'notself 'getnotself)(setsynonym 'got 'gotten)(addtovar describelst ("gets IVs of self: " (getrelation fn '(get self)))                      ("gets IVs:  " (getrelation fn '(get notself))))(settemplate '|GetClassIV| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                           (eq (caadr expr)                                                               'quote)))                                                 '(eval eval prop . ppe))                                                ((|LoopsSELFp| (car expr))                                                 '(eval (nil getself)                                                        prop . ppe))                                                (t '(eval (nil getnotself)                                                          prop . ppe)))))(settemplate '|GetIVHere| '(@ expr (cond                                      ((not (and (listp (cadr expr))                                                 (eq (caadr expr)                                                     'quote)))                                       '(eval eval prop . ppe))                                      ((|LoopsSELFp| (car expr))                                       '(eval (nil getself)                                              prop . ppe))                                      (t '(eval (nil getnotself)                                                prop . ppe)))))(settemplate '|GetValue| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                         (eq (caadr expr)                                                             'quote)))                                               '(eval eval prop . ppe))                                              ((|LoopsSELFp| (car expr))                                               '(eval (nil getself)                                                      prop . ppe))                                              (t '(eval (nil getnotself)                                                        prop . ppe)))))(settemplate '|GetValueOnly| '(@ expr (cond                                         ((not (and (listp (cadr expr))                                                    (eq (caadr expr)                                                        'quote)))                                          '(eval eval prop . ppe))                                         ((|LoopsSELFp| (car expr))                                          '(eval (nil getself)                                                 prop . ppe))                                         (t '(eval (nil getnotself)                                                   prop . ppe)))))(settemplate '|GetClassIVHere| '(@ expr (cond                                           ((not (and (listp (cadr expr))                                                      (eq (caadr expr)                                                          'quote)))                                            '(eval eval prop . ppe))                                           ((|LoopsSELFp| (car expr))                                            '(eval (nil getself)                                                   prop . ppe))                                           (t '(eval (nil getnotself)                                                     prop . ppe)))))(addtemplateword 'getcvself)(addtemplateword 'getcvnotself)(msaddmodifier 'get 'cv '(getcvself getcvnotself))(msaddmodifier 'get 'cvself 'getcvself)(msaddmodifier 'get 'cvnotself 'getcvnotself)(settemplate '|GetCVHere| '(@ expr (cond                                      ((not (and (listp (cadr expr))                                                 (eq (caadr expr)                                                     'quote)))                                       '(eval eval prop . ppe))                                      ((|LoopsSELFp| (car expr))                                       '(eval (nil getcvself)                                              prop . ppe))                                      (t '(eval (nil getcvnotself)                                                prop . ppe)))))(settemplate '|GetClassValue| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                              (eq (caadr expr)                                                                  'quote)))                                                    '(eval eval prop . ppe))                                                   ((|LoopsSELFp| (car expr))                                                    '(eval (nil getcvself)                                                           prop . ppe))                                                   (t '(eval (nil getcvnotself)                                                             prop . ppe)))))(settemplate '|GetClassValueOnly| '(@ expr (cond                                              ((not (and (listp (cadr expr))                                                         (eq (caadr expr)                                                             'quote)))                                               '(eval eval prop . ppe))                                              ((|LoopsSELFp| (car expr))                                               '(eval (nil getcvself)                                                      prop . ppe))                                              t                                              '(eval (nil getcvnotself)                                                     prop . ppe))))(addtovar describelst ("gets CVs of self: " (getrelation fn '(get cvself)))                      ("gets CVs:  " (getrelation fn '(get cvnotself))))(* |;;;| "The verb PUT")(msaddrelation '(put puts putting put) '(putnotself putself))(msaddmodifier 'put 'iv '(putnotself putself))(msaddmodifier 'put 'self 'putself)(msaddmodifier 'put 'notself 'putnotself)(addtovar describelst ("puts IVs of self: " (getrelation fn '(put self)))                      ("puts IVs:  " (getrelation fn '(put notself))))(settemplate '|PutClassIV| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                           (eq (caadr expr)                                                               'quote)))                                                 '(eval eval eval prop . ppe))                                                ((|LoopsSELFp| (car expr))                                                 '(eval (nil putself)                                                        eval prop . ppe))                                                (t '(eval (nil putnotself)                                                          eval prop . ppe)))))(settemplate '|PutValue| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                         (eq (caadr expr)                                                             'quote)))                                               '(eval eval eval prop . ppe))                                              ((|LoopsSELFp| (car expr))                                               '(eval (nil putself)                                                      eval prop . ppe))                                              (t '(eval (nil putnotself)                                                        eval prop . ppe)))))(settemplate '|PutValueOnly| '(@ expr (cond                                         ((not (and (listp (cadr expr))                                                    (eq (caadr expr)                                                        'quote)))                                          '(eval eval eval prop . ppe))                                         ((|LoopsSELFp| (car expr))                                          '(eval (nil putself)                                                 eval prop . ppe))                                         (t '(eval (nil putnotself)                                                   eval prop . ppe)))))(addtemplateword 'putcvself)(addtemplateword 'putcvnotself)(msaddmodifier 'put 'cv '(putcvself putcvnotself))(msaddmodifier 'put 'cvself 'putcvself)(msaddmodifier 'put 'cvnotself 'putcvnotself)(settemplate '|PutClassValue| '(! nil @ expr (cond ((not (and (listp (cadr expr))                                                              (eq (caadr expr)                                                                  'quote)))                                                    '(eval eval eval prop . ppe))                                                   ((|LoopsSELFp| (car expr))                                                    '(eval (nil putcvself)                                                           eval prop . ppe))                                                   (t '(eval (nil putcvnotself)                                                             eval prop . ppe)))))(settemplate '|PutClassValueOnly| '(@ expr (cond                                              ((not (and (listp (cadr expr))                                                         (eq (caadr expr)                                                             'quote)))                                               '(eval eval eval prop . ppe))                                              ((|LoopsSELFp| (car expr))                                               '(eval (nil putcvself)                                                      eval prop . ppe))                                              (t '(eval (nil putcvnotself)                                                        eval prop . ppe)))))(settemplate '|PutCVHere| '(@ expr (cond                                      ((not (and (listp (cadr expr))                                                 (eq (caadr expr)                                                     'quote)))                                       '(eval eval eval prop . ppe))                                      ((|LoopsSELFp| (car expr))                                       '(eval (nil putcvself)                                              eval prop . ppe))                                      (t '(eval (nil putcvnotself)                                                eval prop . ppe)))))(addtovar describelst ("puts CVs of self: " (getrelation fn '(put cvself)))                      ("puts CVs:  " (getrelation fn '(put cvnotself))))(* |;;;| "...  USE THE IV/CV/OBJECT/MSG ...")(msaddtype 'iv '(putnotself putself getnotself getself) '(ivs))(msaddtype 'cv '(putcvnotself putcvself getcvnotself getcvself) '(cvs))(addtemplateword 'object)(msaddtype 'object '(object) '(objects))(msaddtype 'msg '(sendnotself sendself) '(message selector msgs messages selectors))(settemplate '$ '(object . ppe))(settemplate '$! '(eval . ppe))(* |;;;| "Extend the CHECK MasterScope command to verify certain constraints in Loops")(defineq(|CheckLoopsFiles|  (lambda (|files|)                                          (* |smL| "14-Feb-86 16:45")                    (* * |Verify| |that| |all| |methods| |defined| |on| |the| |files| |are|           |somehow| |kosher|)    (|for| |file| |in| |files| |do| (|for| |method| |in| (filecomslst |file| 'methods)                                           |do|                                           (_ ($! |method|)                                              |MSCheck| |file| nil))           (|for| |class| |in| (filecomslst |file| 'classes)                  |do|                  (_ ($! |class|)                     |MSCheck| |file| nil))))))(|\\BatchMethodDefs|)(meth |Class|  |MSCheck| (|onFile| |outputFile|)      "Use MasterScope to check the consistancy of the class" (|category| (|Masterscope| |Class|)))(meth |Method|  |MSCheck| (|onFile| |outputFile|)      "Check that the method is kosher" (|category| (|Masterscope| |Method|)))(|Method| ((|Class| |MSCheck|) |self| |onFile| |outputFile|) (* \; "smL 11-Apr-86 14:45") (* |;;;| "Use MasterScope to check the consistancy of the class") (let ((|comments| nil)       (|className| (_ |self| |ClassName|))       (|localIVs| (_ |self| |ListAttribute| 'iv\s))       (|localCVs| (_ |self| |ListAttribute| 'cv\s)))      (|for| |iv| |in| (ldifference |localIVs| (masterscope `(what iv in ',|localIVs| is used by any)                                                      ))             |do|             (|push| |comments| (concat "IV " |iv| " defined but not used by any")))      (|for| |cv| |in| (ldifference (ldifference |localCVs| (masterscope                                                             `(what cv in ',|localCVs| is used by any                                                                    )))                              (masterscope `(what iv in ',|localCVs| is used by any)))             |do|             (|push| |comments| (concat "CV " |cv| " defined but not used by any")))      (|if| |comments| |then| (|printout| |outputFile| t .font boldfont |className| .font defaultfont                                      ": ")            (|for| |comment| |in| |comments| |do| (|printout| |outputFile| .tab 15 |comment| t))            |className| |else| nil)))(|Method| ((|Method| |MSCheck|) |self| |onFile| |outputFile|)                                                              (* \; "smL 11-Apr-86 15:06") (* |;;;| "Check that the method is kosher") (let ((|comments| nil)       (|methodName| (@ |method|))       (|argList| (arglist (@ |method|)))       (|methodClass| ($! (@ |className|))))      (masterscope `(analyze ',|methodName|))                    (* |check| |to| |make| |sure| |that| |the| |first| |arg| |is| |self|)      (|if| (neq (car |argList|)                 '|self|)            |then|            (|push| |comments| "first arg is not self"))     (* |check| |that| |the| |first| |arg|                                                              |doesn't| |get| |smashed|)      (|if| (memb (car |argList|)                  (getrelation |methodName| '(smash)))            |then|            (|push| |comments| (|if| (eq (car |argList|)                                         '|self|)                                     |then| "smashes self" |else| (concat "smashes " (car |argList|)                                                                         " [its first arg]"))))                    (* |look| |for| |msgs| |sent| |to| |self| |that| |are| |not| |defined| |in|           |the| |class|)      (let ((|funnyMsgs| (ldifference (getrelation |methodName| '((send self)))                                (_ |methodClass| |ListAttribute!| '|Methods| nil t))))           (|if| (null |funnyMsgs|)                 |then| nil |elseif| (eqlength |funnyMsgs| 1)                 |then|                 (|push| |comments| (concat "sends " (car |funnyMsgs|)                                           " to self, but the msg is not defined in the class"))                 |else|                 (|push| |comments| (concat "sends " |funnyMsgs|                                            " to self, but the msgs are not defined in the class"))))                    (* |look| |for| |ivs| |of| |self| |used| |but| |not| |defined| |in| |the|           |class| -          note |that| |this| |includes| cv\s |as| iv\s |because| |of| |the| |new|           |:allocation| |stuff|)      (let ((|funnyIVs| (ldifference (ldifference (union (getrelation |methodName|                                                                '((get self)))                                                         (getrelation |methodName|                                                                '((put self))))                                            (_ |methodClass| |ListAttribute!| 'iv\s nil t))                               (_ |methodClass| |ListAttribute!| 'cv\s nil t))))           (|if| (null |funnyIVs|)                 |then| nil |elseif| (eqlength |funnyIVs| 1)                 |then|                 (|push| |comments| (concat " uses the IV " (car |funnyIVs|)                                           " that is not defined in the class"))                 |else|                 (|push| |comments| (concat " uses the IVs " |funnyIVs|                                            " that are not defined in the class"))))      (let ((|funnyCVs| (ldifference (union (getrelation |methodName| '((get cvself)))                                            (getrelation |methodName| '((put cvself))))                               (_ |methodClass| |ListAttribute!| 'cv\s nil t))))           (|if| (null |funnyCVs|)                 |then| nil |elseif| (eqlength |funnyCVs| 1)                 |then|                 (|push| |comments| (concat " uses the CV " (car |funnyCVs|)                                           " that is not defined in the class"))                 |else|                 (|push| |comments| (concat " uses the CVs " |funnyCVs|                                            " that are not defined in the class"))))      (|if| |comments| |then| (|printout| |outputFile| t .font boldfont |methodName| .font                                      defaultfont ": ")            (|for| |comment| |in| (reverse |comments|)                   |do|                   (|printout| |outputFile| .tab 15 |comment| t))            |methodName| |else| nil)))(|\\UnbatchMethodDefs|)(addtovar mscheckfns |CheckLoopsFiles|)(* |;;;| "A hook that lets method objects check their MasterScope data")(defineq(|LoopsAnalyzeHook|  (lambda (|fnName| |def| |data|)                            (* |smL:| "11-Nov-85 12:26")                    (* * |When| |the| |method| |is| |analyzed| |by| |MasterScope,| |try| |to|           |send| \a |message| |to| |the| |method| |object| |so| |it| |can| |check| |the|           |data|)    (let ((|methObj| ($! |fnName|)))         (|if| (and |methObj| (_ |methObj| |InstOf!| '|Method|))               |then|                                        (* |The| |methObj| |should| |return|                                                              |the| (|possibly| |altered|) |data|)               (_ |methObj| |CheckMSData| |data|)               |else| |data|)))))(|\\BatchMethodDefs|)(meth |Method|  |CheckMSData| (|alist|)      "The method function is being analyzed. Check the resulting data and return the (possibly modified) data"      (|category| (|Masterscope| |Method|)))(|Method| ((|Method| |CheckMSData|) |self| |alist|)          (* \; "smL 10-Feb-86 12:44") (* |;;;| "The method function is being analyzed. Check the resulting data and return the (possibly modified) data") (let ((|selector| (@ |selector|))       (|implements| (assoc 'implement |alist|)))      (|if| (null |implements|)            |then|            (nconc1 |alist| (list 'implement |selector|))            |elseif|            (not (memb |selector| (cdr |implements|)))            |then|            (nconc1 |implements| |selector|))) |alist|)(|\\UnbatchMethodDefs|)(addtovar analyzeuserfns |LoopsAnalyzeHook|)(* |;;;| "Teach MasterScope how to analyze Classes and Methods")(defineq(|AnalyzeClass|  (lambda (|className| |reanalyze?|)                         (* |smL:| "12-Nov-85 13:13")                    (* * |Analyze| |the| |class| |for| |MasterScope|)    (let ((|class| ($! |className|)))         (|if| (and |class| (_ |class| |InstOf!| '|Class|))               |then|               (_ |class| |MSAnalyze| |reanalyze?|)))))(|AnalyzeMethod|  (lambda (|methodName| |reanalyze?|)                        (* |smL:| "12-Nov-85 13:13")                    (* * |Analyze| |the| |Loops| |method| |for| |MasterScope|)    (let ((|methodObj| ($! |methodName|)))         (|if| (and |methodObj| (_ |methodObj| |InstOf!| '|Method|))               |then|               (_ |methodObj| |MSAnalyze| |reanalyze?|))))))(|\\BatchMethodDefs|)(meth |Class|  |MSAnalyze| (|reanalyze?|)      "Analyze the class for MasterScope" (|category| (|Masterscope| |Class|)))(meth |Method|  |MSAnalyze| (|reanalyze?|)      "Analyze the method for MasterScope" (|category| (|Masterscope| |Method|)))(|Method| ((|Class| |MSAnalyze|) |self| |reanalyze?|)        (* \; "smL: 12-Nov-85 13:10") (* |;;;| "Analyze the class for MasterScope") nil)(|Method| ((|Method| |MSAnalyze|) |self| |reanalyze?|)       (* \; "smL  5-Dec-85 10:30") (* |;;;| "Analyze the method for MasterScope") nil)(|\\UnbatchMethodDefs|)(msaddanalyze 'classes 'class)(msaddanalyze 'methods 'method 'method-fns '|LoopsMethodMSGETDEF|)(putprops loopsms copyright ("Xerox Corporation" 1985 1986 1987 1988))(declare\: dontcopy  (filemap (nil (10710 16350 (|LoopsMethodMSGETDEF| 10720 . 11912) (|LoopsSELFp| 11914 . 12103) (|MethodOverrides?| 12105 . 13481) (|QuotedArg?| 13483 . 13682) (|_PutGetTemplate| 13684 . 16348)) (28169 28862 (|CheckLoopsFiles| 28179 . 28860)) (34873 35613 (|LoopsAnalyzeHook| 34883 . 35611)) (36555 37335 (|AnalyzeClass| 36565 . 36934) (|AnalyzeMethod| 36936 . 37333)))))stop