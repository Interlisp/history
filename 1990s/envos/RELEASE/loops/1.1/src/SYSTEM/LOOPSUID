(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED "15-Aug-90 13:15:21" {DSK}<usr>local>lde>SOURCES>loops>SYSTEM>LOOPSUID.;2 17229        changes to%:  (VARS LOOPSUIDCOMS)                    (FNS HasUID? UID DeleteObjectUID)      previous date%: "21-Apr-88 12:10:05" {DSK}<usr>local>lde>SOURCES>loops>SYSTEM>LOOPSUID.;1)(* ; "Copyright (c) 1984, 1985, 1986, 1987, 1988, 1990 by Venue & Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT LOOPSUIDCOMS)(RPAQQ LOOPSUIDCOMS       ((* ;;; "Patches a problem in Lyric.  Fixed in Medley.  IDATE and DATE were declared non-side effecting & non-effected thus compile-time constant.  This could cause non-unique UIDs to be generated.")        (DECLARE%: EVAL@COMPILE DONTCOPY (COMPILER::COMPILER-DATA (                                               "Side-effects data for IRM, Chapter 12: Miscellaneous"                                                                   :NONE :ANY)))        (* ;;; "Creates unique identifiers for instances")        (FNS HasUID? Make-UID UID UIDP)        (INITVARS (*UID-SESSION* NIL)               (*UID-COUNT* 0))        (GLOBALVARS *UID-SESSION* *UID-COUNT*)        (DECLARE%: EVAL@COMPILE DONTCOPY (EXPORT (RECORDS UID))               DONTEVAL@COMPILE DOCOPY (INITRECORDS UID))        (* ;;; "Packing together a unique ID that specifies the current login")        (FNS InitializeUIDs RADIX64NUM)        (* ;;; "Unpacking UIDs for human consumption")        (FNS Unpack-UID ConvertFromRadix64)        (DECLARE%: EVAL@COMPILE DONTCOPY (FILES (SYSLOAD)                                                MATCH))        (* ;;; "Access UID/instance relation")        (FNS GetObjFromUID PutObjectUID DeleteObjectUID MapObjectUID UIDHashBits UIDEqual)        [INITVARS (*UID-Table* (HASHARRAY 8000 NIL 'UIDHashBits 'UIDEqual]        (GLOBALVARS *UID-Table*)        (ADDVARS (GLOBALVARS *UID-Table*))        (* ;;; "Make sure that cache of front part of UID is invalidated whenever system is restarted.")        (FNS \Loops.AroundExit)        (ADDVARS (AROUNDEXITFNS \Loops.AroundExit))))(* ;;; "Patches a problem in Lyric.  Fixed in Medley.  IDATE and DATE were declared non-side effecting & non-effected thus compile-time constant.  This could cause non-unique UIDs to be generated.")(DECLARE%: EVAL@COMPILE DONTCOPY (COMPILER::DECLARE-SIDE-EFFECTS "IRM, Chapter 12: Miscellaneous" :NONE :ANY   DATE   GDATE   IDATE   CLOCK   MACHINETYPE))(* ;;; "Creates unique identifiers for instances")(DEFINEQ(HasUID?  [LAMBDA (obj)                                          (* ; "Edited 15-Aug-90 13:13 by jds")         (* * Return the object's UID if it has one, otherwise return NIL)    (if (Object? obj)        then (fetch (OBJECT OBJUID) of obj)      else (ERROR "ARG NOT OBJECT" obj])(Make-UID  [LAMBDA NIL                                                (* smL "20-May-86 13:34")                    (* * Creates and returns a unique identifier.)    (COND       ((NULL *UID-SESSION*)                                 (* Here if needed to reinitialize                                                              UIDs.)        (InitializeUIDs)))    (UNINTERRUPTABLY        (create UID               sessionID _ *UID-SESSION*               uidNumber _ (SETQ *UID-COUNT* (ADD1 *UID-COUNT*))))])(UID  [LAMBDA (obj)                                          (* ; "Edited 15-Aug-90 13:13 by jds")         (* * Return the UID of the object, creating the UID if the object doesn't        already have one.)    (if (Object? obj)        then (OR (fetch (OBJECT OBJUID) of obj)                     (CreateEntity obj))      else (ERROR "ARG NOT OBJECT" obj])(UIDP  [LAMBDA (x)                                                (* smL "19-May-86 17:11")                    (* * Is x of the form of a UID?)    (AND (LISTP x)         (LITATOM (CAR x))         (FIXP (CDR x]))(RPAQ? *UID-SESSION* NIL)(RPAQ? *UID-COUNT* 0)(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS *UID-SESSION* *UID-COUNT*))(DECLARE%: EVAL@COMPILE DONTCOPY (* "FOLLOWING DEFINITIONS EXPORTED")(DECLARE%: EVAL@COMPILE(RECORD UID (sessionID . uidNumber)                (SYSTEM)))(* "END EXPORTED DEFINITIONS")DONTEVAL@COMPILE DOCOPY )(* ;;; "Packing together a unique ID that specifies the current login")(DEFINEQ(InitializeUIDs  [LAMBDA NIL                                                (* ; "Edited 21-Apr-88 11:38 by jrb:")(* ;;; "Initializes the UniqueIdentifer Generation System in DB.  Sets the global variables *UID-SESSION* and and *UID-COUNT*")                                                             (* ;                                                              "Make sure that we have a valid time!")    (DECLARE (GLOBALVARS \RCLKMILLISECOND \MY.NSHOSTNUMBER))    (while (IGREATERP (IDATE MAKESYSDATE)                  (IDATE)) do (ERROR "Time is not set! Call"                                      "(SETTIME %"dd-mmm-yy hh:mm:ss%") and type RETURN"))                                                             (* ;                                                       "Compute *UID-SESSION* and DB.UIREC for today.")    (LET (date year month day monthCode startIndex nsHostNumber)         (SETQ nsHostNumber (OR (LISTP \MY.NSHOSTNUMBER)                                (LIST 'NSHOSTNUMBER (DAYTIME)                                      0 0)))                    (* ;; "Set up hostNumbe from \MY.NSHOSTNUMBER which should always be set in Interlisp-D -- else compute a random one which should not be used by any one")         (SETQ date (DATE))         (SETQ year (SUBATOM date 8 9))         (SETQ month (SUBATOM date 4 6))         (SETQ day (OR (NUMBERP (SUBATOM date 1 2))                       (SUBATOM date 2 2)))         [SETQ startIndex (IDIFFERENCE (IDATE date)                                 (IDATE (CONCAT (SUBSTRING date 1 10)                                               "00:00:00"]   (* ;             "start index is seconds today.  Wait a second to be sure no one can use this index again")         (forDuration 1 timerUnits 'SECONDS do NIL)         (SETQ monthCode (SELECTQ month                             ((Jan JAN)                                   'J)                             ((Feb FEB)                                   'F)                             ((Mar MAR)                                   'M)                             ((Apr APR)                                   'A)                             ((May MAY)                                   'Y)                             ((Jun JUN)                                   'U)                             ((Jul JUL)                                   'L)                             ((Aug AUG)                                   'G)                             ((Sep SEP)                                   'S)                             ((Oct OCT)                                   'O)                             ((Nov NOV)                                   'N)                             ((Dec DEC)                                   'D)                             (ERROR month "IS NOT A MONTH")))                    (* ;; "An unique ID consists of a front followed by a count.  The front is set up any time one enters -- It is unique because it contains the machine ID, the date, time of day in seconds, and has waited a second.  It then creates all of the UIDS in order from there.")         (SETQ *UID-COUNT* 0)         (SETQ *UID-SESSION* (PACK* monthCode (CHARACTER (IPLUS 64 day))                                    (CHARACTER year)                                    (RADIX64NUM (CADR nsHostNumber))                                    '%.                                    (RADIX64NUM (CADDR nsHostNumber))                                    '%.                                    (RADIX64NUM (CADDDR nsHostNumber))                                    '%.                                    (RADIX64NUM startIndex])(RADIX64NUM  [LAMBDA (inputNum)                                         (* smL "19-May-86 15:10")                    (* * Computes a string which uses 64 printing characters to represent a number)    (PROG (rem (chars (CONS))               (num inputNum))      LP  (SETQ rem (SELECTQ (SETQ rem (IPLUS 48 (LOGAND 63 num)))                        (96                                  (* change non printing character to a                                                              printing one)                            122)                        rem))          (TCONC chars (CHARACTER rem))          [COND             ((EQ 0 (SETQ num (LRSH num 6)))              (RETURN (CONCATLIST (CAR chars]          (GO LP]))(* ;;; "Unpacking UIDs for human consumption")(DEFINEQ(Unpack-UID  [LAMBDA (uid)                                              (* smL "19-May-86 16:24")                    (* * Given a unique identifier, returns a list that unpacks and decodes the           bits.)    (LET ((sepr (CONSTANT (CHCON1 ".")))          month day year hostNumber1 hostNumber2 hostNumber3 hostNumber seconds)         (if (match (CHCON (CAR uid))                    with                    (month_ & day_ & year_ & hostNumber1_ $ =sepr hostNumber2_ $ =sepr hostNumber3_ $                            =sepr seconds_ $))             then (LIST "LoginTime" (GDATE (PLUS (IDATE (CONCAT (PACK* (IDIFFERENCE day 64))                                                               (SELECTQ (CHARACTER month)                                                                   (J '"-Jan-")                                                                   (F '"-Feb-")                                                                   (M '"-Mar-")                                                                   (A '"-Apr-")                                                                   (Y '"-May-")                                                                   (U '"-Jun-")                                                                   (L '"-Jul-")                                                                   (G '"-Aug-")                                                                   (S '"-Sep-")                                                                   (O '"-Oct-")                                                                   (N '"-Nov-")                                                                   (D '"-Dec-")                                                                   "-Jan-")                                                               (PACK* year)                                                               " 00:00:00"))                                                 (ConvertFromRadix64 seconds)))                        "NSHost"                        (ConvertFromRadix64 hostNumber1)                        (ConvertFromRadix64 hostNumber2)                        (ConvertFromRadix64 hostNumber3)                        "UIDNumber"                        (CDR uid))           elseif (match (CHCON (CAR uid))                         with                         (month_ & day_ & year_ & hostNumber1_ $ =sepr hostNumber_ $ =sepr seconds_ $                                ))             then                                            (* Old style UID with smashed                                                              NSHOSTNUMBER)                  (LIST "LoginTime" (GDATE (PLUS (IDATE (CONCAT (PACK* (IDIFFERENCE day 64))                                                               (SELECTQ (CHARACTER month)                                                                   (J '"-Jan-")                                                                   (F '"-Feb-")                                                                   (M '"-Mar-")                                                                   (A '"-Apr-")                                                                   (Y '"-May-")                                                                   (U '"-Jun-")                                                                   (L '"-Jul-")                                                                   (G '"-Aug-")                                                                   (S '"-Sep-")                                                                   (O '"-Oct-")                                                                   (N '"-Nov-")                                                                   (D '"-Dec-")                                                                   "-Jan-")                                                               (PACK* year)                                                               " 00:00:00"))                                                 (ConvertFromRadix64 seconds)))                        "NSHost"                        (ConvertFromRadix64 hostNumber1)                        (ConvertFromRadix64 hostNumber)                        "UIDNumber"                        (CDR uid])(ConvertFromRadix64  [LAMBDA (charCodes)                                        (* smL "19-May-86 14:02")                    (* * Return the number that generated the given Radix64 representation)    (for c in (REVERSE charCodes) bind (number _ 0)       do (change number (PLUS (LLSH DATUM 6)                               (DIFFERENCE (SELECTQ c                                               (122 96)                                               c)                                      48))) finally (RETURN number]))(DECLARE%: EVAL@COMPILE DONTCOPY (FILESLOAD (SYSLOAD)       MATCH))(* ;;; "Access UID/instance relation")(DEFINEQ(GetObjFromUID  [LAMBDA (uid)                                              (* smL "20-May-86 13:37")                    (* * Given a UID string, return the object with that UID)    (COND       ((UIDP uid)        (GETHASH uid *UID-Table*))       (T NIL])(PutObjectUID  [LAMBDA (uid entry)                                        (* smL "20-May-86 13:37")                    (* * Puts a new uid for object in current uidTable)                    (* By copying, we keep the reference count down -          This keeps us from overflowing the GC hash table so soon)    (PUTHASH (create UID using uid)           entry *UID-Table*])(DeleteObjectUID  [LAMBDA (obj)                                          (* ; "Edited 15-Aug-90 13:14 by jds")         (* * Deletes object UID and removes entry from uid table)    (LET ((uid (HasUID? obj)))         (COND            (uid (replace (OBJECT OBJUID) of obj with NIL)                 (PUTHASH uid NIL *UID-Table*)                 obj])(MapObjectUID  [LAMBDA (fn)                                               (* smL "20-May-86 13:37")                    (* * Apply the fn to each known object and uid)    (MAPHASH *UID-Table* fn])(UIDHashBits  [LAMBDA (uid)                                              (* smL "20-May-86 11:05")                    (* * The hash-bits function used in the UID hash array)    (LOGXOR (\HILOC (fetch (UID sessionID) of uid))           (\LOLOC (fetch (UID sessionID) of uid))           (fetch (UID uidNumber) of uid])(UIDEqual  [LAMBDA (uid1 uid2)                                        (* smL "19-May-86 16:59")                    (* * Are the two UIDs equal?)    (AND (EQ (fetch (UID sessionID) of uid1)             (fetch (UID sessionID) of uid2))         (EQP (fetch (UID uidNumber) of uid1)              (fetch (UID uidNumber) of uid2]))(RPAQ? *UID-Table* (HASHARRAY 8000 NIL 'UIDHashBits 'UIDEqual))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS *UID-Table*))(ADDTOVAR GLOBALVARS *UID-Table*)(* ;;; "Make sure that cache of front part of UID is invalidated whenever system is restarted.")(DEFINEQ(\Loops.AroundExit  [LAMBDA (EVENT)                                            (* smL " 9-Apr-87 18:56")    (SELECTQ EVENT        ((AFTERLOGOUT AFTERSYSOUT AFTERMAKESYS AFTERSAVEVM)              (InitializeUIDs))        ((BEFORELOGOUT BEFORESYSOUT BEFOREMAKESYS BEFORESAVEVM)              NIL)        ((AFTERDOSYSOUT AFTERDOMAKESYS AFTERDOSAVEVM)              NIL)        NIL]))(ADDTOVAR AROUNDEXITFNS \Loops.AroundExit)(PUTPROPS LOOPSUID COPYRIGHT ("Venue & Xerox Corporation" 1984 1985 1986 1987 1988 1990))(DECLARE%: DONTCOPY  (FILEMAP (NIL (2622 4148 (HasUID? 2632 . 2955) (Make-UID 2957 . 3506) (UID 3508 . 3911) (UIDP 3913 . 4146)) (4589 9130 (InitializeUIDs 4599 . 8370) (RADIX64NUM 8372 . 9128)) (9186 14168 (Unpack-UID 9196 . 13597) (ConvertFromRadix64 13599 . 14166)) (14288 16377 (GetObjFromUID 14298 . 14579) (PutObjectUID 14581 . 14993) (DeleteObjectUID 14995 . 15382) (MapObjectUID 15384 . 15600) (UIDHashBits 15602 . 15977) (UIDEqual 15979 . 16375)) (16654 17068 (\Loops.AroundExit 16664 . 17066)))))STOP