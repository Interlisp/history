(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "INTERLISP")(LISPXPRIN1 "EXPORTS GATHERED FROM {POGO:AISNORTH:XEROX}<LOOPSCORE>LYRIC>SOURCES> ON  2-Jun-88 11:22:44"  T)(LISPXTERPRI T)(putprop (quote blocklookup) (quote importdate) (idate "11-Jun-86 16:56:14"))(putprop (quote loadloops) (quote importdate) (idate " 6-Apr-88 15:55:30"))(putprop (quote loops) (quote importdate) (idate "12-Apr-88 16:50:33"))(putprop (quote loops-abc) (quote importdate) (idate "30-Sep-87 17:07:11"))(putprop (quote loops-filepkg) (quote importdate) (idate " 5-Apr-88 10:18:57"))(putprop (quote loops-install) (quote importdate) (idate "11-Apr-88 17:21:41"))(putprop (quote loops-ttyedit) (quote importdate) (idate "18-Jun-87 15:30:07"))(putprop (quote loopsaccess) (quote importdate) (idate "30-Nov-87 16:50:27"))(putprop (quote loopsactivevalues) (quote importdate) (idate "24-Feb-88 08:56:34"))(putprop (quote loopsbrowse) (quote importdate) (idate "30-Mar-88 13:08:35"))(putprop (quote loopsdatatypes) (quote importdate) (idate " 9-Jun-87 07:26:09"))(record |brkRec| (|brkSelf| |brkVarName| |brkAv| |brkPropName| |brkType|) (system))(putprop (quote loopsdebug) (quote importdate) (idate "24-Feb-88 09:09:23"))(putprop (quote loopsedit) (quote importdate) (idate "24-Mar-88 15:49:18"))(putprops |ExtractObj| macro (openlambda (|datum|) (|if| (|type?| |annotatedValue| |datum|) |then| (|fetch| |annotatedValue| |of| |datum|) |elseif| (listp |datum|) |then| (car |datum|) |else| |datum|)))(putprop (quote loopsinspect) (quote importdate) (idate "23-Mar-88 16:52:35"))(putprops |\\PutValueOnly| macro (openlambda (|self| |varName| |propName| |newValue|) (cond (|propName| (|WithIVPropDescr!| |self| |varName| (lambda (|self| |varName| |propDescr|) (|InstPutProp| |propDescr| |propName| |newValue|)) (lambda (|self| |varName|) (shouldnt)))) (t (|WithIVValue| |self| |varName| (lambda (|self| |varName| |oldValue| |loc|) (|ChangeIVValue| |self| |varName| |loc| |newValue|)) (lambda (|self| |varName|) (shouldnt)))))))(putprop (quote loopskernel) (quote importdate) (idate "11-Apr-88 16:00:28"))(putprop (quote loopsmethods) (quote importdate) (idate "17-Mar-88 17:37:39"))(putprop (quote loopsms) (quote importdate) (idate "22-Sep-87 21:23:50"))(defmacro |TTYStream?| (\s) (* |;;;| "Is the stream s the TTY output stream?") (bquote (eq (getstream t (quote output)) (getstream (\\\, \s) (quote output)))))(putprop (quote loopsprint) (quote importdate) (idate "11-Mar-88 10:49:40"))(putprop (quote loopssite) (quote importdate) (idate "30-Oct-87 10:21:05"))(putprops \\getdtd macro ((|typeNum|) (\\addbase |\\DTDSpaceBase| (llsh |typeNum| 4))))(putprop (quote loopsspeedup) (quote importdate) (idate "11-Jun-87 12:47:53"))(defmacro |Once-Only| (|vars| &body |body|) (* |;;;| "Thanks to Gregor.pa for this contribution.") (let ((|Gensym-Var| (gensym)) (|Run-time-Vars| (gensym)) (|Run-time-Vals| (gensym)) (|Expand-time-Val-Forms| nil)) (setq |Expand-time-Val-Forms| (|for| |var| |in| |vars| |collect| (bquote (cond ((or (litatom (\\\, |var|)) (numberp (\\\, |var|)) (and (listp (\\\, |var|)) (memb (car (\\\, |var|)) (quote (quote function))))) (\\\, |var|)) (t (let (((\\\, |Gensym-Var|) (gensym))) (|push| (\\\, |Run-time-Vars|) (\\\, |Gensym-Var|)) (|push| (\\\, |Run-time-Vals|) (\\\, |var|)) (\\\, |Gensym-Var|))))))) (bquote (let* ((\\\, |Run-time-Vars|) (\\\, |Run-time-Vals|) (wrapped-body ((lambda (\\\, |vars|) .\, |body|) .\, |Expand-time-Val-Forms|))) (cond ((null (\\\, |Run-time-Vars|)) wrapped-body) (t (bquote ((lambda (\\\, (dreverse (\\\, |Run-time-Vars|))) (declare (localvars . t)) (\\\, wrapped-body)) .\, (dreverse (\\\, |Run-time-Vals|))))))))))(defmacro |WithIVValue| (|self| |ivName| |ifFound| |ifNotFound| &optional (|cache| nil)) (* |;;;| "Find the value of the IV ivName of the instance self.  --- If it is found, APPLY* ifFound to self, ivName, and the value.  --- If not found, APPLY* ifNotFound to self and ivName.") (|Once-Only| (|self| |ivName| |cache|) (let ((|value| (gensym (quote |value|))) (|varDescr| (gensym (quote |varDescr|)))) (|if| |cache| |then| (bquote (|if| (and (\\getbaseptr (\\\, |cache|) 0) (eq (\\getbaseptr (\\\, |cache|) 0) (|fetch| varnames |of| (\\\, |self|)))) |then| ((\\\, |ifFound|) (\\\, |self|) (\\\, |ivName|) (|GetVarNth| (\\\, |self|) (\\getbaseptr (\\\, |cache|) 2)) (\\getbaseptr (\\\, |cache|) 2)) |else| (prog ((\\\, |value|) (\\\, |varDescr|)) (declare (localvars . t)) (* \; "See if it is a standard IV") (setq (\\\, |varDescr|) (|FindVarIndex| (\\\, |ivName|) (\\\, |self|))) (cond ((\\\, |varDescr|) (\\putbaseptr (\\\, |cache|) 0 (|fetch| varnames |of| (\\\, |self|))) (\\putbaseptr (\\\, |cache|) 2 (\\\, |varDescr|)) (setq (\\\, |value|) (|GetVarNth| (\\\, |self|) (\\\, |varDescr|))) (go |IVFound|))) (* \; "See if it is an added IV") (setq (\\\, |varDescr|) (assoc (\\\, |ivName|) (|fetch| |otherIVs| |of| (\\\, |self|)))) (cond ((\\\, |varDescr|) (setq (\\\, |value|) (cdr (\\\, |varDescr|))) (go |IVFound|))) (* \; "See if it is an indexed IV") (cond ((fixp (\\\, |ivName|)) (setq (\\\, |value|) (|FetchNthDescr| (\\\, |self|) (\\\, |ivName|))) (go |IVFound|))) (* \; "Fall thru if the IV is nowhere to be found") (return ((\\\, |ifNotFound|) (\\\, |self|) (\\\, |ivName|))) |IVFound| (return ((\\\, |ifFound|) (\\\, |self|) (\\\, |ivName|) (\\\, |value|) (\\\, |varDescr|)))))) |else| (bquote (prog ((\\\, |value|) (\\\, |varDescr|)) (declare (localvars . t)) (* \; "See if it is a standard IV") (setq (\\\, |varDescr|) (|FindVarIndex| (\\\, |ivName|) (\\\, |self|))) (cond ((\\\, |varDescr|) (setq (\\\, |value|) (|GetVarNth| (\\\, |self|) (\\\, |varDescr|))) (go |IVFound|))) (* \; "See if it is an added IV") (setq (\\\, |varDescr|) (assoc (\\\, |ivName|) (|fetch| |otherIVs| |of| (\\\, |self|)))) (cond ((\\\, |varDescr|) (setq (\\\, |value|) (cdr (\\\, |varDescr|))) (go |IVFound|))) (* \; "See if it is an indexed IV") (cond ((fixp (\\\, |ivName|)) (setq (\\\, |value|) (|FetchNthDescr| (\\\, |self|) (\\\, |ivName|))) (go |IVFound|))) (* \; "Fall thru if the IV is nowhere to be found") (return ((\\\, |ifNotFound|) (\\\, |self|) (\\\, |ivName|))) |IVFound| (return ((\\\, |ifFound|) (\\\, |self|) (\\\, |ivName|) (\\\, |value|) (\\\, |varDescr|)))))))))(defmacro |ChangeIVValue| (|self| |varName| |ivLoc| |newValue|) (* |;;;| "Smash the IV value given by self, varName, and the IV value location ivLoc.  Can only be used within a WithIVValue macro.") (|Once-Only| (|self| |varName| |ivLoc| |newValue|) (bquote (progn (cond ((fixp (\\\, |ivLoc|)) (|PutVarNth| (\\\, |self|) (\\\, |ivLoc|) (\\\, |newValue|))) ((listp (\\\, |ivLoc|)) (rplacd (\\\, |ivLoc|) (\\\, |newValue|))) ((fixp (\\\, |varName|)) (|ReplaceNthDescr| (\\\, |self|) (\\\, |varName|) (\\\, |newValue|)))) (\\\, |newValue|)))))(record |IVPropDescr| (|IVName| . |IVPropList|) (system))(putprops |FetchIVPropDescr| macro ((|self| |ivName|) (assoc |ivName| (|fetch| |instIVProps| |of| |self|))))(defmacro |MakeIVPropDescr| (|self| |varName|) (* |;;;| "Make a new prop descr for the instance self and the IV varName, and return it.") (bquote (car (|push| (|fetch| |instIVProps| |of| (\\\, |self|)) (|create| |IVPropDescr| |IVName| _ (\\\, |varName|))))))(defmacro |WithIVPropDescr| (|self| |ivName| |ifFound| |ifIVNotFound| &optional (|cache| nil)) (* |;;;| "Find the IV prop descr of the IV ivName of the instance self.  --- If it is found, APPLY* ifFound to self, ivName, and the descr.  --- If the IV is not found, APPLY* ifIVNotFound to self and ivName.") (bquote (|WithIVValue| (\\\, |self|) (\\\, |ivName|) (lambda (|self| |ivName|) ((\\\, |ifFound|) |self| |ivName| (|FetchIVPropDescr| |self| |ivName|))) (\\\, |ifIVNotFound|) (\\\, |cache|))))(defmacro |WithIVPropDescr!| (|self| |ivName| |ifFound| |ifIVNotFound| &optional (|cache| nil)) (* |;;;| "Find the IV prop descr of the IV ivName of the instance self.  --- If the IV is found, APPLY* ifFound to self, ivName, and the descr, creating a new descr if none exists.  --- If the IV is not found, APPLY* ifIVNotFound to self and ivName.") (bquote (|WithIVValue| (\\\, |self|) (\\\, |ivName|) (lambda (|self| |ivName|) ((\\\, |ifFound|) |self| |ivName| (or (|FetchIVPropDescr| |self| |ivName|) (|MakeIVPropDescr| |self| |ivName|)))) (\\\, |ifIVNotFound|) (\\\, |cache|))))(putprops |InstGetProp| macro (openlambda (|descr| |propName|) (cond ((null |descr|) |NotSetValue|) (t (|for| |tail| |on| (|fetch| |IVPropList| |of| |descr|) |declare:| (localvars . t) |by| (cddr |tail|) |do| (cond ((eq |propName| (car |tail|)) (return (cadr |tail|)))) |finally| (return |NotSetValue|))))))(putprops |InstPutProp| macro (openlambda (|descr| |propName| |value|) (|if| (null (|fetch| |IVPropList| |of| |descr|)) |then| (|change| (|fetch| |IVPropList| |of| |descr|) (list |propName| |value|)) |value| |else| (listput (|fetch| |IVPropList| |of| |descr|) |propName| |value|))))(putprops |InstRemProp| macro (openlambda (|descr| |propName|) (* * |descr| |in| |an| |IVPropDescr| |with| |fields| |IVName| |and| |IVPropList| |Removes| \a |property| |from| |that| |list.| returns nil |if| |not| |found,| |propname| |otherwise|) (and |descr| (let ((|propList| (|fetch| |IVPropList| |of| |descr|))) (|if| (null |propList|) |then| nil |elseif| (eq |propName| (car |propList|)) |then| (|replace| |IVProps| |of| |descr| |with| (cddr |propList|)) |propName| |else| (|for| |tail| |on| (cdr |propList|) |by| (cddr |tail|) |do| (|if| (null (cdr |tail|)) |then| (return nil) |elseif| (eq |propName| (cadr |tail|)) |then| (rplacd |tail| (cdddr |tail|)) (return |propName|))))))))(putprops |ExtractRealValue| macro (openlambda (|self| |varName| |value| |propName| |type|) (* |Called| |by| |Fetches| |and| |Gets| |which| |want| |to| |notice| |activeValues.| |type| |is| |one| |of| nil |for| |instance| |variables,| class |for| |class| |properties,| method |for| |method| |properties| |and| cv |for| |class| |variables| |and| |properties.| |Returns| |either| |the| |value| |found| |or| |the| |result| |of| |evaluating| |the| getfn) (cond ((|type?| |annotatedValue| |value|) (_ (|fetch| |annotatedValue| |of| |value|) |GetWrappedValue| |self| |varName| |propName| |type|)) (t |value|))))(record |IVDescr| (|IVValue| . |IVProps|) |IVValue| _ |NotSetValue| |IVProps| _ nil (system))(putprops |FindVarIndex| macro (openlambda (|name| |obj|) (|FastFindIndex| |name| (|fetch| varnames |of| |obj|))))(putprops |FastFindIndex| macro (openlambda (|ivName| |ivList|) (* |cacheBlockPos| |is| |an| |even| |postion| |on| |the| |page,| |computed| |from| |the| |xor| |of| |the| |ivName| |and| |the| |IVList| |addresses|) (prog ((|ivIndex| 0) (|IVList| |ivList|) (|cacheBlockPos| (llsh (logand 1023 (logxor (\\loloc |ivList|) (\\loloc |ivName|))) 3))) (declare (localvars . t)) (cond ((and (eq |IVList| (\\getbaseptr |*Global-IV-Cache-Block*| |cacheBlockPos|)) (eq |ivName| (\\getbaseptr (\\addbase |*Global-IV-Cache-Block*| 2) |cacheBlockPos|))) (return (\\getbaseptr (\\addbase |*Global-IV-Cache-Block*| 4) |cacheBlockPos|)))) |TryNextIV| (cond ((eq |ivName| (car |IVList|)) (\\putbaseptr |*Global-IV-Cache-Block*| |cacheBlockPos| |ivList|) (\\putbaseptr (\\addbase |*Global-IV-Cache-Block*| 2) |cacheBlockPos| |ivName|) (\\putbaseptr (\\addbase |*Global-IV-Cache-Block*| 4) |cacheBlockPos| |ivIndex|) (return |ivIndex|)) ((null (setq |IVList| (cdr |IVList|))) (return nil)) (t (|add| |ivIndex| 1) (go |TryNextIV|))))))(putprop (quote loopsstruc) (quote importdate) (idate "25-Nov-87 17:45:05"))(record uid (|sessionID| . |uidNumber|) (system))(putprop (quote loopsuid) (quote importdate) (idate "21-Apr-88 12:10:04"))(putprop (quote loopsuserinterface) (quote importdate) (idate "29-Feb-88 10:32:48"))(putprop (quote loopsutility) (quote importdate) (idate "25-Mar-88 01:00:32"))(putprop (quote loopswindow) (quote importdate) (idate "15-Mar-88 16:39:11"))(putprop (quote masterscope) (quote importdate) (idate "22-Sep-87 16:14:32"))(putprop (quote msparse) (quote importdate) (idate " 2-Dec-85 11:34:41"))(putprop (quote sedit-patch) (quote importdate) (idate " 6-Apr-88 15:15:58"))(putprop (quote sysloader) (quote importdate) (idate " 5-Apr-88 09:59:14"))stop