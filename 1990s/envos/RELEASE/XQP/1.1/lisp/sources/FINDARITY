(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "29-Jun-87 18:30:51" {ERIS}<PROLOGCORE>LYRIC>LISP>FINDARITY.\;6 15089        |changes| |to:|  (FUNCTIONS XQP::FIND.ARITY.AUX)      |previous| |date:| "25-Jun-87 16:50:23" {ERIS}<PROLOGCORE>LYRIC>LISP>FINDARITY.\;5); Copyright (c) 1987 by Quintus Computer Systems, Inc.  All rights reserved.(PRETTYCOMPRINT FINDARITYCOMS)(RPAQQ FINDARITYCOMS ((* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>FINDARITY.LSP;1, loaded 16-Jun-87 18:27:53")                                          (* |;;| "@(#)FINDARITY.LSP	3.4   11/28/85 FINDARITY.LSP Vince Pecora	 ; --------------------------------------------------------; ; WARNING: This material is CONFIDENTIAL and proprietary ; to Quintus Computer Systems Inc.		 ; ; ; Copyright (C) 1985,  Quintus Computer Systems, Inc.   ; All rights reserved.					 ; ; --------------------------------------------------------; ;")                                          (* |;;| "Copyright (c) 1985 by Quintus Computer Systems, Inc. All rights reserved.")                                          (* |;;| "--------------------Global Variables-------------------- This is the maximum string length to scan.  This is used to avoid  scaning the entire file if a string is not terminated properly")                      (VARIABLES XQP::MAX.STRING.LENGTH)                                          (* |;;| "-------------------------find-arity-------------------------  This function expects the cursor to be in the same line as the  predicate, and for the predicate to start in column 1.   It will leave the cursor where it found it. It will not work with predicates that have been declared as operators")                      (FUNCTIONS XQP::FIND.ARITY)                                          (* |;;| "The following macro is used to skip over Prolog atoms and strings  in the FIND.ARITY.AUX code below.")                      (FUNCTIONS XQP::SKIP.OVER.CHAR.STRING XQP::FIND.ARITY.AUX                              XQP::TEDIT.ERROR.MESSAGE XQP::END.OF.LINE)                                          (* |;;| "this function is used to move over the known name of a predicate it expects to start with the file pointer at the first character  of the file that matches the input name.")                      (FUNCTIONS XQP::MOVE.OVER.STRING)                      (PROP MAKEFILE-ENVIRONMENT)))(* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>FINDARITY.LSP;1, loaded 16-Jun-87 18:27:53")(* |;;| "@(#)FINDARITY.LSP	3.4   11/28/85 FINDARITY.LSP Vince Pecora	 ; --------------------------------------------------------; ; WARNING: This material is CONFIDENTIAL and proprietary ; to Quintus Computer Systems Inc.		 ; ; ; Copyright (C) 1985,  Quintus Computer Systems, Inc.   ; All rights reserved.					 ; ; --------------------------------------------------------; ;")(* |;;| "Copyright (c) 1985 by Quintus Computer Systems, Inc. All rights reserved.")(* |;;| "--------------------Global Variables-------------------- This is the maximum string length to scan.  This is used to avoid  scaning the entire file if a string is not terminated properly")(XQP::|def.var| XQP::MAX.STRING.LENGTH 250)(* |;;| "-------------------------find-arity-------------------------  This function expects the cursor to be in the same line as the  predicate, and for the predicate to start in column 1.   It will leave the cursor where it found it. It will not work with predicates that have been declared as operators")(XQP::DEFUNC XQP::FIND.ARITY (STREAM NAME) (LET ((XQP::ORI.POSITION (ADD1 (\\TEXTGETFILEPTR STREAM)))                                                 (TEXT (TEXTOBJ STREAM))                                                 (FLAG (XQP::MOVE.OVER.STRING STREAM NAME))                                                             (* \; "move over the ")                                                 )           (* \; "predicate name")                                                (|if| FLAG                                                    |then| (XQP::TEDIT.ERROR.MESSAGE (LIST FLAG                                                                                            STREAM))                                                          (\\SETUPGETCH XQP::ORI.POSITION TEXT)                                                          NIL                                                  |else|     (* \;                                       "The file pointer is now at the first character after the name")                                                        (XQP::FIND.ARITY.AUX STREAM TEXT                                                                XQP::ORI.POSITION))))(* |;;| "The following macro is used to skip over Prolog atoms and strings  in the FIND.ARITY.AUX code below.")(XQP::DEFMACROC XQP::SKIP.OVER.CHAR.STRING (CHAR1 STREAM XQP::STOP.COUNT)   `(PROGN (SETQ XQP::STOP.CHAR ,CHAR1)           (SETQ XQP::PREV.CHAR ,CHAR1)           (SETQ CHAR (\\BIN ,STREAM))           (SETQ XQP::TMP.COUNT 0)           (WHILE (AND (NEQ CHAR XQP::STOP.CHAR)                       (ILESSP XQP::TMP.COUNT ,XQP::STOP.COUNT)                       (NOT (EOFP ,STREAM))) DO (SETQ XQP::PREV.CHAR CHAR)                                                (SETQ CHAR (\\BIN ,STREAM))                                                (SETQ XQP::TMP.COUNT (ADD1 XQP::TMP.COUNT)))           (|if| (OR (EQ XQP::TMP.COUNT ,XQP::STOP.COUNT)                     (EOFP ,STREAM))               |then| (SETQ ERR (LIST 3 (SUB1 ,XQP::STOP.COUNT)                                      ,STREAM))                     (SETQ XQP::ARITY.COUNTER NIL)                     (SETQ STOP T))))(XQP::DEFUNC XQP::FIND.ARITY.AUX (STREAM TEXT XQP::ORI.POSITION)                                                              (* \;                               "This function expects to start reading the first left paren character") (LET ((COUNT 0)       (XQP::PAREN.LEVEL 0)       (ERR NIL)       (XQP::ARITY.COUNTER 0)       (STOP NIL)       (XQP::CHAR.COUNT 0)       (XQP::TMP.COUNT 0)       (XQP::STOP.COUNT XQP::MAX.STRING.LENGTH)              (* \; "Set upper limit on string ")       (XQP::PREV.CHAR 0)                                    (* \;                                                      "length so as not to scan the entire file if a ")       (XQP::STOP.CHAR 0)                                    (* \;                                                              "string is not terminated properly.")       CHAR)      (WHILE (AND (ILESSP XQP::CHAR.COUNT XQP::STOP.COUNT)                  (NULL STOP)                  (NOT (EOFP STREAM)))         DO (SETQ CHAR (\\BIN STREAM))            (SETQ XQP::CHAR.COUNT (ADD1 XQP::CHAR.COUNT))            (SELCHARQ CHAR                 (\.                                         (* \; "Period")                     (SETQ STOP T))                 ((\( [ {)                                   (* \;                                                         "left paren, left bracket, left curly braces")                      (SETQ XQP::PAREN.LEVEL (ADD1 XQP::PAREN.LEVEL)))                 ((\) ] })                                   (* \;                                                      "right paren, right bracket, right curly braces")                      (SETQ XQP::PAREN.LEVEL (SUB1 XQP::PAREN.LEVEL))                      (|if| (EQ XQP::PAREN.LEVEL 0)                          |then| (SETQ XQP::ARITY.COUNTER (ADD1 XQP::ARITY.COUNTER))))                 (\,                                         (* \; "found a comma")                     (|if| (EQ XQP::PAREN.LEVEL 1)                         |then| (SETQ XQP::ARITY.COUNTER (ADD1 XQP::ARITY.COUNTER))))                 (\:                                         (* \; "have we found a colon dash?")                     (|if| (EQ XQP::PAREN.LEVEL 0)           (* \; "Don't combine these tests! ")                         |then| (|if| (EQ (\\BIN STREAM)                                          (CHARCODE -))                                    |then| (SETQ STOP T)                                  |else| (\\BACKBIN STREAM))))                 (\"                                         (* \; "we have the start of a string ")                     (XQP::SKIP.OVER.CHAR.STRING CHAR STREAM XQP::STOP.COUNT))                 (\'                                         (* \;                                                      "we have the start of radix notation or an atom")                     (|if| (AND (IGEQ XQP::PREV.CHAR (CHARCODE 0))                                (ILEQ XQP::PREV.CHAR (CHARCODE 9)))                         |then| NIL                          (* \; "we have radix notation ")                       |else| (XQP::SKIP.OVER.CHAR.STRING CHAR STREAM XQP::STOP.COUNT)))                 ((*)                       (|if| (EQ XQP::PREV.CHAR (CHARCODE /))                          |then| (SETQ CHAR (\\BIN STREAM))                                (SETQ XQP::TMP.COUNT 0)                                (WHILE (AND (NOT (AND (EQ CHAR (CHARCODE /))                                                      (EQ XQP::PREV.CHAR (CHARCODE *))))                                            (NOT (EOFP STREAM))                                            (ILESSP XQP::TMP.COUNT XQP::STOP.COUNT))                                       (SETQ XQP::PREV.CHAR CHAR)                                       (SETQ CHAR (\\BIN STREAM))                                       (SETQ XQP::TMP.COUNT (ADD1 XQP::TMP.COUNT)))                                (|if| (OR (EQ XQP::TMP.COUNT XQP::STOP.COUNT)                                          (EOFP STREAM))                                    |then| (SETQ ERR (LIST 4 (SUB1 XQP::STOP.COUNT)                                                           STREAM))                                          (SETQ XQP::ARITY.COUNTER NIL)                                          (SETQ STOP T))))                 (%                                          (* \; "we have a percent comment")                    (XQP::END.OF.LINE STREAM))                 (-                                          (* \; "we may have a grammar rule")                    (|if| (EQ XQP::PAREN.LEVEL 0)                        |then| (|if| (AND (NOT (EOFP STREAM))                                          (EQ (\\BIN STREAM)                                              (CHARCODE -)))                                   |then| (|if| (AND (NOT (EOFP STREAM))                                                     (EQ (\\BIN STREAM)                                                         (CHARCODE >)))                                              |then| (SETQ XQP::ARITY.COUNTER (IPLUS                                                                                    XQP::ARITY.COUNTER                                                                                      2))                                                    (SETQ STOP T)                                            |else| (\\BACKBIN STREAM))                                 |else| (\\BACKBIN STREAM))))                 NIL)            (SETQ XQP::PREV.CHAR CHAR))      (\\SETUPGETCH XQP::ORI.POSITION TEXT)      (|if| ERR          |then| (XQP::TEDIT.ERROR.MESSAGE ERR))      XQP::ARITY.COUNTER))(XQP::DEFUNC XQP::TEDIT.ERROR.MESSAGE (INPUT)                (* \;       "PRINTOUT when run this way from TEDIT will pop up a tty window  to display the information.  ") (SELECTQ (CAR INPUT)     (1 (TEDIT.PROMPTPRINT (CADR INPUT)               "End of file encountered while looking for predicate name" T))     (2 (TEDIT.PROMPTPRINT (CADR INPUT)               "This line does not start with the proper predicate" T))     (3 (TEDIT.PROMPTPRINT (CADDR INPUT)               "String longer than "               (CADR INPUT)               " characters encountered." "Check for closing quotes" T))     (4 (TEDIT.PROMPTPRINT (CADDR INPUT)               "Comment longer than "               (CADR INPUT)               " characters encountered." "Check for closing */" T))     NIL))(XQP::DEFUNC XQP::END.OF.LINE (STREAM) (UNTIL (OR (EOFP STREAM)                                                  (EQ (\\BIN STREAM)                                                      13)) DO T))(* |;;| "this function is used to move over the known name of a predicate it expects to start with the file pointer at the first character  of the file that matches the input name.")(XQP::DEFUNC XQP::MOVE.OVER.STRING (STREAM NAME) (LET ((XQP::ORI.POSITION (ADD1 (\\TEXTGETFILEPTR                                                                                 STREAM)))                                                       (TEXT (TEXTOBJ STREAM))                                                       (COUNT 0)                                                       (ERROR NIL)                                                       (CHAR NIL))                                                      (|repeatwhile| (AND (ILESSP COUNT (NCHARS                                                                                         NAME))                                                                          (NOT ERROR))                                                         |do| (|if| (NOT (EOFP STREAM))                                                                  |then| (SETQ CHAR (\\BIN STREAM))                                                                        (SETQ COUNT (ADD1 COUNT))                                                                |else| (\\SETUPGETCH                                                                               XQP::ORI.POSITION TEXT)                                                                      (SETQ ERROR 1))                                                              (|if| (NEQ CHAR (NTHCHARCODE NAME COUNT                                                                                     ))                                                                  |then| (\\SETUPGETCH                                                                                 XQP::ORI.POSITION                                                                                 TEXT)                                                                        (SETQ ERROR 2)))                                                      ERROR))(PUTPROPS FINDARITY COPYRIGHT ("Quintus Computer Systems, Inc" 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL)))STOP