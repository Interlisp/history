(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(filecreated " 3-Dec-87 16:32:47" {dsk}<lispfiles>dcoms>interrupts.\;2 11713        |changes| |to:|  (fns xqp::interrupt.handler)                       (vars interruptscoms)      |previous| |date:| "30-Jul-87 18:42:18" {dsk}<lispfiles>dcoms>interrupts.\;1); Copyright (c) 1985, 1986, 1987 by Quintus Computer Systems.  All rights reserved.(prettycomprint interruptscoms)(rpaqq interruptscoms (                                      (* \;           "This file contains functions dealing with D-machine interrupts, including error handling.")                                           (* |;;| "INTERRUPT.CHARCODES is a list of CHARCODEs of characters to cause a Prolog interrupt.  INTERRUPT.CHARCODES.TO.DISABLE is a list of CHARCODEs of characters that Lisp uses as interrupts, but we want turned off.  This list should probably contain ^B, at least.")                       (vars xqp::helptext (xqp::interrupt.charcodes                                            (list (list (charcode xqp::^c)                                                        (function xqp::interrupt.handler))                                                  (list (charcode ^z)                                                        (function end.of.file))))                             (xqp::interrupt.charcodes.to.disable nil)                             xqp::lisp.error.to.prolog.error.alist)                       (globalvars xqp::interrupt.charcodes xqp::interrupt.charcodes.to.disable                               xqp::lisp.error.to.prolog.error.alist)                       (fns xqp::block.events end.of.file xqp::install.handlers xqp::handle.overflow                             xqp::interrupt.handler xqp::lisp.error xqp::prolog.event                             xqp::reset.some.interrupts ttyentryfn ttyexitfn xqp::unblock.events)                       (p (xqp::install.handlers))                       (prop makefile-environment)))(* \; "This file contains functions dealing with D-machine interrupts, including error handling.")(* |;;| "INTERRUPT.CHARCODES is a list of CHARCODEs of characters to cause a Prolog interrupt.  INTERRUPT.CHARCODES.TO.DISABLE is a list of CHARCODEs of characters that Lisp uses as interrupts, but we want turned off.  This list should probably contain ^B, at least.")(rpaqq xqp::helptext "Prolog interrupt options:    c    continue - do nothing    t    trace   - debugger will start creeping    d    debug   - debugger will start leaping    a    abort   - cause a Prolog abort    e    exit    - irreversible exit from Prolog    h    help    - this listProlog interruption (? for help)? ")(rpaq xqp::interrupt.charcodes (list (list (charcode xqp::^c)                                           (function xqp::interrupt.handler))                                     (list (charcode ^z)                                           (function end.of.file))))(rpaqq xqp::interrupt.charcodes.to.disable nil)(rpaqq xqp::lisp.error.to.prolog.error.alist ((10 . 5)                                              (48 . 5)                                              (49 . 5)                                              (50 . 5)))(declare\: doeval@compile dontcopy(globalvars xqp::interrupt.charcodes xqp::interrupt.charcodes.to.disable        xqp::lisp.error.to.prolog.error.alist))(defineq(XQP::BLOCK.EVENTS  (LAMBDA (X)                                                (* |edited:| "10-Nov-85 15:29")                    (* * XQP::|Start| XQP::|running| XQP::|uninterruptably.|          |This| |will| |turn| |off| XQP::|keyboard| XQP::|interrupts;|          XQP::|I'm| |not| XQP::|sure| |if| |that's| XQP::|good| XQP::|enough.|)    (INTERRUPTABLE NIL)))(END.OF.FILE  (LAMBDA NIL                                                (* XQP::|vince:| "25-Nov-85 17:07")    (BKSYSBUF (CONCAT (CHARACTER 4)                     (CHARACTER (CHARCODE EOL))))))(XQP::INSTALL.HANDLERS  (LAMBDA NIL                                                (* XQP::|pds:| "21-Nov-85 11:21")    (|for| PAIR |in| XQP::LISP.ERROR.TO.PROLOG.ERROR.ALIST |unless| (ASSOC 'XQP::LISP.ERROR                                                                           (ASSOC (CAR PAIR)                                                                                  ERRORTYPELST))       |do| (PUTASSOC (CAR PAIR)                   (CONS (LIST (FUNCTION XQP::LISP.ERROR)                               (CDR PAIR))                         (CDR (ASSOC (CAR PAIR)                                     ERRORTYPELST)))                   ERRORTYPELST))))(XQP::HANDLE.OVERFLOW  (LAMBDA NIL                                                (* XQP::|pds:| " 4-Feb-87 12:55")                    (* * XQP::|This,| XQP::|believe| |it| |or| XQP::|not,| |is| |an|           XQP::|instruction.| |This| XQP::|instruction| XQP::|does| |not| XQP::|appear|           |in| |the| |code| XQP::|anywhere,| |and| |is| |never| XQP::|generated| |by|           |the| XQP::|compiler.| XQP::I\t |is| XQP::|much| XQP::|like| \a XQP::|trap|           |or| XQP::|interrupt,| |in| |that| |it| |is| XQP::|executed| XQP::|whenever|           |the| XQP::|microcode| XQP::|detects| \a XQP::|heap| |or| |stack|           XQP::|overflow.| I\f |this| XQP::|instruction| XQP::|continues,| |the|           XQP::|microcode| |will| |assume| |that| XQP::|garbage| XQP::|collection| |was|           XQP::|successful,| |and| XQP::|continue| XQP::|executing.|)    (OVERFLOW (XQP::|get.16| I))    (XQP::|continue| 0)))(xqp::interrupt.handler  (lambda nil                                                (* \; "Edited  3-Dec-87 13:55 by pds")(* |;;;| "This function needs to be attached somehow to the interrupt character, so it gets run when the user hits logical control-c.  What key should it be by default on d-machines?")    (terpri t)    (selectq (prog1 (resetlst (resetsave nil `(xqp::reset.some.interrupts \,                                                     (|for| ch |in| xqp::interrupt.charcodes                                                        |collect| (interruptchar ch nil))))                           (terpri t)                           (askuser nil nil "Prolog interruption (h for help)? "                                  '((\c "ontinue")                                    (\t "race")                                    (\d "ebug")                                    (\a "bort")                                    (\e "xit" promptconfirmflg t)) nil nil                                  '(confirmflg t macrochars ((\h prin1 xqp::helptext t)                                                             (h prin1 xqp::helptext t)                                                             (? prin1 xqp::helptext t)))))                    (terpri t)                    (clearbuf t))        (\c nil)        (\t (setq xqp::top.trace.state 2)            (setq xqp::trace.state 2)            (printout t "[The debugger will first creep -- showing everything (trace)]" t))        (\d (setq xqp::top.trace.state 3)            (setq xqp::trace.state 3)            (printout t "[The debugger will first leap -- showing spypoints (debug)]" t))        (\a (xqp::prolog.event 8))        (\e (xqp::prolog.event 3))        (shouldnt))))(XQP::LISP.ERROR  (LAMBDA (XQP::ERRNUM)                                      (* XQP::|pds:| " 4-Feb-86 13:46")    (LET ((OLDPOS (STKPOS 'PROLOG -1 ERRORPOS)))         (|if| OLDPOS             |then|                     (* * W\e |are| XQP::|running| |under| XQP::PROLOG.)                   (|if| (STKPOS '|R.call.lisp| -1 ERRORPOS OLDPOS)                       |then|                     (* * XQP::|But| XQP::|it's| XQP::|user-called| LISP |under| XQP::|Prolog,| |so|           XQP::|let| XQP::|someone| |else| |handle| XQP::|it.|)                             (RELSTK OLDPOS)                             NIL                     |else|                     (* * LISP |error| |in| XQP::|Prolog| XQP::|system| XQP::|code:| |call| |our|           XQP::|own| XQP::|handler.|)                           (RELSTK ERRORPOS)                           (XQP::PROLOG.EVENT XQP::ERRNUM))           |else|                     (* * |This| |has| |nothing| |to| |do| |with| XQP::|Prolog:| XQP::|pass| |it|           XQP::|on.|)                 NIL))))(XQP::PROLOG.EVENT  (LAMBDA (XQP::EVENT-NUMBER)                                (* \; "Edited 30-Jul-87 16:27 by pds")(* |;;;| "Called when something happens within prolog, e.g., prolog evaluates an abort goal.  This function corresponds very roughly to events.ih in the C world.")    (RETFROM 'QP.PROLOG XQP::EVENT-NUMBER T)))(XQP::RESET.SOME.INTERRUPTS  (LAMBDA (XQP::NEWINTERRUPTS XQP::SAVECURRENT?)             (* XQP::|pds:| "13-Nov-85 19:09")    (|if| XQP::SAVECURRENT?        |then| (|for| X |in| XQP::NEWINTERRUPTS |collect| (INTERRUPTCHAR X))      |else| (|for| X |in| XQP::NEWINTERRUPTS |do| (INTERRUPTCHAR X)))))(TTYENTRYFN  (LAMBDA (PROCESS)                                          (* XQP::|vince:| "25-Nov-85 16:54")                    (* * XQP::|Called| |each| |time| |the| XQP::|prolog| XQP::|process|           XQP::|becomes| |the| TTY XQP::|process.|          XQP::|Enable| |the| |interrupt| XQP::|key.|)    (|if| (PROCESSP PROCESS)        |then| (PROCESSPROP PROCESS 'XQP::OLDINTERRUPTS (NCONC (|for| CH |in|                                                                   XQP::INTERRUPT.CHARCODES.TO.DISABLE                                                                  |collect| (INTERRUPTCHAR CH NIL))                                                               (|for| PAIR |in|                                                                              XQP::INTERRUPT.CHARCODES                                                                  |collect| (INTERRUPTCHAR                                                                             (CAR PAIR)                                                                             (CDR PAIR))))))))(TTYEXITFN  (LAMBDA (PROCESS)                                          (* XQP::|vince:| "25-Nov-85 15:44")                    (* * XQP::|Called| |each| |time| |the| XQP::|prolog| XQP::|process|           XQP::|ceases| |to| |be| |the| TTY XQP::|process.|          |Undo| |the| XQP::|work| |of| XQP::TTYENTRYFN.)    (|if| (PROCESSP PROCESS)        |then| (|for| X |in| (PROCESSPROP PROCESS 'XQP::OLDINTERRUPTS) |do| (INTERRUPTCHAR X)))))(XQP::UNBLOCK.EVENTS  (LAMBDA (X)                                                (* |edited:| "10-Nov-85 15:29")                    (* * XQP::|Start| XQP::|running| XQP::|interruptably| XQP::|again.|          |This| |will| |turn| XQP::|keyboard| XQP::|interrupts| |back| XQP::|on;|          |if| |we| XQP::|modify| XQP::BLOCK.EVENTS |to| |turn| |off| |any| |other|           XQP::|interrupts,| |we| XQP::|had| XQP::|certainly| XQP::|better| XQP::|modify|           |this| |to| |turn| |them| |back| XQP::|on.|)    (INTERRUPTABLE T))))(xqp::install.handlers)(putprops interrupts copyright ("Quintus Computer Systems" 1985 1986 1987))(declare\: dontcopy  (filemap (nil (3469 11590 (xqp::block.events 3479 . 3872) (end.of.file 3874 . 4083) (xqp::install.handlers 4085 . 4783) (xqp::handle.overflow 4785 . 5766) (xqp::interrupt.handler 5768 . 7566) (xqp::lisp.error 7568 . 8695) (xqp::prolog.event 8697 . 9044) (xqp::reset.some.interrupts 9046 . 9394) (ttyentryfn 9396 . 10524) (ttyexitfn 10526 . 11013) (xqp::unblock.events 11015 . 11588)))))stop