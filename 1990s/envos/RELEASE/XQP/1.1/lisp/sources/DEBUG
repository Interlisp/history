(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "14-Aug-87 17:44:45" {DSK}<LISPFILES>DCOMS>DEBUG.\;8 26205        |changes| |to:|  (FUNCTIONS XQP::|current.opcode| XQP::|update.windows| XQP::|fetch.R|)                       (VARS DEBUGCOMS)      |previous| |date:| "14-Aug-87 15:53:06" {DSK}<LISPFILES>DCOMS>DEBUG.\;7); Copyright (c) 1987 by Quintus Computer Systems, Inc.  All rights reserved.(PRETTYCOMPRINT DEBUGCOMS)(RPAQQ DEBUGCOMS        ((* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>DEBUG.LSP;1, loaded 18-Jun-87 13:19:41")        (FUNCTIONS XQP::|Boxed| XQP::ENUM XQP::|Heap| |List| |Other| QB XQP::|QP.leap| XQP::|QP.look|                XQP::|QP.reset| XQP::|QP.spy| XQP::QU XQP::|Stack| XQP::|Strange| XQP::|StrangeTag|                XQP::|Struct| XQP::|Trail| XQP::|current.opcode| XQP::|enum| XQP::|fetch.A|                XQP::|fetch.H| XQP::|fetch.R| XQP::|fetch.Y| XQP::|init.windows| XQP::|listify|                XQP::|listify.addr| XQP::|listify.cell| XQP::|listify.word| XQP::|shade.menu|                XQP::|start.H| XQP::|update.windows|)        (CONSTANTS XQP::|cant|)        (VARIABLES XQP::|QP.menu| XQP::|QP.stop| XQP::|await.user| XQP::|menu.items.to.shade|                XQP::|menu.window| XQP::|proceed.event| XQP::|spies| XQP::|window.A| XQP::|window.H|                XQP::|window.R| XQP::|window.Y|)))(* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>DEBUG.LSP;1, loaded 18-Jun-87 13:19:41")(XQP::|def.subr| XQP::|Boxed| (X) X)(XQP::|def.subr| XQP::ENUM (M N L H) (SETQ H (CAR M))                                     (SETQ M (CDR M))                                     (|until| (ZEROP N)                                            (SETQ L (CONS (CONS H M)                                                          L))                                            (SETQ M (IPLUS M 2))                                            (|if| (NOT (SMALLP M))                                                |then| (SETQ H (ADD1 H))                                                      (SETQ M 0))                                            (SETQ N (SUB1 N)))                                     (DREVERSE L))(XQP::|def.subr| XQP::|Heap| (HI LOW) (\\VAG2 HI LOW))(XQP::|def.subr| |List| (X) X)(XQP::|def.subr| |Other| (HI LOW) (\\VAG2 HI LOW))(XQP::|def.subr| QB (BLOCK N) (RADIX 16)                              (|if| (NOT (SMALLP N))                                  |then| (SETQ N 0))                              (|until| (ZEROP N)                                     (|printout| T "Tag=" (\\GETBASEBYTE BLOCK 0)                                            ", Ptr="                                            (\\GETBASEPTR BLOCK 0)                                            ", Hi="                                            (\\GETBASE BLOCK 0)                                            ", Lo="                                            (\\GETBASE BLOCK 1)                                            T)                                     (SETQ BLOCK (\\ADDBASE BLOCK 2))                                     (SETQ N (SUB1 N)))                              (RADIX 10))(XQP::|def.subr| XQP::|QP.leap| (X) (|if| (AND (EQ X 'XQP::|leap|)                                               (NULL XQP::|spies|))                                        |then| (PROMPTPRINT "No spy-points, call used")                                              (SETQQ XQP::|QP.stop| |call|)                                      |else| (SETQ XQP::|QP.stop| X))                                    (|if| XQP::|await.user|                                        |then| (SETQ XQP::|await.user| NIL)                                              (NOTIFY.EVENT XQP::|proceed.event|)                                      |else| (PROMPTPRINT (SELECTQ XQP::|QP.stop|                                                              (XQP::|leap| "leaping to next spypoint")                                                              (T "single-stepping")                                                              (|call| "stopping at calls")                                                              (XQP::|skip|                                                                       "stopping at calls and returns")                                                              (NIL "not stopping for anything")                                                              (SHOULDNT "bogus debugging mode")))))(XQP::|def.subr| XQP::|QP.look| NIL (|if| XQP::|await.user|                                        |then| (XQP::QP.INSPECTCODE (XQP::|get.24| C))))(XQP::|def.subr| XQP::|QP.reset| NIL (|if| (MOUSECONFIRM "Restart Prolog process?")                                         |then| (RESTART.PROCESS (FIND.PROCESS XQP::PROLOG.NAME))                                       |elseif| (MOUSECONFIRM "Halt Prolog process?")                                         |then| (DEL.PROCESS (FIND.PROCESS XQP::PROLOG.NAME))))(XQP::|def.subr| XQP::|QP.spy| (XQP::ADD? NAME XQP::ARITY XQP::MODULE)   (|if| (OR NAME XQP::|await.user|)       |then| (LET ((PROC (|if| NAME                              |then| (XQP::P.CHECK.PREDICATE NAME XQP::ARITY XQP::MODULE)                            |else| (XQP::|get.24| C))))                   (|if| (NOT (TYPENAMEP PROC 'XQP::PROCEDURE.RECORD))                       |then| (|if| NAME                                  |then| (ERROR "no such predicate" (LIST NAME XQP::ARITY XQP::MODULE                                                                          ))                                |else| (PROMPTPRINT "C is not a procedure record"))                     |elseif| XQP::ADD?                       |then| (|if| (NOT (MEMB PROC XQP::|spies|))                                  |then| (SETQ XQP::|spies| (CONS PROC XQP::|spies|))                                        (PROMPTPRINT "spypoint set on " PROC)                                |else| (PROMPTPRINT "there is already a spypoint on " PROC))                     |else| (|if| (MEMB PROC XQP::|spies|)                                |then| (SETQ XQP::|spies| (REMOVE PROC XQP::|spies|))                                      (PROMPTPRINT "spypoint set removed from " PROC)                              |else| (PROMPTPRINT "no spypoint on " PROC))))))(XQP::|def.subr| XQP::QU NIL (LET ((*PACKAGE* (CL:FIND-PACKAGE "XQP"))                                   (OP (ELT XQP::|QP.opcode| (LRSH (XQP::|get.code| P -1)                                                                   8))))                                  (|if| (EQ OP '|R.extend|)                                      |then| (SETQ OP (ELT XQP::|QP.opcode|                                                           (IPLUS (LOGAND (XQP::|get.code| P -1)                                                                         255)                                                                  256))))                                  (|if| (EQ OP '|W.extend|)                                      |then| (SETQ OP (ELT XQP::|QP.opcode|                                                           (IPLUS (LOGAND (XQP::|get.code| P -1)                                                                         255)                                                                  257))))                                  (INSPECTW.REDISPLAY XQP::|window.R|)                                  (INSPECTW.REDISPLAY XQP::|window.A|)                                  (INSPECTW.REDISPLAY XQP::|window.Y|)                                  (|if| (WINDOWP XQP::|window.H|)                                      |then| (INSPECTW.REDISPLAY XQP::|window.H|))))(XQP::|def.subr| XQP::|Stack| (HI LOW) (\\VAG2 HI LOW))(XQP::|def.subr| XQP::|Strange| (HI LOW) (\\VAG2 HI LOW))(XQP::|def.subr| XQP::|StrangeTag| (X) X)(XQP::|def.subr| XQP::|Struct| (X) X)(XQP::|def.subr| XQP::|Trail| (HI LOW) (\\VAG2 HI LOW))(XQP::|def.subr| XQP::|current.opcode| NIL (* |;;;| "returns the current opcode")                                           (LET ((XQP::MAJOROP (ELT XQP::|QP.opcode|                                                                    (LRSH (LOGOR (XQP::|get.code|                                                                                  P -1)                                                                                 (XQP::|get.4| W))                                                                          8))))                                                (SELECTQ XQP::MAJOROP                                                    (|R.extend| (ELT XQP::|QP.opcode|                                                                     (IPLUS (LOGAND (XQP::|get.code|                                                                                     P -1)                                                                                   255)                                                                            256)))                                                    (|W.extend| (ELT XQP::|QP.opcode|                                                                     (IPLUS (LOGAND (XQP::|get.code|                                                                                     P -1)                                                                                   255)                                                                            257)))                                                    XQP::MAJOROP)))(XQP::|def.subr| XQP::|enum| (M N L) (|while| (IGEQ N M)                                            (SETQ L (CONS N L))                                            (SETQ N (SUB1 N)))                                     L)(XQP::|def.subr| XQP::|fetch.A| (X Y) (SELECTQ Y                                          (1 (XQP::|listify.cell| (XQP::|ReadPrologTag| A1)                                                    (XQP::|ReadPrologPtr| A1)))                                          (2 (XQP::|listify.cell| (XQP::|ReadPrologTag| A2)                                                    (XQP::|ReadPrologPtr| A2)))                                          (3 (XQP::|listify.cell| (XQP::|ReadPrologTag| A3)                                                    (XQP::|ReadPrologPtr| A3)))                                          (4 (XQP::|listify.cell| (XQP::|ReadPrologTag| A4)                                                    (XQP::|ReadPrologPtr| A4)))                                          (XQP::|listify| (\\ADDBASE2 XQP::|membot| Y))))(XQP::|def.subr| XQP::|fetch.H| (X Y) (XQP::|listify| (\\VAG2 (CAR Y)                                                             (CDR Y))))(XQP::|def.subr| XQP::|fetch.R| (X Y) (DECLARE (SPECVARS OP))                                      (SELECTQ Y                                          ((P CP C R S H XQP::HB TR E B B0)                                                (XQP::|listify.addr| (XQP::|DynReadPrologPtr| Y)))                                          ((XQP::T0 T1)                                                (XQP::|listify.cell| (XQP::|DynReadPrologTag| Y)                                                      (XQP::|DynReadPrologPtr| Y)))                                          ((I N)                                                (XQP::|listify.word| (XQP::|DynReadPrologNbr| Y)))                                          ((OP)                                                (CONS (XQP::|current.opcode|)                                                     (LOGAND (XQP::|get.code| P -1)                                                            255)))                                          "unknown"))(XQP::|def.subr| XQP::|fetch.Y| (X Y) (XQP::|listify| (SELECTQ Y                                                          (CE (XQP::|add.cell| E 0))                                                          (CP (XQP::|add.cell| E 1))                                                          (B0 (XQP::|add.cell| E 2))                                                          (XQP::|add.cell| E (IPLUS Y 2)))))(XQP::|def.subr| XQP::|init.windows| (|new?|)   (LET ((*PACKAGE* (CL:FIND-PACKAGE "XQP")))        (|if| (AND |new?| (WINDOWP XQP::|window.R|))            |then| (CLOSEW XQP::|window.R|))        (|if| (AND |new?| (WINDOWP XQP::|window.A|))            |then| (CLOSEW XQP::|window.A|))        (|if| (AND |new?| (WINDOWP XQP::|window.Y|))            |then| (CLOSEW XQP::|window.Y|))        (|if| (OR |new?| (NOT (WINDOWP XQP::|window.R|)))            |then| (SETQ XQP::|window.R|                    (INSPECTW.CREATE NIL                           '(P CP C R S H XQP::HB TR E B B0 XQP::T0 T1 I N OP)                           'XQP::|fetch.R|                           'SHOULDNT XQP::|cant| NIL NIL "Emulator regs" 'XQP::|start.H|                           '(580 510 220 210) NIL)))        (|if| (OR |new?| (NOT (WINDOWP XQP::|window.A|)))            |then| (SETQ XQP::|window.A| (INSPECTW.CREATE NIL (XQP::|enum| 1 8)                                                'XQP::|fetch.A|                                                'SHOULDNT XQP::|cant| NIL NIL "Arguments"                                                'XQP::|start.H|                                                '(580 395 220 115) NIL))                  (ATTACHWINDOW XQP::|window.A| XQP::|window.R| 'BOTTOM 'JUSTIFY))        (|if| (OR |new?| (NOT (WINDOWP XQP::|window.Y|)))            |then| (SETQ XQP::|window.Y| (INSPECTW.CREATE NIL (APPEND '(CE CP B0) (XQP::|enum| 1 8))                                                'XQP::|fetch.Y|                                                'SHOULDNT XQP::|cant| NIL NIL "Environment"                                                'XQP::|start.H|                                                '(800 395 220 150) NIL))                  (ATTACHWINDOW XQP::|window.Y| XQP::|window.R| 'RIGHT 'BOTTOM))        (|if| (OR |new?| (NOT (TYPENAMEP XQP::|QP.menu| 'MENU)))            |then| (SETQ XQP::|QP.menu| (|create| MENU                                               ITEMS _ '((XQP::|look| (XQP::|QP.look|)                                                                "Look at the code for C")                                                         (|reset| (XQP::|QP.reset|)                                                                "Crash back to Lisp top level")                                                         (XQP::|step| (XQP::|QP.leap| T)                                                                "Single-step")                                                         (|call| (XQP::|QP.leap| '|call|)                                                                                                                             "Shut up until next call/execute/depart"                                                                )                                                         (XQP::|skip| (XQP::|QP.leap| 'XQP::|skip|)                                                                "Shut up till next call or return")                                                         (XQP::|spy| (XQP::|QP.spy| T)                                                                "Set a spy-point on C")                                                         (XQP::|nospy| (XQP::|QP.spy| NIL)                                                                "Remove any spy-point from C")                                                         (XQP::|redraw| (XQP::QU)                                                                "Redraw the debugger windows")                                                         (XQP::|leap| (XQP::|QP.leap| 'XQP::|leap|)                                                                "Shut up until the next spy-point")                                                         (XQP::|fly| (XQP::|QP.leap| 'NIL)                                                                "Stop tracing completely"))                                               MENUCOLUMNS _ 5                                               TITLE _ "Action"                                               CENTERFLG _ T))                  (ATTACHMENU XQP::|QP.menu| XQP::|window.Y| 'TOP 'JUSTIFY)                  (SETQ XQP::|menu.window| (WFROMMENU XQP::|QP.menu|))                  (SETQ XQP::|menu.items.to.shade| (LIST (CAR (NTH (|fetch| (MENU ITEMS) |of|                                                                                        XQP::|QP.menu|                                                                          )                                                                   1))                                                         (CAR (NTH (|fetch| (MENU ITEMS) |of|                                                                                        XQP::|QP.menu|                                                                          )                                                                   6))                                                         (CAR (NTH (|fetch| (MENU ITEMS) |of|                                                                                        XQP::|QP.menu|                                                                          )                                                                   7))))                  (XQP::|shade.menu| GRAYSHADE))))(XQP::|def.subr| XQP::|listify| (XQP::|Ptr|) (XQP::|listify.cell| (\\GETBASEBYTE XQP::|Ptr| 0)                                                    (\\GETBASEPTR XQP::|Ptr| 0)))(XQP::|def.subr| XQP::|listify.addr| (XQP::|Ptr|)   (|if| (EQ (TYPENAME XQP::|Ptr|)             'XQP::PROCEDURE.RECORD)       |then| (LIST 'XQP::|Procedure| (XQP::PROC.NAME XQP::|Ptr|)                    (XQP::PROC.ARITY XQP::|Ptr|)                    (XQP::PROC.MODULE XQP::|Ptr|))     |elseif| (OR (NUMBERP XQP::|Ptr|)                  (LITATOM XQP::|Ptr|))       |then| (LIST 'XQP::|Bare| XQP::|Ptr|)     |else| (LIST (|if| (XQP::\\BASELESSP XQP::|Ptr| XQP::|init.H|)                      |then| 'XQP::|Clause?|                    |elseif| (XQP::\\BASELESSP XQP::|Ptr| (XQP::|get.24| TR))                      |then| 'XQP::|Heap|                    |elseif| (XQP::\\BASELESSP XQP::|Ptr| XQP::|init.E|)                      |then| 'XQP::|Trail|                    |elseif| (XQP::\\BASELESSP XQP::|Ptr| XQP::|memtop|)                      |then| 'XQP::|Stack|                    |else| 'XQP::|Strange|)                  (\\HILOC XQP::|Ptr|)                  (\\LOLOC XQP::|Ptr|))))(XQP::|def.subr| XQP::|listify.cell| (XQP::|Tag| XQP::|Ptr|)   (SELECTC XQP::|Tag|       (XQP::|ref.tag.8|             (|if| (AND (LITATOM XQP::|Ptr|)                       (ILESSP (\\LOLOC XQP::|Ptr|)                              256))                |then| (LIST 'XQP::|Byte| (\\LOLOC XQP::|Ptr|))              |else| (XQP::|listify.addr| XQP::|Ptr|)))       (XQP::|struct.tag.8|             (CONS 'XQP::|Struct| (XQP::|listify.addr| XQP::|Ptr|)))       (XQP::|list.tag.8|             (CONS '|List| (XQP::|listify.addr| XQP::|Ptr|)))       (XQP::|boxed.tag.8|             (LIST 'XQP::|Boxed| XQP::|Ptr|))       (XQP::|float.tag.8|             XQP::|Ptr|)       (XQP::|immed.tag.8|             XQP::|Ptr|)       (XQP::|other.tag.8|             (LIST '|Other| (LOGAND 255 (\\HILOC XQP::|Ptr|))                  (\\LOLOC XQP::|Ptr|)))       (XQP::|symbol.tag.8|             (|if| (ZEROP (\\HILOC XQP::|Ptr|))                |then| XQP::|Ptr|              |else| (LIST 'XQP::|Functor| (\\VAG2 0 (\\LOLOC XQP::|Ptr|))                           (\\HILOC XQP::|Ptr|))))       (LIST 'XQP::|StrangeTag| XQP::|Tag| (XQP::|listify.addr| XQP::|Ptr|))))(XQP::|def.subr| XQP::|listify.word| (N) (|if| (SMALLP N)                                             |then| (LIST N '= (|if| (MINUSP N)                                                                   |then| '-                                                                 |else| '+)                                                          (LOGAND (LRSH N 8)                                                                 255)                                                          (LOGAND N 255))                                           |else| (LIST '? N)))(XQP::|def.subr| XQP::|shade.menu| (|shade|) (|for| |item| |in| XQP::|menu.items.to.shade|                                                |do| (SHADEITEM |item| XQP::|QP.menu| |shade|                                                             XQP::|menu.window|)))(XQP::|def.subr| XQP::|start.H| (X Y Z)   (|if| Y       |then| (SETQ X (LAST X))             (|if| (WINDOWP XQP::|window.H|)                 |then| (CLOSEW XQP::|window.H|))             (|if| (AND (SMALLP (CAR X))                        (SMALLP (CDR X)))                 |then| (SETQ XQP::|window.H| (INSPECTW.CREATE NIL (XQP::ENUM X 8)                                                     'XQP::|fetch.H|                                                     'SHOULDNT XQP::|cant| NIL NIL "Data View"                                                     'XQP::|start.H|                                                     '(800 605 220 115) NIL)))     |else| (|if| (EQ Z XQP::|window.A|)                |then| (XQP::|put.Amem| 1 (XQP::|get.Aval| 1))                      (XQP::|put.Amem| 2 (XQP::|get.Aval| 2))                      (XQP::|put.Amem| 3 (XQP::|get.Aval| 3))                      (XQP::|put.Amem| 4 (XQP::|get.Aval| 4)))           (PROMPTPRINT (XQP::|lispify| (|if| (EQ Z XQP::|window.R|)                                            |then| (XQP::|DynReadPrologPtr| X)                                          |elseif| (EQ Z XQP::|window.A|)                                            |then| (\\ADDBASE2 XQP::|membot| X)                                          |elseif| (EQ Z XQP::|window.H|)                                            |then| (\\VAG2 (CAR X)                                                          (CDR X))                                          |else| (SETQ Y (XQP::|ReadPrologPtr| E))                                                (SELECTQ X                                                    (CE Y)                                                    (CP (\\ADDBASE Y 2))                                                    (B0 (\\ADDBASE Y 4))                                                    (\\ADDBASE Y (IPLUS (ITIMES X 2)                                                                        4))))                               T))))(XQP::|def.subr| XQP::|update.windows|   NIL (|if| XQP::|QP.stop|           |then| (LET* ((OP (XQP::|current.opcode|)))                        (|if| (OR (EQ XQP::|QP.stop| T)                                  (AND (MEMB OP '(|R.try.me.else| |R.just.me.else| |R.try.index.else|                                                         |R.just.index.else| |B.apply|))                                       (OR (EQ XQP::|QP.stop| '|call|)                                           (EQ XQP::|QP.stop| 'XQP::|skip|)                                           (MEMB (XQP::|get.24| C)                                                 XQP::|spies|)))                                  (AND (EQ OP '|B.apply|)                                       (OR (EQ XQP::|QP.stop| '|call|)                                           (EQ XQP::|QP.stop| 'XQP::|skip|)                                           (MEMB (XQP::|untag.anything| A2)                                                 XQP::|spies|)))                                  (AND (EQ XQP::|QP.stop| 'XQP::|skip|)                                       (MEMB OP '(|B.progress| |B.proceed| |B.fail|))))                            |then| (LET ((*PACKAGE* (CL:FIND-PACKAGE "XQP")                                                             (* \; "print stuff in XQP package")                                                ))                                        (INSPECTW.REDISPLAY XQP::|window.R|)                                        (INSPECTW.REDISPLAY XQP::|window.A|)                                        (INSPECTW.REDISPLAY XQP::|window.Y|)                                        (|if| (WINDOWP XQP::|window.H|)                                            |then| (INSPECTW.REDISPLAY XQP::|window.H|)))                                  (XQP::|shade.menu| WHITESHADE)                                  (SETQ XQP::|await.user| T)                                  (|while| XQP::|await.user| |do| (AWAIT.EVENT XQP::|proceed.event|))                                  (XQP::|shade.menu| GRAYSHADE)))))(DECLARE\: EVAL@COMPILE (RPAQQ XQP::|cant| "Can't change a register")(CONSTANTS XQP::|cant|))(XQP::|def.var| XQP::|QP.menu| NIL)(XQP::|def.var| XQP::|QP.stop| T)(XQP::|def.var| XQP::|await.user| T)(XQP::|def.var| XQP::|menu.items.to.shade| NIL)(XQP::|def.var| XQP::|menu.window| NIL)(XQP::|def.var| XQP::|proceed.event| (CREATE.EVENT 'XQP::|proceed.event|) )(XQP::|def.var| XQP::|spies| 'NIL )(XQP::|def.var| XQP::|window.A| NIL)(XQP::|def.var| XQP::|window.H| NIL)(XQP::|def.var| XQP::|window.R| NIL)(XQP::|def.var| XQP::|window.Y| NIL)(PUTPROPS DEBUG COPYRIGHT ("Quintus Computer Systems, Inc" 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL)))STOP