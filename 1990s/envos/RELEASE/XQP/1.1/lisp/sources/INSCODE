(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED " 3-Aug-87 16:22:04" {DSK}<LISPFILES>DCOMS>INSCODE.\;3 26022        |changes| |to:|  (FNS LOOK XQP::LOOK.DYNINDEX XQP::LOOK.DYNCLAUSE)      |previous| |date:| "30-Jul-87 18:38:02" {DSK}<LISPFILES>DCOMS>INSCODE.\;2); Copyright (c) 1986, 1987 by Quintus Computer Systems, Inc.  All rights reserved.(PRETTYCOMPRINT INSCODECOMS)(RPAQQ INSCODECOMS        (                                                     (* \;           "Top level function: puts up a scrollable window of compiled or interpreted code for pred.")        (FUNCTIONS XQP::QP.INSPECTCODE)                                                             (* \; "New for examining dynamic code:")        (FNS XQP::LOOK.DYN XQP::LOOK.DYNCLAUSE XQP::LOOK.DYNINDEX XQP::LOOK.HASH.ITEM)                                                             (* \; "moved from LOAD.LSP:")        (FNS XQP::A\i.NUMBER LOOK XQP::LOOK.ATOM XQP::LOOK.BASE.PTR XQP::LOOK.BYTE              XQP::LOOK.BYTE.ATOM XQP::LOOK.BYTE.BYTE XQP::LOOK.BYTE.CELL XQP::LOOK.BYTE.FUNCTOR              XQP::LOOK.CELL XQP::LOOK.CLAUSE XQP::LOOK.CONSTANT XQP::LOOK.EXTEND              XQP::LOOK.EXTEND.CELL XQP::LOOK.EXTEND.WORD XQP::LOOK.FUNCTOR XQP::LOOK.INSTR              XQP::LOOK.NULL XQP::LOOK.OFFSET XQP::LOOK.ONE.CLAUSE XQP::LOOK.OPCODE              XQP::LOOK.PROCEDURE XQP::LOOK.SIZE.OFFSET XQP::LOOK.SIZE.PROCEDURE)))(* \; "Top level function: puts up a scrollable window of compiled or interpreted code for pred.")(CL:DEFUN XQP::QP.INSPECTCODE (NAME XQP::ARITY XQP::MODULE)   (LET ((PROC (|if| (TYPENAMEP NAME 'XQP::PROCEDURE.RECORD)                   |then| NAME                 |elseif| (AND (LITATOM NAME)                               (SMALLP XQP::ARITY)                               (LITATOM XQP::MODULE))                   |then| (XQP::P.CHECK.PREDICATE NAME XQP::ARITY XQP::MODULE)                 |else| (ERROR "Invalid name, arity, module" (LIST NAME XQP::ARITY XQP::MODULE)))))        (|if| (NEQ PROC 0)            |then| (LET* ((TITLE (CONCAT "Code for " PROC))                          (STRM (OPENSTREAM '{NODIRCORE} 'BOTH))                          (XQP::OLDSTRM (OUTPUT))                          (WIN (CREATEW (GETBOXREGION 400 300 NIL NIL NIL (CONCAT                                                                               "Specify position for "                                                                                  TITLE))                                      TITLE)))                         (OUTPUT STRM)                         (LOOK PROC)                         (OUTPUT XQP::OLDSTRM)                         (OPENTEXTSTREAM STRM WIN NIL NIL '(READONLY T TITLEMENUFN NILL PROMPTWINDOW                                                                  'DON\'T))                         (WINDOWPROP WIN 'ICONFN NIL)                         PROC)          |else| (ERROR "No such predicate" (LIST NAME XQP::ARITY XQP::MODULE)))))(* \; "New for examining dynamic code:")(DEFINEQ(XQP::LOOK.DYN  (LAMBDA (XQP::DYN XQP::INDENT)                             (* XQP::|pds:| " 1-May-87 18:30")                    (* * XQP::|print| |out| |the| |code| |for| XQP::|interpreted| XQP::|clause|           |or| |index| XQP::DYN.)    (|bind| INSTR (TAG _ 0) |while| (AND XQP::DYN (ZEROP TAG))       |do| (PRINTOUT NIL XQP::INDENT T)            (SETQ INSTR (\\GETBASEBYTE XQP::DYN 0))            (|if| (EQ INSTR (CONSTANT (XQP::OP.CODE 'XQP::|dynamic.index|)))                |then| (XQP::LOOK.DYNINDEX XQP::DYN XQP::INDENT)              |elseif| (EQ INSTR (CONSTANT (XQP::OP.CODE 'XQP::|interpret.me|)))                |then| (XQP::LOOK.DYNCLAUSE XQP::DYN XQP::INDENT)              |else| (ERROR "bogus interpreted clause" XQP::DYN))            (SETQ TAG (\\GETBASEBYTE XQP::DYN XQP::|dyn.next.tagbyte|))            (SETQ XQP::DYN (\\GETBASEPTR XQP::DYN XQP::|dyn.next|))       |finally| (|if| (AND (NULL XQP::DYN)                            (ZEROP TAG))                     |then| (PRINTOUT NIL XQP::INDENT "*** Chain ends abruptly ***" T)))))(XQP::LOOK.DYNCLAUSE  (LAMBDA (CLAUSE XQP::INDENT)                               (* \; "Edited 30-Jul-87 17:35 by pds")(* |;;;| "Print out everything about CLAUSE.")(* |;;;| "first make sure CLAUSE points to the usual place in the clause <the unindexed interpret.me instruction>.")    (|if| (EQ (\\GETBASEBYTE CLAUSE 0)              (CONSTANT (XQP::OP.CODE 'XQP::|interpret.me|)))        |then| (SETQ CLAUSE (\\ADDBASE CLAUSE (IDIFFERENCE (\\GETBASEBYTE CLAUSE 1)                                                     XQP::|clause.born|))))    (LET ((XQP::HIKEY (\\GETBASE CLAUSE XQP::|clause.key|))          (XQP::LOKEY (\\GETBASE CLAUSE XQP::|clause.key.low|)))         (PRINTOUT NIL XQP::INDENT "Clause @ " CLAUSE T XQP::INDENT "size:  " (\\GETBASE CLAUSE                                                                                    XQP::|clause.size|                                                                                     )                T XQP::INDENT "inst:  " (ELT XQP::|QP.opcode| (\\GETBASEBYTE CLAUSE (LLSH                                                                                   XQP::|clause.instr|                                                                                           1)))                \,                (\\GETBASEBYTE CLAUSE (ADD1 (LLSH XQP::|clause.instr| 1)))                T XQP::INDENT "next:  " (\\GETBASEPTR CLAUSE XQP::|clause.next|)                "  tag:  " XQP::|.I3| (\\GETBASEBYTE CLAUSE XQP::|clause.next.tagbyte|)                T XQP::INDENT "prev:  " (\\GETBASEPTR CLAUSE XQP::|clause.prev|)                T XQP::INDENT "ikey:  (" XQP::|.I3| (LRSH XQP::HIKEY 8)                ") " XQP::|.I3| (LOGAND XQP::HIKEY 255)                "," |.I5| XQP::LOKEY |,,|)         (|if| (EQ XQP::HIKEY XQP::|ref.tag.16|)             |then| (PRINTOUT NIL "<unindexable clause>" T)           |elseif| (EQ (LOGAND XQP::HIKEY (LOGNOT 255))                        XQP::|symbol.tag.16|)             |then| (PRINTOUT NIL (\\VAG2 0 XQP::LOKEY))                   (LET ((XQP::ARITY (LOGAND XQP::HIKEY 255)))                        (|if| (NEQ 0 XQP::ARITY)                            |then| (PRINTOUT NIL "/" XQP::ARITY)))                   (TERPRI)           |else| (PRINTOUT NIL (\\GETBASEPTR CLAUSE XQP::|clause.key|)                         T))         (PRINTOUT NIL XQP::INDENT "iins:  " (ELT XQP::|QP.opcode| (\\GETBASEBYTE CLAUSE                                                                          (LLSH                                                                           XQP::|clause.indexed.instr|                                                                                 1)))                \,                (\\GETBASEBYTE CLAUSE (ADD1 (LLSH XQP::|clause.indexed.instr| 1)))                T XQP::INDENT "inxt:  " (\\GETBASEPTR CLAUSE XQP::|clause.indexed.next|)                "  tag:  " XQP::|.I3| (\\GETBASEBYTE CLAUSE XQP::|clause.indexed.next.tagbyte|)                T XQP::INDENT "iprv:  " (\\GETBASEPTR CLAUSE XQP::|clause.indexed.prev|)                T XQP::INDENT "proc:  " (\\GETBASEPTR CLAUSE XQP::|clause.procedure|)                T XQP::INDENT "born:  " (\\GETBASEPTR CLAUSE XQP::|clause.born|)                T XQP::INDENT "died:  " (\\GETBASEPTR CLAUSE XQP::|clause.died|)                T)         (|bind| (BASE _ (\\ADDBASE CLAUSE XQP::|clause.skel|))                TAG XQP::ARITY LOWORD |for| I |from| 0            |to| (LLSH (SUB1 (IDIFFERENCE (\\GETBASE CLAUSE XQP::|clause.size|)                                    XQP::|clauseheader.cells|))                       1) |by| 2            |do| (SETQ TAG (\\GETBASEBYTE BASE (LLSH I 1)))                 (SETQ XQP::ARITY (\\GETBASEBYTE BASE (ADD1 (LLSH I 1))))                 (SETQ LOWORD (\\GETBASE BASE (ADD1 I)))                 (PRINTOUT NIL XQP::INDENT XQP::|.I4| I ": (" XQP::|.I3| TAG ") " XQP::|.I3|                         XQP::ARITY "," |.I5| LOWORD |,,|)                 (|if| (EQ TAG XQP::|symbol.tag.8|)                     |then| (PRINTOUT NIL (\\VAG2 0 LOWORD))                           (|if| (NEQ 0 XQP::ARITY)                               |then| (PRINTOUT NIL "/" XQP::ARITY))                           (TERPRI)                   |elseif| (IGEQ TAG XQP::|immed.tag.8|)                     |then| (PRINTOUT NIL (\\GETBASEPTR BASE I)                                   T)                   |else| (PRINTOUT NIL "-> " LOWORD T))))))(XQP::LOOK.DYNINDEX  (LAMBDA (INDEX XQP::INDENT)                                (* \; "Edited 30-Jul-87 17:33 by pds")    (LET ((TABLE (\\GETBASEPTR INDEX XQP::|dynindex.table|))          (MASK (\\GETBASE INDEX XQP::|dynindex.mask|)))         (PRINTOUT NIL XQP::INDENT "Index @ " INDEX T XQP::INDENT .SP 7                (ELT XQP::|QP.opcode| (\\GETBASEBYTE INDEX (LLSH XQP::|dynindex.instr| 1)))                \,                (\\GETBASEBYTE INDEX (ADD1 (LLSH XQP::|dynindex.instr| 1)))                T XQP::INDENT "next:  " (\\GETBASEPTR INDEX XQP::|dynindex.next|)                "  tag:  " XQP::|.I3| (\\GETBASEBYTE INDEX XQP::|dyn.next.tagbyte|)                T XQP::INDENT "prev:  " (\\GETBASEPTR INDEX XQP::|dynindex.prev|)                T XQP::INDENT "mask:  " MASK T XQP::INDENT " pop:  " (\\GETBASE INDEX                                                                            XQP::|dynindex.population|                                                                            )                T XQP::INDENT "frst:  " (\\GETBASEPTR INDEX XQP::|dynindex.first|)                T XQP::INDENT "list:  " (|if| (EQ (\\GETBASEPTR INDEX XQP::|dynindex.list|)                                                  XQP::FAILURE.CLAUSE)                                            |then| "<failure>"                                          |else| (\\GETBASEPTR INDEX XQP::|dynindex.list|))                T XQP::INDENT "hash:  " TABLE T XQP::INDENT "born:  " (\\GETBASEPTR INDEX                                                                              XQP::|dynindex.born|)                T XQP::INDENT "died:  " (\\GETBASEPTR INDEX XQP::|dynindex.died|)                T)         (|if| TABLE             |then| (|for| I |from| 0 |to| MASK |do| (XQP::LOOK.HASH.ITEM I (\\GETBASEBYTE                                                                             TABLE                                                                             (ITIMES I 4))                                                            (\\GETBASEPTR TABLE (ITIMES I 2))             (                               (              XQP::INDENT)))         (XQP::LOOK.DYN (\\GETBASEPTR INDEX XQP::|dynindex.first|)                (CONCAT XQP::INDENT "| ")))))(XQP::LOOK.HASH.ITEM  (LAMBDA (I TAG PTR XQP::INDENT)                            F(* XQP::|pds:| " 2-Apr-87 18:33")    (SELECTQ TAG        (0                                                   (* |empty| XQP::|slot|)           (PRINTOUT NIL XQP::INDENT XQP::|.I4| I ":  <empty>" T))        (8                                                   (* XQP::|singleton| XQP::|slot|)           (PRINTOUT NIL XQP::INDENT XQP::|.I4| I ":  " PTR T))        (128                                                 (* XQP::|crowded| XQP::|lot|)         (* \; "don't worry about:")                                                 (LITATOM X) (* \;                                                              "symbols (Lisp doesn't collect them)")                                                 (SMALLP X)  (* \; "small integers (ditto)")                                                 (TYPENAMEP X 'XQP::PROCEDURE.RECORD)                                                 (\\BLOCKDATAP X)                                                             (* \; "our clauses")                                                 (GETHASH X XQP::REF.TABLE)                                                             (* \; "things we've already seen")                                                 ))                                      |then|                     (* |;;| "X is collectable, and not already in REF.TABLE")                                            (PUTHASH X T XQP::REF.TABLE)                                            (SETQ XQP::REF.COUNT (ADD1 XQP::REF.COUNT))                                            (|if| (IGEQ XQP::REF.COUNT XQP::REF.LIMIT)                                                |then| (XQP::TRIMCORE X)))                                  X                    (* |;;| "look like identity function")                                  )(* |;;| "(SWEEP LO HI) scans through a block of tagged cells, starting at P, and ending with Q (which *is* scanned).  So the range is [P,Q]. References are collected when they satisfy the same test that ADD.REF applies, except that since we check the tag first, there is no need to filter out LITATOMs and SMALLPs.")(* |;;| "BEWARE!!  The load.choice.point instruction creates cells with tag \"other\" whose datum points into the Prolog local stack. I have verified that all such pointers satisfy the Lisp test (\\BLOCKDATAP prolog-local-stack-pointer).  If that changes, it will be necessary to add another test to SWEEP.")(XQP::|def.subr| XQP::SWEEP (P Q TABLE COUNT) (PROG (Y)                                                L   (|if| (NOT (OR (ILESSP (\\GETBASE P 0)                                                                          XQP::|other.tag.16|)                                                                   (TYPENAMEP (SETQ Y                                                                               (\\GETBASEPTR P 0))                                                                          'XQP::PROCEDURE.RECORD)                                                                   (\\BLOCKDATAP Y)                                                                   (GETHASH Y TABLE)))                                                        |then|                     (* |;;| "Y is collectable, and not already in TABLE")                                                              (PUTHASH Y T TABLE)                                                              (SETQ COUNT (ADD1 COUNT)))                                                    (|if| (EQ P Q)                                                        |then| (RETURN COUNT))                                                    (SETQ P (\\ADDBASE P 2))                                                    (GO L)))(* |;;| "(TRIMCORE X) rebuilds the external reference hash table.  It ensures that X is safe in the new state table, so that it can be called from ADD.REF when the current table gets full.  The function is called with X=NIL from Prolog, but that's ok too, as it will be scanned but not included in the new table.")(XQP::|def.subr| XQP::TRIMCORE (X) (PROG (TABLE COUNT LIMIT)                    (* |;;| "Create the new table.")                                         (SETQ LIMIT (HARRAYSIZE XQP::REF.TABLE))                                         (SETQ TABLE (HARRAY LIMIT))                                         (SETQ COUNT 0)                    (* |;;| "dump the four A registers into their memory slots.")                                         (XQP::|put.Amem| 1 (XQP::|get.Aval| 1))                                         (XQP::|put.Amem| 2 (XQP::|get.Aval| 2))                                         (XQP::|put.Amem| 3 (XQP::|get.Aval| 3))                                         (XQP::|put.Amem| 4 (XQP::|get.Aval| 4))                    (* |;;| "trace all references from the A registers")                                         (SETQ COUNT (XQP::SWEEP (XQP::|loc.Amem| 1)                                  INT (LIST INSTR (XQP::A\i.NUMBER (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET)                              XQP::A\iM)                 (XQP::LOOK.BASE.PTR CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.BYTE.FUNCTOR  (LAMBDA (CLAUSE INSTR XQP::A\iM)                           (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (XQP::A\i.NUMBER (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET)                              XQP::A\iM)                 (\\VAG2 0 (\\GETBASE CLAUSE (IPLUS 2 XQP::CLAUSE.OFFSET)))                 (XQP::\\RIGHTBYTE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.CELL  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (\\VAG2 (XQP::\\RIGHTBYTE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))                              (\\GETBASE CLAUSE (IPLUS XQP::CLAUSE.OFFSET 2)))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.CLAUSE  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (LIST 'CLAUSE (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET)                             (\\GETBASE CLAUSE (ADD1 XQP::CLAUSE.OFFSET)))))    (CL:INCF XQP::CLAUSE.OFFSET 2)))(XQP::LOOK.CONSTANT  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (XQP::LOOK.BASE.PTR CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.EXTEND  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR))    (CL:INCF XQP::CLAUSE.OFFSET)))(XQP::LOOK.EXTEND.CELL  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (XQP::LOOK.BASE.PTR CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.EXTEND.WORD  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (LET ((WORD (\\GETBASE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))         (PRINT (LIST INSTR (RSH (LLSH WORD 16)                                 16)))         (CL:INCF XQP::CLAUSE.OFFSET 2))))(XQP::LOOK.FUNCTOR  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR (\\VAG2 0 (\\GETBASE CLAUSE (IPLUS 2 XQP::CLAUSE.OFFSET)))                 (XQP::\\RIGHTBYTE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3)))(XQP::LOOK.INSTR  (LAMBDA (CLAUSE)    (LET* ((OPCODE (XQP::\\LEFTBYTE CLAUSE XQP::CLAUSE.OFFSET))           (FIELDS (CADDR (GETHASH OPCODE XQP::INSTRUCTION.HARRAY)))           (INSTR (CAR (GETHASH OPCODE XQP::INSTRUCTION.HARRAY)))           (XQP::MAYBESTAR (CADR (GETHASH OPCODE XQP::INSTRUCTION.HARRAY))))          (TAB 4)          (COND             ((EQ XQP::MAYBESTAR '*)              (LET* ((XQP::INSTR2 FIELDS)                     (XQP::OPCODE2 (GETHASH XQP::INSTR2 XQP::INSTRUCTION.HARRAY))                     (XQP::FIELDS2 (CADDR (GETHASH XQP::OPCODE2 XQP::INSTRUCTION.HARRAY)))                     (XQP::A\iM1 (MEMB INSTR '(XQP::|put.AiM.value.XnM| XQP::|put.AiM.value.XnM|                                                      XQP::|put.AiM.value.Xn| XQP::|put.AiM.value.Xn|)                                       ))                     (XQP::A\iM2 (MEMB INSTR '(XQP::|put.AiM.value.XnM| XQP::|put.AiM.value.XnM|                                                      XQP::|put.Ai.value.XnM| XQP::|put.Ai.value.XnM|)                                       )))                    (COND                       ((OR XQP::A\iM1 XQP::A\iM2)                        (XQP::LOOK.OPCODE CLAUSE OPCODE XQP::FIELDS2 INSTR XQP::A\iM1 XQP::A\iM2))                       (T (XQP::LOOK.OPCODE CLAUSE OPCODE XQP::FIELDS2 INSTR T NIL)))))             (T (XQP::LOOK.OPCODE CLAUSE OPCODE FIELDS INSTR NIL NIL))))))(XQP::LOOK.NULL  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (LIST INSTR))    (CL:INCF XQP::CLAUSE.OFFSET)))(XQP::LOOK.OFFSET  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (LET* ((XQP::CLAUSE.HILOC (\\HILOC CLAUSE))           (XQP::CLAUSE.LOLOC (\\LOLOC CLAUSE))           (XQP::CLAUSE.BEGIN (IPLUS (LLSH XQP::CLAUSE.HILOC 16)                                     XQP::CLAUSE.LOLOC))           (XQP::INSTR.ADDR (IPLUS (ITIMES (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET)                                          65536)                                   (\\GETBASE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))           (OFFSET (IDIFFERENCE XQP::INSTR.ADDR XQP::CLAUSE.BEGIN)))          (PRINT (LIST INSTR '+ OFFSET))          (CL:INCF XQP::CLAUSE.OFFSET 2))))(XQP::LOOK.ONE.CLAUSE  (LAMBDA (CLAUSE)    (PROG NIL          (SETQ XQP::CLAUSE.OFFSET 0)      LP  (COND             ((XQP::LOOK.INSTR CLAUSE)              (GO LP))))))(XQP::LOOK.OPCODE  (LAMBDA (CLAUSE OPCODE FIELDS INSTR XQP::A\iM1 XQP::A\iM2)    (COND       ((EQ OPCODE 0)        NIL)       ((EQ OPCODE XQP::EXTENSION.OPCODE)        (LET* ((EXTENSION (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET))               (XQP::INSTR2 (CAR (GETHASH EXTENSION XQP::EXTENSION.HARRAY)))               (XQP::FIELDS2 (CDR (GETHASH EXTENSION XQP::EXTENSION.HARRAY))))              (COND                 ((EQUAL XQP::FIELDS2 '(XQP::|extend| |word|))                  (XQP::LOOK.EXTEND.WORD CLAUSE XQP::INSTR2))                 ((EQUAL XQP::FIELDS2 '(XQP::|extend| XQP::|cell|))                  (XQP::LOOK.EXTEND.CELL CLAUSE XQP::INSTR2))                 (T (XQP::LOOK.EXTEND CLAUSE XQP::INSTR2)))))       ((EQUAL FIELDS NIL)        (XQP::LOOK.NULL CLAUSE INSTR))       ((MEMBER FIELDS '((|byte|)                         (\y1)                         (XQP::\a1)))        (XQP::LOOK.BYTE CLAUSE INSTR (CAR FIELDS)               XQP::A\iM1))       ((EQUAL FIELDS '(XQP::|cell|))        (XQP::LOOK.CELL CLAUSE INSTR))       ((EQUAL FIELDS '(XQP::|functor|))        (XQP::LOOK.FUNCTOR CLAUSE INSTR))       ((EQUAL FIELDS '(|atom|))        (XQP::LOOK.ATOM CLAUSE INSTR))       ((EQUAL FIELDS '(XQP::\a1 XQP::|cell|))        (XQP::LOOK.BYTE.CELL CLAUSE INSTR XQP::A\iM1))       ((MEMBER FIELDS '((XQP::\a1 \y2)                         (XQP::\a2 \y1)                         (XQP::\a2 XQP::\a1)                         (XQP::\a1 XQP::\a2)))        (XQP::LOOK.BYTE.BYTE CLAUSE INSTR (SELECTQ (CAR FIELDS)                                              (XQP::\a1 'NORMAL)                                              (XQP::\a2 'XQP::REVERSED)                                              (SHOULDNT))               (SELECTQ (CADR FIELDS)                   ((\y1 \y2)                         'XQP::PERMANENT)                   ((XQP::\a1 XQP::\a2)                         'ARGUMENT)                   (SHOULDNT))               XQP::A\iM1 XQP::A\iM2))       ((EQUAL FIELDS '(XQP::\a1 XQP::|functor|))        (XQP::LOOK.BYTE.FUNCTOR CLAUSE INSTR XQP::A\iM1))       ((EQUAL FIELDS '(XQP::\a1 |atom|))        (XQP::LOOK.BYTE.ATOM CLAUSE INSTR XQP::A\iM1))       ((EQUAL FIELDS '(XQP::|size| XQP::|procedure|))        (XQP::LOOK.SIZE.PROCEDURE CLAUSE INSTR))       ((EQUAL FIELDS '(XQP::|size| |offset|))        (XQP::LOOK.SIZE.OFFSET CLAUSE INSTR))       ((EQUAL FIELDS '(XQP::|procedure|))        (XQP::LOOK.PROCEDURE CLAUSE INSTR))       ((EQUAL FIELDS '(|offset|))        (XQP::LOOK.OFFSET CLAUSE INSTR))       ((EQUAL FIELDS '(XQP::|clause|))        (XQP::LOOK.CLAUSE CLAUSE INSTR))       (T (PRINT (LIST OPCODE INSTR FIELDS))          (SHOULDNT)))))(XQP::LOOK.PROCEDURE  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (CONS INSTR (XQP::P.PROCEDURE (XQP::LOOK.BASE.PTR CLAUSE XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 2)))(XQP::LOOK.SIZE.OFFSET  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (LET* ((XQP::CLAUSE.HILOC (\\HILOC CLAUSE))           (XQP::CLAUSE.LOLOC (\\LOLOC CLAUSE))           (XQP::CLAUSE.BEGIN (IPLUS (LLSH XQP::CLAUSE.HILOC 16)                                     XQP::CLAUSE.LOLOC))           (XQP::INSTR.ADDR (IPLUS (ITIMES (XQP::\\RIGHTBYTE CLAUSE XQP::CLAUSE.OFFSET)                                          65536)                                   (\\GETBASE CLAUSE (ADD1 XQP::CLAUSE.OFFSET))))           (OFFSET (IDIFFERENCE XQP::INSTR.ADDR XQP::CLAUSE.BEGIN)))          (PRINT (LIST INSTR (IQUOTIENT (\\GETBASE CLAUSE (IPLUS XQP::CLAUSE.OFFSET 2))                                    2)                       '+ OFFSET))          (CL:INCF XQP::CLAUSE.OFFSET 3))))(XQP::LOOK.SIZE.PROCEDURE  (LAMBDA (CLAUSE INSTR)                                     (* \; "Edited 29-Jun-87 15:15 by pds")    (PRINT (NCONC (LIST INSTR (IQUOTIENT (\\GETBASE CLAUSE (IPLUS XQP::CLAUSE.OFFSET 2))                                     2))                  (XQP::P.PROCEDURE (XQP::LOOK.BASE.PTR CLAUSE XQP::CLAUSE.OFFSET))))    (CL:INCF XQP::CLAUSE.OFFSET 3))))(PUTPROPS INSCODE COPYRIGHT ("Quintus Computer Systems, Inc" 1986 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL (3144 12174 (XQP::LOOK.DYN 3154 . 4295) (XQP::LOOK.DYNCLAUSE 4297 . 8876) (XQP::LOOK.DYNINDEX 8878 . 11206) (XQP::LOOK.HASH.ITEM 11208 . 12172)) (12213 25926 (XQP::A\i.NUMBER 12223 . 12341) (LOOK 12343 . 13917) (XQP::LOOK.ATOM 13919 . 14165) (XQP::LOOK.BASE.PTR 14167 . 14317) (XQP::LOOK.BYTE 14319 . 14909) (XQP::LOOK.BYTE.ATOM 14911 . 15286) (XQP::LOOK.BYTE.BYTE 15288 . 16241) (XQP::LOOK.BYTE.CELL 16243 . 16620) (XQP::LOOK.BYTE.FUNCTOR 16622 . 17072) (XQP::LOOK.CELL 17074 . 17403) (XQP::LOOK.CLAUSE 17405 . 17731) (XQP::LOOK.CONSTANT 17733 . 17985) (XQP::LOOK.EXTEND 17987 . 18177) (XQP::LOOK.EXTEND.CELL 18179 . 18434) (XQP::LOOK.EXTEND.WORD 18436 . 18764) (XQP::LOOK.FUNCTOR 18766 . 19087) (XQP::LOOK.INSTR 19089 . 20526) (XQP::LOOK.NULL 20528 . 20716) (XQP::LOOK.OFFSET 20718 . 21439) (XQP::LOOK.ONE.CLAUSE 21441 . 21623) (XQP::LOOK.OPCODE 21625 . 24411) (XQP::LOOK.PROCEDURE 24413 . 24678) (XQP::LOOK.SIZE.OFFSET 24680 . 25527) (XQP::LOOK.SIZE.PROCEDURE 25529 . 25924)))))STOP