(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "29-Jun-87 17:17:26" {ERIS}<PROLOGCORE>LYRIC>LISP>BIND.\;7 16438        |changes| |to:|  (FUNCTIONS XQP::QP.OVERFLOW)      |previous| |date:| "25-Jun-87 14:49:35" {ERIS}<PROLOGCORE>LYRIC>LISP>BIND.\;6); Copyright (c) 1987 by Quintus Computer Systems, Inc.  All rights reserved.(PRETTYCOMPRINT BINDCOMS)(RPAQQ BINDCOMS ((* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>BIND.LSP;1, loaded 16-Jun-87 11:54:00")                                     (* |;;| "SCCS   : @(#)BIND.LSP	8202.1 2/5/87 File   : $xerox/bind.lsp Author : Richard A. O'Keefe Purpose: Define {trail,bind}.{local,global,either,safe}")                 (* |;;;| "------------------------------------------------------------------------  WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.  This notice is protection against inadvertent disclosure and does not constitute publication or reflect any intent to publish.  Copyright (C) 1985, by Quintus Computer Systems, Inc. All rights reserved.  CAVEAT LECTOR: This software is under development.  No warrantee is made that it is any use for anything at all.  ------------------------------------------------------------------------")                                     (* |;;|          "Report a stack overflow See INTERRUPTS.LSP and TOPLEVEL.LSP for PROLOG.EVENT and these #s.")                 (FUNCTIONS XQP::QP.OVERFLOW)                                     (* |;;| "Check whether the local stack has overflowed")                 (FUNCTIONS XQP::|check.stack|)                                     (* |;;| "Check whether the heap has overflowed")                 (FUNCTIONS XQP::|check.heap|)                                     (* |;;| "---------------------------------------------------------------- News flash:  A check.heap is done at every call, and the compiler ensures that a check.heap instruction is emitted if the code could possibly consume that much heap/trail. The only possible problem is the general unifier: no bound can be placed on the heap/trail consumed by the general unifier.  Therefore, the specialized get/unify instructions do NOT need to check for heap/ trail overflow, only the general unifier must do this. So the bind.xxx macros no longer do this check; the check is done in only two places in the general unifier (in GETREAD.LSP). ----------------------------------------------------------------")                                     (* |;;| "New instruction added to the Prolog machine to allow indefinite size procedures.  The check.heap instruction is generated when it is possible that the heap/trail gap insured at the time of call has been used up.")                 (INSTRUCTIONS XQP::|check.heap|)                                     (* |;;| "Ptr is a 24-bit pointer into the local stack Val is a 32-bit tagged cell (T0 or T1) Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point")                 (FUNCTIONS XQP::|bind.local|)                                     (* |;;| "Ptr is a 24-bit pointer into the global stack Val is a 32-bit tagged cell Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point")                 (FUNCTIONS XQP::|bind.global|)                                     (* |;;| "Ptr is a 24-bit pointer into one or another of the stacks, but we do not know in advance which of them, hence the test. Val is a 32-bit tagged cell Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point. I have expressed the test in this slightly unnatural way to emphasise that the micro-code version doesn't actually need a scratch address register; there will be two copies of the 24-bit comparison.  We should give some thought to having as few copies of the trailing code as at all possible.")                 (FUNCTIONS XQP::|bind.either|)                                     (* |;;| "Ptr is a 24-bit pointer into one or another of the stacks, but we don't know which.  Add it to the trail if it is (now) older than the more recent (surviving) choice point.  This is called in two contexts: when we are pruning the trail, and in bind.safely.  In both cases we know that stack overflow cannot occur, so the test is omitted.")                 (FUNCTIONS XQP::|trail.safely|)                                     (* |;;| "Ptr is a 24-bit pointer into on or aother of the stacks. Val is a 32-bit tagged cell. Assign Val to Ptr. This is only called when we have just checked the heap/trail, so know that it can't overflow here.")                 (FUNCTIONS XQP::|bind.safely|)                                     (* |;;| "Ptr is a 24-bit pointer into the local stack Val is a 32-bit tagged cell (T0 or T1) Assign Val to Ptr, and **always** add Ptr to the trail.")                 (FUNCTIONS XQP::|bind.trail|)                                     (* |;;| "New instruction added for incremental gc in X2.0.  One invariant assumed by the incremental gc:  all pointers from S- and H- into H+ are trailed.  This is usually the case, except for explicit unification (e.g., using =/2) of a local permanent variable in the body of a clause, after a choicepoint has been created.  After such an explicit unification, the maybe.trail.Yn instruction must be used to ensure that S- references to H+ are trailed (even though they don't need to be for the correct working of the Prolog machine).")                 (INSTRUCTIONS XQP::|maybe.trail.Yn|)                 (PROP MAKEFILE-ENVIRONMENT)))(* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>BIND.LSP;1, loaded 16-Jun-87 11:54:00")(* |;;| "SCCS   : @(#)BIND.LSP	8202.1 2/5/87 File   : $xerox/bind.lsp Author : Richard A. O'Keefe Purpose: Define {trail,bind}.{local,global,either,safe}")(* |;;;| "------------------------------------------------------------------------  WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.  This notice is protection against inadvertent disclosure and does not constitute publication or reflect any intent to publish.  Copyright (C) 1985, by Quintus Computer Systems, Inc. All rights reserved.  CAVEAT LECTOR: This software is under development.  No warrantee is made that it is any use for anything at all.  ------------------------------------------------------------------------")(* |;;| "Report a stack overflow See INTERRUPTS.LSP and TOPLEVEL.LSP for PROLOG.EVENT and these #s.")(XQP::|def.subr| XQP::QP.OVERFLOW (EVENT) (DECLARE (GLOBALVARS XQP::GC.ENABLED))                                          (|if| (AND XQP::GC.ENABLED (OR (EQ EVENT 12)                                                                         (EQ EVENT 13)                                                                         (AND (IGEQ EVENT 20)                                                                              (ILEQ EVENT 25))))                                              |then|                     (* |;;| "heap overflow:  try to garbage collect")                                                    (|if| (NOT (GC EVENT))                                                        |then| (XQP::PROLOG.EVENT EVENT))                                            |else| (XQP::PROLOG.EVENT EVENT)))(* |;;| "Check whether the local stack has overflowed")(XQP::|def.macro| XQP::|check.stack| (E) `(|if| (NOT (XQP::|waybefore| ,E XQP::|memtop|))                                              |then| (XQP::QP.OVERFLOW 11)                                                              (* \;                                                              "stack overflow is not handled yet")))(* |;;| "Check whether the heap has overflowed")(XQP::|def.macro| XQP::|check.heap| (|event|)                (* \; "event is 12, 13 or 20 - 25, indicating the state of the system for the benefit of the garbage collector, which needs to know which registers are active.") `(|if| (NOT (XQP::|waybefore| H TR))      |then| (XQP::QP.OVERFLOW ,|event|)                     (* \; "try to collect garbage and go on")))(* |;;| "---------------------------------------------------------------- News flash:  A check.heap is done at every call, and the compiler ensures that a check.heap instruction is emitted if the code could possibly consume that much heap/trail. The only possible problem is the general unifier: no bound can be placed on the heap/trail consumed by the general unifier.  Therefore, the specialized get/unify instructions do NOT need to check for heap/ trail overflow, only the general unifier must do this. So the bind.xxx macros no longer do this check; the check is done in only two places in the general unifier (in GETREAD.LSP). ----------------------------------------------------------------")(* |;;| "New instruction added to the Prolog machine to allow indefinite size procedures.  The check.heap instruction is generated when it is possible that the heap/trail gap insured at the time of call has been used up.")(XQP::|def.both.mode| XQP::|check.heap| NIL (XQP::|check.heap| 20)                                                             (* \; "EV_OVCHKHEAP")                                            (XQP::|continue| 0))(* |;;| "Ptr is a 24-bit pointer into the local stack Val is a 32-bit tagged cell (T0 or T1) Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point")(XQP::|def.macro| XQP::|bind.local| (XQP::|Ptr| XQP::|Val|)   `(PROGN (XQP::|put.cell| ,XQP::|Ptr| 0 (XQP::|get.32| ,XQP::|Val|))                                                             (* \; "bind the Prolog variable")           (|if| (|before| ,XQP::|Ptr| B)               |then|                                        (* \; "it is old")                     (XQP::|decrement.cell.pointer| TR)                     (XQP::|put.addr| TR 0 (XQP::|get.24| ,XQP::|Ptr|))                                                              (* \; "push Ptr onto trail"))))(* |;;| "Ptr is a 24-bit pointer into the global stack Val is a 32-bit tagged cell Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point")(XQP::|def.macro| XQP::|bind.global| (XQP::|Ptr| XQP::|Val|)   `(PROGN (XQP::|put.cell| ,XQP::|Ptr| 0 (XQP::|get.32| ,XQP::|Val|))                                                             (* \; "bind the Prolog variable")           (|if| (|before| ,XQP::|Ptr| XQP::HB)               |then|                                        (* \; "it is old")                     (XQP::|decrement.cell.pointer| TR)                     (XQP::|put.addr| TR 0 (XQP::|get.24| ,XQP::|Ptr|))                                                              (* \; "push Ptr onto trail"))))(* |;;| "Ptr is a 24-bit pointer into one or another of the stacks, but we do not know in advance which of them, hence the test. Val is a 32-bit tagged cell Assign Val to Ptr, and add Ptr to the trail if it is older than the most recent choice point. I have expressed the test in this slightly unnatural way to emphasise that the micro-code version doesn't actually need a scratch address register; there will be two copies of the 24-bit comparison.  We should give some thought to having as few copies of the trailing code as at all possible.")(XQP::|def.macro| XQP::|bind.either| (XQP::|Ptr| XQP::|Val|)   `(PROGN (XQP::|put.cell| ,XQP::|Ptr| 0 (XQP::|get.32| ,XQP::|Val|))                                                             (* \; "bind the Prolog variable")           (|if| (|if| (XQP::|waybefore| H ,XQP::|Ptr|)                     |then| (|before| ,XQP::|Ptr| B)                   |else| (|before| ,XQP::|Ptr| XQP::HB))               |then| (XQP::|decrement.cell.pointer| TR)                     (XQP::|put.addr| TR 0 (XQP::|get.24| ,XQP::|Ptr|))                                                              (* \; "push Ptr onto trail"))))(* |;;| "Ptr is a 24-bit pointer into one or another of the stacks, but we don't know which.  Add it to the trail if it is (now) older than the more recent (surviving) choice point.  This is called in two contexts: when we are pruning the trail, and in bind.safely.  In both cases we know that stack overflow cannot occur, so the test is omitted.")(XQP::|def.macro| XQP::|trail.safely| (XQP::|Ptr|)   `(|if| (|if| (XQP::|waybefore| H ,XQP::|Ptr|)              |then| (|before| ,XQP::|Ptr| B)            |else| (|before| ,XQP::|Ptr| XQP::HB))        |then| (XQP::|decrement.cell.pointer| TR)              (XQP::|put.addr| TR 0 (XQP::|get.24| ,XQP::|Ptr|))))(* |;;| "Ptr is a 24-bit pointer into on or aother of the stacks. Val is a 32-bit tagged cell. Assign Val to Ptr. This is only called when we have just checked the heap/trail, so know that it can't overflow here.")(XQP::|def.macro| XQP::|bind.safely| (XQP::|Ptr| XQP::|Val|) `(PROGN (XQP::|put.cell|                                                                      ,XQP::|Ptr| 0                                                                      (XQP::|get.32| ,XQP::|Val|))                                                                     (XQP::|trail.safely|                                                                      ,XQP::|Ptr|)))(* |;;| "Ptr is a 24-bit pointer into the local stack Val is a 32-bit tagged cell (T0 or T1) Assign Val to Ptr, and **always** add Ptr to the trail.")(XQP::|def.macro| XQP::|bind.trail| (XQP::|Ptr| XQP::|Val|) `(PROGN (XQP::|put.cell|                                                                     ,XQP::|Ptr| 0                                                                     (XQP::|get.32| ,XQP::|Val|))                                                             (* \; "bind the Prolog variable")                                                                    (XQP::|decrement.cell.pointer|                                                                     TR)                                                                    (XQP::|put.addr|                                                                     TR 0 (XQP::|get.24| ,XQP::|Ptr|)                                                                     )                                                             (* \; "push Ptr onto trail")                                                                    ))(* |;;| "New instruction added for incremental gc in X2.0.  One invariant assumed by the incremental gc:  all pointers from S- and H- into H+ are trailed.  This is usually the case, except for explicit unification (e.g., using =/2) of a local permanent variable in the body of a clause, after a choicepoint has been created.  After such an explicit unification, the maybe.trail.Yn instruction must be used to ensure that S- references to H+ are trailed (even though they don't need to be for the correct working of the Prolog machine).")(XQP::|def.both.mode| XQP::|maybe.trail.Yn| (XQP::|yreg|) (|if| (|before| E B)                                                              |then| (XQP::|put.24| R (                                                                                      XQP::|loc.Yval|                                                                                       N))                                                                    (XQP::|decrement.cell.pointer|                                                                     TR)                                                                    (XQP::|put.addr| TR 0                                                                           (XQP::|get.24| R))                                                              (* \; "push Ptr onto trail"))                                                          (XQP::|continue| 0))(PUTPROPS BIND COPYRIGHT ("Quintus Computer Systems, Inc" 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL)))STOP