(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "INTERLISP")(filecreated "15-Dec-87 14:24:45" {dsk}<lispfiles>dcoms>lisp.\;3 21049        |changes| |to:|  (functions xqp::|QP.prologify|)      |previous| |date:| "15-Oct-87 11:14:19" {dsk}<lispfiles>dcoms>lisp.\;2); Copyright (c) 1987 by Quintus Computer Systems, Inc.  All rights reserved.(prettycomprint lispcoms)(rpaqq lispcoms        ((* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>LISP.LSP;1, loaded 18-Jun-87 11:48:30")        (structures prolog.term)        (functions ql xqp::|QP.prologify| xqp::term.print xqp::|lispify| xqp::|lispify.cell|                xqp::|send.to.lisp|)        (p (defprint 'prolog.term 'xqp::term.print))        (constants xqp::av)        (variables xqp::|prologify.baseptr|)        (variables xqp::mv.returner0 xqp::mv.returner1 xqp::mv.returner2 xqp::mv.returner3                xqp::mv.returner4 xqp::mv.returner5 xqp::mv.returner6 xqp::mv.returner7                xqp::mv.returner8 xqp::mv.returner9 xqp::mv.returner10 xqp::mv.returner11                xqp::mv.returner12 xqp::mv.returner13 xqp::mv.returner14 xqp::mv.returner15)        (instructions xqp::|call.lisp| xqp::|send.direct.Ai| xqp::|send.direct.AiM|                xqp::|send.variable.Ai| xqp::|send.variable.AiM| xqp::|start.calling|)        (xqp::write-instructions xqp::|call.lisp|)        (prop makefile-environment)))(* |;;;| "This file was generated from {ERIS}<PROLOGCORE>LISPNEW>LISP.LSP;1, loaded 18-Jun-87 11:48:30")(xqp::|def.struct| prolog.term (prolog.functor pointer) (prolog.args pointer))(xqp::|def.subr| ql (n) (selectq n                            (1 (xqp::|lispify.cell| (xqp::|ReadPrologTag| a1)                                      (xqp::|ReadPrologPtr| a1)                                      t))                            (2 (xqp::|lispify.cell| (xqp::|ReadPrologTag| a2)                                      (xqp::|ReadPrologPtr| a2)                                      t))                            (3 (xqp::|lispify.cell| (xqp::|ReadPrologTag| a3)                                      (xqp::|ReadPrologPtr| a3)                                      t))                            (4 (xqp::|lispify.cell| (xqp::|ReadPrologTag| a4)                                      (xqp::|ReadPrologPtr| a4)                                      t))                            (xqp::|lispify| (xqp::|add.cell| xqp::|membot| n)                                   t)))(xqp::|def.subr| xqp::|QP.prologify| (xqp::|Ptr| c)   (prog nil     l   (|if| (litatom xqp::|Ptr|)             |then| (\\putbaseptr xqp::|prologify.baseptr| c xqp::|Ptr|)                   (\\putbase xqp::|prologify.baseptr| c xqp::|symbol.tag.16|)           |elseif| (smallp xqp::|Ptr|)             |then| (\\putbaseptr xqp::|prologify.baseptr| c xqp::|Ptr|)                   (\\putbasebyte xqp::|prologify.baseptr| (llsh c 1)                          xqp::|immed.tag.8|)           |elseif| (listp xqp::|Ptr|)             |then| (\\putbaseptr xqp::|prologify.baseptr| c (xqp::|get.24| h))                   (\\putbasebyte xqp::|prologify.baseptr| (llsh c 1)                          xqp::|list.tag.8|)                   (setq c (xqp::\\basedifference (xqp::|get.24| h)                                  xqp::|prologify.baseptr|))                   (xqp::|increment.cell.pointer| h 2)                   (xqp::|check.heap| 25)                   (xqp::|QP.prologify| (car xqp::|Ptr|)                          c)                   (setq xqp::|Ptr| (cdr xqp::|Ptr|))                   (setq c (iplus c 2))                   (go l)           |elseif| (typenamep xqp::|Ptr| 'prolog.term)             |then| (let* ((a (|fetch| prolog.functor |of| xqp::|Ptr|))                           (l (|fetch| prolog.args |of| xqp::|Ptr|))                           (n (length l)))                          (|if| (not (litatom a))                              |then| (error "Functor of PROLOG.TERM must be a symbol" a))                          (|if| (eq n 0)                              |then| (xqp::|QP.prologify| a c)                            |elseif| (and (eq a '\.)                                          (eq n 2))                              |then| (\\putbaseptr xqp::|prologify.baseptr| c (xqp::|get.24| h))                                    (\\putbasebyte xqp::|prologify.baseptr| (llsh c 1)                                           xqp::|list.tag.8|)                                    (setq c (xqp::\\basedifference (xqp::|get.24| h)                                                   xqp::|prologify.baseptr|))                                    (xqp::|increment.cell.pointer| h 2)                                    (xqp::|check.heap| 25)                                    (xqp::|QP.prologify| (car l)                                           c)                                    (setq xqp::|Ptr| (cadr l))                                    (setq c (iplus c 2))                                    (go l)                            |else| (|if| (igreaterp n 255)                                       |then| (error "More than 255 arguments to PROLOG.TERM" n))                                  (\\putbaseptr xqp::|prologify.baseptr| c (xqp::|get.24| h))                                  (\\putbasebyte xqp::|prologify.baseptr| (llsh c 1)                                         xqp::|struct.tag.8|)                                  (setq c (xqp::\\basedifference (xqp::|get.24| h)                                                 xqp::|prologify.baseptr|))                                  (\\putbaseptr xqp::|prologify.baseptr| c a)                                  (\\putbase xqp::|prologify.baseptr| c (iplus n xqp::|symbol.tag.16|                                                                               ))                                  (xqp::|increment.cell.pointer| h (iplus n 1))                                  (xqp::|check.heap| 25)                                  (|until| (null l)                                         (setq c (iplus c 2))                                         (xqp::|QP.prologify| (car l)                                                c)                                         (setq l (cdr l)))))           |else| (\\putbaseptr xqp::|prologify.baseptr| c (xqp::add.ref xqp::|Ptr|))                 (\\putbasebyte xqp::|prologify.baseptr| (llsh c 1)                        (|if| (fixp xqp::|Ptr|)                            |then| xqp::|boxed.tag.8|                          |elseif| (floatp xqp::|Ptr|)                            |then| xqp::|float.tag.8|                          |else| xqp::|other.tag.8|)))))(xqp::|def.subr| xqp::term.print (term stream) (|if| stream                                                   |then| (printout stream "|[" (|fetch|                                                                                        prolog.functor                                                                                   |of| term))                                                         (|for| arg                                                            |in| (|fetch| prolog.args |of| term)                                                            |do| (printout stream \, arg))                                                         (printout stream "]")                                                         t                                                 |else| (|bind| (str _ (concat "|["                                                                              (|fetch| prolog.functor                                                                                 |of| term)))                                                           |for| arg                                                           |in| (|fetch| prolog.args |of| term)                                                           |do| (setq str (concat str " " arg))                                                           |finally| (return (cons (concat str "]")                                                                                   nil)))))(xqp::|def.open| xqp::|lispify| (xqp::|Ptr| |Debug|) (xqp::|lispify.cell| (\\getbasebyte xqp::|Ptr| 0                                                                                 )                                                            (\\getbaseptr xqp::|Ptr| 0)                                                            |Debug|))(xqp::|def.subr| xqp::|lispify.cell| (xqp::|Tag| xqp::|Ptr| |Debug|)   (prog (a p)     l   (selectc xqp::|Tag|             (xqp::|ref.tag.8|                   (|if| (and |Debug| (or (\\baselessp xqp::|Ptr| xqp::|membot|)                                         (\\baselessp xqp::|memtop| xqp::|Ptr|)))                      |then| (return (cons '\. (cons 'shouldnt (loc xqp::|Ptr|)))))                  (setq xqp::|Tag| (\\getbasebyte xqp::|Ptr| 0))                  (setq p (\\getbaseptr xqp::|Ptr| 0))                  (|if| (or (neq xqp::|Tag| xqp::|ref.tag.8|)                            (neq p xqp::|Ptr|))                      |then| (setq xqp::|Ptr| p)                            (go l))                  (|if| (not |Debug|)                      |then| (xqp::qp.overflow 31)                    |elseif| (eq |Debug| 's)                      |then| (return xqp::|Ptr|)                    |else| (return (cons '\. (cons (|if| (\\baselessp xqp::|Ptr| xqp::|init.E|)                                                       |then| 'xqp::|Global|                                                     |else| 'xqp::|Local|)                                                   (loc xqp::|Ptr|))))))             (xqp::|list.tag.8|                   (setq p (\\addbase xqp::|Ptr| 2))                  (return (cons (xqp::|lispify| xqp::|Ptr| |Debug|)                                (xqp::|lispify| p |Debug|))))             (xqp::|struct.tag.8|                   (setq a nil)                  (setq xqp::|Tag| (xqp::|atom.of.cell| xqp::|Ptr|))                  (setq p (\\addbase xqp::|Ptr| (llsh (xqp::|arity.of.cell| xqp::|Ptr|)                                                      1)))                  (|until| (eq p xqp::|Ptr|)                         (setq a (cons (xqp::|lispify| p |Debug|)                                       a))                         (setq p (\\addbase p -2)))                  (return (create prolog.term                                 prolog.functor _ xqp::|Tag|                                 prolog.args _ a)))             (return xqp::|Ptr|))))(xqp::|def.macro| xqp::|send.to.lisp| (value |Debug|)   `(progn (xqp::|put.32| xqp::t0 ,value)           (let ((l (xqp::|get.24| r))                 (xqp::|Tag| (xqp::|ReadPrologTag| xqp::t0))                 (xqp::|Ptr| (xqp::|ReadPrologPtr| xqp::t0)))                (settopval (car l)                       (|if| (igeq xqp::|Tag| xqp::|immed.tag.8|)                           |then| xqp::|Ptr|                         |else| (xqp::|lispify.cell| xqp::|Tag| xqp::|Ptr| ,|Debug|)))                (xqp::|put.24| r (cdr l)))           (xqp::|read.continue| 0)))(defprint 'prolog.term 'xqp::term.print)(declare\: eval@compile (rpaqq xqp::av (xqp::mv.returner0 xqp::mv.returner1 xqp::mv.returner2 xqp::mv.returner3                       xqp::mv.returner4 xqp::mv.returner5 xqp::mv.returner6 xqp::mv.returner7                       xqp::mv.returner8 xqp::mv.returner9 xqp::mv.returner10 xqp::mv.returner11                       xqp::mv.returner12 xqp::mv.returner13 xqp::mv.returner14 xqp::mv.returner15))(constants xqp::av))(xqp::|def.global| xqp::|prologify.baseptr| )(xqp::|def.global| xqp::mv.returner0 )(xqp::|def.global| xqp::mv.returner1 )(xqp::|def.global| xqp::mv.returner2 )(xqp::|def.global| xqp::mv.returner3 )(xqp::|def.global| xqp::mv.returner4 )(xqp::|def.global| xqp::mv.returner5 )(xqp::|def.global| xqp::mv.returner6 )(xqp::|def.global| xqp::mv.returner7 )(xqp::|def.global| xqp::mv.returner8 )(xqp::|def.global| xqp::mv.returner9 )(xqp::|def.global| xqp::mv.returner10 )(xqp::|def.global| xqp::mv.returner11 )(xqp::|def.global| xqp::mv.returner12 )(xqp::|def.global| xqp::mv.returner13 )(xqp::|def.global| xqp::mv.returner14 )(xqp::|def.global| xqp::mv.returner15 )(xqp::|def.read.mode| xqp::|call.lisp| (|byte|) (cl:multiple-value-setq                                                 (xqp::mv.returner0 xqp::mv.returner1                                                         xqp::mv.returner2 xqp::mv.returner3                                                         xqp::mv.returner4 xqp::mv.returner5)                                                 (selectc (xqp::|get.16| i)                                                     (0 (apply* (xqp::|get.24| c)))                                                     (1 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0))                                                     (2 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0 xqp::mv.returner1))                                                     (3 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0 xqp::mv.returner1                                                                xqp::mv.returner2))                                                     (4 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0 xqp::mv.returner1                                                                xqp::mv.returner2 xqp::mv.returner3))                                                     (5 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0 xqp::mv.returner1                                                                xqp::mv.returner2 xqp::mv.returner3                                                                xqp::mv.returner4))                                                     (6 (apply* (xqp::|get.24| c)                                                               xqp::mv.returner0 xqp::mv.returner1                                                                xqp::mv.returner2 xqp::mv.returner3                                                                xqp::mv.returner4 xqp::mv.returner5))                                                     (shouldnt "Too many arguments in Lisp call")))                                                (let ((r xqp::av)                                                      (c 0)                                                      (n (xqp::|get.16| n)))                                                     (xqp::|put.24| s (setq xqp::|prologify.baseptr|                                                                       (xqp::|get.24| h)))                                                     (xqp::|increment.cell.pointer| h n)                                                     (|until| (eq n 0)                                                            (xqp::|QP.prologify| (gettopval                                                                                  (car r))                                                                   c)                                                            (setq r (cdr r))                                                            (setq c (iplus c 2))                                                            (setq n (idifference n 1))))                                                (xqp::|read.continue| 0))(xqp::|def.read.mode| xqp::|send.direct.Ai| (xqp::|areg|) (xqp::|send.to.lisp| (xqp::|get.Aval|                                                                                n)                                                                 's))(xqp::|def.read.mode| xqp::|send.direct.AiM| (xqp::|amem|) (xqp::|send.to.lisp| (xqp::|get.Amem|                                                                                 n)                                                                  's))(xqp::|def.read.mode| xqp::|send.variable.Ai| (xqp::|areg|) (xqp::|send.to.lisp| (xqp::|get.Aval|                                                                                  n)                                                                   nil))(xqp::|def.read.mode| xqp::|send.variable.AiM| (xqp::|amem|) (xqp::|send.to.lisp| (xqp::|get.Amem|                                                                                   n)                                                                    nil))(xqp::|def.read.mode| xqp::|start.calling| (|cell|) (* |;;;| "defined I C R") (xqp::|put.16| i (logand (xqp::|get.code| p 0)                         255)) (xqp::|put.24| c (\\vag2 0 (xqp::|get.code| p 1))) (xqp::|put.24| r xqp::av) (xqp::|read.continue| 2))(xqp::|def.write.mode| xqp::|call.lisp| (|byte|) (cl:multiple-value-setq                                                  (xqp::mv.returner0 xqp::mv.returner1                                                          xqp::mv.returner2 xqp::mv.returner3                                                          xqp::mv.returner4 xqp::mv.returner5)                                                  (selectc (xqp::|get.16| i)                                                      (0 (spreadapply* (xqp::|get.24| c)))                                                      (1 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0))                                                      (2 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0 xqp::mv.returner1))                                                      (3 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0 xqp::mv.returner1                                                                 xqp::mv.returner2))                                                      (4 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0 xqp::mv.returner1                                                                 xqp::mv.returner2 xqp::mv.returner3))                                                      (5 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0 xqp::mv.returner1                                                                 xqp::mv.returner2 xqp::mv.returner3                                                                 xqp::mv.returner4))                                                      (6 (spreadapply* (xqp::|get.24| c)                                                                xqp::mv.returner0 xqp::mv.returner1                                                                 xqp::mv.returner2 xqp::mv.returner3                                                                 xqp::mv.returner4 xqp::mv.returner5))                                                      (shouldnt "Too many arguments in Lisp call")))                                                 (let ((r xqp::av)                                                       (c 0)                                                       (n (xqp::|get.16| n)))                                                      (xqp::|put.24| s (setq xqp::|prologify.baseptr|                                                                        (xqp::|get.24| h)))                                                      (xqp::|increment.cell.pointer| h n)                                                      (|until| (eq n 0)                                                             (xqp::|QP.prologify| (gettopval                                                                                   (car r))                                                                    c)                                                             (setq r (cdr r))                                                             (setq c (iplus c 2))                                                             (setq n (idifference n 1))))                                                 (xqp::|read.continue| 0))(putprops lisp copyright ("Quintus Computer Systems, Inc" 1987))(declare\: dontcopy  (filemap (nil)))stop