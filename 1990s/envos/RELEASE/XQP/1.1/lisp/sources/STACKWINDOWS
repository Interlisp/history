(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(FILECREATED "13-Aug-87 14:08:06" {DSK}<LISPFILES>DCOMS>STACKWINDOWS.\;4 39233        |changes| |to:|  (FNS XQP::PRINT.PROLOG.PTR)      |previous| |date:| "12-Aug-87 14:38:13" {DSK}<LISPFILES>DCOMS>STACKWINDOWS.\;3); Copyright (c) 1986, 1987 by Quintus Computer Systems, Inc.  All rights reserved.(PRETTYCOMPRINT STACKWINDOWSCOMS)(RPAQQ STACKWINDOWSCOMS (                    (* |;;| "Functions for displaying the contents of any of the Prolog stacks, plus the A registers, in a scrollable window.")                                             (* |;;| "  These functions are the user interface, such as it is.")                         (FNS XQP::ARGUMENT.REGISTER.WINDOW XQP::HEAP.WINDOW XQP::LOCAL.STACK.WINDOW                               XQP::TRAIL.WINDOW XQP::RESIZE.STACK.WINDOWS SEL)                                             (* |;;| "The rest of this file is the underpinnings of the stack window facility.")                         (FNS XQP::CREATE.STACK.WINDOW XQP::PRINT.PROLOG.PTR                               XQP::REPAINT.STACK.WINDOW XQP::RESHAPE.STACK.WINDOW                               XQP::SHOW.PROLOG.MEMORY.CELL XQP::STACK.WINDOW.BUTTONEVENTFN                               XQP::STACK.WINDOW.CHANGE.BOUNDS XQP::STACK.WINDOW.CLOSEFN                               XQP::STACK.WINDOW.INVERT.SELECTION XQP::STACK.WINDOW.MOVETO                               XQP::STACK.WINDOW.POP.SELECTION XQP::STACK.WINDOW.REFRESH.ITEMS                               XQP::STACK.WINDOW.SELECT)                         (RECORDS XQP::STACK.WINDOW.SELECTION)                         (INITVARS XQP::STACK.WINDOW.LIST XQP::STACK.WINDOWS.SELECTEDLABELS)                         (GLOBALVARS XQP::STACK.WINDOW.LIST XQP::STACK.WINDOWS.SELECTEDLABELS)))(* |;;| "Functions for displaying the contents of any of the Prolog stacks, plus the A registers, in a scrollable window.")(* |;;| "  These functions are the user interface, such as it is.")(DEFINEQ(XQP::ARGUMENT.REGISTER.WINDOW  (LAMBDA (REGION TITLE)                                     (* \; "Edited 11-Aug-87 12:33 by pds")(* |;;;| "Create a window onto the argument registers.  The window will display all 256 argument registers.  REGION, if specified, is the screen region the window is to occupy.  TITLE, if specified, is the title to give the window.")    (XQP::CREATE.STACK.WINDOW (KWOTE (\\ADDBASE XQP::|membot| 2))           (KWOTE (\\ADDBASE XQP::|membot| 768))           REGION           (OR TITLE "Argument register window"))))(XQP::HEAP.WINDOW  (LAMBDA (SIZE REGION TITLE)                                (* \; "Edited 11-Aug-87 12:35 by pds")(* |;;;| "Create a window onto the heap.  The window will display SIZE cells, starting from the base of the heap (init.H), or up to the current value of the heap pointer register.  REGION, if specified, is the screen region the window is to occupy.  TITLE, if specified, is the title to give the window.")    (XQP::CREATE.STACK.WINDOW 'XQP::|init.H| (|if| SIZE                                                 |then| (KWOTE (\\ADDBASE XQP::|init.H|                                                                      (ITIMES SIZE 2)))                                               |else| '(XQP::|get.24| H))           REGION           (OR TITLE "Heap window"))))(XQP::LOCAL.STACK.WINDOW  (LAMBDA (SIZE REGION TITLE)                                (* \; "Edited 11-Aug-87 12:35 by pds")(* |;;;| "Create a window onto the local stack.  The window will display SIZE cells, starting from the base of the local stack (init.E), or up to the current value of the stack pointer register.")    (XQP::CREATE.STACK.WINDOW 'XQP::|init.E| (|if| SIZE                                                 |then| (KWOTE (\\ADDBASE XQP::|init.E|                                                                      (ITIMES SIZE 2)))                                               |else| '(|if| (|before| E B)                                                           |then| (XQP::|get.24| B)                                                         |else| (XQP::|add.cell| E 258)))           REGION           (OR TITLE "Local stack window"))))(XQP::TRAIL.WINDOW  (LAMBDA (SIZE REGION TITLE)                                (* \; "Edited 11-Aug-87 12:36 by pds")(* |;;;| "Create a window onto the trail.  The window will display SIZE cells, ending at the base of the local stack (init.E), or starting at the current value of the trail pointer register.  REGION, if specified, is the screen region the window is to occupy.  TITLE, if specified, is the title to give the window.")    (XQP::CREATE.STACK.WINDOW (|if| SIZE                                  |then| (KWOTE (\\ADDBASE XQP::|init.E| (MINUS (ITIMES SIZE 2))))                                |else| '(XQP::|get.24| TR))           (KWOTE (\\ADDBASE XQP::|init.E| -2))           REGION           (OR TITLE "Trail window"))))(XQP::RESIZE.STACK.WINDOWS  (LAMBDA (XQP::WINDOWORLIST)                                (* \; "Edited 11-Aug-87 12:36 by pds")(* |;;;| "Updates all the elements on WINDOWORLIST, which should be stack windows, to display their full range.  E.g., a window created by (HEAP.WINDOW) would be updated to display everything from the bottom of the heap up to the current value of the H register.  Similarly for the other kinds of registers.  ARGUMENT.REGISTER.WINDOWs won't change;  they always display the same number of registers.")    (|if| (WINDOWP XQP::WINDOWORLIST)        |then| (SETQ XQP::WINDOWORLIST (LIST XQP::WINDOWORLIST))      |elseif| (NULL XQP::WINDOWORLIST)        |then| (SETQ XQP::WINDOWORLIST XQP::STACK.WINDOW.LIST)      |elseif| (NOT (LISTP XQP::WINDOWORLIST))        |then| (ERROR "Must be a window or a list of windows" XQP::WINDOWORLIST))    (|for| W |in| XQP::WINDOWORLIST |do| (XQP::STACK.WINDOW.CHANGE.BOUNDS W                                                (EVAL (WINDOWPROP W 'XQP::LOWMEMFORM))                                                (EVAL (WINDOWPROP W 'XQP::HIGHMEMFORM))))))(SEL  (LAMBDA (PTR)                                              (* \; "Edited 11-Aug-87 12:36 by pds")(* |;;;| "Just a short form of STACK.WINDOW.SELECT that's much more convenient to type.")    (XQP::STACK.WINDOW.SELECT PTR))))(* |;;| "The rest of this file is the underpinnings of the stack window facility.")(DEFINEQ(XQP::CREATE.STACK.WINDOW  (LAMBDA (XQP::LOWMEMFORM XQP::HIGHMEMFORM REGION TITLE)    (* \; "Edited 11-Aug-87 12:37 by pds")(* |;;;| "Create and return a scrollable window into one of the Prolog stacks.  LOWMEMFORM is a form that evaluates to the first memory location to be displayed in the window, and HIGHMEMFORM evaluates to the last.  REGION, if supplied, is the screen region for the window to occupy, and TITLE, if supplied, is the window's title.")    (LET* ((MINWIDTH (WIDTHIFWINDOW (STRINGWIDTH "H!000000:  term H!000000" DEFAULTFONT)))           (MINHEIGHT (HEIGHTIFWINDOW (ITIMES (FONTPROP DEFAULTFONT 'HEIGHT)                                             3)                             T))           (W (CREATEW (OR REGION (PROGN (PROMPTPRINT "Specify region  for window \"" TITLE "\"")                                         (GETREGION MINWIDTH MINHEIGHT)))                     TITLE)))          (WINDOWPROP W 'XQP::LOWMEMFORM XQP::LOWMEMFORM)          (WINDOWPROP W 'XQP::HIGHMEMFORM XQP::HIGHMEMFORM)          (WINDOWPROP W 'XQP::LOWMEM (EVAL XQP::LOWMEMFORM))          (WINDOWPROP W 'XQP::HIGHMEM (EVAL XQP::HIGHMEMFORM))          (WINDOWPROP W 'REPAINTFN (FUNCTION XQP::REPAINT.STACK.WINDOW))          (WINDOWPROP W 'MINSIZE (CONS MINWIDTH MINHEIGHT))          (WINDOWPROP W 'RESHAPEFN (FUNCTION XQP::RESHAPE.STACK.WINDOW))          (WINDOWPROP W 'SCROLLFN (FUNCTION SCROLLBYREPAINTFN))          (WINDOWPROP W 'SCROLLEXTENTUSE 'LIMIT)          (WINDOWPROP W 'BUTTONEVENTFN (FUNCTION XQP::STACK.WINDOW.BUTTONEVENTFN))          (WINDOWPROP W 'CURSORMOVEDFN (FUNCTION XQP::STACK.WINDOW.BUTTONEVENTFN))          (WINDOWPROP W 'CLOSEFN (FUNCTION XQP::STACK.WINDOW.CLOSEFN))          (XQP::RESHAPE.STACK.WINDOW W)          (|push| XQP::STACK.WINDOW.LIST W)          W)))(XQP::PRINT.PROLOG.PTR  (LAMBDA (ADDR STREAM)                                      (* \; "Edited 12-Aug-87 18:04 by pds")(* |;;;| "Prints ADDR, a pointer into the Prolog memory area, to STREAM.  Pointers are printed in a more-or-less readable format, where the first 2 characters indicate which Prolog area the pointer is in: A! means the argument register area, H! means the heap and trail area, S! means the local stack area, and ??  means it's not in any of these areas.  Following these two characters, the address's offset into this area is printed, as 6 hex digits.  Following ??, 8 hex digits are printed, and following A!, only 3 characters are printed.  E.g., H!000000 means the first cell of the heap, or init.H.")(* |;;;| "All elements of the Prolog stacks (including the argument registers) are double-word aligned.  That is, pointers into the Prolog stacks must be even.  So we use the low bit of an address to indicate a reversed pointer.  These are printed with lower-case marker letters, i.e., h, s, and a.")    (|if| (REVERSED.POINTERP ADDR)        |then| (|if| (XQP::POINTER.IN.RANGE ADDR XQP::|init.H| XQP::|init.E|)                   |then| (PRINTOUT STREAM "h!" XQP::|.I6.16.T| (XQP::\\BASEDIFFERENCE (                                                                              XQP::UNMARK.AS.REVERSED                                                                                        ADDR)                                                                       XQP::|init.H|))                 |elseif| (XQP::POINTER.IN.RANGE ADDR XQP::|init.E| XQP::|memtop|)                   |then| (PRINTOUT STREAM "s!" XQP::|.I6.16.T| (XQP::\\BASEDIFFERENCE (                                                                              XQP::UNMARK.AS.REVERSED                                                                                        ADDR)                                                                       XQP::|init.E|))                 |elseif| (XQP::POINTER.IN.RANGE ADDR XQP::|membot| XQP::|init.H|)                   |then| (PRINTOUT STREAM "   a!" XQP::|.I3.16.T| (XQP::\\BASEDIFFERENCE                                                                    (XQP::UNMARK.AS.REVERSED ADDR)                                                                    XQP::|membot|))                 |else| (PRINTOUT STREAM "??" XQP::|.I4.16.T| (\\HILOC ADDR)                               XQP::|.I4.16.T|                               (\\LOLOC ADDR)))      |else| (|if| (XQP::POINTER.IN.RANGE ADDR XQP::|init.H| XQP::|init.E|)                 |then| (PRINTOUT STREAM "H!" XQP::|.I6.16.T| (XQP::\\BASEDIFFERENCE ADDR                                                                      XQP::|init.H|))               |elseif| (XQP::POINTER.IN.RANGE ADDR XQP::|init.E| XQP::|memtop|)                 |then| (PRINTOUT STREAM "S!" XQP::|.I6.16.T| (XQP::\\BASEDIFFERENCE ADDR                                                                      XQP::|init.E|))               |elseif| (XQP::POINTER.IN.RANGE ADDR XQP::|membot| XQP::|init.H|)                 |then| (PRINTOUT STREAM "   A!" XQP::|.I3.16.T| (XQP::\\BASEDIFFERENCE ADDR                                                                         XQP::|membot|))               |else| (PRINTOUT STREAM "??" XQP::|.I4.16.T| (\\HILOC ADDR)                             XQP::|.I4.16.T|                             (\\LOLOC ADDR))))))(XQP::REPAINT.STACK.WINDOW  (LAMBDA (WINDOW REG)                                       (* \; "Edited 11-Aug-87 12:50 by pds")(* |;;;| "Repaint a portion of the stack window WINDOW.  REG is a region indicating which part of the window to repaint.  Only print as much as is necessary.")    (LET* ((FONTHEIGHT (FONTPROP WINDOW 'HEIGHT))           (ORGY (WINDOWPROP WINDOW 'HEIGHT))           (START (IQUOTIENT (IDIFFERENCE ORGY (|fetch| (REGION TOP) |of| REG))                         FONTHEIGHT))           (END (ADD1 (IQUOTIENT (SUB1 (IDIFFERENCE ORGY (|fetch| (REGION BOTTOM) |of| REG)))                             FONTHEIGHT)))           (XQP::ENDCELL (\\ADDBASE (WINDOWPROP WINDOW 'XQP::LOWMEM)                                (ITIMES END 2)))           (XQP::HIGHMEM (WINDOWPROP WINDOW 'XQP::HIGHMEM))           (XQP::LASTCELL (|if| (XQP::\\BASELESSP XQP::HIGHMEM XQP::ENDCELL)                              |then| XQP::HIGHMEM                            |else| XQP::ENDCELL)))          (MOVETO 0 (IDIFFERENCE (IDIFFERENCE ORGY (ITIMES START FONTHEIGHT))                           (FONTPROP WINDOW 'ASCENT))                 WINDOW)          (|for| SP XQP::|fromcell| (\\ADDBASE (WINDOWPROP WINDOW 'XQP::LOWMEM)                                           (ITIMES START 2)) XQP::|tocell| XQP::LASTCELL             |do| (XQP::SHOW.PROLOG.MEMORY.CELL SP NIL NIL WINDOW))          (|if| (EQ (CAAR XQP::STACK.WINDOWS.SELECTEDLABELS)                    WINDOW)              |then| (XQP::STACK.WINDOW.INVERT.SELECTION (CAAR XQP::STACK.WINDOWS.SELECTEDLABELS)                            (CDAR XQP::STACK.WINDOWS.SELECTEDLABELS)                            'LABEL                            'NORMAL)))))(XQP::RESHAPE.STACK.WINDOW  (LAMBDA (WINDOW)                                           (* \; "Edited 11-Aug-87 12:51 by pds")(* |;;;| "Stack window WINDOW has just been reshaped, reinitialize it as necessary.")    (LET ((XQP::FULLHEIGHT (ITIMES (LET ((XQP::HIGHMEM (WINDOWPROP WINDOW 'XQP::HIGHMEM))                                         (XQP::LOWMEM (WINDOWPROP WINDOW 'XQP::LOWMEM)))                                        (|if| (XQP::\\BASELESSP XQP::HIGHMEM XQP::LOWMEM)                                            |then| 0                                          |else| (IQUOTIENT (XQP::\\BASEDIFFERENCE XQP::HIGHMEM                                                                    XQP::LOWMEM)                                                        2)))                                  (FONTPROP WINDOW 'HEIGHT))))         (DSPRESET WINDOW)         (DSPRIGHTMARGIN 1000 WINDOW)         (XQP::REPAINT.STACK.WINDOW WINDOW (DSPCLIPPINGREGION NIL WINDOW))         (WINDOWPROP WINDOW 'EXTENT (|create| REGION                                           LEFT _ 0                                           BOTTOM _ (IDIFFERENCE (WINDOWPROP WINDOW 'HEIGHT)                                                           XQP::FULLHEIGHT)                                           WIDTH _ 1000                                           HEIGHT _ XQP::FULLHEIGHT)))))(XQP::SHOW.PROLOG.MEMORY.CELL  (LAMBDA (ADDR TAG PTR STREAM)                              (* \; "Edited 11-Aug-87 12:53 by pds")(* |;;;| "Print a single line describing the Prolog memory cell at address ADDR.  First display ADDR, then 4 characters describing the type of the cell, as indicated by its tag bits, then the contents of the cell in some meaningful format.")    (|if| (NULL TAG)        |then| (SETQ TAG (\\GETBASEBYTE ADDR 0)))    (|if| (NULL PTR)        |then| (SETQ PTR (\\GETBASEPTR ADDR 0)))    (XQP::PRINT.PROLOG.PTR ADDR STREAM)    (PRIN1 ": " STREAM)    (|if| (BITTEST TAG XQP::MARKBIT.MASK)        |then| (PRIN1 "*" STREAM)              (SETQ TAG (BITCLEAR TAG XQP::MARKBIT.MASK))      |else| (PRIN1 " " STREAM))    (SELECTC TAG        (XQP::|ref.tag.8|              (PRINTOUT STREAM "var  ")             (|if| (EQ ADDR PTR)                 |then| (PRINTOUT STREAM "unbound")               |else| (XQP::PRINT.PROLOG.PTR PTR STREAM)))        (XQP::|struct.tag.8|              (PRINTOUT STREAM "term -> ")             (XQP::PRINT.PROLOG.PTR PTR STREAM))        (XQP::|list.tag.8|              (PRINTOUT STREAM "list -> ")             (XQP::PRINT.PROLOG.PTR PTR STREAM))        (XQP::|symbol.tag.8|              (LET ((XQP::ARITY (LOGAND 255 (\\HILOC PTR))))                  (|if| (NEQ XQP::ARITY 0)                      |then| (PRINTOUT STREAM "func " (\\VAG2 0 (\\LOLOC PTR))                                    "/" XQP::ARITY)                    |else| (PRINTOUT STREAM "atom " PTR))))        (XQP::|immed.tag.8|              (PRINTOUT STREAM "int  " PTR))        (XQP::|other.tag.8|              (PRINTOUT STREAM "lisp " PTR))        (XQP::|boxed.tag.8|              (PRINTOUT STREAM "FIXP " PTR))        (XQP::|float.tag.8|              (PRINTOUT STREAM "real " PTR))        (PRINTOUT STREAM "???? " PTR))    (TERPRI STREAM)))(XQP::STACK.WINDOW.BUTTONEVENTFN  (LAMBDA (WINDOW)                                           (* \; "Edited 11-Aug-87 12:54 by pds")(* |;;;| "This function is pretty ugly.  It is called if a mouse button goes up or down or moves in WINDOW.  It handles copy selection and normal selection of both labels and data.")    (LET* ((XQP::SELECTEDLINE (IQUOTIENT (IDIFFERENCE (WINDOWPROP WINDOW 'HEIGHT)                                                (LASTMOUSEY WINDOW))                                     (FONTPROP WINDOW 'HEIGHT)))           (XPOS (LASTMOUSEX WINDOW))           (XQP::LABELENDX (STRINGWIDTH "H!000000" WINDOW))           (XQP::PTRSTARTX (STRINGWIDTH "H!000000:  xxxx " WINDOW))           (XQP::SELECTEDPART (|if| (ILESSP XPOS XQP::LABELENDX)                                  |then| 'LABEL                                |elseif| (IGREATERP XPOS XQP::PTRSTARTX)                                  |then| 'PTR))           (PTR (\\ADDBASE (WINDOWPROP WINDOW 'XQP::LOWMEM)                       (ITIMES XQP::SELECTEDLINE 2)))           (TAG (LOGAND (\\GETBASEBYTE PTR 0)                       (LOGNOT XQP::MARKBIT.MASK)))           (XQP::SELECTIONTYPE (|if| (KEYDOWNP 'LSHIFT)                                   |then| 'COPY                                 |else| 'NORMAL))           (OLDSEL (WINDOWPROP WINDOW 'SELECTION)))          (|if| (MOUSESTATE (OR LEFT MIDDLE))              |then| (TOTOPW WINDOW)                    (|if| (OR (EQ XQP::SELECTIONTYPE 'COPY)                              (|if| (EQ XQP::SELECTEDPART 'LABEL)                                  |then| (AND (EQ WINDOW (CAAR XQP::STACK.WINDOWS.SELECTEDLABELS))                                              (EQ XQP::SELECTEDLINE (CDAR                                                                     XQP::STACK.WINDOWS.SELECTEDLABELS                                                                          )))                                |else| (OR (EQ TAG XQP::|ref.tag.8|)                                           (EQ TAG XQP::|struct.tag.8|)                                           (EQ TAG XQP::|list.tag.8|))))                        |then|                               (* \;                                                              "Mouse button is down in a valid place.")                              (|if| OLDSEL                                  |then| (|with| XQP::STACK.WINDOW.SELECTION OLDSEL                                                (|if| (OR (NEQ LINE XQP::SELECTEDLINE)                                                          (NEQ XQP::PART XQP::SELECTEDPART)                                                          (NEQ TYPE XQP::SELECTIONTYPE))                                                    |then|   (* \; "He's changed his selection")                                                          (XQP::STACK.WINDOW.INVERT.SELECTION WINDOW                                                                  LINE XQP::PART TYPE XQP::LABELENDX                                                                  XQP::PTRSTARTX)                                                          (SETQ LINE XQP::SELECTEDLINE)                                                          (SETQ XQP::PART XQP::SELECTEDPART)                                                          (SETQ TYPE XQP::SELECTIONTYPE)                                                          (XQP::STACK.WINDOW.INVERT.SELECTION WINDOW                                                                  LINE XQP::PART TYPE XQP::LABELENDX                                                                  XQP::PTRSTARTX)))                                |else|                       (* \; "New selection")                                      (XQP::STACK.WINDOW.INVERT.SELECTION WINDOW XQP::SELECTEDLINE                                              XQP::SELECTEDPART XQP::SELECTIONTYPE XQP::LABELENDX                                              XQP::PTRSTARTX)                                      (WINDOWPROP WINDOW 'SELECTION                                             (|create| XQP::STACK.WINDOW.SELECTION                                                    LINE _ XQP::SELECTEDLINE                                                    XQP::PART _ XQP::SELECTEDPART                                                    TYPE _ XQP::SELECTIONTYPE)))                      |elseif| OLDSEL                        |then| (|with| XQP::STACK.WINDOW.SELECTION OLDSEL                                      (XQP::STACK.WINDOW.INVERT.SELECTION WINDOW LINE XQP::PART TYPE                                              XQP::LABELENDX XQP::PTRSTARTX)                                      (WINDOWPROP WINDOW 'SELECTION NIL)))            |elseif| OLDSEL              |then|                                         (* \;                                                "He released a mouse button: take appropriate action.")                    (|with| XQP::STACK.WINDOW.SELECTION OLDSEL (XQP::STACK.WINDOW.INVERT.SELECTION                                                                WINDOW LINE XQP::PART TYPE                                                                 XQP::LABELENDX XQP::PTRSTARTX)                           (WINDOWPROP WINDOW 'SELECTION NIL)                           (LET* ((ITEM (|if| (EQ XQP::PART 'LABEL)                                            |then| PTR                                          |else| (\\GETBASEPTR PTR 0)))                                  (XQP::ITEMTAG (|if| (EQ XQP::PART 'LABEL)                                                    |then| XQP::|ref.tag.8|                                                  |else| (\\GETBASEBYTE PTR 0))))                                 (|if| (EQ TYPE 'COPY)                                     |then| (|if| (OR (EQ XQP::ITEMTAG XQP::|immed.tag.8|)                                                      (EQ XQP::ITEMTAG XQP::|boxed.tag.8|)                                                      (EQ XQP::ITEMTAG XQP::|float.tag.8|))                                                |then|       (* \; "Readable normally")                                                      (BKSYSBUF ITEM)                                                      (BKSYSBUF " ")                                              |elseif| (EQ XQP::ITEMTAG XQP::|symbol.tag.8|)                                                |then|       (* \;                                      "May be a functor: strip off the arity and unread just the atom")                                                      (BKSYSBUF (\\VAG2 0 (\\LOLOC ITEM)))                                                      (BKSYSBUF " ")                                              |else|         (* \; "pointer: use \\VAG2 to unread it")                                                    (BKSYSBUF "(\\VAG2 ")                                                    (BKSYSBUF (\\HILOC ITEM))                                                    (BKSYSBUF " ")                                                    (BKSYSBUF (\\LOLOC ITEM))                                                    (BKSYSBUF ")"))                                   |elseif| (EQ XQP::PART 'PTR)                                     |then|                  (* \; "follow a pointer")                                           (|if| (XQP::STACK.WINDOW.SELECT ITEM (CONS WINDOW                                                                                XQP::STACK.WINDOW.LIST                                                                                      ))                                               |then|        (* \;                               "put source window and line into stack window chain as second from top")                                                     (|push| (CDR XQP::STACK.WINDOWS.SELECTEDLABELS)                                                            (CONS WINDOW XQP::SELECTEDLINE)))                                   |else|                    (* \;                                                              "trace backwards to where we came from")                                         (LET ((XQP::OLDDESTINATION (|pop|                                                                     XQP::STACK.WINDOWS.SELECTEDLABELS                                                                           ))                                               (DESTINATION (CAR XQP::STACK.WINDOWS.SELECTEDLABELS)))                                              (XQP::STACK.WINDOW.INVERT.SELECTION (CAR                                                                                   XQP::OLDDESTINATION                                                                                       )                                                     (CDR XQP::OLDDESTINATION)                                                     'LABEL                                                     'NORMAL XQP::LABELENDX XQP::PTRSTARTX)                                              (|if| DESTINATION                                                  |then|     (* \; "go back to where we came from")                                                        (XQP::STACK.WINDOW.INVERT.SELECTION                                                         (CAR DESTINATION)                                                         (CDR DESTINATION)                                                         'LABEL                                                         'NORMAL XQP::LABELENDX XQP::PTRSTARTX)                                                        (XQP::STACK.WINDOW.MOVETO (CAR DESTINATION)                                                               (CDR DESTINATION))                                                |else| (PROMPTPRINT "Stack window chain is empty.")))                                       )))))))(XQP::STACK.WINDOW.CHANGE.BOUNDS  (LAMBDA (WINDOW XQP::NEWLOW XQP::NEWHIGH)                  (* \; "Edited 11-Aug-87 12:55 by pds")(* |;;;| "Change the scrolling bounds on current stack window WINDOW, which defaults to (WHICHW), to be from NEWLOW to NEWHIGH, which default to the old values.")    (|if| (NULL WINDOW)        |then| (SETQ WINDOW (WHICHW)))    (|if| XQP::NEWLOW        |then| (WINDOWPROP WINDOW 'XQP::LOWMEM XQP::NEWLOW))    (|if| XQP::NEWHIGH        |then| (WINDOWPROP WINDOW 'XQP::HIGHMEM XQP::NEWHIGH))    (XQP::RESHAPE.STACK.WINDOW WINDOW)    WINDOW))(XQP::STACK.WINDOW.CLOSEFN  (LAMBDA (WINDOW)                                           (* \; "Edited 11-Aug-87 12:55 by pds")    (SETQ XQP::STACK.WINDOW.LIST (DREMOVE WINDOW XQP::STACK.WINDOW.LIST))))(XQP::STACK.WINDOW.INVERT.SELECTION  (LAMBDA (WINDOW LINE XQP::PART TYPE XQP::LABELENDX XQP::PTRSTARTX)                                                             (* \; "Edited 11-Aug-87 12:56 by pds")(* |;;;| "Invert part PART of line LINE of WINDOW, using inversion type TYPE.  PART is either LABEL meaning the label at the left of the stack window, or PTR, meaning the data at the right.  TYPE is either COPY, meaning to underline the region, or NORMAL, meaning to invert it.  LINE is the number of the line in question, where 0 is the top line.  LABELENDX and PTRSTARTX are optional.  If supplied, they are the X position of the right end of the label field of the window and of the left end of the pointer <data> field, respectively.  If not supplied, they will be computed.")    (|if| (NULL XQP::LABELENDX)        |then| (SETQ XQP::LABELENDX (STRINGWIDTH "H!000000" WINDOW)))    (|if| (NULL XQP::PTRSTARTX)        |then| (SETQ XQP::PTRSTARTX (STRINGWIDTH "H!000000:  xxxx " WINDOW)))    (LET* ((LINEHEIGHT (FONTPROP WINDOW 'HEIGHT))           (BOTTOM (IDIFFERENCE (WINDOWPROP WINDOW 'HEIGHT)                          (ITIMES LINEHEIGHT (ADD1 LINE))))           (LEFT (|if| (EQ XQP::PART 'LABEL)                     |then| 0                   |elseif| (EQ XQP::PART 'PTR)                     |then| XQP::PTRSTARTX                   |else| 0))           (WIDTH (|if| (EQ XQP::PART 'LABEL)                      |then| XQP::LABELENDX                    |elseif| (EQ XQP::PART 'PTR)                      |then| (IDIFFERENCE 1000 XQP::PTRSTARTX)                    |else| 0)))          (|if| (EQ TYPE 'COPY)              |then| (BITBLT NIL NIL NIL WINDOW LEFT BOTTOM WIDTH 2 'TEXTURE 'INVERT GRAYSHADE)            |elseif| (EQ TYPE 'NORMAL)              |then| (BITBLT NIL NIL NIL WINDOW LEFT BOTTOM WIDTH LINEHEIGHT 'TEXTURE 'INVERT                             BLACKSHADE)))))(XQP::STACK.WINDOW.MOVETO  (LAMBDA (WINDOW LINE)                                      (* \; "Edited 11-Aug-87 12:56 by pds")(* |;;;| "Ensure that LINE of WINDOW is visable on the screen.  If it is not currently, scroll the window such that it is in the center of the window.")    (LET* ((REG (DSPCLIPPINGREGION NIL WINDOW))           (LINEHEIGHT (FONTPROP WINDOW 'HEIGHT))           (XQP::WINDOWHEIGHT (WINDOWPROP WINDOW 'HEIGHT))           (BOTTOM (SUB1 (IQUOTIENT (IDIFFERENCE XQP::WINDOWHEIGHT (|fetch| (REGION BOTTOM)                                                                      |of| REG))                                LINEHEIGHT)))           (TOP (ADD1 (IQUOTIENT (IDIFFERENCE XQP::WINDOWHEIGHT (|fetch| (REGION TOP) |of| REG))                             LINEHEIGHT)))           (XQP::LINESINWINDOW (IQUOTIENT (|fetch| (REGION HEIGHT) |of| (WINDOWPROP WINDOW                                                                               'EXTENT))                                      LINEHEIGHT))           (XQP::LINESONSCREEN (IQUOTIENT XQP::WINDOWHEIGHT LINEHEIGHT))           (XQP::LINESNOTONSCREEN (IDIFFERENCE XQP::LINESINWINDOW XQP::LINESONSCREEN)))          (|if| (OR (IGREATERP LINE BOTTOM)                    (ILESSP LINE TOP))              |then|                                         (* \;                                                              "line is off screen and we must scroll")                    (SCROLLW WINDOW 0 (FQUOTIENT (IMAX 0 (IMIN XQP::LINESNOTONSCREEN                                                               (IDIFFERENCE LINE (IQUOTIENT                                                                                    XQP::LINESONSCREEN                                                                                         2))))                                             XQP::LINESNOTONSCREEN))))))(XQP::STACK.WINDOW.POP.SELECTION  (LAMBDA NIL                                                (* \; "Edited 11-Aug-87 12:56 by pds")    (LET ((OLDTOP (|pop| XQP::STACK.WINDOWS.SELECTEDLABELS)))         (|if| OLDTOP             |then| (XQP::STACK.WINDOW.INVERT.SELECTION (CAR OLDTOP)                           (CDR OLDTOP)                           'LABEL                           'NORMAL)                   (LET ((NEWTOP (CAR XQP::STACK.WINDOWS.SELECTEDLABELS)))                        (|if| NEWTOP                            |then| (XQP::STACK.WINDOW.INVERT.SELECTION (CAR NEWTOP)                                          (CDR NEWTOP)                                          'LABEL                                          'NORMAL)                                  NEWTOP                          |else| T))))))(XQP::STACK.WINDOW.REFRESH.ITEMS  (LAMBDA (XQP::LOWPTR XQP::HIGHPTR WINDOW)                  (* \; "Edited 11-Aug-87 12:57 by pds")(* |;;;| "Redisplay cells between LOWPTR and HIGHPTR, if they appear in WINDOW.  HIGHPTR defaults to LOWPTR, to just redisplay 1 cell.  If WINDOW is not specified, the first window on STACK.WINDOW.LIST that contains both LOWPTR and HIGHPTR will be used.")    (|if| (NULL XQP::HIGHPTR)        |then| (SETQ XQP::HIGHPTR XQP::LOWPTR))    (|if| (NULL WINDOW)        |then| (SETQ WINDOW (|for| W |in| XQP::STACK.WINDOW.LIST                               |thereis| (AND (NOT (XQP::\\BASELESSP XQP::LOWPTR (WINDOWPROP                                                                                  W                                                                                  'XQP::LOWMEM)))                                              (XQP::\\BASELESSP XQP::LOWPTR (WINDOWPROP W                                                                                   'XQP::HIGHMEM))                                              (NOT (XQP::\\BASELESSP XQP::HIGHPTR (WINDOWPROP                                                                                   W                                                                                   'XQP::LOWMEM)))                                              (XQP::\\BASELESSP XQP::HIGHPTR (WINDOWPROP W                                                                                    'XQP::HIGHMEM))))                ))    (|if| (AND (WINDOWP WINDOW)               (NOT (XQP::\\BASELESSP XQP::LOWPTR (WINDOWPROP WINDOW 'XQP::LOWMEM)))               (XQP::\\BASELESSP XQP::LOWPTR (WINDOWPROP WINDOW 'XQP::HIGHMEM))               (NOT (XQP::\\BASELESSP XQP::HIGHPTR (WINDOWPROP WINDOW 'XQP::LOWMEM)))               (XQP::\\BASELESSP XQP::HIGHPTR (WINDOWPROP WINDOW 'XQP::HIGHMEM)))        |then| (LET ((FONTHEIGHT (FONTPROP WINDOW 'HEIGHT)))                    (REDISPLAYW WINDOW (|create|                                        REGION                                        LEFT _ 0                                        WIDTH _ (WINDOWPROP WINDOW 'WIDTH)                                        HEIGHT _ (ITIMES FONTHEIGHT (ADD1 (IQUOTIENT (                                                                                XQP::\\BASEDIFFERENCE                                                                                      XQP::HIGHPTR                                                                                       XQP::LOWPTR)                                                                                 2)))                                        BOTTOM _                                        (IDIFFERENCE (WINDOWPROP WINDOW 'HEIGHT)                                               (ITIMES FONTHEIGHT                                                      (ADD1 (IQUOTIENT (XQP::\\BASEDIFFERENCE                                                                        XQP::HIGHPTR                                                                        (WINDOWPROP WINDOW                                                                               'XQP::LOWMEM))                                                                   2))))))))))(XQP::STACK.WINDOW.SELECT  (LAMBDA (ITEM XQP::WINDOWLIST)                             (* \; "Edited 11-Aug-87 12:57 by pds")(* |;;;| "Select ITEM, a pointer, in the first window on WINDOWLIST in which it is displayed.  WINDOWLIST defaults to STACK.WINDOW.LIST, the list of currently active stack windows.")    (|if| (XQP::POINTER.IN.RANGE ITEM XQP::|memtop| (\\ADDBASE XQP::|memtop| XQP::|reversed.offset|))        |then| (SETQ ITEM (\\ADDBASE ITEM XQP::|minus.reversed.offset|)))    (|bind| DESTINATION XQP::LOWMEM XQP::HIGHMEM (XQP::OLDLABEL _ (CAR                                                                     XQP::STACK.WINDOWS.SELECTEDLABELS                                                                       )) |for| XQP::DESTWINDOW       |in| (OR XQP::WINDOWLIST XQP::STACK.WINDOW.LIST) |eachtime| (SETQ XQP::LOWMEM                                                                    (WINDOWPROP XQP::DESTWINDOW                                                                           'XQP::LOWMEM))                                                              (SETQ XQP::HIGHMEM (WINDOWPROP                                                                                  XQP::DESTWINDOW                                                                                  'XQP::HIGHMEM))       |when| (AND (NOT (XQP::\\BASELESSP ITEM XQP::LOWMEM))                   (NOT (XQP::\\BASELESSP XQP::HIGHMEM ITEM)))       |do|                                                  (* \;                                                           "points into this window: show destination")            (SETQ DESTINATION (IQUOTIENT (XQP::\\BASEDIFFERENCE ITEM XQP::LOWMEM)                                     2))            (|push| XQP::STACK.WINDOWS.SELECTEDLABELS (CONS XQP::DESTWINDOW DESTINATION))            (XQP::STACK.WINDOW.INVERT.SELECTION XQP::DESTWINDOW DESTINATION 'LABEL 'NORMAL)            (XQP::STACK.WINDOW.MOVETO XQP::DESTWINDOW DESTINATION)            (|if| XQP::OLDLABEL                |then| (XQP::STACK.WINDOW.INVERT.SELECTION (CAR XQP::OLDLABEL)                              (CDR XQP::OLDLABEL)                              'LABEL                              'NORMAL))            (RETURN (CAR XQP::STACK.WINDOWS.SELECTEDLABELS))))))(DECLARE\: EVAL@COMPILE(RECORD XQP::STACK.WINDOW.SELECTION (LINE XQP::PART TYPE)))(RPAQ? XQP::STACK.WINDOW.LIST NIL)(RPAQ? XQP::STACK.WINDOWS.SELECTEDLABELS NIL)(DECLARE\: DOEVAL@COMPILE DONTCOPY(GLOBALVARS XQP::STACK.WINDOW.LIST XQP::STACK.WINDOWS.SELECTEDLABELS))(PUTPROPS STACKWINDOWS COPYRIGHT ("Quintus Computer Systems, Inc" 1986 1987))(DECLARE\: DONTCOPY  (FILEMAP (NIL (2077 6607 (XQP::ARGUMENT.REGISTER.WINDOW 2087 . 2658) (XQP::HEAP.WINDOW 2660 . 3480) (XQP::LOCAL.STACK.WINDOW 3482 . 4395) (XQP::TRAIL.WINDOW 4397 . 5172) (XQP::RESIZE.STACK.WINDOWS 5174 . 6350) (SEL 6352 . 6605)) (6700 38843 (XQP::CREATE.STACK.WINDOW 6710 . 8542) (XQP::PRINT.PROLOG.PTR 8544 . 12071) (XQP::REPAINT.STACK.WINDOW 12073 . 13870) (XQP::RESHAPE.STACK.WINDOW 13872 . 15288) (XQP::SHOW.PROLOG.MEMORY.CELL 15290 . 17263) (XQP::STACK.WINDOW.BUTTONEVENTFN 17265 . 27483) (XQP::STACK.WINDOW.CHANGE.BOUNDS 27485 . 28110) (XQP::STACK.WINDOW.CLOSEFN 28112 . 28327) (XQP::STACK.WINDOW.INVERT.SELECTION 28329 . 30322) (XQP::STACK.WINDOW.MOVETO 30324 . 32270) (XQP::STACK.WINDOW.POP.SELECTION 32272 . 33145) (XQP::STACK.WINDOW.REFRESH.ITEMS 33147 . 36473) (XQP::STACK.WINDOW.SELECT 36475 . 38841)))))STOP