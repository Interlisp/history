(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(filecreated " 2-Dec-87 19:38:29" {dsk}<lispfiles>dcoms>setupmenu.\;2 30360        |changes| |to:|  (fns xqp::create.scratch.file)      |previous| |date:| " 6-Oct-87 11:54:12" {dsk}<lispfiles>dcoms>setupmenu.\;1); Copyright (c) 1986, 1987 by Quintus Computer Systems, Inc.  All rights reserved.(prettycomprint setupmenucoms)(rpaqq setupmenucoms (                                       (* \;             "WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.")                      (initvars xqp::logo.window (xqp::scratch.file "{CORE}SCRATCH.FILE;1")                             xqp::save.selection xqp::current.textstream tedit.menu                             (prologfont (fontcreate 'terminal 10))                             (xqp::prolog.name 'xqp::|Xerox Quintus Prolog|)                             xqp::prolog.window.handle xqp::prolog.stream.handle                              xqp::prolog.mode.tedit.menu xqp::prolog.texec.menu)                                                             (* \; "Declare globals")                      (globalvars |BackgroundMenu| |BackgroundMenuCommands| tedit.menu                              tedit.default.menu tedit.default.props tedit.props                              xqp::prolog.mode.tedit.menu xqp::prolog.texec.menu xqp::prolog.name                              xqp::prolog.window.handle xqp::prolog.stream.handle prologfont                              xqp::save.selection xqp::scratch.file)                      (files logo2 iconw texec tedit teditmode)                      (fns xqp::qp.textstream xqp::qp.textobj xqp::active.textobjs prolog.exec                            xqp::prolog.setup xqp::tedit.filename xqp::tedit.window)                                          (* |;;| "Note that the logo bitmap will be loaded from the Prolog sysout, and will be in the global variable LOGO.BITMAP This bitmap is currently stored in the file LOGO2 The function SET.UP.LOGO has been moved to the file LOGO2 as well")                      (fns prolog.old.exec xqp::mark.predicate xqp::create.tedit.menu)                                                             (* \;                            "Here is some additional code that will be needed for Compile and Consult")                      (fns xqp::tedit.compile.code xqp::tedit.consult.code xqp::setup.transfer.file                            xqp::create.scratch.file xqp::editor.load.code)                                          (* |;;| "Attach the stream as a property to the filename as well as make sure the window has the proper filename as a property")                      (fns xqp::attach.stream.get)                                                             (* \; "Now call the initialization")                      (vars tedit.props)                      (p                     (* |;;| "Put up our logo when starting an XQP sysout")                         (let ((form (assoc 'logow aftermakesysforms)))                              (|if| form |then| (rplnode form 'xqp::logo.window nil)                                    |elseif|                                    (not (assoc 'xqp::logo.window aftermakesysforms))                                    |then|                                    (|push| aftermakesysforms '(xqp::logo.window))))                                             (* |;;| "A few miscellaneous things to set up now")                         (xqp::prolog.setup))                      (p (* |;;;| "Don't want to use filepkg ADVISE com, since the TEDITMODE package advises TEDIT, also.  The two sets of advice need to be separated")                         (advise 'tedit 'around nil '(let ((xqp::othertedit (and text (                                                                                      xqp::qp.textobj                                                                                       text)))                                                           (proc *))                                                          (if xqp::othertedit then                                                              (tedit.promptprint (textstream proc)                                                                                                                        "WARNING - This is the second TEdit on this file."                                                                      t))                                                          proc)))                      (prop makefile-environment)))(* \; "WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.")(rpaq? xqp::logo.window nil)(rpaq? xqp::scratch.file "{CORE}SCRATCH.FILE;1")(rpaq? xqp::save.selection nil)(rpaq? xqp::current.textstream nil)(rpaq? tedit.menu nil)(rpaq? prologfont (fontcreate 'terminal 10))(rpaq? xqp::prolog.name 'xqp::|Xerox Quintus Prolog|)(rpaq? xqp::prolog.window.handle nil)(rpaq? xqp::prolog.stream.handle nil)(rpaq? xqp::prolog.mode.tedit.menu nil)(rpaq? xqp::prolog.texec.menu nil)(* \; "Declare globals")(declare\: doeval@compile dontcopy(globalvars |BackgroundMenu| |BackgroundMenuCommands| tedit.menu tedit.default.menu        tedit.default.props tedit.props xqp::prolog.mode.tedit.menu xqp::prolog.texec.menu        xqp::prolog.name xqp::prolog.window.handle xqp::prolog.stream.handle prologfont        xqp::save.selection xqp::scratch.file))(filesload logo2 iconw texec tedit teditmode)(defineq(XQP::QP.TEXTSTREAM  (LAMBDA (XQP::FILENAME.OR.TEXTOBJ)                         (* \; "Edited 18-Jun-87 19:08 by pds")(* |;;;| "Just like TEXTSTREAM, except can also take a filename as arg.  Returns a textstream, or NIL.")    (|if| (OR (STRINGP XQP::FILENAME.OR.TEXTOBJ)              (LITATOM XQP::FILENAME.OR.TEXTOBJ))        |then|                                               (* \; "assume it's a filename.")              (LET ((XQP::TXTOBJ (XQP::QP.TEXTOBJ XQP::FILENAME.OR.TEXTOBJ)))                   (|if| XQP::TXTOBJ                       |then| (TEXTSTREAM XQP::TXTOBJ)))      |else| (TEXTSTREAM XQP::FILENAME.OR.TEXTOBJ))))(XQP::QP.TEXTOBJ  (LAMBDA (XQP::FILENAME.OR.STREAM)                          (* \; "Edited 18-Jun-87 15:17 by pds")(* |;;;| "Just like TEXTOBJ except can also take a filename as arg.  Returns a TEXTOBJ, or NIL.")    (|bind| (FILENAME _ (FULLNAME XQP::FILENAME.OR.STREAM 'OLD)) |for| XQP::TXTOBJ       |in| (XQP::ACTIVE.TEXTOBJS) |thereis| (EQUAL (XQP::TEDIT.FILENAME XQP::TXTOBJ)                                                    FILENAME))))(XQP::ACTIVE.TEXTOBJS  (LAMBDA NIL                                                (* \; "Edited 18-Jun-87 15:16 by pds")    (|bind| XQP::TXTOBJ |for| W |in| (OPENWINDOWS) |when| (SETQ XQP::TXTOBJ                                                           (WINDOWPROP (OR (WINDOWPROP W 'ICONFOR)                                                                           W)                                                                  'TEXTOBJ)) |collect| XQP::TXTOBJ)))(PROLOG.EXEC  (LAMBDA (NEW? REGION)                                      (* \; "Edited  6-Oct-87 11:52 by pds")    (|if| (AND NEW? (OR (EQ XQP::SYSTEM.SOLIDIFIED 0)                        (MOUSECONFIRM      "WARNING:  Selecting this option completely reinitializes Prolog, deleting the entire database."                               )))        |then| (LET ((PROC (FIND.PROCESS XQP::PROLOG.NAME)))                    (|if| PROC                        |then| (DEL.PROCESS PROC)                              (|while| (FIND.PROCESS XQP::PROLOG.NAME) |do| (BLOCK 100))))              (SETQ XQP::SYSTEM.SOLIDIFIED 0))    (|if| (NOT (FIND.PROCESS XQP::PROLOG.NAME))        |then| (LET (|handle| |window| |teditstream| |linebuffer|)                    (SETQ |window| (|if| XQP::PROLOG.WINDOW.HANDLE                                       |then|                (* \; "use existing window")                                             (|if| (AND REGION (NOT (EQUAL REGION (WINDOWPROP                                                                             XQP::PROLOG.WINDOW.HANDLE                                                                                          REGION))))                                                 |then| (SHAPEW XQP::PROLOG.WINDOW.HANDLE REGION))                                             XQP::PROLOG.WINDOW.HANDLE                                     |else| (CREATEW REGION "Xerox Quintus Prolog")))                                                             (* \;                                                        "Create a window for the TEdit-based listener")                    (SETQ |teditstream| (TEXEC.OPENTEXTSTREAM |window|))                                                             (* \;                             "Create a TEdit stream for the TEXEC and fill in our non-standard fields")                    (|replace| (STREAM LINELENGTH) |of| |teditstream|                       |with| (|fetch| (STREAM LINELENGTH) |of| (|fetch| (WINDOW DSP) |of| |window|))                           )                                 (* \;              "set the linelength of the teditstream to be the same as the one for the display stream")                    (|replace| (STREAM OUTCHARFN) |of| |teditstream| |with| #'BOUT)                    (SETQ |linebuffer| (\\CREATELINEBUFFER)) (* \;                                  "Create our LINEBUFFER so we can attach a READREFILL function to it")                    (STREAMPROP |linebuffer| 'REFILLBUFFERFN (FUNCTION TEXEC.FILLBUFFER))                                                             (* \;                                      "Attach the READREFILL function to the newly created LINEBUFFER")                    (WINDOWPROP |window| '\\LINEBUF.OFD |linebuffer|)                                                             (* \;                                            "attach the linebuffer to the window for TTYDISPLAYSTREAM")                    (SETQ |handle| (ADD.PROCESS `(PROGN (TTYDISPLAYSTREAM ',|teditstream|)                                                        (XQP::RUN.QUINTUS.PROLOG)) 'NAME                                           XQP::PROLOG.NAME 'RESTARTABLE T 'TTYENTRYFN 'TTYENTRYFN                                          'TTYEXITFN                                          'TTYEXITFN                                          'RESTARTFORM                                          `(PROGN (TTYDISPLAYSTREAM (QUOTE \, |teditstream|))                                                  (XQP::RUN.QUINTUS.PROLOG T))))                                                             (* \; "start the XQP process")                    (* |;;| "save this information in global variables as well.  This should be cleaned up to store this info on the Prolog process as properties.")                    (SETQ XQP::PROLOG.WINDOW.HANDLE |window|)                    (SETQ XQP::PROLOG.STREAM.HANDLE |teditstream|)                    (WINDOWPROP XQP::PROLOG.WINDOW.HANDLE 'ICONFN (FUNCTION ICONFN))                                                             (* \; "use my own icon fn")                    (CHANGEFONT PROLOGFONT XQP::PROLOG.STREAM.HANDLE)                                                             (* \; "use the default Prolog exec font")                    (WINDOWADDPROP |window| 'CLOSEFN (FUNCTION (LAMBDA (|window|)                                                                 (PROG ((|proc| (WINDOWPROP                                                                                 |window|                                                                                 'PROCESS)))                                                                       (RETURN                                                                        (COND                                                                           ((EQ (THIS.PROCESS)                                                                                |proc|)                                                                            (ADD.PROCESS                                                                             (LIST 'CLOSEW                                                                                   (KWOTE |window|)))                                                                            'DON\'T)                                                                           ((PROCESSP |proc|)                                                                            (DEL.PROCESS |proc|)                                                                            (SETQ                                                                             XQP::PROLOG.STREAM.HANDLE                                                                              NIL)                                                                            NIL)))))))                    (TTY.PROCESS |handle|))      |else| (PROMPTPRINT " Only one Prolog process can be active at a time"))))(XQP::PROLOG.SETUP  (LAMBDA NIL                                                (* \; "Edited 18-Jun-87 15:11 by pds")    (|if| (NOT (SASSOC "Xerox Quintus Prolog" |BackgroundMenuCommands|))        |then| (|push| |BackgroundMenuCommands| '("Xerox Quintus Prolog"                                                  '(XQP::PROLOG.EXEC NIL)                                                   "Runs Xerox Quintus Prolog in a TExec window"                                                  (SUBITEMS ("Start New Prolog" '(XQP::PROLOG.EXEC                                                                                  T)                                         "Runs Xerox Quintus Prolog after reinitializing the database"                                                                   ))))              (SETQ |BackgroundMenu| NIL))    (|if| (NOT XQP::PROLOG.MODE.TEDIT.MENU)        |then| (SETQ XQP::PROLOG.MODE.TEDIT.MENU (XQP::TEDITMODE.COPY.MENU TEDIT.DEFAULT.MENU))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Library" (FUNCTION XQP::LIBRARY)))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Find Definition"                                                                (FUNCTION XQP::FIND.DEFINITION)))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Compile" (FUNCTION                                                                            XQP::TEDIT.COMPILE.CODE)))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Consult" (FUNCTION                                                                            XQP::TEDIT.CONSULT.CODE)))          )    (XQP::TEDITMODE.NEWMODE (|create| XQP::TEDITMODEREC                                   MODE _ 'XQP::|Prolog|                                   XQP::IN-MENU? _ T                                   XQP::EXTENSION-LIST _ '(XQP::|pl| PL)                                   XQP::TEXTPROPS _ (LIST 'SELFN (FUNCTION XQP::MARK.PREDICATE)                                                          'GETFN                                                          (FUNCTION XQP::ATTACH.STREAM.GET))                                   XQP::WINDOWPROPS _ (LIST 'TEDIT.MENU XQP::PROLOG.MODE.TEDIT.MENU)                                   XQP::INITTEXTPROPS _ (LIST 'FONT '(TERMINAL 10 STANDARD))))(* |;;;| "This still has some bugs: (if (NOT PROLOG.TEXEC.MENU) then (SETQ PROLOG.TEXEC.MENU (\\TEDIT.CREATEMENU (LIST (QUOTE ('Library' (FUNCTION LIBRARY))) (QUOTE ('Find Definition' (FUNCTION FIND.DEFINITION))))))) (TEDITMODE.NEWMODE (create TEDITMODEREC MODE _ (QUOTE PrologTExec) IN-MENU?  _ NIL EXTENSION-LIST _ NIL TEXTPROPS _ (LIST (QUOTE SELFN) (FUNCTION MARK.PREDICATE)) WINDOWPROPS _ (LIST (QUOTE TEDIT.MENU) PROLOG.TEXEC.MENU (QUOTE TEDIT.TITLEMENUFN) (FUNCTION TEDIT.DEFAULT.MENUFN) (QUOTE ICONFN) (FUNCTION ICONFN))))")    (XQP::TEDITMODE.DEFAULTMODE 'XQP::|Prolog|)))(XQP::TEDIT.FILENAME  (LAMBDA (XQP::WINDOW.OR.TEXTOBJ)                           (* XQP::|pds:| "14-Jan-86 13:36")    (LET ((FNAME (\\TEXTSTREAM.FILENAME (TEXTOBJ XQP::WINDOW.OR.TEXTOBJ))))         (|if| FNAME             |then| (FULLNAME FNAME 'OLD)           |else| (TEXTOBJ XQP::WINDOW.OR.TEXTOBJ)))))(XQP::TEDIT.WINDOW  (LAMBDA (XQP::FILENAME.OR.TEXTOBJ.OR.STREAM)               (* \; "Edited 30-Sep-87 15:38 by pds")(* |;;;| "Given a filename, TEXTOBJ, text stream, running TEdit process, or TEdit editing window, returns the TEdit editing window.")    (LET ((XQP::TXTOBJ (|if| (OR (STRINGP XQP::FILENAME.OR.TEXTOBJ.OR.STREAM)                                 (LITATOM XQP::FILENAME.OR.TEXTOBJ.OR.STREAM))                           |then|                            (* \; "assume it's a filename.")                                 (XQP::QP.TEXTOBJ XQP::FILENAME.OR.TEXTOBJ.OR.STREAM)                         |else| (TEXTOBJ XQP::FILENAME.OR.TEXTOBJ.OR.STREAM))))         (|if| XQP::TXTOBJ             |then| (CAR (|fetch| (TEXTOBJ \\WINDOW) |of| XQP::TXTOBJ)))))))(* |;;| "Note that the logo bitmap will be loaded from the Prolog sysout, and will be in the global variable LOGO.BITMAP This bitmap is currently stored in the file LOGO2 The function SET.UP.LOGO has been moved to the file LOGO2 as well")(defineq(PROLOG.OLD.EXEC  (LAMBDA (NEW? REGION)                                      (* |pds:| "21-Apr-87 10:58")    (|if| (AND NEW? (OR (EQ XQP::SYSTEM.SOLIDIFIED 0)                        (MOUSECONFIRM                "Selecting this option completely reinitializes Prolog, deleting the entire database."                               )))        |then| (LET ((PROC (FIND.PROCESS XQP::PROLOG.NAME)))                    (|if| PROC                        |then| (DEL.PROCESS PROC)                              (|while| (FIND.PROCESS XQP::PROLOG.NAME) |do| (BLOCK 100))))              (SETQ XQP::SYSTEM.SOLIDIFIED 0))    (|if| (NOT (FIND.PROCESS XQP::PROLOG.NAME))        |then| (PROG (|handle| |window| |teditstream|)                     (ALLOW.BUTTON.EVENTS)                     (SETQ |window| (|if| XQP::PROLOG.WINDOW.HANDLE                                        |then| (|if| (AND REGION (NOT (EQUAL REGION (WINDOWPROP                                                                                                                                                                 XQP::PROLOG.WINDOW.HANDLE                                                                                      REGION))))                                                   |then| (SHAPEW XQP::PROLOG.WINDOW.HANDLE REGION))                                              XQP::PROLOG.WINDOW.HANDLE                                      |else| (CREATEW REGION "Xerox Quintus Prolog")))                     (CLRPROMPT)                     (SETQ |teditstream| (TEXEC.OPENTEXTSTREAM |window|))                     (XQP::TEDITMODE.MODE |teditstream| 'XQP::|PrologTExec|)                     (SETQ |handle| (ADD.PROCESS `(PROGN (TTYDISPLAYSTREAM (QUOTE \, |teditstream|))                                                         (XQP::RUN.QUINTUS.PROLOG)) 'NAME                                            XQP::PROLOG.NAME 'RESTARTABLE T 'TTYENTRYFN 'TTYENTRYFN                                           'TTYEXITFN                                           'TTYEXITFN                                           'RESTARTFORM                                           `(PROGN (TTYDISPLAYSTREAM (QUOTE \, |teditstream|))                                                   (XQP::RUN.QUINTUS.PROLOG T))))                    (* * XQP::|save| |this| |information| |in| |global| |variables| |as|           XQP::|well.| |This| |should| |be| XQP::|cleaned| |up| |to| XQP::|store| |this|           |info| |on| |the| XQP::|Prolog| XQP::|process| |as| XQP::|properties.|)                     (WINDOWPROP (SETQ XQP::PROLOG.WINDOW.HANDLE |window|)                            'ICONFN                            (FUNCTION ICONFN))                     (CHANGEFONT PROLOGFONT (SETQ XQP::PROLOG.STREAM.HANDLE |teditstream|))                    (* * |Create| |the| XQP::|listener| XQP::|process|)                     (WINDOWADDPROP |window| 'CLOSEFN                            (FUNCTION (LAMBDA (|window|)                                        (PROG ((|proc| (WINDOWPROP |window| 'PROCESS)))                                              (RETURN (COND                                                         ((EQ (THIS.PROCESS)                                                              |proc|)                                                          (ADD.PROCESS (LIST 'CLOSEW (KWOTE |window|)                                                                             ))                                                          'DON\'T)                                                         ((PROCESSP |proc|)                                                          (DEL.PROCESS |proc|)                                                          (SETQ XQP::PROLOG.STREAM.HANDLE NIL)                                                          NIL)))))))                     (TTY.PROCESS |handle|))      |else| (PROMPTPRINT " Only one Prolog process can be active at a time"))))(XQP::MARK.PREDICATE  (LAMBDA (TEXT SELECTION TYPE ACTION)                       (* XQP::|pds:| "30-Jan-86 21:03")    (SELECTQ ACTION        (TENTATIVE (|if| (AND (EQ TYPE 'NORMAL)                              (EQ 'PARA (|fetch| (SELECTION SELKIND) |of| SELECTION)))                       |then| (SETQ XQP::SAVE.SELECTION SELECTION)))        (FINAL (|if| (AND (EQ TYPE 'NORMAL)                          (EQ 'PARA (|fetch| (SELECTION SELKIND) |of| SELECTION)))                   |then| (XQP::FIND.PREDICATE (|fetch| (TEXTOBJ STREAMHINT) |of| TEXT)                                 XQP::SAVE.SELECTION)))        NIL)))(XQP::CREATE.TEDIT.MENU  (LAMBDA NIL                                                (* XQP::|pds:| "31-Jan-86 12:42")    (|if| (NOT TEDIT.MENU)        |then| (SETQ XQP::PROLOG.MODE.TEDIT.MENU (XQP::TEDITMODE.COPY.MENU TEDIT.DEFAULT.MENU))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Library" '(LAMBDA (X)                                                                             (XQP::LIBRARY X))))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Find Definition"                                                                '(LAMBDA (X)                                                                   (XQP::FIND.DEFINITION X))))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Compile" '(LAMBDA (X)                                                                             (XQP::TEDIT.COMPILE.CODE                                                                              X))))              (TEDIT.ADD.MENUITEM XQP::PROLOG.MODE.TEDIT.MENU '("Consult" '(LAMBDA (X)                                                                             (XQP::TEDIT.CONSULT.CODE                                                                              X))))              (SETQ XQP::PROLOG.TEXEC.MENU (|create| MENU))              (TEDIT.ADD.MENUITEM XQP::PROLOG.TEXEC.MENU '("Library" '(LAMBDA (X)                                                                        (XQP::LIBRARY X))))              (TEDIT.ADD.MENUITEM XQP::PROLOG.TEXEC.MENU '("Find Definition" '(LAMBDA (X)                                                                                (XQP::FIND.DEFINITION                                                                                 X))))              (NCONC XQP::TEDITMODE.MODELIST                     (LIST (|create| XQP::TEDITMODEREC                                  MODE _ 'XQP::|Prolog|                                  XQP::IN-MENU? _ T                                  XQP::EXTENSION-LIST _ '(XQP::|pl| PL)                                  XQP::TEXTPROPS _ TEDIT.PROPS                                  XQP::WINDOWPROPS _ (LIST 'TEDIT.MENU XQP::PROLOG.MODE.TEDIT.MENU))                           (|create| XQP::TEDITMODEREC                                  MODE _ 'XQP::|PrologTExec|                                  XQP::IN-MENU? _ NIL                                  XQP::EXTENSION-LIST _ NIL                                  XQP::TEXTPROPS _ TEDIT.PROPS                                  XQP::WINDOWPROPS _ (LIST 'TEDIT.MENU XQP::PROLOG.TEXEC.MENU                                                           'TEDIT.TITLEMENUFN                                                           (FUNCTION TEDIT.DEFAULT.MENUFN)))))              (SETQ XQP::TEDITMODE.MENU NIL)                     (* * TEDIT.MENU |is| \a |global| |variable|)              (SETQ TEDIT.MENU T)))))(* \; "Here is some additional code that will be needed for Compile and Consult")(defineq(XQP::TEDIT.COMPILE.CODE  (LAMBDA (STREAM)                                           (* \; "Edited  8-Sep-87 15:11 by pds")    (|if| (NOT (PROLOG.IS.READY))        |then| (TEDIT.PROMPTPRINT STREAM                       "cannot compile unless Prolog is at top-level prompt, or not running." T)      |else| (XQP::SETUP.TRANSFER.FILE STREAM)            (XQP::EDITOR.LOAD.CODE '|compile| STREAM))))(XQP::TEDIT.CONSULT.CODE  (LAMBDA (STREAM)                                           (* \; "Edited  8-Sep-87 15:10 by pds")    (|if| (NOT (PROLOG.IS.READY))        |then| (TEDIT.PROMPTPRINT STREAM                       "cannot consult unless Prolog is at top-level prompt, or not running" T)      |else| (XQP::SETUP.TRANSFER.FILE STREAM)            (XQP::EDITOR.LOAD.CODE 'XQP::|consult| STREAM))))(XQP::SETUP.TRANSFER.FILE  (LAMBDA (STREAM)                                           (* \; "Edited 19-Aug-87 15:57 by pds")    (LET ((OUTSTREAM (XQP::CREATE.SCRATCH.FILE))          (SEL (TEDIT.GETSEL STREAM)))         (|if| (IGREATERP (|fetch| (SELECTION DCH) |of| SEL)                      1)             |then| (COPYCHARS STREAM OUTSTREAM (SUB1 (|fetch| (SELECTION CH#) |of| SEL))                           (SUB1 (|fetch| (SELECTION CHLIM) |of| SEL)))           |else| (SETFILEPTR STREAM 0)                 (COPYCHARS STREAM OUTSTREAM))         (CLOSEF OUTSTREAM))    (TEDIT.SETSEL STREAM (XQP::GET.CURSOR STREAM)           1           'RIGHT)))(xqp::create.scratch.file  (lambda nil                                                (* \; "Edited  2-Dec-87 18:59 by pds")    (|if| (eq xqp::scratch.file nil)        |then| (setq xqp::scratch.file "{CORE}SCRATCH.FILE")      |else| (closef? xqp::scratch.file)            (delfile xqp::scratch.file))    (openstream xqp::scratch.file 'both)))(XQP::EDITOR.LOAD.CODE  (LAMBDA (OPERATION STREAM)                                 (* \; "Edited  8-Sep-87 15:08 by pds")    (PROLOG 'XQP::|$editor_load_code| (LIST OPERATION (LET ((FNAME (XQP::TEDIT.FILENAME STREAM)))                                                           (|if| (OR (LITATOM FNAME)                                                                     (STRINGP FNAME))                                                               |then| (PACKFILENAME 'VERSION NIL                                                                             'BODY FNAME)                                                             |else| STREAM)))))))(* |;;| "Attach the stream as a property to the filename as well as make sure the window has the proper filename as a property")(defineq(XQP::ATTACH.STREAM.GET  (LAMBDA (STREAM FILENAME WHEN)                             (* \; "Edited 30-Sep-87 15:36 by pds")    (|if| (AND (EQ WHEN 'AFTER)               FILENAME               (LET ((OLDSTREAM (XQP::QP.TEXTSTREAM FILENAME)))                    (AND OLDSTREAM (NEQ OLDSTREAM STREAM))))        |then| (TEDIT.PROMPTPRINT STREAM "WARNING - This is the second Tedit window on this file." T)          ))))(* \; "Now call the initialization")(rpaqq tedit.props (selfn xqp::mark.predicate))                    (* |;;| "Put up our logo when starting an XQP sysout")(let ((form (assoc 'logow aftermakesysforms)))     (|if| form |then| (rplnode form 'xqp::logo.window nil)           |elseif|           (not (assoc 'xqp::logo.window aftermakesysforms))           |then|           (|push| aftermakesysforms '(xqp::logo.window))))                    (* |;;| "A few miscellaneous things to set up now")(xqp::prolog.setup)(* |;;;| "Don't want to use filepkg ADVISE com, since the TEDITMODE package advises TEDIT, also.  The two sets of advice need to be separated")(advise 'tedit 'around nil '(let ((xqp::othertedit (and text (xqp::qp.textobj text)))                                  (proc *))                                 (if xqp::othertedit then (tedit.promptprint (textstream proc)                                                                                                                    "WARNING - This is the second TEdit on this file."                                                                  t))                                 proc))(putprops setupmenu copyright ("Quintus Computer Systems, Inc" 1986 1987))(declare\: dontcopy  (filemap (nil (5697 17775 (xqp::qp.textstream 5707 . 6402) (xqp::qp.textobj 6404 . 6894) (xqp::active.textobjs 6896 . 7405) (prolog.exec 7407 . 13641) (xqp::prolog.setup 13643 . 16609) (xqp::tedit.filename 16611 . 16944) (xqp::tedit.window 16946 . 17773)) (18025 25713 (prolog.old.exec 18035 . 22094) (xqp::mark.predicate 22096 . 22773) (xqp::create.tedit.menu 22775 . 25711)) (25804 28469 (xqp::tedit.compile.code 25814 . 26247) (xqp::tedit.consult.code 26249 . 26686) (xqp::setup.transfer.file 26688 . 27402) (xqp::create.scratch.file 27404 . 27777) (xqp::editor.load.code 27779 . 28467)) (28609 29066 (xqp::attach.stream.get 28619 . 29064)))))stop