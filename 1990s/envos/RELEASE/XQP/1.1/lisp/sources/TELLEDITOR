(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "XCL" BASE 10)(filecreated "16-Dec-87 16:28:39" {dsk}<lispfiles>dcoms>telleditor.\;4 15328        |changes| |to:|  (fns xqp::update.modeline)      |previous| |date:| "24-Nov-87 18:38:51" {dsk}<lispfiles>dcoms>telleditor.\;3); Copyright (c) 1986, 1987 by Quintus Computer Systems, Inc.  All rights reserved.(prettycomprint telleditorcoms)(rpaqq telleditorcoms (                                      (* \;             "WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.")                                           (* |;;| "FIND.DEFINITION.SOURCE.FILES holds a list of files that a predicate was defined in.  It is used by find-definition to pass information.")                       (initvars xqp::find.definition.source.files xqp::find.definition.bad.pred                               xqp::current.textstream xqp::buffered.hidden.input)                       (globalvars xqp::find.definition.source.files xqp::find.definition.bad.pred                               xqp::current.textstream xqp::buffered.hidden.input)                       (macros xqp::clear.fd.buffer)                       (globalvars xqp::current.stream)                       (macros xqp::fd.file)                       (fns xqp::library xqp::p.flush.stdin)                       (fns xqp::library.part.two)                                                             (* \; "Modeline Updating")                                                             (* \;                             "The following functions should be replaced with prolog code in emacs.pl")                       (fns xqp::make.tab.string xqp::filter.mode.line)                       (fns xqp::update.modeline)                                                             (* \;                                 "At present the global variable TERM.READING.MODE is not being used.")                       (initvars xqp::term.reading.mode)                       (globalvars xqp::term.reading.mode)                       (initvars xqp::at.top.level)                       (globalvars xqp::at.top.level)                       (fns xqp::tell.emacs)                                                             (* \;                                      "See FINDDEF.LSP for the definition of FIND.DEFINITION.PART.TWO")                                                             (* \;       "Interprocess Communication these globals should really be in EXEC.LSP with the TEXEC function")                       (initvars xqp::prolog.stream.handle xqp::prolog.window.handle)                       (globalvars xqp::prolog.stream.handle xqp::prolog.window.handle)                       (fns xqp::send.end.of.file)                       (fns xqp::look.for.emacs.packet xqp::wait.for.event xqp::read.from.lisp)                       (prop makefile-environment)                       (functions xqp::fd.pred)))(* \; "WARNING: This material is CONFIDENTIAL and proprietary to Quintus Computer Systems Inc.")(* |;;| "FIND.DEFINITION.SOURCE.FILES holds a list of files that a predicate was defined in.  It is used by find-definition to pass information.")(rpaq? xqp::find.definition.source.files nil)(rpaq? xqp::find.definition.bad.pred nil)(rpaq? xqp::current.textstream nil)(rpaq? xqp::buffered.hidden.input nil)(declare\: doeval@compile dontcopy(globalvars xqp::find.definition.source.files xqp::find.definition.bad.pred xqp::current.textstream        xqp::buffered.hidden.input))(declare\: eval@compile (putprops xqp::clear.fd.buffer macro (xqp::**macroarg** (let nil `(progn (setq                                                                     xqp::find.definition.source.files                                                                                nil))))))(declare\: doeval@compile dontcopy(globalvars xqp::current.stream))(declare\: eval@compile (putprops xqp::fd.file macro (xqp::**macroarg** (let ((data (car (nth xqp::**macroarg** 1))))                                                     `(progn (setq xqp::find.definition.source.files                                                                   (nconc1                                                                     xqp::find.definition.source.files                                                                          ,data)))))))(defineq(XQP::LIBRARY  (LAMBDA (STREAM)                                           (* \; "Edited 30-Sep-87 16:16 by pds")    (|if| (PROLOG.IS.READY)        |then| (SETQ XQP::CURRENT.STREAM STREAM)              (PROLOG 'XQP::|find_library_package| (LIST (MKATOM (TEDIT.GETINPUT (TEXTOBJ STREAM)                                                                        "Library file: "))))      |else| (TEDIT.PROMPTPRINT STREAM             "cannot use the library facility unless Prolog is not running, or is at top level prompt"                     T))))(XQP::P.FLUSH.STDIN  (LAMBDA NIL                                                (* \; "Edited 26-Aug-87 18:09 by pds")    (SETFILEPTR (XQP::QIO.STREAM XQP::CURRENT.INPUT)           -1))))(defineq(XQP::LIBRARY.PART.TWO  (LAMBDA (FILENAME)                                         (* \; "Edited 30-Sep-87 15:41 by pds")    (|if| (EQUAL FILENAME 'XQP::|cannot find library file, check facts for library_directory/1'|)        |then|                                               (* |the| XQP::|filename| |is|                                                              XQP::|really| |the| |error|                                                              XQP::|message| XQP::|above.|)              (TEDIT.PROMPTPRINT XQP::CURRENT.STREAM FILENAME T)      |else| (LET ((XQP::WORKING.STREAM (XQP::QP.TEXTSTREAM (FULLNAME FILENAME 'OLD))))                  (|if| (NOT XQP::WORKING.STREAM)                      |then|                                 (* |no| |open| XQP::|stream,| |but|                                                              XQP::QUINTUS.TEDIT XQP::|sets|                                                              XQP::CURRENT.TEXTSTREAM)                            (SETQ XQP::WORKING.STREAM (TEXTSTREAM (TEDIT FILENAME NIL NIL                                                                         '(XQP::TEDIT.MODE                                                                                  XQP::|Prolog|))))                    |else| (PROMPTPRINT (CONCAT "   Revisiting: " FILENAME)))                  (TEDIT.NORMALIZECARET (TEXTOBJ XQP::WORKING.STREAM)                         (TEDIT.SETSEL XQP::WORKING.STREAM 1 1 'LEFT)))))))(* \; "Modeline Updating")(* \; "The following functions should be replaced with prolog code in emacs.pl")(defineq(XQP::MAKE.TAB.STRING  (LAMBDA (N)                                                (* XQP::|pds:| " 1-Feb-86 14:39")                    (* * |Sort| |of| \a XQP::|hack,| XQP::|granted,| |but| XQP::|saves| \a           XQP::|lot| |of| XQP::|work| |at| XQP::|runtime.|)    (|if| (AND (FIXP N)               (IGEQ N 0))        |then| (SELECTQ N                   (0 "")                   (1 " ")                   (2 "  ")                   (3 "   ")                   (4 "    ")                   (5 "     ")                   (6 "      ")                   (7 "       ")                   (8 "        ")                   (CONCAT "        " (XQP::MAKE.TAB.STRING (IDIFFERENCE N 8))))      |else| (ERROR "Negative or non-integer tab" N))))(XQP::FILTER.MODE.LINE  (LAMBDA (INPUT)                                            (* XQP::|pds:| " 8-Feb-86 18:47")    (|if| (AND (EQ (TYPENAME INPUT)                   'XQP::PROLOG.TERM)               (EQ (|fetch| (XQP::PROLOG.TERM XQP::PROLOG.FUNCTOR) |of| INPUT)                   '|tab|))        |then| (XQP::MAKE.TAB.STRING (CAR (|fetch| (XQP::PROLOG.TERM XQP::PROLOG.ARGS) |of| INPUT)))      |elseif| (LISTP INPUT)        |then| (CONCATLIST (|for| ELT |in| INPUT |collect| (XQP::FILTER.MODE.LINE ELT)))      |else| INPUT))))(defineq(xqp::update.modeline  (lambda (term)                                             (* \; "Edited 15-Dec-87 18:53 by pds")    (if (or (openwp xqp::prolog.window.handle)            (openwp (windowprop xqp::prolog.window.handle 'iconwindow)))        then (windowprop xqp::prolog.window.handle 'title (let* ((xqp::term-args (|fetch|                                                                                  (prolog.term                                                                                          prolog.args)                                                                                    |of| term))                                                                 (xqp::module-msg (cl:first                                                                                        xqp::term-args                                                                                         ))                                                                 (xqp::debug-msg (cl:second                                                                                        xqp::term-args                                                                                        ))                                                                 (xqp::breaklvl-msg (cl:third                                                                                        xqp::term-args                                                                                           )))                                                                (cl:string-right-trim                                                                 '(#\Space)                                                                 (concat " Xerox Quintus Prolog"                                                                        (xqp::filter.mode.line                                                                                xqp::module-msg)                                                                        (xqp::filter.mode.line                                                                                xqp::debug-msg)                                                                        (xqp::filter.mode.line                                                                                xqp::breaklvl-msg)))))        ))))(* \; "At present the global variable TERM.READING.MODE is not being used.")(rpaq? xqp::term.reading.mode nil)(declare\: doeval@compile dontcopy(globalvars xqp::term.reading.mode))(rpaq? xqp::at.top.level nil)(declare\: doeval@compile dontcopy(globalvars xqp::at.top.level))(defineq(xqp::tell.emacs  (lambda (message data)                                     (* \; "Edited 24-Nov-87 13:42 by pds")    (selectq message        (xqp::|top_level|              (setq xqp::at.top.level t))        (xqp::|term_reading_mode|              (setq xqp::term.reading.mode t))        (xqp::|done_loading|              (tedit.promptprint xqp::prolog.stream.handle "done" t))        (xqp::|mode_line|              (xqp::update.modeline data))        (xqp::|clear_fd_buffer|              (xqp::clear.fd.buffer))        (xqp::|fd_file|              (xqp::fd.file data))        (xqp::|fd_pred|              (xqp::fd.pred data))        (xqp::|find_definition|              (xqp::find.definition.part.two data))        (xqp::|library|              (xqp::library.part.two data))        (xqp::|at_debugger_prompt|              (setq xqp::term.reading.mode nil))        (error "TELL.EMACS message not defined" message)))))(* \; "See FINDDEF.LSP for the definition of FIND.DEFINITION.PART.TWO")(* \; "Interprocess Communication these globals should really be in EXEC.LSP with the TEXEC function")(rpaq? xqp::prolog.stream.handle nil)(rpaq? xqp::prolog.window.handle nil)(declare\: doeval@compile dontcopy(globalvars xqp::prolog.stream.handle xqp::prolog.window.handle))(defineq(XQP::SEND.END.OF.FILE  (LAMBDA NIL    (LET ((PROC (FIND.PROCESS XQP::PROLOG.NAME)))         (|if| PROC             |then| (PROCESS.EVAL PROC '(RETFROM 'READCCODE 4))                   (TTY.PROCESS PROC))))))(defineq(XQP::LOOK.FOR.EMACS.PACKET  (LAMBDA NIL                                                (* \; "Edited 14-Aug-87 12:57 by pds")(* |;;;| "Watch the current input stream, waiting for the user to type a character, or for Lisp to send a request to Prolog, whichever comes first.  Skip over whitespace characters.  Returns 0 if a Lisp request arrived, 1 if the user typed a return, or 2 if he typed something else.")    (|if| XQP::TERM.READING.MODE        |then| (XQP::QP.PROMPT))    (|bind| CH (STREAM _ (XQP::QIO.STREAM XQP::CURRENT.INPUT))       |do| (SETQ CH (XQP::WAIT.FOR.EVENT STREAM))            (|if| XQP::BUFFERED.HIDDEN.INPUT                |then| (RETURN 0)              |elseif| (EQ CH (CHARCODE EOL))                |then| (RETURN 1)              |elseif| (OR (EQ CH (CHARCODE SPACE))                           (EQ CH (CHARCODE TAB)))                |then| (READCCODE STREAM)                     (* |;;| "keep looking")              |else| (RETURN 2)))))(XQP::WAIT.FOR.EVENT  (LAMBDA (STREAM)                                           (* \; "Edited 14-Aug-87 12:57 by pds")(* |;;;| "This function returns when either the user has typed a character, or SEND.GOAL.TO.PROLOG has sent a goal to Prolog.  The latter causes this function to return by doing a RETFROM in the Prolog process.")    (RESETVAR XQP::AT.TOP.LEVEL T (PEEKCCODE STREAM))))(XQP::READ.FROM.LISP  (LAMBDA NIL                                                (* XQP::|pds:| "20-Feb-87 13:24")                    (* * XQP::|Returns| XQP::BUFFERED.HIDDEN.INPUT |as| \a XQP::|Prolog|           XQP::|term,| |and| XQP::|clears| |out| XQP::BUFFERED.HIDDEN.INPUT.)    (PROG1 XQP::BUFFERED.HIDDEN.INPUT (SETQ XQP::BUFFERED.HIDDEN.INPUT NIL)))))(defmacro xqp::fd.pred (pred) `(setq xqp::find.definition.bad.pred (concat (car (fetch (prolog.term                                                                                        prolog.args)                                                                                   of ,pred))                                                                          "/"                                                                          (cadr (fetch (prolog.term                                                                                        prolog.args)                                                                                   of ,pred)))))(putprops telleditor copyright ("Quintus Computer Systems, Inc" 1986 1987))(declare\: dontcopy  (filemap (nil (4513 5304 (xqp::library 4523 . 5098) (xqp::p.flush.stdin 5100 . 5302)) (5305 6855 (xqp::library.part.two 5315 . 6853)) (6980 8391 (xqp::make.tab.string 6990 . 7780) (xqp::filter.mode.line 7782 . 8389)) (8392 10787 (xqp::update.modeline 8402 . 10785)) (11091 12062 (xqp::tell.emacs 11101 . 12060)) (12443 12679 (xqp::send.end.of.file 12453 . 12677)) (12680 14536 (xqp::look.for.emacs.packet 12690 . 13739) (xqp::wait.for.event 13741 . 14148) (xqp::read.from.lisp 14150 . 14534)))))stop