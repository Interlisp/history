ref-4-1-3                    Xerox Quintus Prolog Reference Manual                   Section 4-1-3: ensure_loaded(+FileSpec)ensure_loaded(FileSpec) compiles the file or files designated by FileSpec ifnecessary.  FileSpec should be bound either to a file specification or to alist of file specifications.  If FileSpec is a list of file specifications,then ensure_loaded/1 is applied to each file on the list.If the file is a module-file, ensure_loaded/1 compiles the file if it has notalready been loaded.  The source module then imports the public predicates ofthe module-file if it has not already imported some predicates from themodule-file.If a file is not a module-file, then when you perform an ensure_loaded/1operation:   1. if the file has previously been loaded into the source module,      nothing is done;   2. if the file has not previously been loaded, it is compiled and its      predicates are loaded into the source module;   3. if the file has previously been loaded into some other module, a      warning message is printed. Then the file is compiled, and its      predicates are loaded into the source module.Thus multiple copies of a file can be loaded in different modules in spite ofalways compiling it using ensure_loaded/1, but a warning is displayed when thishappens.  If you want multiple copies, you can avoid the warning message bychanging the ensure_loaded/1 commands to compile/1 commands.  If you do notwant multiple copies of the file, make the file a module-file.ensure_loaded/1 always succeeds; however, in the event of an error, such as anattempt to redefine a built-in predicate, it sends an error message to thestandard error stream and the clause causing the error is ignored.  You shouldcorrect the error and load the file(s) again.  The reader and the module systemmay generate their own errors (such as syntax errors and name clashes) duringthe execution of ensure_loaded/1; they are handled in the same way as errorsinternal to ensure_loaded/1.ensure_loaded/1 is generally used when a file foo depends upon a library filelib_file being loaded, and there is a good chance that lib_file is alreadyloaded.  In this case foo would contain the command             :- ensure_loaded(library(lib_file)).as an alternative to using compile/1.  If a directive of the form            :- ensure_loaded(RelFileSpec.)appears in a file being loaded, then the relative file specificationRelFileSpec is resolved with respect to the directory which contains the filebeing loaded.NOTE:  ensure_loaded/1 does not check that the version of the file in the filesystem is the same as the version which is already loaded.  Therefore, if youload a file, change that file, then call ensure_loaded/1 on that file, thechanges you made will not be reflected in the system since the file will not bereloaded.  ensure_loaded/1 is ideal for loading files that will not changeduring a session, such as files containing library predicates.