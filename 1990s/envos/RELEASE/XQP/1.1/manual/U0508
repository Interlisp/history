user-5-8                      Xerox Quintus Prolog User's Guide                   Section 5-8: Creating Dynamic PredicatesAll predicates in Prolog fall into one of two categories:  static or dynamic.Dynamic predicates can be modified when a program is running; in contrast,static predicates can be modified only by using consult/1 or compile/1.If a predicate is first defined by being consulted or compiled, it is static bydefault.  Sometimes, however, it is necessary to add (assert), remove(retract), or inspect (using clause/[2,3]) clauses for a predicate while aprogram is running.  In order to do that, you must declare the predicate to bedynamic.  A predicate can be made dynamic only by specifically declaring it tobe so, as described below, or by using one of the assertion predicates.  For alist of the assertion predicates, and for more information on using them, referto the Xerox Quintus Prolog Reference Manual.)To make a predicate dynamic, you insert in the file containing the predicate aline which declares the predicate to be dynamic.  The format of the line is            :- dynamic name/arity.So, for example, to make the predicates exchange_rate/3, spouse_of/2, andgravitational_constant/1 dynamic, you would type:- dynamic exchange_rate/3, spouse_of/2, gravitational_constant/1.Any number of predicate names may be specified, as long as they are separatedby commas.  Note that the ':- ' symbol must be at the beginning of any linewith a dynamic declaration, as shown above.NOTES:   1. Dynamic declarations can only appear in files; dynamic/1 cannot be      called as a predicate.   2. The line that declares a predicate to be dynamic must occur before      any definition of the predicate itself in the file.Alternatively, a previously undefined predicate becomes dynamic automaticallyif you assert a clause for it. See the Xerox Quintus Prolog Reference Manualfor more information on using the assertion predicates.NOTE:  If you want to use one of the assertion predicates to define a newclause for an existing predicate, you must first make that predicate dynamic.That is, you must add the dynamic declaration to the definition of theprocedure and consult or compile it again.  If you don't, you will receive anerror message like the one shown in the following example:{ in file foo: }   .   .   .f(1).   .   .   .{ at top level: }| ?- assert((f(x):-g)).[ Error 330: attempting to assert clause for static procedure: f(x):-g]At this point, you should add a dynamic declaration to the beginning of theprocedure definition, proceeding as follows:{ in file foo: }   .   .   .:- dynamic f/1.f(1).   .   .   .{ at top level: }| ?- consult(foo).   .   .   .| ?- assert((f(x):-g)).yes