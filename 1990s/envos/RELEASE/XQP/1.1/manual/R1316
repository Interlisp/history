ref-13-16                    Xerox Quintus Prolog Reference Manual                     Section 13-16: Module Name ExpansionThe concept of a source module is explained in {manual(ref-13-7)}.  For anygoal, the applicable source module is determined when the goal is loaded ratherthan when it is executed.  The name of the module into which a goal is loadedmust be passed to predicates called by that goal.  Module name expansionachieves this.A procedure that needs to refer to the source module has arguments designatedfor module name expansion.  These arguments are expanded at load time by thetransformation             X -> M:Xwhere M is the name of the source module.  For example, the goal call(X) isexpanded into call(M:X) and the goal clause(Head, Body) is expanded intoclause(M:Head, Body).The module 'user' is special; module name expansion does not take place in thismodule.  Module name expansion is also avoided if the argument to be expandedis already a ':'/2 term.  In this case it is unnecessary since the module to beused has already been supplied by the programmer.The built-in predicates which use module name expansion, and the argumentsrequiring module name expansion are shown below.abolish(M:Pred)abolish(M:Name, Arity)assert(M:Term)assert(M:Term, Ref)asserta(M:Term)asserta(M:Term, Ref)assertz(M:Term)assertz(M:Term, Ref)bagof(T, M:P , S)call(M:Goal)clause(M:Head, Body)clause(M:Head, Body, Ref)compile(M:Files)consult(M:Files)current_predicate(Name, M:Term)ensure_loaded(M:Files)listing(M:List)load_foreign_files(M:Files, Libs)nospy(M:List)predicate_property(M:Goal, Property)retract(M:Term)retractall(M:Term)setof(T, M:P, S)source_file(M:Term, File)spy(M:List)use_module(M:File, IL)use_module(M:Files)X^(M:Goal)[M:File|Rest]