ref-16-1                    Xerox Quintus Prolog Reference Manual                 Section 16-1: setof(?Template, +Goal, -Set)setof(Template, Goal, Set) returns the set Set of all instances of Templatesuch that Goal is provable, where that set is non-empty.  The term Goalspecifies a goal to be called as if by call/1.  Set is a set of termsrepresented as a list of those terms, without duplicates, in the standard orderfor terms (see {manual(ref-8)}).  If there are no instances of Template suchthat Goal is satisfied, then setof/3 simply fails.Obviously, the set to be enumerated should be finite, and should be enumerableby Prolog in finite time.  It is possible for the provable instances to containvariables, but in this case Set will only provide an imperfect representationof what is in reality an infinite set.If Goal is an uninstantiated variable, setof/3 fails, an error message is sentto the standard error stream, and the system enters the debugger in trace mode.If Goal is instantiated, but contains uninstantiated variables which do notalso appear in Template, then setof/3 can succeed nondeterminately, generatingalternative values for Set corresponding to different instantiations of thefree variables of Goal.  (It is to allow for such usage that Set is constrainedto be non-empty.)   For example, if your program contained the clauses            likes(tom, beer).            likes(dick, beer).            likes(harry, beer).            likes(bill, cider).            likes(jan, cider).            likes(tom, cider).then the call            | ?- setof(X, likes(X,Y), S).might produce two alternative solutions via backtracking:            X = _872,            Y = beer,            S = [dick,harry,tom] ;            X = _872,            Y = cider,            S = [bill,jan,tom] ;            noThe call            | ?- setof((Y,S), setof(X,likes(X,Y),S), SS).would then produceY = _402,S = _417,X = _440,SS = [(beer,[dick,harry,tom]),(cider,[bill,jan,tom])] ;noVariables occurring in Goal will not be treated as free if they are explicitlybound within Goal by an existential quantifier.  An existential quantificationis written:              Y^Qmeaning "there exists a Y such that Q is true", where Y is some Prologvariable.  For example:            | ?- setof(X, Y^likes(X,Y), S).would produce the single result            X = _400,            Y = _415,            S = [bill,dick,harry,jan,tom] ;            noin contrast to the earlier example.