ref-12-2                    Xerox Quintus Prolog Reference Manual                         Section 12-2: Basic ConceptsEach predicate in a program is identified by its module, as well as by its nameand arity.A module defines a set of predicates, some of which have the property of beingpublic.  Predicates which are not public are private to the module in whichthey are defined; that is, they cannot be called from outside that moduleexcept by explicitly overriding the modularity rules as described in{manual(ref-12-6)}.  Public predicates can be imported by other modules, afterwhich they can be called from within those modules.There are two kinds of importation:     1. A module M1 may import a specified set of predicates from another      module M2.  All the specified predicates should be public in M2.   2. A module M1 may import all the public predicates of another module      M2.  Built-in predicates do not need to be imported; they are automaticallyavailable from within any module.There is a special module called 'user' which is used by default whenpredicates are being defined and no other module has been specified.If you are using a program written by someone else, you need not be concernedas to whether or not that program has been made into a module.  The act ofloading a module from a file using compile/1, consult/1, or ensure_loaded/1({manual(ref-3)}) will automatically import all the public predicates in thatmodule.  Thus the command             :- ensure_loaded(library(basics)).will load the basic list-processing predicates from the library and make themavailable, regardless of whether you are using the current version of thelibrary or an old version in which modules were not used.  (Exception:  incertain circumstances this automatic importation does not occur -- see{manual(ref-12-5)}.)