user-6-12-1                      Xerox Quintus Prolog User's Guide                        Section 6-12-1: Basic Options    <CR>        (just the return key)        This is the same as the c (creep) option, but is reduced to a single        keystroke for convenience.    a   abort        This option causes an abort of the current execution.  All the        execution states built so far are destroyed, and execution restarts at        the top level of the interpreter.    b   break        This option calls the built-in predicate break/0, which suspends the        execution so far and puts you at a new break level.  The new execution        is separate from the suspended one, and invocation numbers will start        again from 1.  When you end the break (by typing 'end_of_file.' or your        end-of-file character), the suspended execution will resume and you        will be reprompted at the port you left.    c   creep        This option causes the debugger to single-step to the very next port        and display the goal.  Then, if the port is leashed, you are prompted        for further interaction; otherwise, the debugger continues creeping.    d   display        This option displays the current goal on the terminal using display/1.        This shows the goal in prefix notation.  The 'display' option has no        depth limit.    f   fail        This is similar to Retry except that it transfers control to the Fail        port of the current box.  This places your execution in a situation in        which it is about to backtrack out of the current invocation, having        failed the goal.    g   ancestors        This option prints the ancestors of the current goal (that is, all        traceable goals that are between the current goal and the top-level        goal in the calling sequence).  For more information, see the        ancestors/1 predicate in the Xerox Quintus Prolog Reference Manual.    h   help        This option displays the table of options given at the beginning of        this section.    l   leap        This option causes the debugger to resume running your program without        stopping until the next spypoint is reached.  Leaping can be used to        follow the program's execution at a higher level than exhaustive        tracing through creeping.  This is done by setting spypoints on a set        of pertinent procedures, and then following the control flow through        these by leaping from one to the next.    n   nodebug        This option turns off the debugger only for the rest of the execution        of the current top-level goal.    p   print        This option prints the current goal using print/1 and the current        debugger print depth limit.  The depth limit prevents very large        structures from being shown in their entirety; it can be changed with        the < option.  (This is the way goals are printed by default.)    r   retry        This option transfers control back to the Call port.  This allows you        to restart an invocation when, for example, you find yourself leaving        with some incorrect result.    s   skip At a Call or Redo port, this skips debugging for the entire        execution of the procedure.  At an Exit or Fail port, this is        equivalent to the c (creep) option.    w   write        This option writes the current goal on the terminal using write/1.        This may be useful if your "pretty print" routine (portray/1) is not        doing what you want.  The w option has no print depth limit.    x   backup        This is intended for use at Fail and Redo ports.  Control is        transferred back to the Call port of the most recent box whose call has        outstanding alternatives to try.        When used at Call and Exit ports, the x option has the same effect as        the c (creep) option.    +   spy this        This option places a spypoint on the procedure currently being shown.    -   nospy this        This option removes any spypoint from the procedure currently being        shown.    .   find definition        This option finds the place in the file where the procedure being        called is defined.    @   command        This option prompts for a single Prolog goal, which is executed as a        command without any variable results being shown.    ?   help        This is equivalent to the h option.    =   debugging        This option shows the current state of the debugger:  the spypoints        that have been set, and so forth.    < <n>        set depth        This option sets the current debugger print depth limit to n.  Setting        the depth to 0 makes the depth unlimited.