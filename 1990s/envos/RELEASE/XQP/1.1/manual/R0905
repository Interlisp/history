ref-9-5                    Xerox Quintus Prolog Reference Manual          Section 9-5: predicate_property(?PredSpec, ?PredProperty)If PredSpec is instantiated to the skeletal specification (see{manual(ref-2-1-1)}) of a loaded predicate, then predicate_property(PredSpec,PredProperty) successively unifies PredProperty with the various propertiesassociated with PredSpec.  Each loaded predicate will have one or more of theproperties 'compiled', 'interpreted', 'built_in', 'exported', or 'foreign'.Interpreted predicates can have either the 'dynamic' or 'multifile' property orboth, and compiled predicates can have the 'multifile' property.  Also, apredicate can have the 'exported' property if the predicate is on the publicpredicate list of its source module, and the 'imported_from(Module)' propertyif the predicate is imported into the source module from Module.If PredProperty is bound to a valid predicate property, thenpredicate_property(PredSpec, PredProperty) successively unifies PredSpec withthe skeletal specifications of all loaded predicates having PredProperty.  IfPredSpec is not a loaded predicate or PredProperty is not a valid predicateproperty, the call fails.  If both arguments are unbound, thenpredicate_property/2 can be used to backtrack through all predicates currentlyin Xerox Quintus Prolog and their corresponding properties.For example,            | ?- consult(user).            | :- dynamic p/1.            | p(a).            | end_of_file            [user consulted 0.066 sec 164 bytes]            yes            | ?- predicate_property(p(_), Property).            Property = dynamic ;            Property = interpreted ;            noAlso,             | ?- predicate_property(m:P, imported_from(_)).will backtrack through all the predicates P imported into module m from anymodule,             | ?- predicate_property(m1:P, imported_from(m2)).will backtrack through all the predicates P imported into module m1 from modulem2, and            | ?- predicate_property(m:P, exported).will backtrack through all the predicates P exported by module m.NOTES:   1. All dynamic predicates are currently interpreted even if the user      requested that they be compiled.   2. Since the atoms 'dynamic' and 'multifile' are declared as operators      with precedence greater than 999,                   | ?- predicate_property(X, dynamic).                  | ?- predicate_property(X, multifile).      will cause syntax errors.  The way to achieve the desired result is      to parenthesize the operators:                    | ?- predicate_property(X, (dynamic)).                  | ?- predicate_property(X, (multifile)).