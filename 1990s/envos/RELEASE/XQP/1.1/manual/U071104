user-7-11-4                      Xerox Quintus Prolog User's Guide                       Section 7-11-4: Using SpypointsA spypoint is placed on connects/2 to see if that procedure executes properlynow that it has been corrected.  Because the program is still failing, we cansurmise that one of the people can't attend the meeting for some reason.Therefore, a spypoint is also placed on travel_ok/3.  By placing a spypoint ontravel_ok/3, we hope to find out who can't attend the meeting; once we knowthat, we can trace the procedure in detail to find out why that person can'tattend.Setting these spypoints automatically sets the debugger to debug mode (we nolonger want to trace each procedure call).  The goal is retyped; and whenprompted for interaction the first three times, we direct the debugger to leap(l) to the next spypoint.At the procedure connects/2, we begin a detailed trace again.  The procedureexecutes successfully, so we remove the spypoint from connects/2 by typing aminus sign (-) when the debugger prompts for interaction.  We continue thedebugging process and find the last bug in the program:  the proceduretravel_ok/3, as it is currently defined, requires that people travel from onecity to another.  Therefore, it cannot be valid for people who don't need totravel because they live in the city where the meeting is to be held.  A clauseis added to the program to take care of that condition:              travel_ok(_, City, City).With the addition of this clause, it becomes possible for travel_ok/3 to besatisfied for people who live in the city where the meeting is to be held.The procedure travel_ok/3 is reloaded through the Emacs interface, and theoriginal goal is retyped; this time, it succeeds.