user-7-10                      Xerox Quintus Prolog User's Guide                  Section 7-10: Format of Debugging MessagesAs shown in the following debugging examples, the system displays a debuggingmessage on your terminal as it passes through each port of a procedure.NOTE:  All debugging messages are displayed on the terminal regardless of whereother Prolog output is going.  This allows you to debug a program whileinformation is being read from or written to files.A sample debugging message and a brief explanation of its symbols are shownbelow.  For more detailed information, see the Xerox Quintus Prolog ReferenceManual.** (23) 0 Call: (compiled): mymodule:foo(hello,there,_123) ?**          The first two characters indicate whether this is a spypoint and            whether this port is being entered after a 'skip'.  The possible            combinations are:    **  -   This is a spypoint. (In this example foo/3 has been spied.)    *>  -   This is a spypoint; you are returning from a 'skip'.     >  -   This is not a spypoint; you are returning from a 'skip'.        -   This is not a spypoint.  (For this condition, two blank            spaces are displayed at the left of the message.)(23)        The number in parentheses is the unique invocation identifier.            This identifies a particular call to the procedure.0           The next number is the current depth -- that is, the number of            direct ancestors this goal has.  The ancestors can be printed using            the 'g' debugging option.  The number 0 is always displayed if the            procedure is compiled.Call        The next word names the port being entered:  Call, Exit, Redo, or            Fail.(compiled)  The next parenthesized item, if present, will be '(compiled)' if            the procedure was compiled, or '(built-in)' if it implements a            built-in predicate.mymodule    If the procedure currently being debugged was loaded into a module            other than 'user', the module name will be displayed here, followed            by a colon.  See the chapter on modules in the Xerox Quintus Prolog            Reference Manual for more information.foo(hello,there,_123)            The goal is then printed so that its current instantiation state            can be seen.  (At Redo ports, the instantiation state shown is the            same as at the previous Exit.)?           The final '?' is the prompt indicating that you should type in one            of the option codes (see next section).There are a few basic built-in predicates for which information is notdisplayed because it is more convenient not to trace them.  These are:  true/0,otherwise/0, false/0, fail/0,'!', ';', ',', and '->'.  Also, the debugger doesnot show the calling of certain built-in predicates when they are typed at thetop level of Prolog.  These are predicates like spy/1, nodebug/0, and consult/1which are used for controlling the debugger or for loading Prolog code.However, the calling of these built-in predicates is shown when they are calledfrom within a program.