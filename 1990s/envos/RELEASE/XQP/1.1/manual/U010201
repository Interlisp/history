user-1-2-1                      Xerox Quintus Prolog User's Guide               Section 1-2-1: Entering Information into PrologYour newly-invoked Prolog is somewhat like a blank slate:  initially its database contains only certain system information that allows it to interpret thethings you type, but no information at all about your problem.  In order tosupply Xerox Quintus Prolog with information about the problem you are tryingto solve, you direct it to consult you for the information (you can also tellProlog to consult a file for the information it needs; this is described in{manual(user-3)}).  To do this, you type            | ?- consult(user).<CR>Prolog will respond with a prompt of a single vertical bar ( | ) followed by aspace.  Note that in order for the Prolog system to realize that you have givenit a command at the top-level prompt (| ?- ), you must end your command with afull-stop (a period followed by <CR>), or Prolog will just move the cursor tothe next line and wait for more input.  If you forget and type the <CR> beforethe period, type the period followed by another <CR>, and Prolog will proceedto process your command.At the vertical-bar prompt, you may now type information to Xerox QuintusProlog in the form of clauses.  Clauses, like sentences in normal English, endwith a period.  You may type multiple clauses during a single consultation, buteach should be followed by a <CR>.  For example, type the following clauses tothe vertical-bar prompt.  The system will respond to each clause with anothervertical bar.  To end the sequence of clauses, type "end_of_file."            | yellow(lemon).<CR>            | oval(lemon).<CR>            | oval(lime).<CR>            | green(lime).<CR>            | end_of_file.<CR>            [user consulted 0.334 sec 532 bytes]'yellow', 'green', and 'oval' are the names of predicates.  A predicate is alogical construct which can be true or false of a given item.  That is, apredicate is true for the items which share the property represented by itsname.  For example, the predicate-name 'oval' is true of the items in the set{lemon, lime}, which share the property of actually being oval items.Each of the predicates named above takes one argument.  For example, theargument to 'yellow' is 'lemon'.  We indicate that a predicate takes a givennumber of arguments by following the predicate name by a slash and theappropriate number; the predicate-names above will hereafter be written asyellow/1, oval/1, and green/1.  This is a way to distinguish predicate-namesfrom normal words.