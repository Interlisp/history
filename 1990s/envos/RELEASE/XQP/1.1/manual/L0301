lib-3-1                     Xerox Quintus Prolog Library Manual                Section 3-1: Introduction -- library(strings)Quintus Prolog has two data types which can be used to represent sequences ofcharacters.  For each sequence of up to N characters for someimplementation-defined limit (N is 255 in Xerox Quintus Prolog) there isexactly one atom with that character sequence as its name.  Further, each atomhas exactly one name.  Atoms provide a convenient and storage-efficient way ofhandling modest amounts of character data.  Two atoms can be compared foridentity very quickly using the built-in predicate '='/2.The second data type is "chars".  A convention in Prolog is that a list ofvalues all of which belong to the data type "thing" is said to be of type"things".  A further convention is that integers representing character codes(the range is 1..255 under UNIX; Xerox Quintus Prolog supports the XNScharacters) are said to be of type "char".  So a "chars" value is a (possiblyempty) list of character codes.  A list can be of any length.  Two lists can becompared for identity in time proportional to their length by using thebuilt-in predicate '='/2.Xerox Quintus Prolog has a third data type.  Interlisp-D has a "STRINGP" datatype, and this shows through in Prolog.  When possible, library predicatestaking a string argument will also accept an atom.  Some of them will accept anon-empty chars as well:  see the write-up of each individual predicate.  TheProlog strings library provides access to Interlisp-D strings mainly becausethey have two advantages over atoms:  they are reclaimed by the garbagecollector (which atoms are not), and they can be up to 65,535 characters long(while atoms can only have 255 characters in their names).A general characteristic of the operations in library(strings) is that if theymerely test one or more text objects (a text object is an atom) they willaccept any mix of atoms and strings, whereas if they may create new textobjects, either there is a separate predicate for each type of text object, orelse all the text arguments must be of the same type; consequently, the outputobject will be an atom unless the input objects are strings, in which case itwill be a string.This chapter describes how to use the predicates defined in library(strings).If you plan to do extensive text processing, you should consider using lists ofcharacter codes rather than atoms or strings for recognizing patterns and alsofor constructing new chars.  See the chapter on grammar rules in the XeroxQuintus Prolog Reference Manual for more about this facility.  It is highlyrecommended that you use grammar rules freely for list and text processing, andthat you always consider whether grammar rules can be used clearly toaccomplished a desired text processing effect before using the operations inlibrary(strings).