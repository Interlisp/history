user-7-3                      Xerox Quintus Prolog User's Guide               Section 7-3: The Compiler/Interpreter InterfaceLike DEC-10 Prolog, Xerox Quintus Prolog provides both an interpreter and acompiler.  There are a number of important differences, however.  Thoserelevant to porting are:   1. In Xerox Quintus Prolog, compiled and interpreted code can be freely      intermixed, with no need for public declarations.  However, public      declarations and mode declarations are ignored by Xerox Quintus      Prolog and need not be removed.   2. consult/1 has been changed in Xerox Quintus Prolog to behave like      reconsult/1 in DEC-10 Prolog.  That is, the procedures defined in a      consult/1 operation in Xerox Quintus Prolog replace (rather than      extend) any previous definitions for those procedures.  (Note that      under Xerox Quintus Prolog reconsult/1 behaves precisely like      consult/1.)  This change makes consult/1 much more like compile/1 so      that alternating between consulting and compiling a piece of code is      simpler.  It also means that spreading the definition of a procedure      across more than one file will no longer work; a style warning will      occur if you try to do this.  (NOTE:  Xerox Quintus Prolog will      accept the definition of a procedure in more than one file if the      procedure has been declared multifile.  For more information on the      multifile declaration, see the Xerox Quintus Prolog Reference      Manual.)   3. In DEC-10 Prolog you can use the assertion and retraction      predicates, and clause/[2,3], on interpreted code but not on      compiled code.  In Xerox Quintus Prolog, you can use these      predicates only on dynamic procedures.  Regardless of whether a      procedure is compiled or consulted, it can be made dynamic by      preceding it with a declaration of the form                  :- dynamic Name/Arity.      You do not need to have a dynamic declaration for a procedure which      is only to be asserted, retracted, or matched using clause/[2,3].      However, it is recommended that you have one if the procedure is to      be called, since you may get an "unknown procedure" error (followed      by a trap to the debugger) if the procedure is called before it is      known to be dynamic.