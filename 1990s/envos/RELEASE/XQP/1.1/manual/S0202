sysdep-2-2            Xerox Quintus Prolog System-Dependent Features Manual              Section 2-2: Access to Lisp Variables from PrologThe built-in predicates gettopval/2 and settopval/3 enable you to fetch and setLisp global variables from within Prolog.  The format of these predicates isgettopval(+VariableName, -CurrentValue)settopval(+VariableName, +NewValue)gettopval/2 unifies CurrentValue with the global value of the Lisp variablenamed by VariableName.  settopval/2 sets the global value of the Lisp variablenamed by VariableName to NewValue.  Both predicates fail if VariableName is notbound to an atom (or any Lisp symbol; see the discussion of find_symbol/3above).  NewValue may be any Prolog term, except a variable, since Prologvariables cannot be passed to Lisp.  gettopval/2 fails if the named Lispvariable is unbound.These predicates may be used to maintain persistent global information moreefficiently than asserting and retracting clauses.  They may also be used tocommunicate information between Lisp and Prolog.  When used in the lattercapacity, it may be necessary to access Lisp variables in packages other thanXQP.  In this case, these predicates may be used in conjunction withfind_symbol/3.  For example:find_symbol('*EVALHOOK*', 'CL', Sym), gettopval(Sym, Hook).would bind Hook to the value of the symbol CL:*EVALHOOK*.