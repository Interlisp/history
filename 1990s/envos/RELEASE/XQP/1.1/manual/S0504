sysdep-5-4            Xerox Quintus Prolog System-Dependent Features Manual                        Section 5-4: Improved DebuggerThere are a number of improvements to the debugger as compared to that ofDEC-10 Prolog:   - trace/0 sets a permanent state in which the debugger will start     creeping (single-stepping) on every goal typed at the top level.     debug/0 sets the state so that the debugger begins by leaping on     every goal typed at the top level.  notrace/0 is a new predicate     identical to nodebug/0, which turns the debugger off.  These changes     justify the top-level use of the debugger.   - Turning the debugger off does not remove spypoints, although no     information will be shown about these spypoints while debugging is     off.  A new predicate, nospyall/0, is provided for removing all     spypoints.   - Spypoints can be set on compiled procedures, although ancestor and     depth information will not be available at such spypoints.   - Debugger messages indicate if a procedure is compiled, or is a     built-in procedure.   - The 'r' (retry) option is more robust; in DEC-10 Prolog it sometimes     behaves strangely when interpreted and compiled code are mixed.   - By default the debugger only prints structures down to 10 levels deep     -- any deeper structure is represented by '...'.  This makes it much     easier to debug programs which manipulate large data structures.  The     print depth limit can be reset or removed using the '<' option.   - There are some additional debugging options:         +   put a spypoint on the procedure currently being shown         -   remove any spypoint on the procedure currently being shown         =   show the current state of the debugger   - Unknown procedure trapping (see the Xerox Quintus Prolog Reference     Manual) works consistently (in DEC-10 Prolog its behavior depends on     whether or not debugging is switched on, and it does not work for     compiled code).  Also, there is no loss of efficiency incurred by     using this facility.  It is on by default.   - leash/1 now takes a more convenient form of argument (as well as     continuing to support the DEC-10 Prolog argument forms).  To leash a     set of ports, give leash/0 a list of the ports you want leashed; for     example,                  | ?- leash([call,redo]).     will set leashing to its default under DEC-10 Prolog.  The default     under Xerox Quintus Prolog is leashing on all four ports.