sysdep-3-1-2            Xerox Quintus Prolog System-Dependent Features Manual                  Section 3-1-2: statistics(?Keyword, -List)statistics(Keyword, List) is most often used with Keyword instantiated to akeyword such as 'runtime' and List unbound.  Its effect is to bind List to alist of statistics related to the keyword.  statistics/2 is used in programsdepend on current runtime statistical information for their control strategies,and in programs which choose to format and write out their own statisticalsummaries.The keys and values for statistics/2 are summarized below.  The keywords 'core'and 'heap' are included to retain compatibility with DEC-10 Prolog.  Times aregiven in milliseconds and sizes are given in bytes.-------------------------------------------------------------------------------Keyword                            Listruntime         [cpu time used by Prolog, cpu time since                 last call to statistics/[0,2]]memory          [total virtual memory, 0]core            (same as memory)program         [program space in use, program space free]heap            (same as program)global_stack    [global stack in use, global stack free]local_stack     [local stack in use, local stack free]trail           [size of trail, 0]garbage_collection                [number of GCs, freed bytes, time spent]stack_shifts    [number of global stack shifts, number of                 local stack shifts, time spent shifting]-------------------------------------------------------------------------------Note that for the keywords 'memory' and 'trail', the second element of thereturned list is always 0.  This is for DEC-10 Prolog compatibility only; 0 isthe most appropriate value in the Xerox Quintus Prolog system for thequantities which would be returned by DEC-10 Prolog as the second elements ofthe 'memory' and 'trail' lists.To see an example of the use of each of these keywords, type             | ?- statistics (K, L).and then repeatedly type a semicolon (;) to backtrack through all the possiblekeywords.  As an additional example, to report information on the runtime of apredicate p/0, add the following to your program:            :- statistics(runtime, _),               p,               statistics(runtime, [_,T]),               format('p took ~3d sec.~n', [T]).