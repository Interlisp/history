ref-3-2-2                    Xerox Quintus Prolog Reference Manual                      Section 3-2-2: Module DeclarationsA module declaration has the form             :- module(ModuleName, PublicPredList).Such a declaration must be the first term in a file, and declares that file tobe a module-file.ModuleName must be an atom.  PublicPredList must be a list of predicatespecifications of the form Name/Arity.Before loading a module-file, the associated module is reinitialized:  anypredicates previously defined in that module are abolished, and any predicatespreviously imported into that module are forgotten by the module.If a module of the same name has previously been loaded from a differentmodule-file, a warning is printed and you are given the option of abandoningthe load.  Often this means only that the absolute name of the module-file haschanged; in this case, the warning can safely be ignored.  The otherpossibility is that you have two module-files trying to define the same module.In this case you may not want to override the previous definition of themodule.Normally, a module-file can be reloaded after editing with no need to reloadany other modules.  However, when a module-file is reloaded after itsPublicPredList has been changed, any modules that import predicates from it mayhave become inconsistent.  This is because a module is associated with apredicate at load time, rather than run time.  Thus, other modules may refer topredicates in a module-file that are no longer public.  In the case ofmodule-importation (where all, rather than specific, public predicates of amodule are imported), it is possible that some predicates in the importingmodule should now refer to a newly-public predicate but do not.  Whenever thepossibility of such inconsistency arises, you will be warned at the end of theload that certain modules need to be reloaded.  This warning will be repeatedat the end of each subsequent load until those modules have been reloaded.