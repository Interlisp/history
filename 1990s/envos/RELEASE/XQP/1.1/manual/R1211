ref-12-11                    Xerox Quintus Prolog Reference Manual       Section 12-11: Modules and Loading through the Editor InterfaceWhen you (re)load some Prolog code through the editor interface, the moduleinto which the code is to be loaded is selected as follows.     - if the code begins with a module declaration, this is exactly the     same as loading that text from a file using compile/1 or consult/1;   - otherwise, if the file containing the code has previously been     associated with some module other than 'user', the code is reloaded     into that module;   - otherwise, if the type-in module is 'user', the code is loaded into     'user';   - otherwise, you are prompted to confirm that you wish to load the code     into the type-in module -- if not, the load is abandoned.  Note that when a fragment of code has been loaded into a particular moduleother than 'user', the editor will subsequently insist that that code belongsto that module.  In order to change this, the entire module must be reloaded.When a module declaration is processed, the module is reinitialized; allpredicates previously defined in that module are abolished, and all predicatespreviously imported into that module are forgotten.  Therefore, when only partof a module-file is reloaded through the editor interface, that part should notinclude the module declaration.  A module declaration should only be reloadedwhen the entire module-file is being loaded.Loading an entire module through the editor interface is like loading themodule via compile/1 or consult/1 in that it causes the loaded module to beimported into the type-in module only if there are no predicates currentlyimported from that module into the type-in module.  The only difference is thatin the case in which you load the module through the editor interface you willbe prompted for confirmation before the importation takes place.  This isbecause there are situations in which you might want to reload a module via theeditor interface without importing it into the type-in module; that is,situations in which you would not want to allow the importation to happen.  Forexample, suppose that the type-in module is the default 'user', and that youhave been modifying a module M1 from which another module M2 importspredicates, but from which 'user' does not import anything.  In this case, youmay want to reload M1, using the editor interface, without importing it into'user'.When a file that is not a module-file is loaded into several different modules,reloading all or part of it through the editor interface affects only themodule into which it was most recently loaded.