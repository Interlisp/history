user-2-1-3                      Xerox Quintus Prolog User's Guide                            Section 2-1-3: PrologProlog has special symbols, analogous to those in predicate logic, for thelogical constructs "if" and "and".  The symbol for "if" is " :- ", (a colonfollowed by a hyphen or minus sign) and the symbol for "and" is " , " (acomma).  These are the only symbols that are necessary to write simple logicprograms.  Thus, our example can now be written as a legal Prolog clause:            drive_to_work(tuesday) :-                it_is_cold(tuesday),                it_is_raining(tuesday).Notice that the clause ends with a period just like an English sentence.  Thisrule, once loaded into the Prolog data base (more on this in{manual(user-2-2-1)}), will allow the user to find out whether or not to driveto work Tuesday by asking for an answer to the question (or query -- noticethat queries in Prolog, unlike in English, end with a period instead of aquestion mark)            drive_to_work(tuesday).First, the system will look for the fact 'drive_to_work(tuesday)' in its database.  (If such a fact is found, it means that the system already knows thatyou should drive to work Tuesday, and you have your answer.)  Since there is nomatching fact, the system will attempt to prove 'drive_to_work(tuesday)' usingother facts and rules in its data base.  To do this, it will look for a rulewhose head matches 'drive_to_work(tuesday)'.  The reasoning is as follows:  ifa rule whose head (or conclusion) is 'drive_to_work(tuesday)' is found, thenthe way to conclude 'drive_to_work(tuesday)' is to satisfy the premises in thebody of that rule, thus allowing us to deduce the conclusion.  The system willfind the rule above, and attempt to use this rule to prove that'drive_to_work(tuesday)' is true.  To do this, it will note that'drive_to_work(tuesday)' is true if both 'it_is_cold(tuesday)' and'it_is_raining(tuesday)' are true.Next, the system will attempt to find a fact in the data base exactly matching'it_is_cold(tuesday)'.  If such a fact exists, it will note this and continue,attempting to prove 'it_is_raining(tuesday)'.  If there is a matching fact inthe data base, then both premises have been satisfied, and the system willreturn with the answer "yes", indicating that you should indeed drive to workTuesday.If no statement is found exactly matching 'it_is_cold(tuesday)', the systemwill search through its data base in an attempt to find a rule similar to theone above which proves that it is cold on Tuesday.  Assuming that the aboverule is the only rule in the data base, no rule for it_is_cold/1 will be found,the clause will fail, and the system will return with the answer "no",indicating not that you should not drive to work Tuesday, but that the systemdoes not have enough information to conclude that you should.This distinction is important.  To reiterate:  Prolog can prove only thatsomething is true.  If the system fails to prove a given proposition, thisindicates not that the proposition is false, but that it is not provable withthe given information.