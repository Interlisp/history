;;; File   : MATH.LSP;;; Author : Richard A. O'Keefe;;; Purpose: support for library(math);;; Updated: Friday September 11th, 1987.;;; There are four magic numbers in this file:;;;	0.6931471805599453094172321	"ln(2.0)";;;	2.441408E-4			"1.0+X*X=1.0";;;	4.096E3				"1+0+1.0/(X*X) = 1.0";;;	8.4				"tanh(X)=1.0";;; All of the uses of QUOTIENT are really FQUOTIENT, but all;;; except the ones in QP.HYPOT have at least one argument which;;; is known to be floating-point already.(CL:IN-PACKAGE "IL")(CL:DEFUN SINH (X &AUX NEG)    (if (SETQ NEG (MINUSP X)) then	(SETQ X (MINUS X)))    (SETQ X (ANTILOG X))    (SETQ X (TIMES (DIFFERENCE (QUOTIENT 1.0 X) X) 0.5))    (if NEG then X else (MINUS X)))(CL:DEFUN COSH (X)    (SETQ X (ANTILOG (ABS X)))    (TIMES (PLUS (QUOTIENT 1.0 X) X) 0.5))(CL:DEFUN TANH (X &AUX NEG)    (if (SETQ NEG (MINUSP X)) then	(SETQ X (MINUS X)))    (if (GREATERP X 8.4) then	(SETQ X 1.0)    else	(SETQ X (ANTILOG (TIMES -2.0 X)))	(SETQ X (QUOTIENT (DIFFERENCE 1.0 X) (PLUS 1.0 X)))    )    (if NEG then (MINUS X) else X))(CL:DEFUN ASINH (Z &AUX NEG)    (if (SETQ NEG (MINUSP Z)) then	(SETQ Z (MINUS Z)))    (SETQ Z (if (GEQ Z 1.0) then	(if (GEQ Z 4.096E3) then	    (PLUS (LOG Z) 0.6931471805599453094172321)	else	    (PLUS (LOG (PLUS (SQRT (PLUS (QUOTIENT 1.0 (TIMES Z Z)) 1.0)) 1.0))		  (LOG Z))	)    else	(if GEQ Z 2.441407E-4) then	    (LOG (PLUS (SQRT (PLUS (TIMES Z Z) 1.0)) Z))	else	    (LOG (PLUS Z 1.0))	)    )    (if NEG then (MINUS Z) else Z))(CL:DEFUN ACOSH (Z)    (if (LESSP Z 1.0) then	NIL    elseif (LESSP Z 4.096E3) then	(PLUS (LOG (PLUS (SQRT (PLUS (QUOTIENT -1.0 (TIMES Z Z)) 1.0)) 1.0))	      (LOG Z))    else	(PLUS (LOG Z) 0.6931471805599453094172321)    ))(CL:DEFUN ATANH (Z &AUX NEG)    (if (SETQ NEG (MINUSP Z)) then	(SETQ Z (MINUS Z)))    (if (GREATERP Z 1.0) then	NIL    else	(if (GREATERP Z .9999998) then	    (SETQ Z -8.4)	else	    (SETQ Z (TIMES (LOG		(QUOTIENT (DIFFERENCE 1.0 Z) (PLUS 1.0 Z))) .5))	)	(if NEG then Z else (MINUS Z))    ))(CL:DEFUN QP.HYPOT (X Y)    ;;  (SQRT (PLUS (TIMES X X) (TIMES Y Y)))    ;;  protecting against overflow and underflow    ;;  Note the use of FQUOTIENT: X and Y might be integers.    (SETQ X (ABS X))    (SETQ Y (ABS Y))    (if (GEQ X Y) then	(SETQ Y (FQUOTIENT Y X))	(if (LESSP Y 2.441407E-4) then	    (FLOAT X)	else	    (TIMES (SQRT (PLUS (TIMES Y Y) 1)) X)	)    else	(SETQ X (FQUOTIENT X Y))	(if (LESSP X 2.441407E-4) then	    (FLOAT Y)	else	    (TIMES (SQRT (PLUS (TIMES X X) 1)) Y)	)    ))(CL:DEFUN QP.FLOOR (X)    ;;  Return largest integer not greater than X.        ;;  Substantially faster than CL:FLOOR in this case.    (LET ((I (FIX X)))	(if (GREATERP I X) then (SUB1 I) else I)    ))(CL:DEFUN QP.CEIL (X)    ;;  Return smallest integer not less than X.    ;;  Substantially faster than CL:CEILING in this case.    (LET ((I (FIX X)))	(if (LESSP I X) then (ADD1 I) else I)    ))STOP