%   Module : math%   Author : Evan Tick%   Updated: 2/10/87%   Purpose: Interface to Unix Math library:- module(math, [	exp/2,	log/2,	log10/2,	pow/3,	sqrt/2,	abs/2,		fabs/2,		cabs/2,		hypot/3,	floor/2,	ceil/2,		round/2,	trunc/2,	sin/2,		asin/2,		sinh/2,		asinh/2,	cos/2,		acos/2,		cosh/2,		acosh/2,	tan/2,		atan/2,		tanh/2,		atanh/2,	atan2/3,	max/3,			%  This is defined here.	min/3			%  This is defined here.   ])./*  The UNIX version used to include some of the Bessel functions:    [j0,j1,jn, y0,y1,yn]/2.  These functions are not available in    this release.  ln(gamma(X)) was available under the name    gamma/2, which was copied from the C library, but was never a    good idea.  (I'm used to LnGamma as the name, myself.)  Other    obvious things, like Erf, were not available because they were    not available in the C library.  They aren't available in this    release either.    Some releases of this file contain ffloor/2 and fceil/2, which    are versions of floor/2 and ceil/2 which always return their    result in floating-point.  This is not terribly useful.  Note    that the implementation of floor/2 and ceil/2 here calls Lisp    functions QP.FLOOR and QP.CEIL from the MATH.LSP file, which    are considerably faster than CL:FLOOR and CL:CEILING for this    particular use.  round/2 and trunc/2 call FIXR and FIX.*//* ----------------------------------------------------------------------     Declare Prolog interface predicates.   ---------------------------------------------------------------------- */:- lisp_predicate('MAX2',	max(+,+,[-])).:- lisp_predicate('MIN2',	min(+,+,[-])).:- lisp_predicate('ANTILOG',	exp(+,[-])).:- lisp_predicate('LOG',	log(+,[-])).:- lisp_predicate('EXPT',	pow(+,+,[-])).:- lisp_predicate('SQRT',	sqrt(+,[-])).:- lisp_predicate('ABS',	abs(+,[-])).:- lisp_predicate('SIN',	sin(+,+,[-])).:- lisp_predicate('COS',	cos(+,+,[-])).:- lisp_predicate('TAN',	tan(+,+,[-])).:- lisp_predicate('ARCSIN',	asin(+,+,[-])).:- lisp_predicate('ARCCOS',	acos(+,+,[-])).:- lisp_predicate('ARCTAN',	atan(+,+,[-])).:- lisp_predicate('ARCTAN2',	atan2(+,+,+,[-])).:- lisp_predicate('FIXR',	round(+,[-])).:- lisp_predicate('FIX',	trunc(+,[-]))./*  The following functions come from MATH.LSP  */:- lisp_predicate('QP.CEIL',	ceil( +,[-])).:- lisp_predicate('QP.FLOOR',	floor(+,[-])).:- lisp_predicate('SINH',	sinh(+,[-])).:- lisp_predicate('COSH',	cosh(+,[-])).:- lisp_predicate('TANH',	tanh(+,[-])).:- lisp_predicate('ASINH',	asinh(+,[-])).:- lisp_predicate('ACOSH',	'ACOSH'(+,[-])).:- lisp_predicate('ATANH',	'ATANH'(+,[-])).:- lisp_predicate('QP.HYPOT',	hypot(+,+,[-])).:- load_foreign_files([library('MATH')], []).log10(X, Base10Log) :-	log(X, NaturalLog),	Base10Log is NaturalLog*0.43429448.fabs(X, Abs) :-	Y is float(X),	abs(Y, Abs).cabs(complex(X,Y), Abs) :-	hypot(X, Y, Abs).sin(Radians, Sine) :-	sin(Radians, 'T', Sine).cos(Radians, CoSine) :-	cos(Radians, 'T', CoSine).tan(Radians, Tangent) :-	tan(Radians, 'T', Tangent).asin(Radians, ArcSine) :-	asin(Radians, 'T', ArcSine).acos(Radians, ArcCoSine) :-	acos(Radians, 'T', ArcCoSine).atan(Radians, ArcTangent) :-	atan(Radians, 'T', ArcTangent).atan2(Sine, CoSine, ArcTangent) :-	atan2(Sine, CoSine, 'T', ArcTangent).acosh(Z, X) :-	Z >= 1.0,	'ACOSH'(Z, X).atanh(Z, X) :-	-1.0 =< Z, Z =< 1.0,	'ATANH'(Z, X).