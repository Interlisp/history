%   Package: ctr%   Author : Richard A. O'Keefe%   Updated: 10/3/86%   Purpose: Arity/Prolog "counter" operations.:- module(ctr, [	inc/2,		% inc(X, Y)	  <=> Y = X+1	dec/2,		% dec(X, Y)	  <=> Y = X-1	ctr_set/2,	% ctr_set(Ctr, N) <=> ctr[Ctr] := N	ctr_set/3,	% ctr_set(Ctr, N, Old); Old is old value	ctr_inc/1,	% ctr_inc(Ctr)    <=> ctr[Ctr] += 1	ctr_inc/2,	% ctr_inc(Ctr, N) <=> ctr[Ctr] += N	ctr_inc/3,	% ctr_inc(Ctr, N, Old); Old is old value	ctr_dec/1,	% ctr_dec(Ctr)    <=> ctr[Ctr] -= 1	ctr_dec/2,	% ctr_dec(Ctr, N) <=> ctr[Ctr] -= N	ctr_dec/3,	% ctr_dec(Ctr, N, Old); Old is old value	ctr_is/2	% ctr_is( Ctr, N) <=> N is ctr[Ctr]   ])./*  These predicates are badly thought out.  There isn't really    a great deal of point to inc/2 and dec/2; why not use is/2    if you want one-way arithmetic, or plus/3 or succ/2 if you    want a relational form?    The Arity/Prolog manual does not state what the effect of    the ctr_xxx predicates is when the Ctr argument is not in    the range 0..31.  For my convenience, I have ruled that the    argument is always taken modulo 32, so that any pair of    integers will always be acceptable as arguments, and have    left it to the foreign function interface to reject non-    integral arguments.    Because I find inc/2 and dec/2 so offensive, I have taken    the liberty of making them bidirectional.  Why not?    Note that either clause of inc/2 could have come first.    The predicates ctr_{set,inc,dec}/3 do not exist in Arity Prolog,    but they are quite useful.  After performing their side effect,    they unify their third argument with the OLD value of the counter.*/inc(M, N) :-	integer(M),	!,	N is M+1.inc(M, N) :-	integer(N),	!,	M is N-1.dec(M, N) :-	integer(M),	!,	N is M-1.dec(M, N) :-	integer(N),	!,	M is N+1.ctr_inc(Counter) :-	ctr_inc(Counter, 1, _).ctr_dec(Counter) :-	ctr_dec(Counter, 1, _).:- lisp_predicate('QP.CTR.SET', ctr_set(+,+,[-])).:- lisp_predicate('QP.CTR.SET', ctr_set(+,+)).:- lisp_predicate('QP.CTR.INC', ctr_inc(+,+,[-])).:- lisp_predicate('QP.CTR.INC', ctr_inc(+,+)).:- lisp_predicate('QP.CTR.DEC', ctr_dec(+,+,[-])).:- lisp_predicate('QP.CTR.DEC', ctr_dec(+,+)).:- lisp_predicate('QP.CTR.VAL', ctr_is(+,[-])).:- load_foreign_files([library('CTR')], []).