%   Package: setof%   Author : Richard A. O'Keefe%   Updated: 8/28/87%   Defines: improved versions of setof and bagof%   Adapted from shared code written by the same author; all changes%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved./*  This file defines two predicates which act like setof/3 and bagof/3.    I have seen the code for these routines in Dec-10 and in C-Prolog,    but I no longer recall it, and this code was independently derived    in 1982 by me and me alone.    Most of the complication comes from trying to cope with free variables    in the Filter; these definitions actually enumerate all the solutions,    then group together those with the same bindings for the free variables.    There must be a better way of doing this.  I do not claim any virtue for    this code other than the virtue of working.  In fact there is a subtle    bug: if setof/bagof occurs as a data structure in the Generator it will    be mistaken for a call, and free variables treated wrongly.  Given the    current nature of Prolog, there is no way of telling a call from a data    structure, and since nested calls are FAR more likely than use as a    data structure, we just put up with the latter being wrong.  The same    applies to negation.    Would anyone incorporating this in their Prolog system please credit    both me and David Warren;  he thought up the definitions, and my    implementation may owe more to subconscious memory of his than I like    to think.  At least this ought to put a stop to fraudulent claims to    having bagof, by replacing them with genuine claims.    Thanks to Dave Bowen for pointing out an amazingly obscure bug: if    the Template was a variable and the Generator never bound it at all    you got a very strange answer!  Now fixed, at a price.    Two new predicates were introduced in April 1986.  They are	set_of_all(Template, Goal, Set)	bag_of_all(Template, Goal, Bag)    The names are meant to suggest that these routines are a cross    between set_of/bag_of and findall.  What this means is that they    are happy to return an empty list of solutions (as findall is),    but that they have the same interpretation of free variables as    set_of/3 and bag_of/3.  How are these two statements resolved?    By *checking* that there are NO free variables in Goal, which    is the only time that findall/3 ever really makes sense.  (Yes,    I do know what I'm talking about.)  The cost of this check is    typically slight.      Two new predicates were introduced in August 1987.  They are	grouped_set_of(GroupVars, Template, Goal, Set)	grouped_bag_of(GroupVars, Template, Goal, Bag)    These routines resemble setof/3 and bagof/3 except that they    use a different convention for identifying which variables are    the "free" variables to be enumerated by the routine and which    variables are the "existentially quantified" variables which    are in effect to be ignored.  setof/3 and and bagof/3 (and the    other routines in this file) mark the existentially quantified    variables specially.  These two predicates mark the free    variables specially.  In particular, if GroupVars contains no    variables, grouped_bag_of/4 is identical in its effect to    findall/3.  grouped_set_of/4 is analogous to	SELECT Template FROM Goal GROUP BY GroupVars    in a data-base query language.*/:- module(setof, [	bag_of/3,		%   Like bagof (Dec-10 manual p52)	bag_of_all/3,		%   bag_of/findall hybrid.	grouped_bag_of/4,	%   bag_of, but opposite marking	set_of/3,		%   Like setof (Dec-10 manual p51)	set_of_all/3,		%   set_of/findall hybrid.	grouped_set_of/4	%   set_of, but opposite marking   ]).:- use_module(library(freevars), [	free_variables/4,	%   find unquantified variables	term_variables/3	%   find all variables   ]),   use_module(library(findall),	[	save_instances/2,	%   just for us & foreach	list_instances/2	%   just for us   ]).:- meta_predicate	bag_of(+, 0, ?),	bag_of_all(+, 0, ?),	grouped_bag_of(+, +, 0, ?),	set_of(+, 0, ?),	set_of_all(+, 0, ?),	grouped_set_of(+, +, 0, ?),	bag_of(+, +, 0, ?).	%   The kernel.:- mode	concordant_subset(+, +, -),	concordant_subset(+, +, -, -),	concordant_subset(+, +, +, +, -),	list_instances(+, +, +, -),	list_instances(+, +, +, +, -),	replace_key_variables(+, +, +).sccs_id('"@(#)87/08/28 setof.pl	10.2"').%   set_of(Template, Generator, Set)%   finds the Set of instances of the Template satisfying the Generator.%   The set is in ascending order (see compare/3 for a definition of%   this order) without duplicates, and is non-empty.  If there are%   no solutions, set_of fails.  set_of may succeed more than one way,%   binding free variables in the Generator to different values.  This%   predicate is defined on p51 of the Dec-10 Prolog manual.set_of(Template, Filter, Set) :-	bag_of(Template, Filter, Bag),	sort(Bag, Set).%   set_of_all(Template, Generator, Set)%   is like set_of, but (like not/1), checks that there are no free%   variables.  We could have called bag_of_all/3 the way that set_of%   calls bag_of/2, but this way we get a more precise error message.set_of_all(Template, Generator, Set) :-	free_variables(Generator, Template, [], Vars),	Vars \== [],	format(user_error,	    '~N! free variables ~p~n! in goal ~p~n',	    [Vars,set_of_all(Template,Generator,Set)]),	break, fail.set_of_all(Template, Generator, Set) :-	save_instances(-Template, Generator),	list_instances([], Bag),	sort(Bag, Set).%   grouped_set_of(GroupVars, Template, Generator, Set)%   is like set_of/3, but instead of marking existential variables%   with the ^ existential quantifier and having the grouping%   variables be everything else, this version marks the free%   variables by listing them in the GroupVars argument, and every%   variable of the Generator which doesn't appear in GroupVars or%   Template is implicitly taken to be existential.  A consequence%   of the way this is done is that a variable can appear in BOTH%   GroupVars and Template, and GroupVars "wins".grouped_set_of(GroupVars, Template, Generator, Solutions) :-	grouped_bag_of(GroupVars, Template, Generator, Instances),	sort(Instances, Solutions).%   bag_of(Template, Generator, Bag)%   finds all the instances of the Template produced by the Generator,%   and returns them in the Bag in they order in which they were found.%   If the Generator contains free variables which are not bound in the%   Template, it assumes that this is like any other Prolog question%   and that you want bindings for those variables.  (You can tell it%   not to bother by using existential quantifiers.)%   bag_of records three things under the key '.':%	the end-of-bag marker	       -%	terms with no free variables   -Term%	terms with free variables   Key-Term%   The key '.' was chosen on the grounds that most people are unlikely%   to realise that you can use it at all, another good key might be ''.%   The original data base is restored after this call, so that set_of%   and bag_of can be nested.  If the Generator smashes the data base%   you are asking for trouble and will probably get it.%   The second clause is basically just findall, which of course works in%   the common case when there are no free variables.bag_of(Template, Generator, Bag) :-	free_variables(Generator, Template, [], Vars),	bag_of(Vars, Template, Generator, Bag).bag_of([], Template, Generator, Bag) :- !,	save_instances(-Template, Generator),	list_instances([], Bag),	Bag \== [].bag_of(Vars, Template, Generator, Bag) :-	Key =.. [.|Vars],	functor(Key, ., N),	save_instances(Key-Template, Generator),	list_instances(Key, N, [], OmniumGatherum),	keysort(OmniumGatherum, Gamut), !,	concordant_subset(Gamut, Key, Answer),	Bag = Answer.%   bag_of_all(Template, Generator, Bag)%   is like bag_of, but (like not/1), checks that there are no free%   variables.bag_of_all(Template, Generator, Bag) :-	free_variables(Generator, Template, [], Vars),	Vars \== [],	format(user_error,	    '~N! free variables ~p~n! in goal ~p~n',	    [Vars,bag_of_all(Template,Generator,Bag)]),	break, fail.bag_of_all(Template, Generator, Bag) :-	save_instances(-Template, Generator),	list_instances([], Bag).%   grouped_bag_of(GroupVars, Template, Generator, Bag)%   is like bag_of/3, but instead of marking existential variables%   with the ^ existential quantifier and having the grouping%   variables be everything else, this version marks the free%   variables by listing them in the GroupVars argument, and every%   variable of the Generator which doesn't appear in GroupVars or%   Template is implicitly taken to be existential.  A consequence%   of the way this is done is that a variable can appear in BOTH%   GroupVars and Template, and GroupVars "wins".  If there are no%   variables in GroupVars, this is identical to findall/3 except%   for refusing to generate the empty bag.grouped_bag_of(GroupVars, Template, Generator, Bag) :-	term_variables(GroupVars, [], Vars),	bag_of(Vars, Template, Generator, Bag).%   list_instances(Key, NVars, BagIn, BagOut)%   pulls all the Key-Template instances out of the data base until%   it hits the - marker.  The Generator should not touch recordx(.,_,_).%   Note that asserting something into the data base and pulling it out%   again renames all the variables; to counteract this we use replace_%   key_variables to put the old variables back.  Fortunately if we%   bind X=Y, the newer variable will be bound to the older, and the%   original key variables are guaranteed to be older than the new ones.%   This replacement must be done @i<before> the keysort.list_instances(Key, NVars, OldBag, NewBag) :-	recorded(., Term, Ref),	erase(Ref), !,		%  must not backtrack!	list_instances(Term, Key, NVars, OldBag, NewBag).list_instances(-, _, _, AnsBag, AnsBag) :- !.list_instances(NewKey-Term, Key, NVars, OldBag, NewBag) :-	replace_key_variables(NVars, Key, NewKey), !,	list_instances(Key, NVars, [NewKey-Term|OldBag], NewBag).%   There is a bug in the compiled version of arg in Dec-10 Prolog,%   hence the rather strange code.  Only two calls on arg are needed%   in Dec-10 interpreted Prolog, C-Prolog, or Quintus Prolog.replace_key_variables(0, _, _) :- !.replace_key_variables(N, OldKey, NewKey) :-	arg(N, NewKey, Arg),	nonvar(Arg), !,	M is N-1,	replace_key_variables(M, OldKey, NewKey).replace_key_variables(N, OldKey, NewKey) :-	arg(N, OldKey, OldVar),	arg(N, NewKey, OldVar),	M is N-1,	replace_key_variables(M, OldKey, NewKey).%   concordant_subset([Key-Val list], Key, [Val list]).%   takes a list of Key-Val pairs which has been keysorted to bring%   all the identical keys together, and enumerates each different%   Key and the corresponding lists of values.concordant_subset([Key-Val|Rest], Clavis, Answer) :-	concordant_subset(Rest, Key, List, More),	concordant_subset(More, Key, [Val|List], Clavis, Answer).%   concordant_subset(Rest, Key, List, More)%   strips off all the Key-Val pairs from the from of Rest,%   putting the Val elements into List, and returning the%   left-over pairs, if any, as More.concordant_subset([Key-Val|Rest], Clavis, [Val|List], More) :-	Key == Clavis,	!,	concordant_subset(Rest, Clavis, List, More).concordant_subset(More, _, [], More).%   concordant_subset/5 tries the current subset, and if that%   doesn't work if backs up and tries the next subset.  The%   first clause is there to save a choice point when this is%   the last possible subset.concordant_subset([],   Key, Subset, Key, Subset) :- !.concordant_subset(_,    Key, Subset, Key, Subset).concordant_subset(More, _,   _,   Clavis, Answer) :-	concordant_subset(More, Clavis, Answer).