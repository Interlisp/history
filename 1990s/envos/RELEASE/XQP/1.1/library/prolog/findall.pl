%   Package: findall%   Author : R.A.O'Keefe%   Updated: 3/26/87%   Defines: the 'findall' routines for finding all solutions%   Adapted from shared code written by the same author; all changes%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved.:- module(findall, [	findall/3,		%   Same effect as C&M p152	findall/4,		%   A variant I have found very useful	save_instances/2,	% **FOR SETOF/FOREACH ONLY	list_instances/2	% **FOR SETOF/FOREACH ONLY   ]).:- meta_predicate	findall(+, 0, ?),	findall(+, 0, +, ?),	save_instances(+, 0).:- mode	list_instances(+, -),	list_instances(+, +, -).sccs_id('"@(#)87/03/26 findall.pl	98.1"').%   findall(Template, Generator, List)%   is a special case of bagof, where all free variables in the%   generator are taken to be existentially quantified.  It is%   described in Clocksin & Mellish on p152.  The code they give%   has a bug (which the Dec-10 bagof and setof predicates share)%   which this has not.findall(Template, Generator, List) :-	save_instances(-Template, Generator),	list_instances([], List).%   findall(Template, Generator, SoFar, List) :-%	findall(Template, Generator, Solns),%	append(Solns, SoFar, List).%   But done more cheaply.findall(Template, Generator, SoFar, List) :-	save_instances(-Template, Generator),	list_instances(SoFar, List).%   save_instances(Template, Generator)%   enumerates all provable instances of the Generator and records the%   associated Template instances.  Neither argument ends up changed.save_instances(Template, Generator) :-	recorda(., -, _),	call(Generator),	recorda(., Template, _),	fail.save_instances(_, _).%   list_instances(SoFar, Total)%   pulls all the -Template instances out of the data base until it%   hits the - marker, and puts them on the front of the accumulator%   SoFar.  This routine is used by findall/3-4 and by bag_of when%   the Generator has no free variables.list_instances(SoFar, Total) :-	recorded(., Term, Ref),	erase(Ref), !,		%   must not backtrack	list_instances(Term, SoFar, Total).list_instances(-, SoFar, Total) :- !,	Total = SoFar.		%   = delayed in case Total was boundlist_instances(-Template, SoFar, Total) :-	list_instances([Template|SoFar], Total).