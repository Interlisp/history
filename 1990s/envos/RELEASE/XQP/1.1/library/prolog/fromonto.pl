%   Package: fromonto%   Author : Richard A. O'Keefe%   Updated: 3/27/87%   Purpose: input/output redirection.%   SeeAlso: library(charsio).%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved./*  The Quintus Prolog I/O predicates come in two groups:	the <standard> group, which use either the current input	stream or the current output stream, as appropriate, and	are compatible with Dec-10 Prolog.	the <stream> group which take an extra first argument	which is the stream to use.  These routines are not	compatible with Dec-10 Prolog.    As a general rule, it is much easier to write routines which    use the current streams than to write ones which pass streams    all around the place.  Routines which use the current streams    are also more efficient.  But if you want to apply your I/O    routines to other streams, you have to redirect them, and    this can be tricky.    The point of this file is to provide four infix commands:	Goal from_stream Stream	Goal onto_stream Stream	Goal from_file FileName	Goal onto_file FileName    All of these operations assume that the Goal is determinate,    which is much the most sensible assumption for I/O Goals.  In    fact, they force it to be determinate even if it wasn't.    The ...._file operations open a new stream to the file and    close it when they are finished.  They will not interfere with    any Dec-10-style I/O to the same FileName.    The ...._stream operations divert to an existing stream, which    they do @i<not> close.  It would be easy to make them take a    FileName as well, in which case they would act like see/tell    and open the file if it was not already open, but would leave    it open.  This hasn't been done yet.    Note that you can redirect both streams by writing e.g.	process_commands from_stream user onto_file 'CMD.LOG'    writeln/1 is copied from another Prolog.  It is trivial, but if    you haven't got format/[2-3] it is handy.  This isn't exactly    the right place for it, but it is apposite.*/:- module(fromonto, [	from_file/2,	onto_file/2,	from_stream/2,	onto_stream/2,	writeln/1   ]).:- meta_predicate	from_file(0, +),	onto_file(0, +),	from_stream(0, +),	onto_stream(0, +).:- op(800, xfy, [from_file,	onto_file,		 from_stream,	onto_stream]).sccs_id('"@(#)87/03/27 fromonto.pl	98.3"').from_file(Goal, FileName) :-	current_input(OldStream),	open(FileName, read, NewStream),	set_input(NewStream),	(   call(Goal) -> Flag = 1 ; Flag = 0   ),	set_input(OldStream),	close(NewStream),	Flag > 0.onto_file(Goal, FileName) :-	current_output(OldStream),	open(FileName, write, NewStream),	set_output(NewStream),	(   call(Goal) -> Flag = 1 ; Flag = 0   ),	set_output(OldStream),	close(NewStream),	Flag > 0.from_stream(Goal, NewStream) :-	current_input(OldStream),	set_input(NewStream),	(   call(Goal) -> Flag = 1 ; Flag = 0   ),	set_input(OldStream),	Flag > 0.onto_stream(Goal, NewStream) :-	current_output(OldStream),	set_output(NewStream),	(   call(Goal) -> Flag = 1 ; Flag = 0   ),	set_output(OldStream),	Flag > 0.writeln([]) :-	nl.writeln([Head|Tail]) :-	write(Head),	writeln(Tail).