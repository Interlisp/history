%   Module : unify%   Author : Richard A. O'Keefe%   Updated: 3/26/87%   Purpose: sound unification%   Adapted from shared code written by the same author; all changes%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved.%   unify(X, Y) is true when the two terms X and Y unify *with* the occurs%   check.  free_of_var/2 implements the occurs check, and is defined in%   library(occurs).  This should move into the system.:- module(unify, [	unify/2   ]).:- use_module(library(occurs), [	free_of_var/2   ]).sccs_id('"@(#)87/03/26 unify.pl	98.1"').unify(X, Y) :-	nonvar(X), nonvar(Y),	!,	functor(X, F, N),	functor(Y, F, N),	unify(N, X, Y).unify(X, Y) :-	(   nonvar(X) ->		% must have var(Y)	    free_of_var(Y, X),		% Y does not occur in X	    Y = X	;   nonvar(Y) ->		% must have var(X)	    free_of_var(X, Y),		% X does not occur in Y	    X = Y	;				% must have var(X), var(Y)	    X = Y			% unify(X, X) despite X	).				% occurring in X!unify(0, _, _) :- !.unify(N, X, Y) :-	arg(N, X, Xn),	arg(N, Y, Yn),	unify(Xn, Yn),	M is N-1,	unify(M, X, Y).