%   File   : printchars.pl%   Author : Richard A. O'Keefe%   Updated: 3/26/87%   Purpose: Portray lists of characters as strings.%   Adapted from shared code written by the same author; all changes%   Copyright (C) 1987, Quintus Computer Systems, Inc.  All rights reserved.:- public	is_chars/1,	portray/1,	portray_chars/1./*  portray(S) will write a complete list of character codes as "text"    and a list of character codes with a variable or $VAR tail as "text|var".    This is potentially confusing, as "text|var" is a possible string, but    in the context of tracing/debugging it will generally be clear to the    human reader, for whom print/1 output is exclusively intended.  For one    reason and another, I consider it better for "" to be displayed as [],    so we need the clause for nil as well.    Beware: this file defines portray/1.  That is ok in Dec-10 Prolog and in    C Prolog, but in Quintus Prolog it will wipe out any portray/1 clauses    you may already have.  The best thing to do is to have your own "portray"    file which installs all the portray clauses you want, and to copy the    portray/1 clause of this file into yours.	================ RELEASE 2.0 NOTE ================    To avoid problems concerning portray/1,	THIS FILE SHOULD NOT BE TURNED INTO A MODULE.    It should therefore continue to be loaded with ensure_loaded    rather than with use_module.  As it is a heuristic debugging    aid, and as only 'portray chars'/1 is not exported, this ought    to be no hardship.*/portray(Chars) :-	portray_chars(Chars),	!.portray_chars(Chars) :-	is_chars(Chars),	Chars \== [],	!,	put(0'"), 'portray chars'(Chars), put(0'").is_chars(Var) :-	var(Var), !.is_chars([]) :- !.is_chars([Char|Chars]) :-	integer(Char),		% should test for "printable" chars.	( Char >= 31, Char < 127 ; Char = 9 ),	!,	is_chars(Chars).is_chars('$VAR'(_)).'portray chars'(Var) :-	var(Var),	!,	put(0'|), write(Var).'portray chars'([Char|Chars]) :- !,	( Char =:= 0'" -> put(Char) ; true ),	put(Char),	'portray chars'(Chars).'portray chars'([]) :- !.'portray chars'('$VAR'(N)) :-	put(0'|), write('$VAR'(N)).