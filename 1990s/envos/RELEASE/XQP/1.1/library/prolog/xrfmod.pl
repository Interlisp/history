%   File   : XRFMOD.PL%   Author : Richard A. O'Keefe%   Updated: 6/10/86%   Purpose: Update the declarations in Prolog source files.%----------------------------------------------------------------------%declarations%:- module(xrfmod, [update_declarations/3]).:- use_module(xrfout, [do_export_modules/2,                       do_import_modules/1]).:- use_module(library(basics), [append/3]).%end%%----------------------------------------------------------------------/*  This file replaces a TECO program.    The idea is that the cross-referencer can create import-export    declarations for Prolog source files, and we can use this to    maintain such declarations in the source files automatically.    If a source file contains		%here%    we replace that string by the declarations, in the layout		%declarations%\n		the actual declarations\n	        %end%    If the source file contains		%declarations% ... %end%    we replace that text by the new block.  If it contains neither    %here% nor %declarations%, or if it contains %declarations% but    that is not followed by %end%, an error message will be printed    and the file will not be changed.    What update_declarations(File) does is this.  First it creates a    new file File.TMP (after discarding the extension if any of File).    Then it copies characters from File to File.TMP looking for %here%    or %declarations%.  If it finds %declarations% it will skip until    it finds %end%.  If anything goes wrong it will print its error    message and delete File.TMP.  If all goes well, it will write out    the new declarations, copy the rest of File to File.TMP, and then    it will do some complicated file juggling.    First it deletes File.BAK, if there is such a file.    Then it renames File to File.BAK.    Then it renames File.TMP to File    The point of all this juggling is to try to ensure that you won't    lose your original file.  Something like this ought to be built in.    I'm sorry about the amazing mess this file is in.  To some extent,    that's what file hacking does to you, but the main problem is that    I wrote this in a tearing hurry and didn't stop to design it.*/update_declarations(File, Exports, Imports) :-	seeing(OldSee),	telling(OldTell),	absolute_file_name(File,Full_file),	nofileerrors,	(   new_extension(Full_file, "TMP", TmpFile),	    see(Full_file),	    tell(TmpFile),	    fileerrors,	    !,	    copy_to_percent(Which),	    (   Which = 0 ->	%  neither 'here' nor 'declarations'		    abandon_update(Full_file, TmpFile,		    		   '%here% nor %declarations%')	    |   Which = 1 ->	%  $here$ found		    finish_update(File, TmpFile, Exports, Imports)	    |   Which = 2, 	%  $declaration		skip_to_percent(32) ->		    finish_update(File, TmpFile, Exports, Imports)	    |   otherwise ->		    abandon_update(Full_file, TmpFile,		    		   '%end% after %declarations%')	    )	|   fileerrors,	    close(Full_file),		% ok even if File wasn't open	    tell(user),	    write('! problem opening '), write(Full_file),	    write(' or its .TMP copy'), nl	),	see(OldSee),	tell(OldTell).%   finish_update writes out the new declarations between new%   %declarations% and %end% brackets.  It then copies the rest of%   the original file into the temporary copy, and closes it.%   Finally, it juggles the files around as described above.  Note%   that this is for Dec-10 Prolog running on Bottoms-10, when you%   do rename/2 the file has to be open, and rename/2 will close it.%   I have no idea whether this will run under C Prolog or not, and%   I strongly suspect that it won't.finish_update(File, TmpFile, Exports, Imports) :-	write('%declarations%'), nl, nl,%	 do_export_modules was substituted for do_publics in order to %	 produce module declarations instead of the old DEC-10 public %	 declarations - Vince Pecora 23 May 86%	 #OLD VERSION# do_publics(Exports),	% write the exported predicates	do_export_modules(File,Exports),%	 do_import_modules was substituted for do_imports in order to produce%	 use_module declarations instead of the old DEC-10 import %	 comments - Vince Pecora 23 May 86%	 #OLD VERSION# do_imports(Imports),	% and imported predicates	do_import_modules(Imports),	write('%end%'),  % NO nl	repeat,	    get0(C),	    ( C =:= -1 | put(C), fail ),	!,	seen,			%  close the original file	told,			%  close the .TMP file	absolute_file_name(File,Full_file),	new_extension(Full_file, "BAK", BakFile),	(   delete_file(BakFile) -> true | true   ),	rename_file(Full_file, BakFile),	rename_file(TmpFile, Full_file).%   This predicate usd to determine the file names by calling seeing/1%   and telling/1.  This does not work in Quintus Prolog, so now we have%   to pass the names in.abandon_update(File, TmpFile, Error) :-	told,				% close the .TMP file	delete_file(TmpFile),		% delete the .TMP file	seen,				% close the original	tell(user),	write('! Warning: '), write(File), write(' has no '),	write(Error), write(' -- not changed.'), nl.copy_to_percent(Which) :-	get0(C),	copy_to_percent(C, Which).copy_to_percent(-1, 0) :- !.		% didn't find a percent at all.copy_to_percent(37 /* % */, Which) :- !,	get0(C),	(   C =:= "h" -> try_percent("ere%", "h%", 1, Which)	|   C =:= "d" -> try_percent("eclarations%", "d%", 2, Which)	|   otherwise -> put("%"), copy_to_percent(Which)	).copy_to_percent(C, Which) :-	put(C),	get0(D),	copy_to_percent(D, Which).try_percent([], _, Which, Which).try_percent([Char|Chars], Skipped, WillBe, Which) :-	get0(C),	(   C =:= Char -> try_percent(Chars, [Char|Skipped], WillBe, Which)	|   copy_skipped([C|Skipped]), copy_to_percent(Which)	).copy_skipped([]).copy_skipped([Char|Chars]) :-	copy_skipped(Chars),	put(Char).%   skip_to_percent skips characters looking for %end%.%   It succeeds if it finds it, fails if it hits end of file.skip_to_percent(-1) :- !, fail.skip_to_percent(37 /* % */) :- !,	try_percent("end%").skip_to_percent(_) :-	get0(C),	skip_to_percent(C).try_percent([]).try_percent([Char|Chars]) :-	get0(C),	(   C =:= Char -> try_percent(Chars)	|   skip_to_percent(C)	).%   new_extension('device:filnam.ext', "NEW", 'device:filnam.NEW')%   new_extension('device:filnam.',    "NEW", 'device:filnam.NEW')%   new_extension('device:filnam',     "NEW", 'device:filnam.NEW')new_extension(File, Extension, NewFile) :-	name(File, Name),	(   append(Prefix, [46|_], Name)	|   Prefix = Name	),	append(Prefix, [46|Extension], NewName), !,	name(NewFile, NewName).rename_file(OldName, NewName) :-	name(NewName, NewChars),	name(OldName, OldChars),	append(OldChars, [32|NewChars], Tail),	append("mv ", Tail, CmdChars),	name(CmdName, CmdChars),	unix(system(CmdName)).delete_file(OldName) :-	name(OldName, OldChars),	append("rm -f ", OldChars, CmdChars),	name(CmdName, CmdChars),	unix(system(CmdName)).