(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (DEFPACKAGE "PRINTER-4045" (NICKNAMES "P-4045")) BASE 10)(IL:FILECREATED " 7-Sep-88 18:03:33" IL:{ERIS}<4045>MEDLEY>4045HQSTREAM.\;8 157689       IL:|changes| IL:|to:|  (IL:FUNCTIONS BLT-CHAR)      IL:|previous| IL:|date:| " 6-Sep-88 18:50:09" IL:{ERIS}<4045>MEDLEY>4045HQSTREAM.\;7); Copyright (c) 1987, 1900, 1988 by Xerox Corporation and Will Snow.  All rights reserved.(IL:PRETTYCOMPRINT IL:4045HQSTREAMCOMS)(IL:RPAQQ IL:4045HQSTREAMCOMS           ((IL:PROP (IL:FILETYPE IL:MAKEFILE-ENVIRONMENT)                  IL:4045HQSTREAM)           (IL:STRUCTURES DD LIMITERS IMAGE-ERROR REGION STATE)           (IL:RESOURCES IL:\\BRUSHBBT)                      (IL:* IL:|;;| "Access function for DD, to support rouding of fractional-pixel widths.")           (IL:FUNCTIONS DD-X-POSITION DD-Y-POSITION)           (IL:SETFS DD-X-POSITION DD-Y-POSITION)                      (IL:* IL:|;;| "compression code")           (IL:VARIABLES *CURRENT-PAGE* *BLACK-WORD* *WHITE-WORD* *END-OF-SCAN-LINE* *WHITE-BLOCK*                   *BLACK-BLOCK* *BYTE-BLOCK* *WORD-BLOCK* *RAW-DATA* *DUP-LINE* *BYTES-TRANSFERRED*                   *COMPRESSION-LIMIT* *DEGRADATION* *RETRY-COMPLEX-PAGE*)           (IL:FUNCTIONS SEND-BYTE SEND-BYTES WRITE-RUN DO-SAME-RASTER-LINE WOUT LINES-EQUAL-P                   TEST-DOCUMENTER-MODE TURN-OFF-DOCUMENTER-MODE TURN-ON-DOCUMENTER-MODE                   COMPRESS-AND-SEND-BM FINISH-PAGE DO-RASTER-LINE DO-END-OF-LINE DO-RANDOM-WORDS                   DO-RUN SYMMETRIC-WORD-P GET-NEXT-RUN)           (XCL:OPTIMIZERS LINES-EQUAL-P GET-NEXT-RUN)                      (IL:* IL:|;;| "normalizing functions to change USER into DEVICE coordinates and back.")           (IL:FUNCTIONS NORMALIZE-REGION NORMALIZE-ROTATION UNTRANSFORM-X UNTRANSFORM-Y                   WITH-NORMALIZED-REGION WITH-TRANSFORMED-PAIR TRANSFORM-X TRANSFORM-Y)                      (IL:* IL:|;;| "fontcreation code")           (IL:VARIABLES *FONT-COERCIONS* *FONT-DIRECTORIES* *MISSING-FONT-COERCIONS*                   *FONT-EXTENSIONS* *DEFAULT-FONTS*)           (IL:FUNCTIONS FAT-CHAR-P GET-TRANSLATED-CHARCODE CREATE-CHARSET CREATE-FONT SEARCH-FONTS                   FONT-FILE-NAME MODIFY-CHARSET ROTATE-CSINFO ROTATE-CSINFO-OFFSETS                   ROTATE-FONT-CHARACTERS READ-FONT-FILE FONT-INFO-FROM-FILENAME TRANSLATE-CHARSET                   SHORTFONTFACE)                      (IL:* IL:|;;| "general character code")           (IL:FUNCTIONS BLT-CHAR DSP-FONT DSP-SPACE-FACTOR STRING-WIDTH CHAR-WIDTH CHARSET                   GET-CHAR-OFFSET CHANGE-CHARSET DSP-PRINT-CR/LF DSP-PRINT-CHAR DO-TAB-X DO-TAB-Y                   DSP-PRINT-TAB DSP-PRINT-SPACE CHAR-8-CODE)                      (IL:* IL:|;;| "margin/dd functions ")           (IL:FUNCTIONS DSP-TRANSLATE DSPRESET DSPCLIPPINGREGION DSPOPERATION DSP-BOTTOM-MARGIN                   DSP-TOP-MARGIN DSP-LEFT-MARGIN DSP-RIGHT-MARGIN DSP-LINE-FEED DSP-X-POSITION                   DSP-Y-POSITION FIX-CLIPPING-REGION FIX-LINE-LENGTH GET-BACKING-STREAM                   GET-OUTPUT-STREAM GET-DD)                      (IL:* IL:|;;| "special")           (IL:VARIABLES *DEVICE-LOCK* *DEFAULT-DESTINATION* *DESTINATION-BITMAP* *MAX-BUFFER-PAGES*                  *PAPER-WIDTH* *PAPER-HEIGHT* *POINTS-PER-INCH* *4045-SCALE-FACTOR* *IMAGEOPS*                   *DEVICE* *BREAK-PAGE* *BACKINGSTREAM*)                      (IL:* IL:|;;| "delimiting functions")           (IL:FUNCTIONS GET-LIMITS PUT-LIMITS SET-LIMITS MARK-PAGE-CHANGED UNMARK-PAGE-CHANGED                   PAGE-CHANGED-P)                      (IL:* IL:|;;| "graphics functions")           (IL:FUNCTIONS NORMALIZE-BRUSH EXPAND-1-LINE MAKE-ROTATED-SOURCE BITBLT BLTSHADE                   GENERICBITBLT SCALEDBITBLT DRAWLINE DRAWCIRCLE FILLCIRCLE DRAWCURVE                   INTERNAL-DRAWLINE INTERNAL-MOVETO DRAWCURVE1 DRAWCURVE2 DRAWELLIPSE DRAWPOLYGON                   FILLPOLYGON DRAWARC DRAWPOINT)                      (IL:* IL:|;;| "error functions")           (IL:FUNCTIONS GET-IMAGE-ERRORS IMAGE-ERROR PRINT-BREAK-PAGE)                      (IL:* IL:|;;| "stream state functions")           (IL:FUNCTIONS GET-STATE DSP-ROTATE DSP-PUSH-STATE DSP-POP-STATE)                      (IL:* IL:|;;| "other functions")           (IL:FUNCTIONS PRINTER-MESSAGE GET-DEVICE-LOCK SET-DEVICE-LOCK GIVE-DEVICE-LOCK OPENSTREAM                  CLOSE-STREAM INITIALIZE SETUP-DEFAULT-FONTS CREATEBUFFER CHANGE-PAPER-SIZE                   BEGIN-PAGE END-PAGE NEW-PAGE MOVE-TO BITMAP-FILE SEND-FILE MAKE-TEDIT MAKE-TEXT                   RESET-PRINTER)                      (IL:* IL:|;;| "Export some symbols.")           (IL:P (EXPORT '(INITIALIZE RESET-PRINTER SETUP-DEFAULT-FONTS CHANGE-PAPER-SIZE                                  *DEFAULT-DESTINATION* *FONT-COERCIONS* *FONT-DIRECTORIES*                                  *MISSING-FONT-COERCIONS* *BREAK-PAGE* *DEFAULT-FONTS*                                  *RETRY-COMPLEX-PAGE*)))))(IL:PUTPROPS IL:4045HQSTREAM IL:FILETYPE :COMPILE-FILE)(IL:PUTPROPS IL:4045HQSTREAM IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE                                                                (XCL:DEFPACKAGE "PRINTER-4045"                                                                       (:NICKNAMES "P-4045"))                                                                :BASE 10))(DEFSTRUCT (DD (:INLINE T))   (X-POSITION-TIMES-16 0 :TYPE INTEGER)                     (IL:* IL:\;                                                            "the x-position in DEST coords")   (Y-POSITION-TIMES-16 0 :TYPE INTEGER)                     (IL:* IL:\;                                                            "the y-position in DEST coords")   (X-OFFSET 0 :TYPE INTEGER)                                (IL:* IL:\;                                                            "the x-offset to 0,0 pre-rotated.")   (Y-OFFSET 0 :TYPE INTEGER)                                (IL:* IL:\;                                                            "the y-offset to 0,0 pre-rotated")   (LEFT-MARGIN 0 :TYPE INTEGER)                             (IL:* IL:\;                                                            "the left margin in DEST coords")   (RIGHT-MARGIN 0 :TYPE INTEGER)                            (IL:* IL:\;                                                            "the right margin in DEST coords")   (TOP-MARGIN 0 :TYPE INTEGER)                              (IL:* IL:\;                                                            "the top margin in DEST coords")   (BOTTOM-MARGIN 0 :TYPE INTEGER)                           (IL:* IL:\;                                                            "the bottom margin in DEST coords ")   (CLIPPING-LEFT 0 :TYPE INTEGER)                           (IL:* IL:\;                                                         "the left clipping boundary in DEST coords")   (CLIPPING-RIGHT 0 :TYPE INTEGER)                          (IL:* IL:\;                                                        "the right clipping boundary in DEST coords")   (CLIPPING-TOP 0 :TYPE INTEGER)                            (IL:* IL:\;                                                          "the top clipping boundary in DEST coords")   (CLIPPING-BOTTOM 0 :TYPE INTEGER)                         (IL:* IL:\;                                                       "the bottom clipping boundary in DEST coords")   CLIPPING-REGION                                           (IL:* IL:\;                                                            "the clipping region in USER coords")   WIDTHS-CACHE                                              (IL:* IL:\;                                                            "the widths of the current charset")   OFFSETS-CACHE                                             (IL:* IL:\;                                                            "the offsets of the current charset")   CHARIMAGEWIDTHS                                           (IL:* IL:\;                                                 "the character image widths of the current charset")   LEFTKERNS                                                 (IL:* IL:\;                                                       "the left kern values of the current charset")   CHARBITMAPS                                               (IL:* IL:\;                                                      "the character bitmaps of the current charset")   FONT                                                      (IL:* IL:\; "the current font")   (ROTATION 0 :TYPE INTEGER)                                (IL:* IL:\;                                                            "the rotation of the current font")   (CHARSET 0 :TYPE INTEGER)                                 (IL:* IL:\; "the current charset")   (CHARSET-ASCENT 0 :TYPE INTEGER)                          (IL:* IL:\; "the current font ascent")   (CHARSET-DESCENT 0 :TYPE INTEGER)                         (IL:* IL:\; "the current font descent")   DESTINATION                                               (IL:* IL:\; "the destination bitmap")   (LINE-FEED 0 :TYPE INTEGER)                               (IL:* IL:\;                                                            "the amount a line feed moves")   (SPACEWIDTH 0 :TYPE INTEGER)                              (IL:* IL:\; "the amount a space moves")   EOLFN                                                     (IL:* IL:\;                                                            "the end-of-line function to call")   (SPACE-FACTOR 1.0 :TYPE FLOAT)                            (IL:* IL:\; "Multiply a font's basic space width by this factor to find out how muc ha space REALLY moves. (that's what's in SPACEWIDTH)")   )(DEFSTRUCT (LIMITERS (:INLINE T))   (TOP 0 :TYPE INTEGER)                                     (IL:* IL:\;                                                            "highest part reached in page")   (BOTTOM 10000 :TYPE INTEGER)                              (IL:* IL:\;                                                            "lowest point reached in page")   (RIGHT 0 :TYPE INTEGER)                                   (IL:* IL:\;                                                            "rightmost point reached in page")   )(DEFSTRUCT IMAGE-ERROR   COUNT   LIST)(DEFSTRUCT (REGION (:INLINE NIL)                       (:TYPE LIST))   (LEFT -16383)   (BOTTOM -16383)   (WIDTH 32767)   (HEIGHT 32767))(DEFSTRUCT (STATE (:INLINE NIL))   X   Y   XOFFSET   YOFFSET   ROTATION)(IL:DECLARE\: IL:EVAL@COMPILE (IL:PUTDEF 'IL:\\BRUSHBBT 'IL:RESOURCES '(IL:NEW (IL:|create| IL:PILOTBBT))))(IL:* IL:|;;| "Access function for DD, to support rouding of fractional-pixel widths.")(DEFMACRO DD-X-POSITION (DD)   `(IL:RSH (DD-X-POSITION-TIMES-16 ,DD)           4))(DEFMACRO DD-Y-POSITION (DD)   `(IL:RSH (DD-Y-POSITION-TIMES-16 ,DD)           4))(DEFSETF DD-X-POSITION (USER::DD) (USER::NEW-X)   `(SETF (DD-X-POSITION-TIMES-16 ,USER::DD)          (IL:LSH ,USER::NEW-X 4)))(DEFSETF DD-Y-POSITION (USER::DD) (USER::NEW-Y)   `(SETF (DD-Y-POSITION-TIMES-16 ,USER::DD)          (IL:LSH ,USER::NEW-Y 4)))(IL:* IL:|;;| "compression code")(XCL:DEFGLOBALVAR *CURRENT-PAGE* 1)(DEFCONSTANT *BLACK-WORD* 65535)(DEFCONSTANT *WHITE-WORD* 0)(DEFCONSTANT *END-OF-SCAN-LINE* 6)(DEFCONSTANT *WHITE-BLOCK* 0)(DEFCONSTANT *BLACK-BLOCK* 1)(DEFCONSTANT *BYTE-BLOCK* 2)(DEFCONSTANT *WORD-BLOCK* 3)(DEFCONSTANT *RAW-DATA* 4)(DEFCONSTANT *DUP-LINE* 7)(XCL:DEFGLOBALVAR *BYTES-TRANSFERRED* 0   "The number of bytes that have been sent on a page")(DEFVAR *COMPRESSION-LIMIT* 470000)(DEFVAR *DEGRADATION* 8   "copy every 8th line")(DEFVAR *RETRY-COMPLEX-PAGE* T)(XCL:DEFINLINE SEND-BYTE (STREAM BYTE)(IL:* IL:|;;;| "send the byte, and increment the bytes-transferred counter.")   (IL:\\BUFFERED.BOUT STREAM BYTE)   (INCF *BYTES-TRANSFERRED*))(XCL:DEFINLINE SEND-BYTES (STREAM BASE OFFSET NBYTES)   (IL:\\BUFFERED.BOUTS STREAM BASE OFFSET NBYTES)   (INCF *BYTES-TRANSFERRED* NBYTES))(DEFMACRO WRITE-RUN (BLOCK-CODE WORD N STREAM)   (LET (DATA-BYTE DATA-WORD)        (IF (EQ BLOCK-CODE '*BYTE-BLOCK*)            (SETQ DATA-BYTE `(LDB (BYTE 8 0)                                  ,WORD)))        (IF (EQ BLOCK-CODE '*WORD-BLOCK*)            (SETQ DATA-WORD WORD))        `(LET ((%N ,N)               (COUNTER 0)               COMMAND-BYTE)              (LOOP (IF (<= %N 0)                        (RETURN NIL))                    (IF (< %N 32)                        (SETQ COUNTER %N)                        (SETQ COUNTER 31))                    (SETQ COMMAND-BYTE (+ (ASH COUNTER 3)                                          ,BLOCK-CODE))                    (SEND-BYTE ,STREAM COMMAND-BYTE)                    ,@(IF DATA-BYTE                          `((SEND-BYTE ,STREAM ,DATA-BYTE)))                    ,@(IF DATA-WORD                          `((WOUT ,STREAM ,DATA-WORD)))                    (DECF %N 31)))))(DEFMACRO DO-SAME-RASTER-LINE (STREAM)   `(SEND-BYTE ,STREAM *DUP-LINE*))(DEFMACRO WOUT (STREAM W)   `(PROGN (SEND-BYTE STREAM (IL:FETCH IL:HIBYTE IL:OF ,W))           (SEND-BYTE STREAM (IL:FETCH IL:LOBYTE IL:OF ,W))           (INCF *BYTES-TRANSFERRED* 2)))(DEFUN LINES-EQUAL-P (LAST-LINE CURRENT-LINE WORDS-PER-RASTER)   (IL:\\LINES-EQUAL-P LAST-LINE CURRENT-LINE WORDS-PER-RASTER))(DEFUN TEST-DOCUMENTER-MODE ()   (IL:* IL:|;;| "test the documenter mode.")   (WITH-OPEN-STREAM (STREAM (OPEN "{pso}" :DIRECTION :OUTPUT))          (TURN-ON-DOCUMENTER-MODE STREAM)          (DOTIMES (I 3360)              (IL:* IL:|;;|             "print a black line about 1/2\" wide on the left hand side of the paper")              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 73)              (SEND-BYTE STREAM 6))          (FINISH-PAGE STREAM)          (DOTIMES (I 3360)              (IL:* IL:|;;|             "print a black line exactly 1/2\" wide on the left hand side of the paper")              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 12)              (SEND-BYTE STREAM 3)              (SEND-BYTE STREAM 255)              (SEND-BYTE STREAM 65)              (SEND-BYTE STREAM 12)              (SEND-BYTE STREAM 255)              (SEND-BYTE STREAM 240)              (SEND-BYTE STREAM 6))          (FINISH-PAGE STREAM)          (DOTIMES (I 3360)              (IL:* IL:|;;| "now do some gibberish")              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 73)              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 33)              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 17)              (SEND-BYTE STREAM 9)              (SEND-BYTE STREAM 72)              (SEND-BYTE STREAM 249)              (SEND-BYTE STREAM 6))          (FINISH-PAGE STREAM)          (TURN-OFF-DOCUMENTER-MODE STREAM)          (IL:FORCEOUTPUT STREAM T)))(XCL:DEFINLINE TURN-OFF-DOCUMENTER-MODE (OUTPUT-STREAM)(IL:* IL:|;;;| "turn off documenter mode on the 4045.")   (DOTIMES (I 2300)                                         (IL:* IL:\;                                  "output 2300 nulls to make the printer recognize the next command")       (SEND-BYTE OUTPUT-STREAM 182))   (SEND-BYTE OUTPUT-STREAM 54)   (SEND-BYTE OUTPUT-STREAM 0)   (SEND-BYTE OUTPUT-STREAM 0)   (IL:* IL:|;;| "now be nice and reset the printer.")   (SEND-BYTE OUTPUT-STREAM (CHAR-CODE #\Escape))   (SEND-BYTE OUTPUT-STREAM (CHAR-CODE #\+))   (SEND-BYTE OUTPUT-STREAM (CHAR-CODE #\X))   (SEND-BYTE OUTPUT-STREAM (CHAR-CODE #\Newline)))(XCL:DEFINLINE TURN-ON-DOCUMENTER-MODE (STREAM)   (SEND-BYTE STREAM (CHAR-CODE #\Escape))   (SEND-BYTE STREAM (CHAR-CODE #\+))   (SEND-BYTE STREAM 1)   (SETQ *CURRENT-PAGE* 1))(DEFUN COMPRESS-AND-SEND-BM (BITMAP STREAM &OPTIONAL (WIDTH-IN-WORDS (IL:FETCH (IL:BITMAP                                                                                                                                                                         IL:BITMAPRASTERWIDTH                                                                                        )                                                                            IL:OF BITMAP))                                       (RASTER-LINES-SKIPPED-TOP 0)                                       (RASTER-LINES-SKIPPED-BOTTOM 0)                                       (DEGRADE NIL))(IL:* IL:|;;;| "compress and send the bitmap to the 4045.  It must be in documenter mode for this to work.")   (LET* ((RASTER-WIDTH (IL:FETCH (IL:BITMAP IL:BITMAPRASTERWIDTH) IL:OF BITMAP))          (HEIGHT (IL:FETCH (IL:BITMAP IL:BITMAPHEIGHT) IL:OF BITMAP))          (BASE (IL:FETCH (IL:BITMAP IL:BITMAPBASE) IL:OF BITMAP))          (CURRENT-LINE (IL:\\ADDBASE BASE (* RASTER-WIDTH RASTER-LINES-SKIPPED-TOP)))          (INDEX RASTER-LINES-SKIPPED-TOP)          (LAST-LINE (- HEIGHT RASTER-LINES-SKIPPED-BOTTOM))          (BOTTOM (1- LAST-LINE)))         (IL:* IL:|;;| "INDEX is the current-line from the top of the bitmap")         (SETQ *BYTES-TRANSFERRED* RASTER-LINES-SKIPPED-TOP)         (IL:* IL:|;;| "skip the raster lines to be skipped.")         (DOTIMES (I RASTER-LINES-SKIPPED-TOP)             (DO-END-OF-LINE STREAM))         (IL:* IL:|;;| "now read and compress the bitmap.")         (LOOP                (IL:* IL:|;;| "end condition -- quit.")               (WHEN (EQ INDEX LAST-LINE)                   (FINISH-PAGE STREAM)                   (RETURN NIL))               (IL:* IL:|;;| "error condition, ")               (WHEN (> *BYTES-TRANSFERRED* *COMPRESSION-LIMIT*)                   (IL:* IL:|;;|       "too many bytes for that page, try to degrade it, but make sure you don't loop here forever.")                   (COND                      (DEGRADE (FINISH-PAGE STREAM)                             (PRINTER-MESSAGE "Degraded page was too complex. Continuing job..."))                      (T (PRINTER-MESSAGE "Page too complex.")                         (COND                            (*RETRY-COMPLEX-PAGE* (FINISH-PAGE STREAM T)                                   (PRINTER-MESSAGE "Retrying page with degraded image.")                                   (COMPRESS-AND-SEND-BM BITMAP STREAM WIDTH-IN-WORDS                                           RASTER-LINES-SKIPPED-TOP RASTER-LINES-SKIPPED-BOTTOM T))                            (T (FINISH-PAGE STREAM)))))                   (RETURN NIL))               (COND                  ((EQ INDEX BOTTOM)                   (IL:* IL:|;;| "At last line -- don't look ahead")                   (DO-RASTER-LINE CURRENT-LINE WIDTH-IN-WORDS STREAM)                   (FINISH-PAGE STREAM)                   (RETURN NIL))                  ((AND DEGRADE (OR (LINES-EQUAL-P CURRENT-LINE (IL:\\ADDBASE CURRENT-LINE                                                                        RASTER-WIDTH)                                           WIDTH-IN-WORDS)                                    (ZEROP (MOD INDEX *DEGRADATION*))))                   (IL:* IL:|;;| "duplicate the next line 2 times.")                   (DO-SAME-RASTER-LINE STREAM)                   (SETQ CURRENT-LINE (IL:\\ADDBASE CURRENT-LINE RASTER-WIDTH))                   (INCF INDEX)                   (DO-RASTER-LINE CURRENT-LINE WIDTH-IN-WORDS STREAM))                  ((LINES-EQUAL-P CURRENT-LINE (IL:\\ADDBASE CURRENT-LINE RASTER-WIDTH)                          WIDTH-IN-WORDS)                   (IL:* IL:|;;| "Can duplicate the next scan line.")                   (DO-SAME-RASTER-LINE STREAM)                   (SETQ CURRENT-LINE (IL:\\ADDBASE CURRENT-LINE RASTER-WIDTH))                   (INCF INDEX)                   (DO-RASTER-LINE CURRENT-LINE WIDTH-IN-WORDS STREAM))                  (T                      (IL:* IL:|;;|                    "two scan-lines are different, just output this one and move on normally.")                     (DO-RASTER-LINE CURRENT-LINE WIDTH-IN-WORDS STREAM)))               (SETQ CURRENT-LINE (IL:\\ADDBASE CURRENT-LINE RASTER-WIDTH))               (INCF INDEX))))(XCL:DEFINLINE FINISH-PAGE (STREAM &OPTIONAL ABORT?)(IL:* IL:|;;;| "tell the 4045 that the page is done.")   (DOTIMES (I 2500)       (SEND-BYTE STREAM 182))   (IF ABORT?       (SEND-BYTE STREAM 38)       (SEND-BYTE STREAM 22))   (IL:* IL:|;;| "Put out page number as two separate bytes")   (SEND-BYTE STREAM (LDB (BYTE 8 8)                          *CURRENT-PAGE*))   (SEND-BYTE STREAM (LDB (BYTE 8 0)                          *CURRENT-PAGE*))   (IL:FORCEOUTPUT STREAM T))(DEFUN DO-RASTER-LINE (BASE WORDS-PER-RASTER STREAM)   (LET ((INDEX 0)         P-VALUE OFFSET RUN-LENGTH)        (LOOP (IF (>= INDEX WORDS-PER-RASTER)                  (RETURN NIL))              (IL:* IL:|;;| "note: MAX for get-next-run is 255! ")              (SETQ P-VALUE (GET-NEXT-RUN BASE (- WORDS-PER-RASTER INDEX)))              (SETQ OFFSET (LDB (BYTE 8 8)                                P-VALUE))                    (IL:* IL:\;                    "offset is the number of words from the base before it could start compressing.")              (SETQ RUN-LENGTH (LDB (BYTE 8 0)                                    P-VALUE))                (IL:* IL:\;                                        "run-length is the length of the compressed piece in words.")              (WHEN (> OFFSET 0)                  (DO-RANDOM-WORDS BASE OFFSET STREAM)                  (SETQ BASE (IL:\\ADDBASE BASE OFFSET)))              (WHEN (> RUN-LENGTH 0)                  (DO-RUN (IL:\\GETBASE BASE 0)                         RUN-LENGTH WORDS-PER-RASTER STREAM (+ INDEX OFFSET RUN-LENGTH))                  (SETQ BASE (IL:\\ADDBASE BASE RUN-LENGTH)))              (SETQ INDEX (+ INDEX OFFSET RUN-LENGTH)))        (IL:* IL:|;;| "force end of line")        (DO-END-OF-LINE STREAM)))(DEFMACRO DO-END-OF-LINE (STREAM)   `(SEND-BYTE ,STREAM *END-OF-SCAN-LINE*))(XCL:DEFINLINE DO-RANDOM-WORDS (BASE LENGTH STREAM)(IL:* IL:|;;;| "outputs LENGTH words in groups of 32.  The 4045 can only take 32 words per command.")   (LET ((COUNTER 0)         (INDEX 0)         COMMAND-BYTE)        (LOOP (IF (<= LENGTH 0)                  (RETURN NIL))              (IF (< LENGTH 32)                  (SETQ COUNTER LENGTH)                  (SETQ COUNTER 31))              (SETQ COMMAND-BYTE (+ (ASH COUNTER 3)                                    *RAW-DATA*))              (SEND-BYTE STREAM COMMAND-BYTE)              (SEND-BYTES STREAM BASE (IL:UNFOLD INDEX 2)                     (IL:UNFOLD COUNTER 2))                  (IL:* IL:\; "(do ((i index (1+ i)) (end-index (+ index counter))) ((eq i end-index)) (il:\\\\wout stream (il:\\\\getbase base i)))")              (DECF LENGTH 31)              (INCF INDEX 31))))(DEFUN DO-RUN (WORD RUN-LENGTH WORDS-PER-RASTER STREAM POSITION)(IL:* IL:|;;;| "do a run")   (MACROLET ((WRITE-BLACK-RUN (RUN-LENGTH STREAM)                     `(WRITE-RUN *BLACK-BLOCK* ,RUN-LENGTH ,STREAM NIL))              (WRITE-WHITE-RUN (RUN-LENGTH STREAM)                     `(WRITE-RUN *WHITE-BLOCK* ,RUN-LENGTH ,STREAM NIL))              (WRITE-BYTE-RUN (WORD RUN-LENGTH STREAM)                     (LET ((FORM `((SEND-BYTE ,STREAM (LDB (BYTE 8 0)                                                           ,WORD)))))                          `(WRITE-RUN *BYTE-BLOCK* ,RUN-LENGTH ,STREAM ,FORM)))              (WRITE-WORD-RUN (WORD RUN-LENGTH STREAM)                     (LET ((FORM `((WOUT ,STREAM ,WORD))))                          `(WRITE-RUN *WORD-BLOCK* ,RUN-LENGTH ,STREAM ,FORM)))              (WRITE-RUN (BLOCK-CODE RUN-LENGTH STREAM FORM)                     `(LET ((INDEX ,RUN-LENGTH)                            (COUNTER 0)                            COMMAND-BYTE)                           (LOOP (IF (<= INDEX 0)                                     (RETURN NIL))                                 (IF (< INDEX 32)                                     (SETQ COUNTER INDEX)                                     (SETQ COUNTER 31))                                 (SETQ COMMAND-BYTE (+ (ASH COUNTER 3)                                                       ,BLOCK-CODE))                                 (SEND-BYTE ,STREAM COMMAND-BYTE)                                 ,@FORM                                 (DECF INDEX 31)))))          (COND             ((EQ WORD *WHITE-WORD*)              (IL:* IL:|;;| "if line is all white, do nothing, ")              (UNLESS (EQ POSITION WORDS-PER-RASTER)                     (WRITE-WHITE-RUN RUN-LENGTH STREAM)))             ((EQ WORD *BLACK-WORD*)              (WRITE-BLACK-RUN RUN-LENGTH STREAM))             (T (IF (SYMMETRIC-WORD-P WORD)                    (WRITE-BYTE-RUN WORD RUN-LENGTH STREAM)                    (WRITE-WORD-RUN WORD RUN-LENGTH STREAM))))))(DEFUN SYMMETRIC-WORD-P (WORD)   (EQ (LDB (BYTE 8 8)            WORD)       (LDB (BYTE 8 0)            WORD)))(DEFUN GET-NEXT-RUN (START MAX)   (IL:* IL:|;;| "0 < MAX < 256")   (IL:\\GET-NEXT-RUN START MAX))(XCL:DEFOPTIMIZER LINES-EQUAL-P (FIRST-LINE NEXT-LINE RASTER-WIDTH)                                    `((IL:OPCODES IL:MISC3 10)                                      ,FIRST-LINE                                      ,NEXT-LINE                                      ,RASTER-WIDTH))(XCL:DEFOPTIMIZER GET-NEXT-RUN (START-ADDRESS MAX)                                   `((IL:OPCODES IL:P-MISC2 0)                                     ,START-ADDRESS                                     ,MAX))(IL:* IL:|;;| "normalizing functions to change USER into DEVICE coordinates and back.")(DEFUN NORMALIZE-REGION (REGION DD)(IL:* IL:|;;;| "takes a USER region and converts it into a DEVICE region.")   (IF (AND (EQ 0 (DD-ROTATION DD))            (EQ 0 (DD-X-OFFSET DD))            (EQ 0 (DD-Y-OFFSET DD)))       (IL:* IL:|;;| "we don't have to do anything")       (RETURN-FROM NORMALIZE-REGION REGION))   (WITH-NORMALIZED-REGION ((REGION-LEFT REGION)                            (REGION-BOTTOM REGION)                            (REGION-WIDTH REGION)                            (REGION-HEIGHT REGION)                            DD)          (NEW-LEFT NEW-BOTTOM NEW-WIDTH NEW-HEIGHT)          (IL:CREATE IL:REGION                 IL:LEFT IL:_ NEW-LEFT                 IL:BOTTOM IL:_ NEW-BOTTOM                 IL:WIDTH IL:_ NEW-WIDTH                 IL:HEIGHT IL:_ NEW-HEIGHT)))(DEFUN NORMALIZE-ROTATION (ROTATION)   (IL:* IL:|;;| "turn it into 0,90,180,270.")   (COND      ((NULL ROTATION)       0)      ((< ROTATION 0)       (+ ROTATION 360))      ((>= ROTATION 360)       (- ROTATION 360))      (T ROTATION)))(DEFUN UNTRANSFORM-X (X Y DD)(IL:* IL:|;;;| "transform X from DEVICE to USER coordinates.")   (CASE (DD-ROTATION DD)       ((0) (- X (DD-X-OFFSET DD)))       ((90) (- Y (DD-Y-OFFSET DD)))       ((180) (- (DD-X-OFFSET DD)                 X))       ((270) (- (DD-Y-OFFSET DD)                 Y))))(DEFUN UNTRANSFORM-Y (X Y DD)(IL:* IL:|;;;| "transform Y from DEVICE to USER coordinates.")   (CASE (DD-ROTATION DD)       ((0) (- Y (DD-Y-OFFSET DD)))       ((90) (- (DD-X-OFFSET DD)                X))       ((180) (- (DD-Y-OFFSET DD)                 Y))       ((270) (- X (DD-X-OFFSET DD)))))(DEFMACRO WITH-NORMALIZED-REGION ((X Y W H DD)                                      (DX DY DW DH)                                      &BODY BODY)   (XCL:ONCE-ONLY (X Y W H DD)          `(LET (($ROT$ (DD-ROTATION ,DD)))                (LET ((,DX (- (TRANSFORM-X ,X ,Y ,DD)                              (CASE $ROT$                                  ((0) 0)                                  ((90) ,H)                                  ((180) ,W)                                  ((270) 0))))                      (,DY (- (TRANSFORM-Y ,X ,Y ,DD)                              (CASE $ROT$                                  ((0) 0)                                  ((90) 0)                                  ((180) ,H)                                  ((270) ,W))))                      (,DW (CASE $ROT$                               ((0 180) ,W)                               ((90 270) ,H)))                      (,DH (CASE $ROT$                               ((0 180) ,H)                               ((90 270) ,W))))                     ,@BODY))))(DEFMACRO WITH-TRANSFORMED-PAIR ((X Y DD)                                     (TX TY)                                     &BODY BODY)   (XCL:ONCE-ONLY (X Y DD)          `(LET (($ROT$ (DD-ROTATION ,DD)))                (LET ((,TX (TRANSFORM-X ,X ,Y ,DD))                      (,TY (TRANSFORM-Y ,X ,Y ,DD)))                     ,@BODY))))(DEFUN TRANSFORM-X (UX UY DD)(IL:* IL:|;;;| "transforms the user-X coordinates to the device coordinates .")   (+ (CASE (DD-ROTATION DD)          ((0) UX)          ((90) (- UY))          ((180) (- UX))          ((270) UY))      (DD-X-OFFSET DD)))(DEFUN TRANSFORM-Y (UX UY DD)(IL:* IL:|;;;| "transform the yposition by the offset of the stream.")   (+ (CASE (DD-ROTATION DD)          ((0) UY)          ((90) UX)          ((180) (- UY))          ((270) (- UX)))      (DD-Y-OFFSET DD)))(IL:* IL:|;;| "fontcreation code")(XCL:DEFGLOBALVAR *FONT-COERCIONS* NIL)(XCL:DEFGLOBALVAR *FONT-DIRECTORIES* (LIST "{dsk}"))(XCL:DEFGLOBALVAR *MISSING-FONT-COERCIONS*   (LIST '((IL:GACHA)           (IL:TERMINAL))         '((IL:MODERN)           (IL:CLASSIC))         '((IL:TIMESROMAN)           (IL:CLASSIC))         '((IL:HELVETICA)           (IL:MODERN))))(XCL:DEFGLOBALVAR *FONT-EXTENSIONS* '(IL:4045FONT))(DEFVAR *DEFAULT-FONTS*   '((IL:DEFAULTFONT IL:4045HQ (IL:TERMINAL 8))     (IL:ITALICFONT IL:4045HQ (IL:MODERN 8 IL:MIR))     (IL:BOLDFONT IL:4045HQ (IL:MODERN 8 IL:BRR))     (IL:LITTLEFONT IL:4045HQ (IL:MODERN 8 IL:MIR))     (IL:TINYFONT IL:4045HQ (IL:TERMINAL 6))     (IL:BIGFONT IL:4045HQ (IL:MODERN 10 IL:BRR))     (IL:COMMENTFONT IL:4045HQ (IL:MODERN 8))     (IL:TEXTFONT IL:4045HQ (IL:CLASSIC 10))))(DEFMACRO FAT-CHAR-P (CHARCODE)   `(AND (IL:SMALLP ,CHARCODE)         (> ,CHARCODE IL:\\MAXTHINCHAR)))(DEFMACRO GET-TRANSLATED-CHARCODE (CHARCODE FONT)   `(IL:\\GETBASE (IL:FFETCH (IL:FONTDESCRIPTOR IL:OTHERDEVICEFONTPROPS) IL:OF ,FONT)           ,CHARCODE))(DEFUN CREATE-CHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)(IL:* IL:|;;;| "create a charset with the given parameters on the 4045 device.")   (SETQ FAMILY (IL:\\FONTSYMBOL FAMILY))   (COND      ((TRANSLATE-CHARSET FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG? *FONT-COERCIONS*)       (IL:* IL:|;;| "the font must be first coerced into a real font.")       )      ((AND (EQ ROTATION 0)            (READ-FONT-FILE FAMILY SIZE FACE ROTATION DEVICE CHARSET))       (IL:* IL:|;;| "if the font is available it will be read here.")       )      (T          (IL:* IL:|;;| "if we get here, the font is not directly available, either it needs to be rotated, boldified, or italicised 'by hand'")         (MODIFY-CHARSET FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?))))(DEFUN CREATE-FONT (FAMILY SIZE FACE ROTATION DEVICE CHARSET)(IL:* IL:|;;;| "create a font with the given parameters for this device.")   (DECLARE (SPECIAL IL:\\ASCIITONS))   (LET ((FONTDESC (IL:CREATE IL:FONTDESCRIPTOR                          IL:FONTDEVICE IL:_ DEVICE                          IL:FONTFAMILY IL:_ FAMILY                          IL:FONTSIZE IL:_ SIZE                          IL:FONTFACE IL:_ FACE                          IL:|\\SFAscent| IL:_ 0                          IL:|\\SFDescent| IL:_ 0                          IL:|\\SFHeight| IL:_ 0                          IL:ROTATION IL:_ ROTATION                          IL:\\SFFACECODE IL:_ (IL:\\FACECODE FACE)                          IL:FONTDEVICESPEC IL:_ (LIST FAMILY SIZE FACE ROTATION DEVICE))))        (COND           ((IL:\\GETCHARSETINFO CHARSET FONTDESC T)            (IL:FREPLACE (IL:FONTDESCRIPTOR IL:OTHERDEVICEFONTPROPS) IL:OF FONTDESC               IL:WITH (IL:FETCH (IL:ARRAYP IL:BASE) IL:OF IL:\\ASCIITONS))            FONTDESC)           (T NIL))))(DEFUN SEARCH-FONTS (FAMILY SIZE FACE ROTATION DEVICE)(IL:* IL:|;;;| "search for fonts with the given parameters for this device.  returns a list of the files that can be read.")   (SETQ FAMILY (IL:\\FONTSYMBOL FAMILY))   (SETQ DEVICE (IL:\\FONTSYMBOL DEVICE))   (SETQ FACE (IL:\\FONTFACE FACE))   (LET (THISFONT FONTSFOUND THISFACE FILEPATTERN NAMELIST)        (DOLIST (EXTENSION *FONT-EXTENSIONS*)            (SETQ FILEPATTERN (FONT-FILE-NAME FAMILY SIZE FACE ROTATION EXTENSION 'IL:*))            (DOLIST (DIR *FONT-DIRECTORIES*)                (SETQ NAMELIST (IL:DIRECTORY (IL:PACKFILENAME.STRING 'IL:DIRECTORY DIR 'IL:BODY                                                     FILEPATTERN)))                (DOLIST (FONTFILE NAMELIST)                    (SETQ THISFONT (FONT-INFO-FROM-FILENAME FONTFILE DEVICE))                    (SETQ THISFACE (CADDR THISFONT))                    (IF (AND (NOT (MEMBER THISFONT FONTSFOUND :TEST #'EQUAL))                             (OR (EQ FAMILY 'IL:*)                                 (EQ FAMILY (CAR THISFONT)))                             (OR (EQ SIZE 'IL:*)                                 (EQ SIZE (CADR THISFONT)))                             (OR (EQ FACE 'IL:*)                                 (EQUAL FACE THISFACE)                                 (AND (OR (EQ (CAR FACE)                                              'IL:*)                                          (EQ (CAR FACE)                                              (CAR THISFACE)))                                      (OR (EQ (CADR FACE)                                              'IL:*)                                         (EQ (CADR FACE)                                              (CADR THISFACE)))                                      (OR (EQ (CADDR FACE)                                              'IL:*)                                          (EQ (CADDR FACE)                                              (CADDR THISFACE))))))                        (SETQ FONTSFOUND (CONS THISFONT FONTSFOUND))))))        FONTSFOUND))(DEFUN FONT-FILE-NAME (FAMILY SIZE FACE ROTATION EXT CHARSET)(IL:* IL:|;;;| "determine the font file name for the given description.")   (LET ((SIZEPATT (COND                      ((OR (EQ SIZE 'IL:*)                           (IL:FIXP SIZE))                       SIZE)                      (T (ERROR "~a is not a valid size." SIZE)))))        (SETQ FACE (IL:\\FONTFACE FACE))                     (IL:* IL:\; "validate face.")        (IL:PACKFILENAME.STRING 'IL:NAME (IL:CONCAT FAMILY SIZEPATT (COND                                                                       ((EQUAL FACE '         (IL:* IL:* IL:*))                                                                        'IL:*)                                                                       (T (SHORTFONTFACE FACE)))                                                (COND                                                   ((IL:FIXP CHARSET)                                                    (LET ((*PRINT-BASE* 8))                                                         (IL:CONCAT "C" (IL:\\PRINDATUM.TO.STRING                                                                         CHARSET))))                                                   (CHARSET (IL:CONCAT "C" CHARSET))                                                   (T "C0")))               'IL:EXTENSION EXT)))(DEFUN MODIFY-CHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?)(IL:* IL:|;;;| "the font must be rotated, boldified, italicized or some such manipulation.")   (LET (XFONT CSINFO NEW-ROTATION)        (IL:* IL:|;;| "((and (eq (il:|fetch| (il:fontface il:weight) il:|of| face) 'il:bold) (eq (il:|fetch| (il:fontface il:slope) il:|of| face) 'il:italic) (setq xfont (create-font family size (il:|create| il:fontface il:|using| face il:slope il:_ 'il:regular) 0 device charset))) ;; this is the case where BIR => BRR and then is made italic (if (setq csinfo (il:\\\\getcharsetinfo charset xfont t)) (il:\\\\sfmakeitalic csinfo)))")        (IL:* IL:|;;| "((and (eq (il:|fetch| (il:fontface il:slope) il:|of| face) 'il:italic) (setq xfont (create-font family size (il:|create| il:fontface il:|using| face il:slope il:_ 'il:regular) 0 device charset))) ;; in this case, xIR is changed to xRR and then italicised. (if (setq csinfo (il:\\\\getcharsetinfo charset xfont t)) (il:\\\\sfmakeitalic csinfo)))")        (COND           ((NOT (EQ ROTATION 0))            (IL:* IL:|;;| "make sure the rotation can be made simply.")            (IF (NOT (MEMBER ROTATION '(90 180 270)                            :TEST                            #'EQ))                (ERROR "~a rotation is not supported." ROTATION)                (IF (AND (SETQ XFONT (CREATE-FONT FAMILY SIZE FACE 0 DEVICE CHARSET))                         (SETQ CSINFO (IL:\\GETCHARSETINFO CHARSET XFONT T)))                    (ROTATE-CSINFO CSINFO ROTATION))))           ((AND (EQ (IL:|fetch| (IL:FONTFACE IL:WEIGHT) IL:|of| FACE)                     'IL:BOLD)                 (SETQ XFONT (CREATE-FONT FAMILY SIZE (IL:|create| IL:FONTFACE                                                         IL:|using| FACE IL:WEIGHT IL:_                                                               'IL:MEDIUM)                                    0 DEVICE CHARSET)))            (IL:* IL:|;;| "in this case, BxR is changed to MxR and then boldified.")            (IF (SETQ CSINFO (IL:\\GETCHARSETINFO CHARSET XFONT T))                (IL:\\SFMAKEBOLD CSINFO)))           ((TRANSLATE-CHARSET FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG?                    *MISSING-FONT-COERCIONS*)))))(DEFUN ROTATE-CSINFO (CSINFO ROTATION)(IL:* IL:|;;;| "takes a CHARSETINFO, rotates it and returns the equivalent rotated version.")   (IL:* IL:|;;| "0 degree rotation, offset is the left, and imagewidth is the width of the blt.")   (IL:* IL:|;;|  "90 degree rotation, offset becomes the bottom, and imagewidth is the height of the blt.")   (IL:* IL:|;;| "180 degree rotation, offset is the left, and imagewidth is the width of the blt.")   (IL:* IL:|;;|  "270 degree rotation, offset is the bottom, and imagewidth is the height of the blt.")   (IL:|create| IL:CHARSETINFO IL:|using| CSINFO IL:CHARSETBITMAP IL:_                                         (ROTATE-FONT-CHARACTERS (IL:|fetch| (IL:CHARSETINFO                                                                                  IL:CHARSETBITMAP)                                                                    IL:|of| CSINFO)                                                ROTATION)                                         IL:OFFSETS IL:_ (ROTATE-CSINFO-OFFSETS CSINFO ROTATION)))(DEFUN ROTATE-CSINFO-OFFSETS (CSINFO ROTATION)(IL:* IL:|;;;| "adjusts offsets in case where rotation turned things around.")   (LET ((OFFSETS (IL:FFETCH (IL:CHARSETINFO IL:OFFSETS) IL:OF CSINFO))         (IMAGEWIDTHS (IL:FFETCH (IL:CHARSETINFO IL:IMAGEWIDTHS) IL:OF CSINFO))         (BITMAPWIDTH (IL:BITMAPWIDTH (IL:FFETCH (IL:CHARSETINFO IL:CHARSETBITMAP) IL:OF                                                                                       CSINFO)))         NEWOFFSETS)        (CASE ROTATION            (0 OFFSETS)            (90 OFFSETS)            (180                (SETQ NEWOFFSETS (IL:\\CREATECSINFOELEMENT))               (DOTIMES (CC IL:\\MAXCHAR)                   (IL:\\FSETOFFSET NEWOFFSETS CC (- BITMAPWIDTH (+ (IL:\\FGETOFFSET OFFSETS CC)                                                                    (IL:\\FGETIMAGEWIDTH IMAGEWIDTHS                                                                           CC)))))               NEWOFFSETS)            (270                (SETQ NEWOFFSETS (IL:\\CREATECSINFOELEMENT))               (DOTIMES (CC IL:\\MAXCHAR)                   (IL:\\FSETOFFSET NEWOFFSETS CC (- BITMAPWIDTH (+ (IL:\\FGETOFFSET OFFSETS CC)                                                                    (IL:\\FGETIMAGEWIDTH IMAGEWIDTHS                                                                           CC)))))               NEWOFFSETS))))(DEFUN ROTATE-FONT-CHARACTERS (CHARBITMAP ROTATION)(IL:* IL:|;;;| "rotate font character bitmaps 90, 180, or 270 degrees.")   (ECASE ROTATION       (0 CHARBITMAP)       (90 (IL:ROTATE-BITMAP-LEFT CHARBITMAP))       (180 (IL:ROTATE-BITMAP-LEFT (IL:ROTATE-BITMAP-LEFT CHARBITMAP)))  )     (270 (IL:ROTATE-BITMAP CHARBITMAP))))(DEFUN READ-FONT-FILE (FAMILY SIZE FACE ROTATION DEVICE CHARSET)(IL:* IL:|;;;| "reads a font file and returns a CSINFO.  ")   (LET (FONTFILE STRM CSINFO)        (DOLIST (EXT *FONT-EXTENSIONS*)            (IL:* IL:|;;|           "iterate thru the possible font extensions and return when you have read a font file.")            (WHEN (SETQ FONTFILE (IL:FINDFILE (FONT-FILE-NAME FAMILY SIZE FACE ROTATION EXT CHARSET)                                        T *FONT-DIRECTORIES*))                (WITH-OPEN-FILE (STRM FONTFILE :DIRECTION :INPUT)                       (SETQ CSINFO (CASE (IL:FONTFILEFORMAT STRM T)                                        (IL:STRIKE (IL:\\READSTRIKEFONTFILE STRM FAMILY SIZE FACE))                                        (IL:AC (IL:\\READACFONTFILE STRM FAMILY SIZE FACE))                                        (OTHERWISE (IL:SHOULDNT)))))                (RETURN CSINFO)))))(DEFUN FONT-INFO-FROM-FILENAME (FONTFILE &OPTIONAL DEVICE)(IL:* IL:|;;;| "returns a list of the family, size, face, rotation, and device of the font stored in the file named FONTFILE.")   (LET ((FILENAMELIST (IL:UNPACKFILENAME.STRING FONTFILE))         CH SIZEBEG SIZEND NAME FAMILY SIZE FACE EXT)        (SETQ NAME (IL:LISTGET FILENAMELIST 'IL:NAME))       (IL:* IL:\;          "find where the name and size are.  MUST check for ch nil below or possible infinite loop")        (SETQ SIZEBEG (IL:FOR CH# IL:FROM 1                         IL:WHEN (OR (NUMBERP (SETQ CH (IL:NTHCHAR NAME CH#)))                                         (NULL CH)) IL:DO (RETURN CH#)))        (IL:* IL:|;;| "Get Family")        (SETQ FAMILY (IL:MKATOM (IL:SUBSTRING NAME 1 (1- SIZEBEG))))        (IL:* IL:|;;| "Get Size")        (SETQ SIZEND (IL:FOR CH# IL:FROM SIZEBEG IL:WHEN (NOT (IL:NUMBERP (IL:NTHCHAR                                                                                       NAME CH#)))                        IL:DO (RETURN CH#)))        (SETQ SIZE (IL:MKATOM (IL:SUBSTRING NAME SIZEBEG (1- SIZEND))))        (SETQ NAME (STRING-UPCASE NAME))                     (IL:* IL:\;                                                    "don't need name, but checks for lowercase face")        (IL:* IL:|;;| "Get Face")        (SETQ FACE (LIST (COND                            ((IL:STRPOS "B" NAME SIZEND NIL T)                             'IL:BOLD)                            ((IL:STRPOS "L" NAME SIZEND NIL T)                             'IL:LIGHT)                            (T 'IL:MEDIUM))                         (COND                            ((IL:STRPOS "I" NAME SIZEND NIL T)                             'IL:ITALIC)                            (T 'IL:REGULAR))                         (COND                            ((IL:STRPOS "E" NAME SIZEND NIL T)                             'IL:EXPANDED)                            ((IL:STRPOS "C" NAME SIZEND NIL T)                             'IL:COMPRESSED)                            (T 'IL:REGULAR))))        (IL:* IL:|;;| "Get Device")        (SETQ DEVICE (COND                        ((STREAMP DEVICE)                         (IL:IMAGESTREAMTYPE DEVICE))                        ((NULL DEVICE)                         (IL:MKATOM (IL:U-CASE (IL:LISTGET FILENAMELIST 'IL:EXTENSION))))                        ((IL:LITATOM DEVICE)                         (IL:\\FONTSYMBOL DEVICE))                        (T DEVICE)))        (LIST FAMILY SIZE FACE DEVICE)))(DEFUN TRANSLATE-CHARSET (FAMILY SIZE FACE ROTATION DEVICE CHARSET FONTDESC NOSLUG? COERCION-LIST                                    )(IL:* IL:|;;;| "translate a font into the desired real-font.")   (LET (USER-FONT REAL-FONT NEW-CSINFO)        (DOLIST (TRANSLATION COERCION-LIST)            (IF (AND (SETQ USER-FONT (CAR TRANSLATION))                     (EQ FAMILY (CAR USER-FONT))                     (OR (NOT (CADR USER-FONT))                         (EQ SIZE (CADR USER-FONT)))                     (OR (NOT (CADDR USER-FONT))                         (EQ CHARSET (CADDR USER-FONT)))                     (SETQ REAL-FONT (CADR TRANSLATION))                     (SETQ NEW-CSINFO (CREATE-CHARSET (OR (CAR REAL-FONT)                                                          FAMILY)                                             (OR (CADR REAL-FONT)                                                 SIZE)                                             FACE ROTATION DEVICE (OR (CADDR REAL-FONT)                                                                      CHARSET)                                             FONTDESC NOSLUG?)))                (RETURN NEW-CSINFO)))))(DEFUN SHORTFONTFACE (FACE)(IL:* IL:|;;;| "return a string of the form \"MIR\" for a font face given.")   (SETQ FACE (IL:\\FONTFACE FACE))   (IL:CONCAT (CHAR (STRING (CAR FACE))                    0)          (CHAR (STRING (CADR FACE))                0)          (CHAR (STRING (CADDR FACE))                0)))(IL:* IL:|;;| "general character code")(DEFUN BLT-CHAR (CHAR DS DD)(IL:* IL:|;;;| "blt's the character bitmap to the displaystream destination.  Changes the charset of the stream if necessary.")   (UNLESS (EQ (DD-CHARSET DD)               (CHARSET CHAR))       (IL:* IL:|;;| "The charset has changed, so change the DD to reflect it.")       (CHANGE-CHARSET DS DD CHAR))   (MARK-PAGE-CHANGED DS)   (IL:* IL:|;;| "curx, cury are in DEVICE coordinates.")   (LET* ((CHARSET (CHARSET CHAR))          (CHARCODE (CHAR-8-CODE CHAR))          (CS-INFO (IL:\\GETCHARSETINFO CHARSET (DD-FONT DD)))          (CHARACTERS (DD-CHARBITMAPS DD))          (CHARACTER-OFFSET (GET-CHAR-OFFSET CHARCODE DD))          (CHAR-WIDTH (IL:\\FGETWIDTH (DD-WIDTHS-CACHE DD)                             CHARCODE))          (IMAGE-WIDTH (IL:\\FGETIMAGEWIDTH (DD-CHARIMAGEWIDTHS DD)                              CHARCODE))          (CHAR-HEIGHT (+ (DD-CHARSET-ASCENT DD)                          (DD-CHARSET-DESCENT DD)))          (CURX (DD-X-POSITION DD))          (CURY (DD-Y-POSITION DD))          (ROTATION (IL:FONTPROP (DD-FONT DD)                           'IL:ROTATION))          (ASCENT (DD-CHARSET-ASCENT DD))          (DESCENT (DD-CHARSET-DESCENT DD))          (LEFTKERN (IF (DD-LEFTKERNS DD)                        (IL:\\FGETLEFTKERN (DD-LEFTKERNS DD)                               CHARCODE)                     (IL:* IL:\;                                                            "slugs don't have left kern blocks.")                        0))          NEWX NEWY)         (COND            ((OR (EQ CHARCODE (CHAR-CODE #\Newline))                 (EQ CHARCODE (CHAR-CODE #\Linefeed)))             (DSP-PRINT-CR/LF CHARCODE DS DD ROTATION))            ((EQ IMAGE-WIDTH 0)             (IMAGE-ERROR DS DD CHAR))            (T (CASE ROTATION                   (0                       (IL:* IL:|;;| "0 degree rotation.")                      (WHEN (> (SETQ NEWX (+ CURX CHAR-WIDTH))                               (DD-RIGHT-MARGIN DD))                          (DSP-PRINT-CR/LF (CHAR-CODE #\Newline)                                 DS DD ROTATION)                          (SETQ NEWX (+ (DD-X-POSITION DD)                                        CHAR-WIDTH))                          (SETQ CURX (DD-X-POSITION DD))                          (SETQ CURY (DD-Y-POSITION DD)))                      (INCF (DD-X-POSITION-TIMES-16 DD)                            (IL:LSH CHAR-WIDTH 4))                      (INCF CURX LEFTKERN)                   (IL:* IL:\; "note: if clipping-left = left-margin, it won't print the first char on the line if the char has a negative leftkern")                      (WHEN (AND (> CURX (DD-CLIPPING-LEFT DD))                                 (< NEWX (DD-CLIPPING-RIGHT DD))                                 (> (- CURY DESCENT)                                    (DD-CLIPPING-BOTTOM DD))                                 (< (+ CURY ASCENT)                                    (DD-CLIPPING-TOP DD)))                          (IL:* IL:|;;| "we are within the clipping boundaries, so blt it.")                          (IL:BITBLT CHARACTERS (GET-CHAR-OFFSET CHARCODE DD)                                 0                                 (DD-DESTINATION DD)                                 CURX                                 (- CURY DESCENT)                                 IMAGE-WIDTH NIL NIL 'IL:PAINT)                          (SET-LIMITS CURX (- CURY DESCENT)                                 (+ CURX IMAGE-WIDTH)                                 (+ CURY ASCENT)                                 DS)))                   (90                       (WHEN (> (SETQ NEWY (+ CURY CHAR-WIDTH))                               (DD-TOP-MARGIN DD))                          (DSP-PRINT-CR/LF (CHAR-CODE #\Newline)                                 DS DD ROTATION)                          (SETQ CURY (DD-Y-POSITION DD))                          (SETQ NEWY (+ (DD-Y-POSITION DD)                                        CHAR-WIDTH))                          (SETQ CURX (DD-X-POSITION DD)))                      (INCF (DD-Y-POSITION-TIMES-16 DD)                            (IL:LSH CHAR-WIDTH 4))                      (INCF CURY LEFTKERN)                      (WHEN (AND (< NEWY (DD-CLIPPING-TOP DD))                                 (> CURY (DD-CLIPPING-BOTTOM DD))                                 (> (- CURX ASCENT)                                    (DD-CLIPPING-LEFT DD))                                 (< (+ CURX DESCENT)                                    (DD-CLIPPING-RIGHT DD)))                          (IL:BITBLT CHARACTERS 0 (GET-CHAR-OFFSET CHARCODE DD)                                 (DD-DESTINATION DD)                                 (- CURX ASCENT)                                 CURY NIL IMAGE-WIDTH NIL 'IL:PAINT)                          (SET-LIMITS (- CURX ASCENT)                                 CURY                                 (+ CURX DESCENT)                                 (+ CURY IMAGE-WIDTH)                                 DS)))                   (180                       (WHEN (< (SETQ NEWX (- CURX CHAR-WIDTH))                               (DD-LEFT-MARGIN DD))                          (DSP-PRINT-CR/LF (CHAR-CODE #\Newline)                                 DS DD ROTATION)                          (SETQ CURX (DD-X-POSITION DD))                          (SETQ NEWX (- CURX CHAR-WIDTH))                          (SETQ CURY (DD-Y-POSITION DD)))                      (DECF (DD-X-POSITION-TIMES-16 DD)                            (IL:LSH CHAR-WIDTH 4))                      (DECF CURX LEFTKERN)                      (WHEN (AND (< CURX (DD-CLIPPING-RIGHT DD))                                 (< (+ CURY DESCENT)                                    (DD-CLIPPING-TOP DD))                                 (> (- CURY ASCENT)                                    (DD-CLIPPING-BOTTOM DD))                                 (> (- CURX IMAGE-WIDTH)                                    (DD-CLIPPING-LEFT DD)))                          (IL:BITBLT CHARACTERS (GET-CHAR-OFFSET CHARCODE DD)                                 0                                 (DD-DESTINATION DD)                                 (- CURX IMAGE-WIDTH)                                 (- CURY ASCENT)                                 IMAGE-WIDTH NIL NIL 'IL:PAINT)                          (SET-LIMITS (- CURX IMAGE-WIDTH)                                 (- CURY ASCENT)                                 CURX                                 (+ CURY DESCENT)                                 DS)))                   (270                       (WHEN (< (SETQ NEWY (- CURY CHAR-WIDTH))                               (DD-BOTTOM-MARGIN DD))                          (DSP-PRINT-CR/LF (CHAR-CODE #\Newline)                                 DS DD ROTATION)                          (SETQ NEWY (- (DD-Y-POSITION DD)                                        CHAR-WIDTH))                          (SETQ CURX (DD-X-POSITION DD))                          (SETQ CURY (DD-Y-POSITION DD)))                      (DECF (DD-Y-POSITION-TIMES-16 DD)                            (IL:LSH CHAR-WIDTH 4))                      (DECF CURY LEFTKERN)                      (WHEN (AND (> NEWY (DD-CLIPPING-BOTTOM DD))                                 (> (- CURX DESCENT)                                    (DD-CLIPPING-LEFT DD))                                 (< (+ CURX ASCENT)                                    (DD-CLIPPING-RIGHT DD))                                 (< CURY (DD-CLIPPING-TOP DD)))                          (IL:BITBLT CHARACTERS 0 (GET-CHAR-OFFSET CHARCODE DD)                                 (DD-DESTINATION DD)                                 (- CURX DESCENT)                                 (- CURY IMAGE-WIDTH)                                 NIL IMAGE-WIDTH NIL 'IL:PAINT)                          (SET-LIMITS (- CURX DESCENT)                                 (- CURY IMAGE-WIDTH)                                 (+ CURX ASCENT)                                 CURY DS))))))))(DEFUN DSP-FONT (HQ-STREAM FONTDESCRIPTOR)(IL:* IL:|;;;| "if a fontdescriptor is given, change to that font and return the old font.  Otherwise, just return the current font.")   (LET ((DD (GET-DD HQ-STREAM))         ROTATION OLDFONT NEWFONT)        (SETQ OLDFONT (DD-FONT DD))        (WHEN FONTDESCRIPTOR            (SETQ NEWFONT (OR (IL:\\COERCEFONTDESC FONTDESCRIPTOR 'IL:4045HQ T)                              (IF (TYPEP FONTDESCRIPTOR 'IL:FONTCLASS)                                  (ERROR "font not found ~s." (CDR (ASSOC 'IL:4045HQ                                                                          (IL:FFETCH (                                                                                         IL:FONTCLASS                                                                                          IL:OTHERFDS                                                                                          )                                                                             IL:OF FONTDESCRIPTOR                                                                                 ))))                                  (IL:FONTCOPY FONTDESCRIPTOR 'IL:DEVICE :4045HQ))))            (IL:* IL:|;;|           "cause the user could have called out a rotated font while in rotated mode...")            (SETQ ROTATION (NORMALIZE-ROTATION (+ (DD-ROTATION DD)                                                  (IL:FONTPROP NEWFONT 'IL:ROTATION))))            (SETQ NEWFONT (IL:FONTCOPY NEWFONT 'IL:ROTATION ROTATION))            (UNLESS (EQ OLDFONT NEWFONT)                (SETF (DD-FONT DD)                      NEWFONT)                (SETF (DD-LINE-FEED DD)                      (IL:FFETCH IL:|\\SFHeight| IL:OF NEWFONT))                (SETF (DD-SPACEWIDTH DD)                      (ROUND (* 16 (DD-SPACE-FACTOR DD)                                (IL:CHARWIDTH (CHAR-CODE #\Space)                                       NEWFONT))))                (FIX-LINE-LENGTH HQ-STREAM DD)                (CHANGE-CHARSET HQ-STREAM DD 0)))        OLDFONT))(DEFUN DSP-SPACE-FACTOR (HQ-STREAM NEW-FACTOR)(IL:* IL:|;;;| "if a new space factor is given, set the stream accordingly; in any case, return the old value.")   (LET ((DD (GET-DD HQ-STREAM))         ROTATION OLDFACTOR NEWFONT)        (SETQ OLDFACTOR (DD-SPACE-FACTOR DD))        (WHEN NEW-FACTOR            (UNLESS (NUMBERP NEW-FACTOR)                   (ERROR "New space factor ~s is not a number." NEW-FACTOR))            (UNLESS (EQL OLDFACTOR NEW-FACTOR)                (SETF (DD-SPACE-FACTOR DD)                      NEW-FACTOR)                (SETF (DD-SPACEWIDTH DD)                      (ROUND (* 16 (DD-SPACE-FACTOR DD)                                (IL:CHARWIDTH (CHAR-CODE #\Space)                                       (DD-FONT DD)))))))        OLDFACTOR))(DEFUN STRING-WIDTH (HQ-STREAM STRING RDTBL)(IL:* IL:|;;;| "figure out the width of the string in the current font and the readtable given.")   (IL:\\STRINGWIDTH.GENERIC STRING (DD-FONT (GET-DD HQ-STREAM))          RDTBL          (CHAR-WIDTH HQ-STREAM (CHAR-CODE #\Space))))(DEFUN CHAR-WIDTH (HQ-STREAM CHARCODE)(IL:* IL:|;;;| "get the width of the charcode in the current font.")   (IL:\\FGETWIDTH (DD-WIDTHS-CACHE (GET-DD HQ-STREAM))          CHARCODE))(DEFMACRO CHARSET (CHARCODE)(IL:* IL:|;;;| "return the CHARSET of the CHARCODE given.")   `(LDB (BYTE 8 8)         ,CHARCODE))(DEFMACRO GET-CHAR-OFFSET (CC DD)   `(IL:\\GETBASE (DD-OFFSETS-CACHE ,DD)           ,CC))(DEFUN CHANGE-CHARSET (DS DD CHARACTER)(IL:* IL:|;;;| "change the charset of the DD to the new character set.  Fix all other appropriate fields.")   (LET* ((CHARSET (CHARSET CHARACTER))          (CSINFO (IL:\\GETCHARSETINFO CHARSET (DD-FONT DD))))         (SETF (DD-WIDTHS-CACHE DD)               (IL:FFETCH (IL:CHARSETINFO IL:WIDTHS) IL:OF CSINFO))         (SETF (DD-OFFSETS-CACHE DD)               (IL:FFETCH (IL:CHARSETINFO IL:OFFSETS) IL:OF CSINFO))         (SETF (DD-CHARIMAGEWIDTHS DD)               (IL:FFETCH (IL:CHARSETINFO IL:IMAGEWIDTHS) IL:OF CSINFO))         (SETF (DD-LEFTKERNS DD)               (IL:FFETCH (IL:CHARSETINFO IL:LEFTKERN) IL:OF CSINFO))         (SETF (DD-CHARSET DD)               CHARSET)         (SETF (DD-CHARBITMAPS DD)               (IL:FFETCH (IL:CHARSETINFO IL:CHARSETBITMAP) IL:OF CSINFO))         (SETF (DD-CHARSET-ASCENT DD)               (IL:FFETCH (IL:CHARSETINFO IL:CHARSETASCENT) IL:OF CSINFO))         (SETF (DD-CHARSET-DESCENT DD)               (IL:FFETCH (IL:CHARSETINFO IL:CHARSETDESCENT) IL:OF CSINFO))))(DEFUN DSP-PRINT-CR/LF (CHARCODE DS DD ROTATION)(IL:* IL:|;;;| "CHARCODE is EOL, CR, or LF Assumes that DS has been checked by DSP-PRINT-CHAR")   (LET (NEWX NEWY)        (IL:* IL:|;;| "destination lower-left corner is 0,0.")        (CASE ROTATION            (0                                               (IL:* IL:\; "easy case.")               (COND                  ((< (SETQ NEWY (- (DD-Y-POSITION DD)                                    (DD-LINE-FEED DD)))                      (DD-BOTTOM-MARGIN DD))                   (NEW-PAGE DS))                  (T (SETF (DD-Y-POSITION DD)                           NEWY)                     (IF (EQ CHARCODE (CHAR-CODE #\Newline))                         (SETF (DD-X-POSITION DD)                               (DD-LEFT-MARGIN DD))))))            (90 (COND                   ((> (SETQ NEWX (+ (DD-X-POSITION DD)                                     (DD-LINE-FEED DD)))                       (DD-RIGHT-MARGIN DD))                    (NEW-PAGE DS))                   (T (SETF (DD-X-POSITION DD)                            NEWX)                      (IF (EQ CHARCODE (CHAR-CODE #\Newline))                          (SETF (DD-Y-POSITION DD)                                (DD-BOTTOM-MARGIN DD))))))            (180 (COND                    ((> (SETQ NEWY (+ (DD-Y-POSITION DD)                                      (DD-LINE-FEED DD)))                        (DD-TOP-MARGIN DD))                     (NEW-PAGE DS))                    (T (SETF (DD-Y-POSITION DD)                             NEWY)                       (IF (EQ CHARCODE (CHAR-CODE #\Newline))                           (SETF (DD-X-POSITION DD)                                 (DD-RIGHT-MARGIN DD))))))            (270 (COND                    ((< (SETQ NEWX (- (DD-X-POSITION DD)                                      (DD-LINE-FEED DD)))                        (DD-LEFT-MARGIN DD))                     (NEW-PAGE DS))                    (T (SETF (DD-X-POSITION DD)                             NEWX)                       (IF (EQ CHARCODE (CHAR-CODE #\Newline))                           (SETF (DD-Y-POSITION DD)                                 (DD-TOP-MARGIN DD))))))            (OTHERWISE (ERROR "~a rotation is not supported." ROTATION)))        (WHEN (EQ CHARCODE (CHAR-CODE #\Newline))            (IL:* IL:|;;| "don't forget the character position stuff.")            (IL:REPLACE (STREAM IL:CHARPOSITION) IL:OF DS IL:WITH 0))))(DEFUN DSP-PRINT-CHAR (HQ-STREAM CHARCODE)   (IL:* IL:|;;|  "Displays the character and increments the Xposition.  STREAM is guaranteed to be of type 4045HQ.")   (LET* ((DD (GET-DD HQ-STREAM))          (ROTATION (DD-ROTATION DD))          NSCODE)         (IL:* IL:|;;| "fixup and allow for changes from ascii to NS.")         (SETQ NSCODE (COND                         ((FAT-CHAR-P CHARCODE)                          CHARCODE)                         (T (GET-TRANSLATED-CHARCODE CHARCODE (DD-FONT DD)))))         (IL:SELCHARQ NSCODE               (IL:SPACE (DSP-PRINT-SPACE HQ-STREAM DD ROTATION))               ((IL:EOL IL:CR IL:LF)                       (DSP-PRINT-CR/LF NSCODE HQ-STREAM DD ROTATION))               (IL:FF (NEW-PAGE HQ-STREAM)                      (IL:* IL:|;;| "reset the character position.")                      (IL:FREPLACE (STREAM IL:CHARPOSITION) IL:OF HQ-STREAM IL:WITH                                                                                    0))               (IL:TAB (DSP-PRINT-TAB HQ-STREAM DD ROTATION))               (COND                  ((< NSCODE 32)                   (IL:* IL:|;;| "control char")                   (BLT-CHAR NSCODE HQ-STREAM DD))                  (T (BLT-CHAR NSCODE HQ-STREAM DD)                     (INCF (IL:FFETCH (STREAM IL:CHARPOSITION) IL:OF HQ-STREAM)                           1))))))(XCL:DEFINLINE DO-TAB-X (NEWX DD STREAM)   (AND NEWX (SETQ NEWX (IL:FIXR NEWX)))   (SETF (DD-X-POSITION DD)         NEWX)   (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)          8))(XCL:DEFINLINE DO-TAB-Y (NEWX DD STREAM)   (AND NEWX (SETQ NEWX (IL:FIXR NEWX)))   (SETF (DD-Y-POSITION DD)         NEWX)   (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)          8))(DEFUN DSP-PRINT-TAB (STREAM DD ROTATION)   (LET ((TAB-WIDTH (IL:UNFOLD (CHAR-WIDTH STREAM (CHAR-CODE #\Space))                           8))         (CURX (DD-X-POSITION DD))         (CURY (DD-Y-POSITION DD))         NEWX NEWY)        (CASE ROTATION            (0 (IF (> (SETQ NEWX (+ CURX TAB-WIDTH))                      (DD-RIGHT-MARGIN DD))                   (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                   (DO-TAB-X NEWX DD STREAM)))            (90 (IF (> (SETQ NEWY (+ CURY TAB-WIDTH))                       (DD-TOP-MARGIN DD))                    (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                    (DO-TAB-Y NEWY DD STREAM)))            (180 (IF (< (SETQ NEWX (- CURX TAB-WIDTH))                        (DD-LEFT-MARGIN DD))                     (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                     (DO-TAB-X NEWX DD STREAM)))            (270 (IF (< (SETQ NEWY (- CURY TAB-WIDTH))                        (DD-BOTTOM-MARGIN DD))                     (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                     (DO-TAB-Y NEWY DD STREAM)))            (OTHERWISE (ERROR "Only rotations of 90, 180, 270 are supported ~a" ROTATION)))))(DEFUN DSP-PRINT-SPACE (STREAM DD ROTATION)   (IL:* IL:|;;| "Print a space (amplified by SPACEFACTOR appropriately), taking account of the 4 possible rotations.")   (LET* ((SPACE-WIDTH-TIMES-16 (DD-SPACEWIDTH DD))          (SPACE-WIDTH (IL:RSH SPACE-WIDTH-TIMES-16 4))          (CURX-16 (DD-X-POSITION-TIMES-16 DD))          (CURY-16 (DD-Y-POSITION-TIMES-16 DD))          (CURX (DD-X-POSITION DD))          (CURY (DD-Y-POSITION DD))          NEWX NEWY)         (CASE ROTATION             (0 (IF (> (SETQ NEWX (+ CURX SPACE-WIDTH))                       (DD-RIGHT-MARGIN DD))                    (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                    (PROGN (SETF (DD-X-POSITION-TIMES-16 DD)                                 (IL:FIXR (+ CURX-16 SPACE-WIDTH-TIMES-16)))                           (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)                                  1))))             (90 (IF (> (SETQ NEWY (+ CURY SPACE-WIDTH))                        (DD-TOP-MARGIN DD))                     (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                     (PROGN (SETF (DD-Y-POSITION-TIMES-16 DD)                                  (IL:FIXR (+ CURY-16 SPACE-WIDTH-TIMES-16)))                            (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)                                   1))))             (180 (IF (< (SETQ NEWX (- CURX SPACE-WIDTH))                         (DD-LEFT-MARGIN DD))                      (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                      (PROGN (SETF (DD-X-POSITION-TIMES-16 DD)                                   (IL:FIXR (- CURX-16 SPACE-WIDTH-TIMES-16)))                             (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)                                    1))))             (270 (IF (< (SETQ NEWY (- CURY SPACE-WIDTH))                         (DD-BOTTOM-MARGIN DD))                      (DSP-PRINT-CR/LF #\Newline STREAM DD ROTATION)                      (PROGN (SETF (DD-Y-POSITION-TIMES-16 DD)                                   (IL:FIXR (- CURY-16 SPACE-WIDTH-TIMES-16)))                             (IL:ADD (IL:|fetch| IL:CHARPOSITION IL:|of| STREAM)                                    1))))             (OTHERWISE (ERROR "Only rotations of 90, 180, 270 are supported ~a" ROTATION)))))(DEFMACRO CHAR-8-CODE (CHAR-CODE)   `(LDB (BYTE 8 0)         ,CHAR-CODE))(IL:* IL:|;;| "margin/dd functions ")(DEFUN DSP-TRANSLATE (HQ-STREAM X Y)(IL:* IL:|;;;| "translate all coordinates by the given x and y.")   (AND X (SETQ X (IL:FIXR X)))   (AND Y (SETQ Y (IL:FIXR Y)))   (LET ((DD (GET-DD HQ-STREAM)))        (ECASE (DD-ROTATION DD)            ((0)                (INCF (DD-X-OFFSET DD)                     X)               (INCF (DD-Y-OFFSET DD)                     Y))            ((90)                (DECF (DD-X-OFFSET DD)                     Y)               (INCF (DD-Y-OFFSET DD)                     X))            ((180)                (DECF (DD-X-OFFSET DD)                     X)               (DECF (DD-Y-OFFSET DD)                     Y))            ((270)                (INCF (DD-X-OFFSET DD)                     Y)               (DECF (DD-Y-OFFSET DD)                     X)))))(DEFUN DSPRESET (STREAM)   (LET* ((DD (GET-DD STREAM))          (FONT (DD-FONT DD))          (FONTHEIGHT (IL:FONTHEIGHT FONT)))         (CASE (IL:FONTPROP FONT 'IL:ROTATION)             (0 (SETF (DD-X-POSITION DD)                      (DD-LEFT-MARGIN DD))                (SETF (DD-Y-POSITION DD)                      (1- (- (DD-TOP-MARGIN DD)                             FONTHEIGHT))))             (90                 (SETF (DD-X-POSITION DD)                      (1- (- (DD-RIGHT-MARGIN DD)                             FONTHEIGHT)))                (SETF (DD-Y-POSITION DD)                      (- (DD-TOP-MARGIN DD))))             (180                 (SETF (DD-X-POSITION DD)                      (DD-RIGHT-MARGIN DD))                (SETF (DD-Y-POSITION DD)                      (1+ (+ (DD-BOTTOM-MARGIN DD)                             FONTHEIGHT))))             (270                 (SETF (DD-X-POSITION DD)                      (1+ (+ (DD-LEFT-MARGIN DD)                             FONTHEIGHT)))                (SETF (DD-Y-POSITION DD)                      (DD-BOTTOM-MARGIN DD)))             (OTHERWISE (ERROR "Bad rotation ~a" (IL:FONTPROP FONT 'IL:ROTATION))))         (PUT-LIMITS STREAM NIL)         (UNMARK-PAGE-CHANGED STREAM)         (IL:* IL:|;;| "set the character position to 0 also.")         (IL:FREPLACE (STREAM IL:CHARPOSITION) IL:OF STREAM IL:WITH 0)         (IL:* IL:|;;| "and clear the destination bitmap")         (IL:\\CLEARBM (DD-DESTINATION DD)                IL:WHITESHADE)))(DEFUN DSPCLIPPINGREGION (STREAM REGION)   (LET* ((DD (GET-DD STREAM))          (OLD-REGION (DD-CLIPPING-REGION DD))          (DEST-DD (GET-DD (GET-BACKING-STREAM STREAM T)))          (CSINFO (IL:\\GETCHARSETINFO 0 (DD-FONT DD))))         (WHEN REGION             (COND                ((IL:TYPE? IL:REGION REGION)                 (IL:* IL:|;;| "make sure you are using a region.")                 (SETF (DD-CLIPPING-REGION DD)                       REGION)                 (FIX-CLIPPING-REGION DD REGION)                 (IL:* IL:|;;| "fix the DD for the backingstream")                 (IL:UNINTERRUPTABLY                     (IL:|replace| (IL:\\DISPLAYDATA IL:|DDClippingRegion|) IL:|of| DEST-DD                        IL:|with| REGION)                     (IL:|\\SFFixClippingRegion| DEST-DD)                     (IL:|\\SFFixY| DEST-DD CSINFO)))                (T (ERROR "~s is an illegal region." REGION))))         OLD-REGION))(DEFUN DSPOPERATION (HQ-STREAM OPERATION)   (LET* ((DEST-DD (GET-DD (GET-BACKING-STREAM HQ-STREAM T)))          (OLD-OPERATION (IL:FFETCH (IL:\\DISPLAYDATA IL:DDOPERATION) IL:OF DEST-DD)))         (AND OPERATION (COND                           ((MEMBER OPERATION '(IL:PAINT IL:REPLACE IL:INVERT IL:ERASE))                            (IL:UNINTERRUPTABLY                                (IL:FREPLACE (IL:\\DISPLAYDATA IL:DDOPERATION) IL:OF DEST-DD                                   IL:WITH OPERATION)                                (IL:\\SETPBTFUNCTION (IL:FFETCH (IL:\\DISPLAYDATA IL:DDPILOTBBT)                                                        IL:OF DEST-DD)                                       (IL:FFETCH (IL:\\DISPLAYDATA IL:DDSOURCETYPE) IL:OF                                                                                         DEST-DD)                                       OPERATION)))                           (T (ERROR "ILLEGAL ARG ~a" OPERATION))))         OLD-OPERATION))(DEFUN DSP-BOTTOM-MARGIN (HQ-STREAM &OPTIONAL Y-POS)(IL:* IL:|;;;| "set the bottom-margin of the stream if Y-POS is supplied, return the old value.")   (AND Y-POS (SETQ Y-POS (IL:FIXR Y-POS)))   (LET ((DD (GET-DD HQ-STREAM)))        (PROG1 (ECASE (DD-ROTATION DD)                   ((0) (UNTRANSFORM-Y 0 (DD-BOTTOM-MARGIN DD)                               DD))                   ((90) (UNTRANSFORM-Y (DD-RIGHT-MARGIN DD)                                0 DD))                   ((180) (UNTRANSFORM-Y 0 (DD-TOP-MARGIN DD)                                 DD))                   ((270) (UNTRANSFORM-Y (DD-LEFT-MARGIN DD)                                 0 DD)))            (WHEN Y-POS                (COND                   ((AND (NUMBERP Y-POS)                         (> Y-POS -1))                    (CASE (DD-ROTATION DD)                        ((0) (SETF (DD-BOTTOM-MARGIN DD)                                   (TRANSFORM-Y 0 Y-POS DD)))                        ((90) (SETF (DD-RIGHT-MARGIN DD)                                    (TRANSFORM-Y Y-POS 0 DD)))                        ((180) (SETF (DD-TOP-MARGIN DD)                                     (TRANSFORM-Y 0 Y-POS DD)))                        ((270) (SETF (DD-LEFT-MARGIN DD)                                     (TRANSFORM-Y Y-POS 0 DD)))))                   (T (ERROR "~a is an illegal y-position." Y-POS)))))))(DEFUN DSP-TOP-MARGIN (HQ-STREAM &OPTIONAL Y-POS)(IL:* IL:|;;;| "reset the top margin to Y-POS if given, return the old value.")   (AND Y-POS (SETQ Y-POS (IL:FIXR Y-POS)))   (LET ((DD (GET-DD HQ-STREAM)))        (PROG1 (ECASE (DD-ROTATION DD)                   ((0) (UNTRANSFORM-Y 0 (DD-TOP-MARGIN DD)                               DD))                   ((90) (UNTRANSFORM-Y (DD-RIGHT-MARGIN DD)                                0 DD))                   ((180) (UNTRANSFORM-Y 0 (DD-BOTTOM-MARGIN DD)                                 DD))                   ((270) (UNTRANSFORM-Y (DD-LEFT-MARGIN DD)                                 0 DD)))            (WHEN Y-POS                (COND                   ((AND (NUMBERP Y-POS)                         (> Y-POS -1))                    (CASE (DD-ROTATION DD)                        ((0) (SETF (DD-TOP-MARGIN DD)                                   (TRANSFORM-Y 0 Y-POS DD)))                        ((90) (SETF (DD-RIGHT-MARGIN DD)                                    (TRANSFORM-Y Y-POS 0 DD)))                        ((180) (SETF (DD-BOTTOM-MARGIN DD)                                     (TRANSFORM-Y 0 Y-POS DD)))                        ((270) (SETF (DD-LEFT-MARGIN DD)                                     (TRANSFORM-Y Y-POS 0 DD)))))                   (T (ERROR "~a is an illegal y-position." Y-POS)))))))(DEFUN DSP-LEFT-MARGIN (4045HQSTREAM &OPTIONAL XPOSITION)(IL:* IL:|;;;| "return the old left margin.  If a new one is given, set it.")   (AND XPOSITION (SETQ XPOSITION (IL:FIXR XPOSITION)))   (LET ((DD (GET-DD 4045HQSTREAM)))        (PROG1 (ECASE (DD-ROTATION DD)                   ((0) (UNTRANSFORM-X (DD-LEFT-MARGIN DD)                               0 DD))                   ((90) (UNTRANSFORM-X 0 (DD-BOTTOM-MARGIN DD)                                DD))                   ((180) (UNTRANSFORM-X (DD-RIGHT-MARGIN DD)                                 0 DD))                   ((270) (UNTRANSFORM-X 0 (DD-TOP-MARGIN DD)                                 DD)))            (WHEN XPOSITION                (COND                   ((AND (NUMBERP XPOSITION)                         (> XPOSITION -1))                    (CASE (DD-ROTATION DD)                        ((0) (SETF (DD-LEFT-MARGIN DD)                                   (TRANSFORM-X XPOSITION 0 DD)))                        ((90) (SETF (DD-BOTTOM-MARGIN DD)                                    (TRANSFORM-X 0 XPOSITION DD)))                        ((180) (SETF (DD-RIGHT-MARGIN DD)                                     (TRANSFORM-X 0 XPOSITION DD)))                        ((270) (SETF (DD-TOP-MARGIN DD)                                     (TRANSFORM-X 0 XPOSITION DD))))                    (FIX-LINE-LENGTH 4045HQSTREAM DD))                   (T (ERROR "~a is an illegal x-position." XPOSITION)))))))(DEFUN DSP-RIGHT-MARGIN (HQ-STREAM &OPTIONAL X-POS)(IL:* IL:|;;;| "set the right margin if x-pos is given.  return the old value.")   (AND X-POS (SETQ X-POS (IL:FIXR X-POS)))   (LET ((DD (GET-DD HQ-STREAM)))        (PROG1 (ECASE (DD-ROTATION DD)                   ((0) (UNTRANSFORM-X (DD-RIGHT-MARGIN DD)                               0 DD))                   ((90) (UNTRANSFORM-X 0 (DD-TOP-MARGIN DD)                                DD))                   ((180) (UNTRANSFORM-X (DD-LEFT-MARGIN DD)                                 0 DD))                   ((270) (UNTRANSFORM-X 0 (DD-BOTTOM-MARGIN DD)                                 DD)))            (WHEN X-POS                (COND                   ((AND (NUMBERP X-POS)                         (> X-POS -1))                    (CASE (DD-ROTATION DD)                        ((0) (SETF (DD-RIGHT-MARGIN DD)                                   (TRANSFORM-X X-POS 0 DD)))                        ((90) (SETF (DD-TOP-MARGIN DD)                                    (TRANSFORM-X 0 X-POS DD)))                        ((180) (SETF (DD-LEFT-MARGIN DD)                                     (TRANSFORM-X X-POS 0 DD)))                        ((270) (SETF (DD-BOTTOM-MARGIN DD)                                     (TRANSFORM-X 0 X-POS DD))))                    (FIX-LINE-LENGTH HQ-STREAM DD))                   (T (ERROR "~a is an illegal x-position." X-POS)))))))(DEFUN DSP-LINE-FEED (HQ-STREAM &OPTIONAL DELTA-Y)(IL:* IL:|;;;| "if delta-y is nil, this will return the number of dots a line feed will move.  If delta-y is non-nil, it will be changed to the new value, and return the old value.")   (AND DELTA-Y (SETQ DELTA-Y (IL:FIXR DELTA-Y)))   (PROG1 (DD-LINE-FEED (GET-DD HQ-STREAM))       (AND DELTA-Y (COND                       ((NUMBERP DELTA-Y)                        (SETF (DD-LINE-FEED (GET-DD HQ-STREAM))                              DELTA-Y))                       (T (ERROR "~a is an illegal value for LINE FEED." DELTA-Y))))))(DEFUN DSP-X-POSITION (HQ-STREAM NEWX)(IL:* IL:|;;;| "if NEWX then change the stream X position to it.  Return the old value.  NEWX is in USER coordinates.")   (AND NEWX (SETQ NEWX (IL:FIXR NEWX)))   (LET ((DD (GET-DD HQ-STREAM)))        (PROG1 (UNTRANSFORM-X (DD-X-POSITION DD)                      (DD-Y-POSITION DD)                      DD)            (COND               ((NULL NEWX))               ((NUMBERP NEWX)                (ECASE (DD-ROTATION DD)                    ((0 180) (SETF (DD-X-POSITION DD)                                   (TRANSFORM-X NEWX 0 DD)))                    ((90 270) (SETF (DD-Y-POSITION DD)                                    (TRANSFORM-Y NEWX 0 DD)))))               (T (ERROR "~a is an illegal x-position." NEWX))))))(DEFUN DSP-Y-POSITION (HQ-STREAM NEWY)(IL:* IL:|;;;| "change the y position in the stream if given newy and return the old value no matter what.")   (AND NEWY (SETQ NEWY (IL:FIXR NEWY)))   (LET ((DD (GET-DD HQ-STREAM)))        (PROG1 (UNTRANSFORM-Y (DD-X-POSITION DD)                      (DD-Y-POSITION DD)                      DD)            (COND               ((NULL NEWY))               ((NUMBERP NEWY)                (ECASE (DD-ROTATION DD)                    ((0 180) (SETF (DD-Y-POSITION DD)                                   (TRANSFORM-Y 0 NEWY DD)))                    ((90 270) (SETF (DD-X-POSITION DD)                                    (TRANSFORM-X 0 NEWY DD)))))               (T (ERROR "~a is an illegal y-position." NEWY))))))(DEFUN FIX-CLIPPING-REGION (DD REGION)(IL:* IL:|;;;| "compute the top, bottom, left and right edges of the clipping region in destination coordinates to save computation every BltChar and coordinate transformation.")   (IL:* IL:|;;| "put the region into device coordinates.")   (SETQ REGION (NORMALIZE-REGION REGION DD))   (LET ((DEST-WIDTH (IL:FFETCH (IL:BITMAP IL:BITMAPWIDTH) IL:OF (DD-DESTINATION DD)))         (DEST-HEIGHT (IL:FFETCH (IL:BITMAP IL:BITMAPHEIGHT) IL:OF (DD-DESTINATION DD)))         (LEFT (IL:FIXR (IL:FFETCH (IL:REGION IL:LEFT) IL:OF REGION)))         (BOTTOM (IL:FIXR (IL:FFETCH (IL:REGION IL:BOTTOM) IL:OF REGION)))         (WIDTH (IL:FIXR (IL:FFETCH (IL:REGION IL:WIDTH) IL:OF REGION)))         (HEIGHT (IL:FIXR (IL:FFETCH (IL:REGION IL:HEIGHT) IL:OF REGION))))        (SETF (DD-CLIPPING-RIGHT DD)              (MAX 0 (MIN (+ LEFT WIDTH)                          DEST-WIDTH)))        (SETF (DD-CLIPPING-LEFT DD)              (MIN (MAX LEFT 0)                   IL:MAX.SMALL.INTEGER))        (SETF (DD-CLIPPING-TOP DD)              (MAX 0 (MIN (+ BOTTOM HEIGHT)                          DEST-HEIGHT)))        (SETF (DD-CLIPPING-BOTTOM DD)              (MIN (MAX BOTTOM 0)                   IL:MAX.SMALL.INTEGER))))(DEFUN FIX-LINE-LENGTH (HQ-STREAM &OPTIONAL DD)(IL:* IL:|;;;| "fix the linelength field of the stream.")   (IL:FREPLACE (STREAM IL:LINELENGTH) IL:OF HQ-STREAM      IL:WITH (MIN IL:MAX.SMALLP (MAX 1 (ROUND (- (DSP-RIGHT-MARGIN HQ-STREAM)                                                      (DSP-LEFT-MARGIN HQ-STREAM))                                                   (IL:FFETCH (IL:FONTDESCRIPTOR                                                                          IL:FONTAVGCHARWIDTH)                                                      IL:OF (DD-FONT DD)))))))(DEFMACRO GET-BACKING-STREAM (HQ-STREAM &OPTIONAL DONT-MARK-AS-CHANGED)   (IF DONT-MARK-AS-CHANGED       `(IL:FFETCH (STREAM IL:F5) IL:OF ,HQ-STREAM)       `(PROG1 (IL:FFETCH (STREAM IL:F5) IL:OF ,HQ-STREAM)            (MARK-PAGE-CHANGED ,HQ-STREAM))))(DEFMACRO GET-OUTPUT-STREAM (HQ-STREAM)(IL:* IL:|;;;| "return the real output stream from the given HQ stream")   `(IL:FFETCH (STREAM IL:F1) IL:OF ,HQ-STREAM))(DEFMACRO GET-DD (HQ-STREAM)(IL:* IL:|;;;| " return the DD for the given stream.")   `(IL:FFETCH (STREAM IL:IMAGEDATA) IL:OF ,HQ-STREAM))(IL:* IL:|;;| "special")(DEFVAR *DEVICE-LOCK* (IL:CREATE.MONITORLOCK "4045 Device Lock" T))(DEFVAR *DEFAULT-DESTINATION* "{Pso}")(XCL:DEFGLOBALVAR *DESTINATION-BITMAP* NIL   "destination bitmap for the stream")(DEFVAR *MAX-BUFFER-PAGES* 2625   "max pages to allocate for the page-buffer. = 8.5x14")(DEFVAR *PAPER-WIDTH* 8.5)(DEFVAR *PAPER-HEIGHT* 11.0)(DEFCONSTANT *POINTS-PER-INCH* 300   "points per inch")(DEFCONSTANT *4045-SCALE-FACTOR* 4)(XCL:DEFGLOBALVAR *IMAGEOPS* NIL)(DEFVAR *DEVICE* NIL)(DEFVAR *BREAK-PAGE* NIL)(XCL:DEFGLOBALVAR *BACKINGSTREAM* NIL   "The display stream to the bitmap.")(IL:* IL:|;;| "delimiting functions")(DEFMACRO GET-LIMITS (HQ-STREAM)(IL:* IL:|;;;| "return the limits of the stream.")   `(IL:FFETCH (STREAM IL:F4) IL:OF ,HQ-STREAM))(DEFMACRO PUT-LIMITS (STREAM LIMITS)   `(IL:FREPLACE (STREAM IL:F4) IL:OF ,STREAM IL:WITH ,LIMITS))(DEFUN SET-LIMITS (X1 Y1 X2 Y2 HQ-STREAM)(IL:* IL:|;;;| "sets the highest and lowest limits reached SO FAR on the page-buffer. All coordinates are in DEVICE space!!  Make sure the limiters don't exceed page space.")   (SETQ X1 (ROUND X1)         X2         (ROUND X2)         Y1         (ROUND Y1)         Y2         (ROUND Y2))   (LET ((LIMITS (GET-LIMITS HQ-STREAM))         (DD (GET-DD HQ-STREAM)))        (COND           (LIMITS (SETF (LIMITERS-TOP LIMITS)                         (MIN (DD-CLIPPING-TOP DD)                              (MAX Y1 Y2 (LIMITERS-TOP LIMITS))))                  (SETF (LIMITERS-BOTTOM LIMITS)                        (MAX 0 (MIN Y1 Y2 (LIMITERS-BOTTOM LIMITS))))                  (SETF (LIMITERS-RIGHT LIMITS)                        (MIN (DD-CLIPPING-RIGHT DD)                             (MAX X1 X2 (LIMITERS-RIGHT LIMITS))))                  (PUT-LIMITS HQ-STREAM LIMITS))           (T (PUT-LIMITS HQ-STREAM (MAKE-LIMITERS :TOP (MIN (DD-CLIPPING-TOP DD)                                                             (MAX Y1 Y2))                                           :BOTTOM                                           (MAX 0 (MIN Y1 Y2))                                           :RIGHT                                           (MIN (DD-CLIPPING-RIGHT DD)                                                (MAX X1 X2))))))))(XCL:DEFINLINE MARK-PAGE-CHANGED (HQ-STREAM)   (IL:FREPLACE (STREAM IL:FW6) IL:OF HQ-STREAM IL:WITH 1))(XCL:DEFINLINE UNMARK-PAGE-CHANGED (HQ-STREAM)   (IL:FREPLACE (STREAM IL:FW6) IL:OF HQ-STREAM IL:WITH 0))(XCL:DEFINLINE PAGE-CHANGED-P (HQ-STREAM)   (IF (EQ (IL:FFETCH (STREAM IL:FW6) IL:OF HQ-STREAM)           1)       T       NIL))(IL:* IL:|;;| "graphics functions")(DEFUN NORMALIZE-BRUSH (BRUSH)(IL:* IL:|;;;| "normalize the brush by returning something of the form ")(IL:* IL:|;;;| "(brushshape brushsize).")   (COND      ((NULL BRUSH)       '(ROUND 1))      ((NUMBERP BRUSH)       (LIST 'ROUND BRUSH))      ((ATOM BRUSH)       (ERROR "~a is an illegal brush." BRUSH))      ((AND (MEMBER (CAR BRUSH)                   '(ROUND IL:HORIZONTAL IL:VERTICAL IL:SQUARE IL:DIAGONAL))            (NUMBERP (SECOND BRUSH)))       BRUSH)      (T (ERROR "~a is an illegal brush." BRUSH))))(DEFUN EXPAND-1-LINE (BBT LINE-BASE SCALE)(IL:* IL:|;;;| "expands 1 line of BITMAP located at LINE by SCALE and blts it into DEST.")   (IL:FREPLACE (IL:PILOTBBT IL:PBTDESTBIT) IL:OF BBT IL:WITH 0)   (IL:FREPLACE (IL:PILOTBBT IL:PBTSOURCE) IL:OF BBT IL:WITH LINE-BASE)   (DOTIMES (I SCALE)       (IL:\\PILOTBITBLT BBT 0)       (INCF (IL:FFETCH (IL:PILOTBBT IL:PBTDESTBIT) IL:OF BBT))))(DEFUN MAKE-ROTATED-SOURCE (SOURCEBITMAP LEFT BOTTOM WIDTH HEIGHT ROTATION)(IL:* IL:|;;;| "rotate the bitmap by ROTATION, clipping using width, height")   (ECASE ROTATION       ((90) (LET ((NEW-BITMAP (IL:BITMAPCREATE WIDTH HEIGHT)))                  (IL:BITBLT SOURCEBITMAP LEFT BOTTOM NEW-BITMAP 0 0)                  (IL:ROTATE-BITMAP-LEFT NEW-BITMAP)))       ((180) (LET ((NEW-BITMAP (IL:BITMAPCREATE WIDTH HEIGHT)))                   (IL:BITBLT SOURCEBITMAP LEFT BOTTOM NEW-BITMAP 0 0)                   (IL:ROTATE-BITMAP-LEFT (IL:ROTATE-BITMAP-LEFT NEW-BITMAP))))       ((270) (LET ((NEW-BITMAP (IL:BITMAPCREATE WIDTH HEIGHT)))                   (IL:BITBLT SOURCEBITMAP LEFT BOTTOM NEW-BITMAP 0 0)                   (IL:ROTATE-BITMAP NEW-BITMAP)))))(DEFUN BITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM DESTSTRM DESTINATIONLEFT DESTINATIONBOTTOM                          WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT                          CLIPPEDSOURCEBOTTOM)(IL:* IL:|;;;| "bitblts the sourcebitmap to the destination bitmap scaling it by 4 along the way.")   (IL:* IL:|;;| "Note: this assumes that the call is being made from bitblt, and thus, the SOURCELEFT, SOURCEBOTTOM, DESTINATIONLEFT, DESTINATIONBOTTOM, WIDTH, HEIGHT are pre-set.")   (SCALEDBITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM DESTSTRM DESTINATIONLEFT DESTINATIONBOTTOM           WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT           CLIPPEDSOURCEBOTTOM *4045-SCALE-FACTOR*))(DEFUN BLTSHADE (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION                            CLIPPINGREGION)(IL:* IL:|;;;| "blt the given shade onto the dest bitmap.  DESTINATIONLEFT, DESTINATIONBOTTOM, and OPERATION are guaranteed to be set.")   (SETQ WIDTH (ROUND WIDTH))   (SETQ HEIGHT (ROUND HEIGHT))   (LET (NEWBM)        (COND           ((OR (NULL WIDTH)                (< WIDTH 1))            (ERROR "~a is an illegal WIDTH." WIDTH))           ((OR (NULL HEIGHT)                (< HEIGHT 1))            (ERROR "~a is an illegal HEIGHT." HEIGHT))           (T (SETQ NEWBM (IL:BITMAPCREATE WIDTH HEIGHT))              (IL:\\BLTSHADE.BITMAP TEXTURE NEWBM 0 0 NIL NIL 'IL:REPLACE)              (SCALEDBITBLT NEWBM 0 0 STREAM DESTINATIONLEFT DESTINATIONBOTTOM NIL NIL 'IL:INPUT                      OPERATION NIL CLIPPINGREGION NIL NIL 1)))))(DEFUN GENERICBITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM DD DESTINATIONLEFT DESTINATIONBOTTOM                                 WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION SCALE                                 HQ-STRM)(IL:* IL:|;;;| "blts BITMAP to the destination of DESTSTRM a scanline at a time.")   (IL:* IL:|;;|  "Pilot bitblt is used in EXPAND-1-LINE for speed.  It is a little confusing, but mucho fast.")   (SETQ WIDTH (ROUND WIDTH)         HEIGHT         (ROUND HEIGHT)         SCALE         (ROUND SCALE))   (SETQ CLIPPINGREGION (NORMALIZE-REGION CLIPPINGREGION DD))   (UNLESS (ZEROP (DD-ROTATION DD))       (SETQ SOURCEBITMAP (MAKE-ROTATED-SOURCE SOURCEBITMAP SOURCELEFT SOURCEBOTTOM WIDTH HEIGHT                                 (DD-ROTATION DD)))       (SETQ SOURCELEFT 0 SOURCEBOTTOM 0))   (LET ((SCALED-SOURCE-WIDTH (* WIDTH SCALE)))        (WITH-NORMALIZED-REGION (DESTINATIONLEFT DESTINATIONBOTTOM SCALED-SOURCE-WIDTH                                       (* HEIGHT SCALE)                                       DD)               (DESTINATIONLEFT DESTINATIONBOTTOM DW DH)               (SET-LIMITS DESTINATIONLEFT DESTINATIONBOTTOM (+ DESTINATIONLEFT DW)                      (+ DESTINATIONBOTTOM DH)                      HQ-STRM)               (UNLESS (ZEROP (DD-ROTATION DD))                   (SETQ WIDTH (IL:BITMAPWIDTH SOURCEBITMAP))                   (SETQ HEIGHT (IL:BITMAPHEIGHT SOURCEBITMAP)))               (IL:* IL:|;;|  "destinationleft destinationbottom dw dh are now in DEVICE space!! dw and dh are properly scaled.")               (LET* ((TEMP (IL:BITMAPCREATE DW 1))                      (SOURCERASTER (IL:FETCH (IL:BITMAP IL:BITMAPRASTERWIDTH) IL:OF                                                                                          SOURCEBITMAP                                           ))                      (SOURCEBASE (IL:\\ADDBASE (IL:FETCH (IL:BITMAP IL:BITMAPBASE) IL:OF                                                                                        SOURCEBITMAP)                                         (* (- (IL:BITMAPHEIGHT SOURCEBITMAP)                                               (+ SOURCEBOTTOM HEIGHT))                                            SOURCERASTER)))                      (BBT (IL:CREATE IL:PILOTBBT                                  IL:PBTDISJOINT IL:_ T                                  IL:PBTSOURCE IL:_ SOURCEBASE                                  IL:PBTDEST IL:_ (IL:FETCH (IL:BITMAP IL:BITMAPBASE)                                                     IL:OF TEMP)                                  IL:PBTDESTBPL IL:_ SCALE                                  IL:PBTSOURCEBPL IL:_ 1                                  IL:PBTSOURCEBIT IL:_ SOURCELEFT                                  IL:PBTDESTBIT IL:_ 0                                  IL:PBTFLAGS IL:_ 0                                  IL:PBTHEIGHT IL:_ WIDTH                                  IL:PBTWIDTH IL:_ 1))                      (DESTBITMAP (DD-DESTINATION DD)))                     (DO ((DEST-TOP (1- (+ DESTINATIONBOTTOM DH)))                          (LINE-BASE SOURCEBASE (IL:\\ADDBASE LINE-BASE SOURCERASTER)))                         ((< DEST-TOP DESTINATIONBOTTOM))                       (EXPAND-1-LINE BBT LINE-BASE SCALE)   (IL:* IL:\;                                                            "expand a line into the temp bitmap.")                       (DOTIMES (I SCALE)                           (IL:BITBLT TEMP 0 0 DESTBITMAP DESTINATIONLEFT DEST-TOP NIL NIL SOURCETYPE                                  OPERATION TEXTURE CLIPPINGREGION)                                                             (IL:* IL:\;                                                            "(il:bitblt temp 0 0 w 0 dest-top)")                           (DECF DEST-TOP)))))))(DEFUN SCALEDBITBLT (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM DESTSTRM DESTINATIONLEFT                                DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE                                CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM SCALE)   (LET ((DD (GET-DD DESTSTRM)))        (IL:* IL:|;;| "let's figure out the real left and bottom for the destination.")        (COND           ((EQ SOURCETYPE 'IL:TEXTURE)            (IL:BLTSHADE TEXTURE DESTSTRM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION                    CLIPPINGREGION))           (T (LET (SOURCEDD)                   (IL:* IL:|;;| "set the clipping region (in USER coordinates.)")                   (COND                      ((NULL CLIPPINGREGION)                       (SETQ CLIPPINGREGION (IL:DSPCLIPPINGREGION NIL DESTSTRM)))                      ((IL:REGIONP CLIPPINGREGION))                      (T                                     (IL:* IL:\; "illegal clipping region")                         (ERROR "~a is an illegal CLIPPINGREGION." CLIPPINGREGION)))                   (IL:* IL:|;;| "Make sure the scale is OK.")                   (COND                      ((> (SETQ SCALE (ROUND SCALE))                          0))                      (T                                     (IL:* IL:\;                                                            "scale must be > 0 and an integer.")                         (ERROR "~a is an illegal SCALE." SCALE)))                   (COND                      ((IL:BITMAPP SOURCEBITMAP)                       (IL:* IL:|;;| "we are working with a bitmap.")                       (IL:* IL:|;;| "initialize sourceleft and bottom.")                       (OR SOURCELEFT (SETQ SOURCELEFT 0))                       (OR SOURCEBOTTOM (SETQ SOURCEBOTTOM 0))                       (IL:* IL:|;;|                      "width and height are in USER space also.  Normalize them first.")                       (SETQ WIDTH (COND                                      (WIDTH (MIN WIDTH (- (IL:FETCH (IL:BITMAP IL:BITMAPWIDTH)                                                              IL:OF SOURCEBITMAP)                                                           SOURCELEFT)))                                      (T (IL:FETCH (IL:BITMAP IL:BITMAPWIDTH) IL:OF                                                                                         SOURCEBITMAP)                                         )))                       (SETQ HEIGHT (COND                                       (HEIGHT (MIN HEIGHT (- (IL:FETCH (IL:BITMAP                                                                                    IL:BITMAPHEIGHT)                                                                 IL:OF SOURCEBITMAP)                                                              SOURCEBOTTOM)))                                       (T (IL:FETCH (IL:BITMAP IL:BITMAPHEIGHT) IL:OF                                                                                          SOURCEBITMAP                                                 )))))                      ((SETQ SOURCEDD (IL:\\GETDISPLAYDATA SOURCEBITMAP))                       (OR SOURCELEFT (SETQ SOURCELEFT (REGION-LEFT (IL:FFETCH (IL:\\DISPLAYDATA                                                                                                                                                                    IL:|DDClippingRegion|                                                                                    ) IL:OF                                                                                      SOURCEDD))))                       (OR SOURCEBOTTOM (SETQ SOURCEBOTTOM (REGION-BOTTOM (IL:FFETCH (                                                                                     IL:\\DISPLAYDATA                                                                                                                                                                          IL:|DDClippingRegion|                                                                                          )                                                                             IL:OF SOURCEDD))))                                                             (IL:* IL:\;                                                           "do transformations coming out of source")                       (SETQ SOURCEBITMAP (IL:|fetch| (IL:\\DISPLAYDATA IL:|DDDestination|)                                             IL:|of| SOURCEDD))                       (SETQ CLIPPEDSOURCELEFT (MAX (SETQ SOURCELEFT (IL:\\DSPTRANSFORMX SOURCELEFT                                                                             SOURCEDD))                                                    (IL:|fetch| (IL:\\DISPLAYDATA                                                                            IL:|DDClippingLeft|)                                                       IL:|of| SOURCEDD)))                       (SETQ CLIPPEDSOURCEBOTTOM (MAX (SETQ SOURCEBOTTOM (IL:\\DSPTRANSFORMY                                                                                 SOURCEBOTTOM SOURCEDD                                                                                ))                                                      (IL:|fetch| (IL:\\DISPLAYDATA                                                                              IL:|DDClippingBottom|)                                                         IL:|of| SOURCEDD)))                                                             (IL:* IL:\;                                              "limit the WIDTH and HEIGHT by the source dimensions.")                       (SETQ WIDTH (COND                                      (WIDTH (MIN WIDTH (- (IL:|fetch| (IL:\\DISPLAYDATA                                                                                  IL:|DDClippingRight|                                                                                  ) IL:|of|                                                                                    SOURCEDD)                                                           CLIPPEDSOURCELEFT)))                                      (T (- (IL:|fetch| (IL:\\DISPLAYDATA IL:|DDClippingRight|)                                               IL:|of| SOURCEDD)                                            CLIPPEDSOURCELEFT))))                       (SETQ HEIGHT (COND                                       (HEIGHT (MIN HEIGHT (- (IL:|fetch| (IL:\\DISPLAYDATA                                                                               IL:|DDClippingTop|)                                                                 IL:|of| SOURCEDD)                                                              CLIPPEDSOURCEBOTTOM)))                                       (T (- (IL:|fetch| (IL:\\DISPLAYDATA IL:|DDClippingTop|)                                                IL:|of| SOURCEDD)                                             CLIPPEDSOURCEBOTTOM))))                                                             (IL:* IL:\;                                                "if texture is not given, use the display stream's.")                       (OR TEXTURE (SETQ TEXTURE (IL:|ffetch| (IL:\\DISPLAYDATA IL:|DDTexture|)                                                    IL:|of| SOURCEDD)))))                   (WHEN (AND (> WIDTH 0)                              (> HEIGHT 0))                       (MARK-PAGE-CHANGED DESTSTRM)                       (GENERICBITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM DD DESTINATIONLEFT                               DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE                               CLIPPINGREGION SCALE DESTSTRM)                       T))))))(DEFUN DRAWLINE (HQ-STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)   (IL:* IL:|;;| "draw a line on the page-buffer. ")   (SETQ WIDTH (IF WIDTH                   (ROUND WIDTH)                   1))   (SETQ X1 (ROUND X1)         X2         (ROUND X2)         Y1         (ROUND Y1)         Y2         (ROUND Y2))   (OR OPERATION (SETQ OPERATION 'IL:PAINT))   (OR COLOR (SETQ COLOR 'IL:BLACK))   (LET* ((DD (GET-DD HQ-STREAM))          (BACKING-STREAM (GET-BACKING-STREAM HQ-STREAM))          (BRUSH (NORMALIZE-BRUSH (LIST 'ROUND WIDTH)))          (HALF-BRUSH (CEILING (SECOND BRUSH)                             2)))         (WITH-TRANSFORMED-PAIR (X1 Y1 DD)                (X1 Y1)                (LET NIL (LET (($ROT$ (DD-ROTATION DD)))                              (LET ((X2 (TRANSFORM-X X2 Y2 DD))                                    (Y2 (TRANSFORM-Y X2 Y2 DD)))                                   (SET-LIMITS (- (MIN X1 X2)                                                  HALF-BRUSH)                                          (- (MIN Y1 Y2)                                             HALF-BRUSH)                                          (+ (MAX X1 X2)                                             HALF-BRUSH)                                          (+ (MAX Y1 Y2)                                             HALF-BRUSH)                                          HQ-STREAM)                                   (COND                                      (DASHING                                              (IL:* IL:|;;|                                            "if there is dashing, we have to do it the slow way.")                                             (IL:GLOBALRESOURCE IL:\\BRUSHBBT                                                    (IL:\\LINEWITHBRUSH X1 Y1 X2 Y2 BRUSH                                                           (IL:\\GOOD.DASHLST DASHING BRUSH)                                                           BACKING-STREAM IL:\\BRUSHBBT)))                                      (T (IL:\\CLIPANDDRAWLINE X1 Y1 X2 Y2 (SECOND BRUSH)                                                (CASE OPERATION                                                    ((NIL) (IL:FFETCH (IL:\\DISPLAYDATA                                                                                  IL:DDOPERATION)                                                              IL:OF (GET-DD BACKING-STREAM)))                                                    ((IL:REPLACE IL:PAINT IL:INVERT IL:ERASE)                                                        OPERATION)                                                    (OTHERWISE (ERROR "illegal operation ~a"                                                                       OPERATION)))                                                (DD-DESTINATION DD)                                                (DD-CLIPPING-LEFT DD)                                                (1- (DD-CLIPPING-RIGHT DD))                                                (DD-CLIPPING-BOTTOM DD)                                                (1- (DD-CLIPPING-TOP DD))                                                BACKING-STREAM COLOR))))))))   (MOVE-TO HQ-STREAM X2 Y2)   T)(DEFUN DRAWCIRCLE (HQ-STREAM CENTER-X CENTER-Y RADIUS BRUSH DASHING)   (IL:* IL:|;;| "NB: May need to hack the brush to take account of rotation.")   (SETQ RADIUS (ROUND RADIUS)         BRUSH         (NORMALIZE-BRUSH BRUSH)         CENTER-X         (ROUND CENTER-X)         CENTER-Y         (ROUND CENTER-Y))   (LET ((DD (GET-DD HQ-STREAM))         (HALF-BRUSH (CEILING (SECOND BRUSH)                            2)))        (WITH-TRANSFORMED-PAIR (CENTER-X CENTER-Y DD)               (CENTER-X CENTER-Y)               (SET-LIMITS (- CENTER-X RADIUS HALF-BRUSH)                      (- CENTER-Y RADIUS HALF-BRUSH)                      (+ CENTER-X RADIUS HALF-BRUSH)                      (+ CENTER-Y RADIUS HALF-BRUSH)                      HQ-STREAM)               (IL:\\DRAWCIRCLE.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                      CENTER-X CENTER-Y RADIUS BRUSH DASHING))))(DEFUN FILLCIRCLE (HQ-STREAM CENTER-X CENTER-Y RADIUS TEXTURE)   (SETQ RADIUS (ROUND RADIUS)         CENTER-X         (ROUND CENTER-X)         CENTER-Y         (ROUND CENTER-Y))   (LET ((DD (GET-DD HQ-STREAM)))        (WITH-TRANSFORMED-PAIR (CENTER-X CENTER-Y DD)               (CENTER-X CENTER-Y)               (SET-LIMITS (- CENTER-X RADIUS 8)                      (- CENTER-Y RADIUS 8)                      (+ CENTER-X RADIUS 8)                      (+ CENTER-Y RADIUS 8)                      HQ-STREAM)               (IL:\\FILLCIRCLE.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                      CENTER-X CENTER-Y RADIUS TEXTURE))))(DEFUN DRAWCURVE (HQ-STREAM KNOTS CLOSED BRUSH DASHING)   (SETQ BRUSH (NORMALIZE-BRUSH BRUSH))   (LET* ((DD (GET-DD HQ-STREAM))          (HALF-BRUSH (CEILING (SECOND BRUSH)                             2))          (KNOTS (IL:FOR KT IL:IN KNOTS IL:COLLECT (CONS (TRANSFORM-X (ROUND (CAR KT))                                                                            (ROUND (CDR KT))                                                                            DD)                                                                     (TRANSFORM-Y (ROUND (CAR KT))                                                                            (ROUND (CDR KT))                                                                            DD)))))         (IL:* IL:|;;| "unfortunately, it is very difficult to determine where the curve is going to go, so instead, just compress the entire bitmap.")         (SET-LIMITS (DD-RIGHT-MARGIN DD)                (DD-TOP-MARGIN DD)                (DD-LEFT-MARGIN DD)                (DD-BOTTOM-MARGIN DD)                HQ-STREAM)         (DRAWCURVE1 DD (GET-BACKING-STREAM HQ-STREAM)                KNOTS CLOSED BRUSH DASHING)         T))(DEFUN INTERNAL-DRAWLINE (X1 Y1 X2 Y2 DASHLST BRUSH BACKING-STREAM DD)(IL:* IL:|;;;| "assumes all the coordinates are DEVICE coordinates and that the brush and dashing have been normalized.")   (IL:GLOBALRESOURCE IL:\\BRUSHBBT (LET ((BBT IL:\\BRUSHBBT))                                         (IL:\\LINEWITHBRUSH X1 Y1 X2 Y2 BRUSH DASHLST BACKING-STREAM                                                BBT)                                         (INTERNAL-MOVETO X2 Y2 DD))))(DEFUN INTERNAL-MOVETO (X Y DD)(IL:* IL:|;;;| "Moveto with X and Y being DESTINATION coordinates.")   (SETF (DD-X-POSITION DD)         X)   (SETF (DD-Y-POSITION DD)         Y))(DEFUN DRAWCURVE1 (DD BACKING-STREAM KNOTS CLOSED BRUSH DASHING)(IL:* IL:|;;;| "this function replaced the faulty \\curve2 stuff, as \\curve2 would get BIGNUMS and crash in a fiery death on even the simplest curves.")   (IL:* IL:|;;| "draws a spline curve with a given brush--except that dashing is currently ignored, and the curve is done with straight lines.")   (COND      ((CONSP KNOTS)                                         (IL:* IL:\;                                                "to allow the brush color to have the correct scope")       (LET ((DASHLST (IL:\\GOOD.DASHLST DASHING BRUSH))             KT KT2)            (CASE (LENGTH KNOTS)                (0                    (IL:* IL:|;;| "no knots, return")                   NIL)                (1 (COND                      ((IL:TYPE? IL:POSITION (SETQ KT (CAR KNOTS)))                       (IL:\\DRAWPOINT.DISPLAY BACKING-STREAM (IL:FFETCH IL:XCOORD IL:OF                                                                                       KT)                              (IL:FFETCH IL:YCOORD IL:OF KT)                              BRUSH))                      (T (ERROR "~s is a bad knot." KT))))                (2 (COND                      ((AND (IL:TYPE? IL:POSITION (SETQ KT (CAR KNOTS)))                            (IL:TYPE? IL:POSITION (SETQ KT2 (CADR KNOTS))))                       (INTERNAL-DRAWLINE (IL:FFETCH IL:XCOORD IL:OF KT)                              (IL:FFETCH IL:YCOORD IL:OF KT)                              (IL:FFETCH IL:XCOORD IL:OF KT2)                              (IL:FFETCH IL:YCOORD IL:OF KT2)                              DASHLST BRUSH BACKING-STREAM DD))                      (T (ERROR "Bad knot."))))                (OTHERWISE (DRAWCURVE2 DD BACKING-STREAM (IL:PARAMETRICSPLINE KNOTS CLOSED)                                  DASHLST BRUSH))))))   BACKING-STREAM)(DEFUN DRAWCURVE2 (DD BACKING-STREAM SPLINE DASHING BRUSH)(IL:* IL:|;;;| "the lowest level of this ugly code to draw curves. Given an 4045 stream, and a spline in the form of derivatives for each segment, and a brush to draw with, draw line segments to paint the curve. ")(IL:* IL:|;;;| "NB: The endpoints of line segments are placed only to 1/300in accuracy, since that's all the accuracy our printers have.  This speeds things up by a factor of 8 or more.")   (LET ((XPOLY (IL:CREATE IL:POLYNOMIAL))         (|x'poly| (IL:CREATE IL:POLYNOMIAL))         (YPOLY (IL:CREATE IL:POLYNOMIAL))         (|y'poly| (IL:CREATE IL:POLYNOMIAL))         (X (IL:FETCH (IL:SPLINE IL:SPLINEX) IL:OF SPLINE))         (Y (IL:FETCH (IL:SPLINE IL:SPLINEY) IL:OF SPLINE))         (|x'| (IL:FETCH (IL:SPLINE IL:SPLINEDX) IL:OF SPLINE))         (|y'| (IL:FETCH (IL:SPLINE IL:SPLINEDY) IL:OF SPLINE))         (|x''| (IL:FETCH (IL:SPLINE IL:SPLINEDDX) IL:OF SPLINE))         (|y''| (IL:FETCH (IL:SPLINE IL:SPLINEDDY) IL:OF SPLINE))         (|x'''| (IL:FETCH (IL:SPLINE IL:SPLINEDDDX) IL:OF SPLINE))         (|y'''| (IL:FETCH (IL:SPLINE IL:SPLINEDDDY) IL:OF SPLINE))         (NUM-KNOTS (IL:FETCH (IL:SPLINE IL:\#KNOTS) IL:OF SPLINE))         (X0 (IL:ELT (IL:FETCH (IL:SPLINE IL:SPLINEX) IL:OF SPLINE)                    1))         (Y0 (IL:ELT (IL:FETCH (IL:SPLINE IL:SPLINEY) IL:OF SPLINE)                    1))         IX IY DX DY XT YT |x't| |y't| NEWXT NEWYT XDIFF YDIFF XWALLDT YWALLDT DUPLICATEKNOT          EXTRANEOUS TT NEWT DELTA DASHON DASHLST DASHCOUNT)        (SETQ DASHON T)        (IL:* IL:|;;| "These are initialized outside the prog-bindings cause the compiler can't hack so many initialized variables")        (SETQ DASHLST DASHING)                               (IL:* IL:\;      "Make a circular list of dashing intervals, so that we can just CDR down it to find dashings.")        (SETQ DASHCOUNT (CAR DASHLST))                       (IL:* IL:\;                                                        "Move to the curve's starting point, X0, Y0")        (SETQ TT 0.0)                                        (IL:* IL:\;                                 "We paint each segment by walking the parameter TT from 0.0 to 1.0")        (SETQ DELTA 1024)        (SETQ IX (ROUND X0))        (SETQ IY (ROUND Y0))        (IL:FOR KNOT# IL:FROM 1 IL:TO (1- NUM-KNOTS)           IL:DO                                         (IL:* IL:\;                                                            "Draw each segment in turn")                 (IL:LOADPOLY XPOLY |x'poly| (IL:ELT |x'''| KNOT#)                        (IL:ELT |x''| KNOT#)                        (IL:ELT |x'| KNOT#)                        (IL:ELT X KNOT#))                 (IL:LOADPOLY YPOLY |y'poly| (IL:ELT |y'''| KNOT#)                        (IL:ELT |y''| KNOT#)                        (IL:ELT |y'| KNOT#)                        (IL:ELT Y KNOT#))                 (SETQ XT (IL:POLYEVAL TT XPOLY 3))          (IL:* IL:\;                                                            "XT _ X (t) --Evaluate the next point")                 (SETQ YT (IL:POLYEVAL TT YPOLY 3))          (IL:* IL:\; "YT _ Y (t)")                 (COND                    ((NOT (IL:IEQP KNOT# (1- NUM-KNOTS)))    (IL:* IL:\;            "This isn't the last knot.  Check to see if the next knot in line is a duplicated knot.")                     (SETQ DUPLICATEKNOT (AND (IL:EQP (IL:ELT X (1+ KNOT#))                                                     (IL:ELT X (+ KNOT# 2)))                                              (IL:EQP (IL:ELT Y (1+ KNOT#))                                                     (IL:ELT Y (+ KNOT# 2))))))                    (T (SETQ DUPLICATEKNOT NIL)))                 (IL:UNTIL (>= TT 1.0)                    IL:DO                                (IL:* IL:\;                                                 "Run the parameter TT from 0 to 1 for this segment")                          (SETQ |x't| (IL:POLYEVAL TT |x'poly| 2))                                                              (IL:* IL:\; "X'T _ X' (t)")                          (SETQ |y't| (IL:POLYEVAL TT |y'poly| 2))                                                              (IL:* IL:\; "Y'T _ Y' (t)")                          (COND                             ((IL:EQP |x't| 0.0)             (IL:* IL:\; "Prevent divide-by-zero")                              (SETQ |x't| 5.0E-4)))                          (COND                             ((IL:EQP |y't| 0.0)             (IL:* IL:\; "Prevent divide-by-zero")                              (SETQ |y't| 5.0E-4)))                          (COND                             ((IL:FGTP |x't| 0.0)                              (SETQ DX DELTA))                             (T (SETQ DX (IL:IMINUS DELTA))))                          (COND                             ((IL:FGTP |y't| 0.0)                              (SETQ DY DELTA))                             (T (SETQ DY (IL:IMINUS DELTA))))                          (SETQ XWALLDT (IL:FQUOTIENT (IL:FDIFFERENCE (+ IX DX)                                                             XT)                                               |x't|))                          (SETQ YWALLDT (IL:FQUOTIENT (IL:FDIFFERENCE (+ IY DY)                                                             YT)                                               |y't|))       (IL:* IL:\;                   "Decide which of dX or dY is changing faster, and use that as the limiting value")                          (COND                             ((IL:FLESSP XWALLDT YWALLDT)                              (SETQ NEWT (IL:FPLUS TT XWALLDT))                              (SETQ DY (IL:IDIFFERENCE (IL:FIXR (IL:FPLUS YT (IL:FTIMES XWALLDT |y't|                                                                                    )))                                              IY)))                             (T (SETQ NEWT (IL:FPLUS TT YWALLDT))                                (SETQ DX (IL:IDIFFERENCE (IL:FIXR (IL:FPLUS XT (IL:FTIMES YWALLDT                                                                                       |x't|)))                                                IX))))                          (COND                             ((AND (IL:FGTP NEWT 1.0)                                   (OR DUPLICATEKNOT (EQ KNOT# (IL:SUB1 NUM-KNOTS))))                              (IL:* IL:|;;| "If we've run TT past 1, or if this knot is duplicated (meaning make a discontinuity in x' & y') then draw straight to the end point.")                              (SETQ NEWT 1.0)))                          (SETQ NEWXT (IL:POLYEVAL NEWT XPOLY 3))                                                              (IL:* IL:\; "New XT _ X (new t)")                          (SETQ NEWYT (IL:POLYEVAL NEWT YPOLY 3))                                                              (IL:* IL:\; "New YT _ Y (new t)")                          (SETQ XDIFF (ABS (IL:FDIFFERENCE (+ IX DX)                                                  NEWXT)))   (IL:* IL:\;                                                           "Find out how close we come to the ideal")                          (SETQ YDIFF (ABS (IL:FDIFFERENCE (+ IY DY)                                                  NEWYT)))                          (COND                             ((AND (IL:IGREATERP DELTA 8)                                   (OR (IL:FGTP XDIFF 8.0)                                       (IL:FGTP YDIFF 8.0)))                              (IL:* IL:|;;| "We're more than a printer dot off, and we still have room to make the DX or DY smaller.  Do so & try again.")                              (SETQ DELTA (IL:LRSH DELTA 1)))                             (T                              (IL:* IL:\;                                          "This is as close as we can come.  Draw the line segment.")                                (INTERNAL-DRAWLINE X0 Y0 (INCF X0 DX)                                       (INCF Y0 DY)                                       DASHLST BRUSH BACKING-STREAM DD)                                                             (IL:* IL:\; "Draw the line")                                (SETQ IX (+ IX DX))                                (SETQ IY (+ IY DY))                                (SETQ TT NEWT)                                (SETQ XT NEWXT)                                (SETQ YT NEWYT)                                (COND                                   ((AND (IL:ILESSP DELTA 1024)                                         (OR (IL:FLESSP XDIFF 4.0)                                             (IL:FLESSP YDIFF 4.0)))                                                             (IL:* IL:\;                      "If we were REAL close, we can relax a bit, and try moving farther next time.")                                    (SETQ DELTA (IL:LLSH DELTA 1)))))))                 (SETQ TT (IL:FDIFFERENCE TT 1.0))                  (IL:* IL:|;;| "Having moved past a knot, back the value of the parameter TT back down.  However, don't set it to 0.0--let's try to keep the line going from where it got to in passing the last knot.")                 (COND                    (DUPLICATEKNOT                            (IL:* IL:|;;| "This next knot is a duplicate.  Skip over it, and start from the following knot.  This will avoid odd problems trying to go nowhere while obeying the constraints of X' and Y' at that knot--since it's a duplicate, X' and Y' are discontinuous there.")                           (INCF KNOT#))))))(DEFUN DRAWELLIPSE (HQ-STREAM CENTER-X CENTER-Y SEMIMINORRADIUS SEMIMAJORRADIUS ORIENTATION BRUSH                              DASHING)   (SETQ SEMIMINORRADIUS (ROUND SEMIMINORRADIUS)         SEMIMAJORRADIUS         (ROUND SEMIMAJORRADIUS)         CENTER-X         (ROUND CENTER-X)         CENTER-Y         (ROUND CENTER-Y))   (SETQ BRUSH (NORMALIZE-BRUSH BRUSH))   (LET ((DD (GET-DD HQ-STREAM))         (HALF-BRUSH (CEILING (SECOND BRUSH)                            2))         (MAX-RADIUS (MAX SEMIMINORRADIUS SEMIMAJORRADIUS)))        (IL:* IL:|;;| "again, it is very difficult to determine the bounding box of an ellipse, so say that the entire bitmap must be compressed.")        (WITH-TRANSFORMED-PAIR (CENTER-X CENTER-Y DD)               (CENTER-X CENTER-Y)               (SET-LIMITS (- CENTER-X MAX-RADIUS HALF-BRUSH)                      (- CENTER-Y MAX-RADIUS HALF-BRUSH)                      (+ CENTER-X MAX-RADIUS HALF-BRUSH)                      (+ CENTER-Y MAX-RADIUS HALF-BRUSH)                      HQ-STREAM)               (IL:\\DRAWELLIPSE.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                      CENTER-X CENTER-Y SEMIMINORRADIUS SEMIMAJORRADIUS (NORMALIZE-ROTATION                                                                         (+ ORIENTATION (DD-ROTATION                                                                                         DD)))                      BRUSH DASHING))))(DEFUN DRAWPOLYGON (HQ-STREAM POINTS CLOSED? BRUSH DASHING)   (SETQ BRUSH (NORMALIZE-BRUSH BRUSH))   (SETQ POINTS (APPEND POINTS (IF CLOSED?                                   (CONS (CAR POINTS))                                   NIL)))   (IL:GLOBALRESOURCE IL:\\BRUSHBBT          (LET* ((DD (GET-DD HQ-STREAM))                 (HALF-BRUSH (CEILING (SECOND BRUSH)                                    2))                 (POINTS (IL:BIND MIN-X MAX-X MIN-Y MAX-Y IL:FOR PT IL:IN POINTS                            IL:COLLECT (LET ((NEW-X (TRANSFORM-X (ROUND (CAR PT))                                                               (ROUND (CDR PT))                                                               DD))                                                 (NEW-Y (TRANSFORM-Y (ROUND (CAR PT))                                                               (ROUND (CDR PT))                                                               DD)))                                                (SETQ MIN-X (IF MIN-X                                                                (MIN MIN-X NEW-X)                                                                NEW-X))                                                (SETQ MIN-Y (IF MIN-Y                                                                (MIN MIN-Y NEW-Y)                                                                NEW-Y))                                                (SETQ MAX-X (IF MAX-X                                                                (MAX MAX-X NEW-X)                                                                NEW-X))                                                (SETQ MAX-Y (IF MAX-Y                                                                (MAX MAX-Y NEW-Y)                                                                NEW-Y))                                                (CONS NEW-X NEW-Y))                            IL:FINALLY (SET-LIMITS (- MIN-X HALF-BRUSH)                                                  (- MIN-Y HALF-BRUSH)                                                  (+ MAX-X HALF-BRUSH)                                                  (+ MAX-Y HALF-BRUSH)                                                  HQ-STREAM))))                (IL:BIND (PREVPT IL:_ (CAR POINTS)) IL:FOR PT IL:IN (CDR POINTS)                   IL:DO (IL:\\LINEWITHBRUSH (CAR PREVPT)                                    (CDR PREVPT)                                    (CAR PT)                                    (CDR PT)                                    BRUSH                                    (IL:\\GOOD.DASHLST DASHING BRUSH)                                    (GET-BACKING-STREAM HQ-STREAM)                                    IL:\\BRUSHBBT)                         (SETQ PREVPT PT)))          (IL:* IL:|;;| "move to the first point on the polygon.")          (MOVE-TO HQ-STREAM (ROUND (CAAR POINTS))                 (ROUND (CDAR POINTS)))))(DEFUN FILLPOLYGON (HQ-STREAM POINTS TEXTURE OPERATION WINDNUMBER)   (LET* ((DD (GET-DD HQ-STREAM))          (POINTS (IL:BIND MIN-X MAX-X MIN-Y MAX-Y IL:FOR PT IL:IN POINTS                     IL:COLLECT (LET ((NEW-X (TRANSFORM-X (ROUND (CAR PT))                                                        (ROUND (CDR PT))                                                        DD))                                          (NEW-Y (TRANSFORM-Y (ROUND (CAR PT))                                                        (ROUND (CDR PT))                                                        DD)))                                         (SETQ MIN-X (IF MIN-X                                                         (MIN MIN-X NEW-X)                                                         NEW-X))                                         (SETQ MIN-Y (IF MIN-Y                                                         (MIN MIN-Y NEW-Y)                                                         NEW-Y))                                         (SETQ MAX-X (IF MAX-X                                                         (MAX MAX-X NEW-X)                                                         NEW-X))                                         (SETQ MAX-Y (IF MAX-Y                                                         (MAX MAX-Y NEW-Y)                                                         NEW-Y))                                         (CONS NEW-X NEW-Y)) IL:FINALLY (SET-LIMITS (- MIN-X 8)                                                                                   (- MIN-Y 8)                                                                                   (+ MAX-X 8)                                                                                   (+ MAX-Y 8)                                                                                   HQ-STREAM))))         (IL:POLYSHADE.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                POINTS TEXTURE OPERATION WINDNUMBER)))(DEFUN DRAWARC (HQ-STREAM CENTER-X CENTER-Y RADIUS STARTANGLE NDEGREES BRUSH DASHING)   (SETQ BRUSH (NORMALIZE-BRUSH BRUSH)         RADIUS         (ROUND RADIUS)         CENTER-X         (ROUND CENTER-X)         CENTER-Y         (ROUND CENTER-Y))   (LET ((DD (GET-DD HQ-STREAM))         (HALF-BRUSH (CEILING (SECOND BRUSH)                            2)))        (WITH-TRANSFORMED-PAIR (CENTER-X CENTER-Y DD)               (CENTER-X CENTER-Y)               (SET-LIMITS (- CENTER-X RADIUS HALF-BRUSH)                      (- CENTER-Y RADIUS HALF-BRUSH)                      (+ CENTER-X RADIUS HALF-BRUSH)                      (+ CENTER-Y RADIUS HALF-BRUSH)                      HQ-STREAM)               (IL:\\DRAWARC.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                      CENTER-X CENTER-Y RADIUS (NORMALIZE-ROTATION (+ STARTANGLE (DD-ROTATION DD)))                      NDEGREES BRUSH DASHING))))(DEFUN DRAWPOINT (HQ-STREAM X Y BRUSH OPERATION)   (SETQ BRUSH (NORMALIZE-BRUSH BRUSH)         X         (ROUND X)         Y         (ROUND Y))   (LET ((DD (GET-DD HQ-STREAM))         (HALF-BRUSH (CEILING (SECOND BRUSH)                            2)))        (WITH-TRANSFORMED-PAIR (X Y DD)               (X Y)               (SET-LIMITS (- X HALF-BRUSH)                      (- Y HALF-BRUSH)                      (+ X HALF-BRUSH)                      (+ Y HALF-BRUSH)                      HQ-STREAM)               (IL:\\DRAWPOINT.DISPLAY (GET-BACKING-STREAM HQ-STREAM)                      X Y BRUSH OPERATION))))(IL:* IL:|;;| "error functions")(DEFMACRO GET-IMAGE-ERRORS (DS)(IL:* IL:|;;;| "return the image errors on this stream.")   `(IL:FFETCH (STREAM IL:F2) IL:OF ,DS))(DEFUN IMAGE-ERROR (DS DD CHARACTER)(IL:* IL:|;;;| "The imagewidth of a character was zero.  This usually means the character is blank.  let the user know there was a problem printing it.  Stores at most 5 errors.")   (LET ((ERRORS (GET-IMAGE-ERRORS DS))         (FONT (IL:FETCH (IL:FONTDESCRIPTOR IL:FONTDEVICESPEC) IL:OF (DD-FONT DD)))         ERROR ERROR-LIST)        (COND           (ERRORS (INCF (IMAGE-ERROR-COUNT ERRORS))                  (IF (< (LENGTH (IMAGE-ERROR-LIST ERRORS))                         5)                      (UNLESS (FIND (SETQ ERROR (LIST (CHARSET CHARACTER)                                                      (CHAR-8-CODE CHARACTER)                                                      (STRING (CAR FONT))                                                      (CADR FONT)                                                      (SHORTFONTFACE (CADDR FONT))))                                    (IMAGE-ERROR-LIST ERRORS)                                    :TEST                                    #'EQUAL)                          (PUSH ERROR (IMAGE-ERROR-LIST ERRORS))))                  (SETF (GET-IMAGE-ERRORS DS)                        ERRORS))           (T (SETF (GET-IMAGE-ERRORS DS)                    (MAKE-IMAGE-ERROR :COUNT 1 :LIST (LIST (LIST (CHARSET CHARACTER)                                                                 (CHAR-8-CODE CHARACTER)                                                                 (STRING (CAR FONT))                                                                 (CADR FONT)                                                                 (SHORTFONTFACE (CADDR FONT))))))))))(DEFUN PRINT-BREAK-PAGE (HQ-STREAM)(IL:* IL:|;;;| "if there were errors and break page was turned on, then print out this information.")   (DECLARE (SPECIAL IL:DEFAULTFONT))   (LET ((ERRORS (GET-IMAGE-ERRORS HQ-STREAM)))        (WHEN *BREAK-PAGE*            (IL:* IL:|;;| "print the break page. ")            (BEGIN-PAGE HQ-STREAM)            (DSP-FONT HQ-STREAM IL:DEFAULTFONT)            (DSP-ROTATE HQ-STREAM 0)            (FORMAT HQ-STREAM "~15%~70:@<Date: ~a~>~2%~70:@<For: ~a~>" (IL:DATE)                   (IL:USERNAME))            (WHEN ERRORS                (IL:* IL:|;;| "there were errors, so print what they were.")                (FORMAT HQ-STREAM "~3%~10tImaging error on the following characters:~2%")                (FORMAT HQ-STREAM "~:{~15tChar: (~o,~o)   Font: ~a ~a ~a~%~}" (REVERSE (                                                                                     IMAGE-ERROR-LIST                                                                                        ERRORS)))                (IF (> (IMAGE-ERROR-COUNT ERRORS)                       5)                    (FORMAT HQ-STREAM "~%~25t...and ~a more." (- (IMAGE-ERROR-COUNT ERRORS)                                                                 5))))            (NEW-PAGE HQ-STREAM))))(IL:* IL:|;;| "stream state functions")(DEFMACRO GET-STATE (HQ-STREAM)   `(IL:FFETCH (STREAM IL:F10) IL:OF ,HQ-STREAM))(DEFUN DSP-ROTATE (HQ-STREAM ROTATION)(IL:* IL:|;;;| "set up the stream so it thinks it is rotated by ROTATION")   (UNLESS (MEMBER ROTATION '(0 90 180 270 -90 -180 -270 NIL))          (ERROR "~a rotation is not supported by the 4045." ROTATION))   (LET* ((DD (GET-DD HQ-STREAM))          (OLD-ROTATION (DD-ROTATION DD))          REAL-FONT-ROTATION)         (SETQ ROTATION (NORMALIZE-ROTATION (+ OLD-ROTATION ROTATION)))         (SETF (DD-ROTATION (GET-DD HQ-STREAM))               ROTATION)         (SETQ REAL-FONT-ROTATION (NORMALIZE-ROTATION (- (IL:FONTPROP (DD-FONT DD)                                                                'IL:ROTATION)                                                         OLD-ROTATION)))         (IL:* IL:|;;| "first get a copy of the original font, then let dsp-font handle the rotation of the font for the rotated stream.")         (DSP-FONT HQ-STREAM (IL:FONTCOPY (DD-FONT DD)                                    'IL:ROTATION REAL-FONT-ROTATION))         T))(DEFUN DSP-PUSH-STATE (HQ-STREAM)(IL:* IL:|;;;| "save a copy of the current state of the stream")   (LET ((DD (GET-DD HQ-STREAM)))        (PUSH (MAKE-STATE :X (DD-X-POSITION DD)                     :Y                     (DD-Y-POSITION DD)                     :ROTATION                     (DD-ROTATION DD)                     :XOFFSET                     (DD-X-OFFSET DD)                     :YOFFSET                     (DD-Y-OFFSET DD))              (GET-STATE HQ-STREAM))))(DEFUN DSP-POP-STATE (HQ-STREAM)   (UNLESS (GET-STATE HQ-STREAM)          (ERROR "No state left to pop."))   (LET ((DD (GET-DD HQ-STREAM))         (STATE (POP (GET-STATE HQ-STREAM)))         OLD-ROTATION)        (SETQ OLD-ROTATION (DD-ROTATION DD))        (SETF (DD-ROTATION DD)              (STATE-ROTATION STATE))        (IL:* IL:|;;| "have to determine what the USER thinks the rotation of the font is.")        (DSP-FONT HQ-STREAM (IL:FONTCOPY (DD-FONT DD)                                   'IL:ROTATION                                   (NORMALIZE-ROTATION (- (IL:FONTPROP (DD-FONT DD)                                                                 'IL:ROTATION)                                                          OLD-ROTATION))))        (SETF (DD-X-OFFSET DD)              (STATE-XOFFSET STATE))        (SETF (DD-Y-OFFSET DD)              (STATE-YOFFSET STATE))        (SETF (DD-X-POSITION DD)              (STATE-X STATE))        (SETF (DD-Y-POSITION DD)              (STATE-Y STATE))))(IL:* IL:|;;| "other functions")(DEFUN PRINTER-MESSAGE (ERROR-MSG)   (IL:* IL:|;;| "print an error message to the promptwindow.")   (DECLARE (SPECIAL IL:PROMPTWINDOW))   (FORMAT IL:PROMPTWINDOW "~%[4045HQ: ~a]~%" ERROR-MSG))(DEFUN GET-DEVICE-LOCK ()(IL:* IL:|;;;| "get the stream monitorlock.  Hang out if somebody else has it.")   (DECLARE (SPECIAL IL:PROMPTWINDOW))   (IL:ALLOW.BUTTON.EVENTS)   (LET (TIMER LOCKED)        (LOOP (IF (LET ((LOCKED))                       (IL:WITH.MONITOR *DEVICE-LOCK*                           (UNLESS (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)                               (SETF (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)                                     T)                               (SETQ LOCKED T)))                       LOCKED)                  (RETURN))              (WHEN (OR (NULL TIMER)                        (IL:TIMEREXPIRED? TIMER))                  (PRINTER-MESSAGE "Printer stream is busy, will retry.")                  (SETQ TIMER (IL:SETUPTIMER 120000)))              (IL:BLOCK))))(DEFUN SET-DEVICE-LOCK (VALUE)(IL:* IL:|;;;| "set the device lock to the stream so you can do good error recovery.")   (IL:WITH.MONITOR *DEVICE-LOCK*       (SETF (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)             VALUE)))(DEFUN GIVE-DEVICE-LOCK ()(IL:* IL:|;;;| "release the stream lock")   (IL:WITH.MONITOR *DEVICE-LOCK*       (IF (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)           (SETF (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)                 NIL))))(DEFUN OPENSTREAM (HQ-FILE OPTIONS)(IL:* IL:|;;;| "open a 4045HQ stream.  Only allow one stream to be open at a time, due to global frame buffer")   (DECLARE (SPECIAL IL:DEFAULTFONT IL:PROMPTWINDOW))   (GET-DEVICE-LOCK)   (LET ((WIDTH (ROUND (* *PAPER-WIDTH* *POINTS-PER-INCH*)))         (HEIGHT (ROUND (* *PAPER-HEIGHT* *POINTS-PER-INCH*)))         (ABORTFLG T)         OUTPUT-STREAM)        (UNWIND-PROTECT            (PROGN (SETQ OUTPUT-STREAM (IL:OPENSTREAM (IF (OR (STREAMP HQ-FILE)                                                              (SEARCH (STRING-UPCASE "{scratch}")                                                                     (STRING-UPCASE (STRING HQ-FILE))                                                                     )                                                              (SEARCH (STRING-UPCASE "{lpt}")                                                                     (STRING-UPCASE (STRING HQ-FILE))                                                                     ))                                                          *DEFAULT-DESTINATION*                                                          HQ-FILE)                                              'IL:OUTPUT NIL '((TYPE IL:BINARY))))                   (SETQ ABORTFLG NIL))            (PROGN (WHEN ABORTFLG                       (PRINTER-MESSAGE (CONCATENATE 'STRING "Can't open stream to "                                                *DEFAULT-DESTINATION* "!"))                       (GIVE-DEVICE-LOCK))))        (LET ((FONT)              (TURN-ON-ABORT T)              (4045HQSTREAM (IL:CREATE STREAM                                   IL:DEVICE IL:_ *DEVICE*                                   IL:ACCESS IL:_ 'IL:OUTPUT                                   IL:OUTCHARFN IL:_ (IL:FUNCTION DSP-PRINT-CHAR)                                   IL:STRMBOUTFN IL:_ (IL:FUNCTION DSP-PRINT-CHAR)                                   IL:USERCLOSEABLE IL:_ T                                   IL:F1 IL:_ OUTPUT-STREAM                                   IL:F5 IL:_ *BACKINGSTREAM*                                   IL:IMAGEOPS IL:_ *IMAGEOPS*                                   IL:IMAGEDATA IL:_                                   (MAKE-DD :X-OFFSET 0 :Y-OFFSET 0 :LEFT-MARGIN 0 :RIGHT-MARGIN 0                                           :TOP-MARGIN 0 :BOTTOM-MARGIN 0 :ROTATION 0 :CHARSET 0                                           :DESTINATION *DESTINATION-BITMAP*))))             (IL:* IL:|;;| "turn on documenter mode")             (UNWIND-PROTECT                 (PROGN (TURN-ON-DOCUMENTER-MODE OUTPUT-STREAM)                        (SETQ TURN-ON-ABORT NIL))                 (WHEN TURN-ON-ABORT                     (PRINTER-MESSAGE "Error on port, output aborted")                     (GIVE-DEVICE-LOCK)))             (IL:* IL:|;;| "set the margins.")             (UNWIND-PROTECT                 (SETQ FONT (IL:FONTCREATE (OR (IL:LISTGET OPTIONS 'IL:FONT)                                               IL:DEFAULTFONT)                                   NIL NIL NIL :4045HQ))                 (UNLESS (AND FONT (TYPEP FONT 'IL:FONTDESCRIPTOR))                     (PRINTER-MESSAGE "Couldn't find defaultfont, check *font-directories*")                     (GIVE-DEVICE-LOCK)))             (DSP-FONT 4045HQSTREAM FONT)             (DSPCLIPPINGREGION 4045HQSTREAM (IL:CREATEREGION 0 0 WIDTH HEIGHT))             (DSP-LEFT-MARGIN 4045HQSTREAM 150)              (IL:* IL:\; ".5 inch on left")             (DSP-RIGHT-MARGIN 4045HQSTREAM (- WIDTH 150))   (IL:* IL:\; ".5 inch on right")             (DSP-TOP-MARGIN 4045HQSTREAM (- HEIGHT 150))    (IL:* IL:\; ".5 inch on top")             (DSP-BOTTOM-MARGIN 4045HQSTREAM 200)            (IL:* IL:\; ".66 inch on bottom")             (BEGIN-PAGE 4045HQSTREAM)             (SET-DEVICE-LOCK 4045HQSTREAM)             (PRINTER-MESSAGE "Job started")             4045HQSTREAM)))(DEFUN CLOSE-STREAM (HQ-STREAM &OPTIONAL ABORTFLG)(IL:* IL:|;;;| "dumps the page to the output stream.")   (DECLARE (SPECIAL IL:PROMPTWINDOW))   (LET ((OUTPUT-STREAM (GET-OUTPUT-STREAM HQ-STREAM))         (PORT-ERROR T))        (COND           (ABORTFLG (COND                        ((AND OUTPUT-STREAM (IL:OPENP OUTPUT-STREAM 'IL:OUTPUT))                         (IL:* IL:|;;|         "the output stream is still open, try to close it, reset the printer, and notify the user.")                         (UNWIND-PROTECT                             (PROGN (TURN-OFF-DOCUMENTER-MODE OUTPUT-STREAM)                                    (IL:FORCEOUTPUT OUTPUT-STREAM T)                                    (CLOSE OUTPUT-STREAM))                             (GIVE-DEVICE-LOCK))                         (PRINTER-MESSAGE "Output aborted."))                        (T (PRINTER-MESSAGE "Output aborted.  Printer must be reset!"))))           (T (COND                 ((AND OUTPUT-STREAM (IL:OPENP OUTPUT-STREAM 'IL:OUTPUT))                  (END-PAGE HQ-STREAM)                  (IL:* IL:|;;| "print the error page if they wanted one.")                  (PRINT-BREAK-PAGE HQ-STREAM)                  (IL:* IL:|;;| "reset the printer")                  (TURN-OFF-DOCUMENTER-MODE OUTPUT-STREAM)                  (IL:FORCEOUTPUT OUTPUT-STREAM T)                  (CLOSE OUTPUT-STREAM)                  (PRINTER-MESSAGE "Job complete."))                 (T (PRINTER-MESSAGE "Output aborted.")))))        (IL:* IL:|;;| "allow another stream to be opened on the device.")        (GIVE-DEVICE-LOCK)        HQ-STREAM))(DEFUN INITIALIZE ()(IL:* IL:|;;;| "set everything up for the software.")   (DECLARE (SPECIAL IL:IMAGESTREAMTYPES IL:PRINTERTYPES IL:PRINTFILETYPES IL:DEFAULTPRINTINGHOST                       IL:DEFAULTFONT))   (LET ((WIDTH (ROUND (* *PAPER-WIDTH* *POINTS-PER-INCH*)))         (HEIGHT (ROUND (* *PAPER-HEIGHT* *POINTS-PER-INCH*))))        (SETQ *DEVICE* (IL:CREATE IL:FDEV                              IL:FDBOUTABLE IL:_ T                              IL:DEVICENAME IL:_ 'IL:4045HQ                              IL:OPENFILE IL:_ (IL:FUNCTION OPENSTREAM)                              IL:CLOSEFILE IL:_ (IL:FUNCTION IL:NILL)                              IL:BOUT IL:_ (IL:FUNCTION DSP-PRINT-CHAR)                              IL:WRITECHAR IL:_ (IL:FUNCTION DSP-PRINT-CHAR)                              IL:UNREADCHAR IL:_ (IL:FUNCTION IL:\\ILLEGAL.DEVICEOP)                              IL:PEEKCHAR IL:_ (IL:FUNCTION IL:\\ILLEGAL.DEVICEOP)                              IL:READCHAR IL:_ (IL:FUNCTION IL:\\ILLEGAL.DEVICEOP)))        (SETQ *IMAGEOPS* (IL:|create| IL:IMAGEOPS                                IL:IMAGETYPE IL:_ 'IL:4045HQ                                IL:IMFONT IL:_ (IL:FUNCTION DSP-FONT)                                IL:IMFONTCREATE IL:_ 'IL:4045HQ                                IL:IMLEFTMARGIN IL:_ (IL:FUNCTION DSP-LEFT-MARGIN)                                IL:IMRIGHTMARGIN IL:_ (IL:FUNCTION DSP-RIGHT-MARGIN)                                IL:IMTOPMARGIN IL:_ (IL:FUNCTION DSP-TOP-MARGIN)                                IL:IMBOTTOMMARGIN IL:_ (IL:FUNCTION DSP-BOTTOM-MARGIN)                                IL:IMLINEFEED IL:_ (IL:FUNCTION DSP-LINE-FEED)                                IL:IMXPOSITION IL:_ (IL:FUNCTION DSP-X-POSITION)                                IL:IMYPOSITION IL:_ (IL:FUNCTION DSP-Y-POSITION)                                IL:IMROTATE IL:_ (IL:FUNCTION DSP-ROTATE)                                IL:IMTRANSLATE IL:_ (IL:FUNCTION DSP-TRANSLATE)                                IL:IMPUSHSTATE IL:_ (IL:FUNCTION DSP-PUSH-STATE)                                IL:IMPOPSTATE IL:_ (IL:FUNCTION DSP-POP-STATE)                                IL:IMMOVETO IL:_ (IL:FUNCTION MOVE-TO)                                IL:IMCLIPPINGREGION IL:_ (IL:FUNCTION DSPCLIPPINGREGION)                                IL:IMNEWPAGE IL:_ (IL:FUNCTION NEW-PAGE)                                IL:IMSCALE IL:_ (IL:FUNCTION (IL:LAMBDA NIL                                                               (/ 300 72.0)))                                IL:IMSPACEFACTOR IL:_ (IL:FUNCTION DSP-SPACE-FACTOR)                                IL:IMOPERATION IL:_ (IL:FUNCTION DSPOPERATION)                                IL:IMSTRINGWIDTH IL:_ (IL:FUNCTION STRING-WIDTH)                                IL:IMCHARWIDTH IL:_ (IL:FUNCTION CHAR-WIDTH)                                IL:IMRESET IL:_ (IL:FUNCTION DSPRESET)                                IL:IMDRAWLINE IL:_ (IL:FUNCTION DRAWLINE)                                IL:IMDRAWCURVE IL:_ (IL:FUNCTION DRAWCURVE)                                IL:IMDRAWCIRCLE IL:_ (IL:FUNCTION DRAWCIRCLE)                                IL:IMFILLCIRCLE IL:_ (IL:FUNCTION FILLCIRCLE)                                IL:IMDRAWELLIPSE IL:_ (IL:FUNCTION DRAWELLIPSE)                                IL:IMDRAWPOLYGON IL:_ (IL:FUNCTION DRAWPOLYGON)                                IL:IMFILLPOLYGON IL:_ (IL:FUNCTION FILLPOLYGON)                                IL:IMDRAWARC IL:_ (IL:FUNCTION DRAWARC)                                IL:IMDRAWPOINT IL:_ (IL:FUNCTION DRAWPOINT)                                IL:IMBITBLT IL:_ (IL:FUNCTION BITBLT)                                IL:IMSCALEDBITBLT IL:_ (IL:FUNCTION SCALEDBITBLT)                                IL:IMBLTSHADE IL:_ (IL:FUNCTION BLTSHADE)                                IL:IMCLOSEFN IL:_ (IL:FUNCTION CLOSE-STREAM)))        (PUSHNEW '(IL:4045HQ (IL:OPENSTREAM OPENSTREAM)                         (IL:FONTCREATE CREATE-FONT)                         (IL:CREATECHARSET CREATE-CHARSET)                         (IL:FONTSAVAILABLE SEARCH-FONTS))               IL:IMAGESTREAMTYPES :TEST #'EQUAL)        (PUSHNEW '((IL:4045HQ)                   (IL:CANPRINT (IL:4045HQ))                   (IL:STATUS XCL:TRUE)                   (IL:PROPERTIES IL:NILL)                   (IL:SEND SEND-FILE)                   (IL:BITMAPSCALE NIL)                   (IL:BITMAPFILE (BITMAP-FILE IL:FILE IL:BITMAP IL:SCALEFACTOR IL:REGION IL:ROTATION                                         IL:TITLE)))               IL:PRINTERTYPES :TEST #'EQUAL)        (PUSHNEW '(IL:4045HQ (IL:EXTENSION (IL:4045HQ))                         (IL:CONVERSION (IL:TEXT MAKE-TEXT IL:TEDIT MAKE-TEDIT)))               IL:PRINTFILETYPES :TEST #'EQUAL)        (PUSHNEW '(IL:4045HQ IL:4045HQ)               IL:DEFAULTPRINTINGHOST :TEST #'EQUAL)        (SETF (GET 'IL:4045HQ 'IL:PRINTERTYPE)              'IL:4045HQ)        (SETQ *DESTINATION-BITMAP* (CREATEBUFFER WIDTH HEIGHT))        (SETQ *BACKINGSTREAM* (IL:DSPCREATE *DESTINATION-BITMAP*))        (IL:DSPCLIPPINGREGION (IL:CREATEREGION 0 0 WIDTH HEIGHT)               *BACKINGSTREAM*)        (SETUP-DEFAULT-FONTS)        (LET ((ABORTFLG T))             (UNWIND-PROTECT                 (PROGN (IL:FONTCREATE IL:DEFAULTFONT NIL NIL NIL :4045HQ)                        (SETQ ABORTFLG NIL))                 (WHEN ABORTFLG                     (PRINTER-MESSAGE "Couldn't fontcreate defaultfont.")                     (PRINTER-MESSAGE "Check p-4045:*font-directories* before using the software!")))             )))(DEFUN SETUP-DEFAULT-FONTS ()(IL:* IL:|;;;| "setup the default fonts for the 4045.  Uses the list *default-fonts*.")   (DECLARE (SPECIAL IL:FONTPROFILE))   (SETQ IL:FONTPROFILE         (XCL:WITH-COLLECTION          (DOLIST (FONTCLASS IL:FONTPROFILE)              (LET ((OTHERFDS (COPY-TREE (NTHCDR 5 FONTCLASS))))                   (XCL:COLLECT (IF (CAR (PUSHNEW (COPY-TREE (CDR (ASSOC (FIRST FONTCLASS)                                                                         *DEFAULT-FONTS*)))                                                OTHERFDS :TEST #'EQUAL))                                    (LIST* (FIRST FONTCLASS)                                           (SECOND FONTCLASS)                                           (THIRD FONTCLASS)                                           (FOURTH FONTCLASS)                                           (FIFTH FONTCLASS)                                           OTHERFDS)                                    FONTCLASS))))))   (IL:FONTPROFILE IL:FONTPROFILE))(DEFUN CREATEBUFFER (WIDTH-IN-POINTS HEIGHT-IN-POINTS)(IL:* IL:|;;;| "create the page buffer.  If there isn't one already, it will allocate the largest possible size (8.5 x 14).  Otherwise it just modifies the fields of the current one.")   (IF *DESTINATION-BITMAP*       (LET* ((RASTER (IL:FOLDHI WIDTH-IN-POINTS IL:BITSPERWORD)))             (IF (> (IL:FOLDHI (TRUNCATE (* RASTER HEIGHT-IN-POINTS))                           IL:WORDSPERPAGE)                    *MAX-BUFFER-PAGES*)                 (XCL:HELP "Error, can't allocate a bigger buffer" *DESTINATION-BITMAP*)                 (IL:CREATE IL:BITMAP IL:USING *DESTINATION-BITMAP* IL:BITMAPRASTERWIDTH IL:_                                                RASTER IL:BITMAPWIDTH IL:_ WIDTH-IN-POINTS                                                 IL:BITMAPHEIGHT IL:_ HEIGHT-IN-POINTS)))       (LET* ((RASTER (TRUNCATE (IL:FOLDHI WIDTH-IN-POINTS IL:BITSPERWORD))))             (IL:|create| IL:BITMAP                    IL:BITMAPBITSPERPIXEL IL:_ 1                    IL:BITMAPRASTERWIDTH IL:_ RASTER                    IL:BITMAPWIDTH IL:_ WIDTH-IN-POINTS                    IL:BITMAPHEIGHT IL:_ HEIGHT-IN-POINTS                    IL:BITMAPBASE IL:_ (OR (IL:\\ALLOCPAGEBLOCK *MAX-BUFFER-PAGES*)                                           (XCL:HELP "Can't allocate 4045HQ buffer - pages needed = "                                                  *MAX-BUFFER-PAGES*))))))(DEFUN CHANGE-PAPER-SIZE (&OPTIONAL (WIDTH-IN-INCHES 8.5)                                    (HEIGHT-IN-INCHES 11.0))   (IL:* IL:|;;| "set the paper width and height first")   (SETQ *PAPER-WIDTH* WIDTH-IN-INCHES)   (SETQ *PAPER-HEIGHT* HEIGHT-IN-INCHES)   (LET ((NEW-WIDTH-IN-POINTS (ROUND (* *PAPER-WIDTH* *POINTS-PER-INCH*)))         (NEW-HEIGHT-IN-POINTS (ROUND (* *PAPER-HEIGHT* *POINTS-PER-INCH*))))        (SETQ *DESTINATION-BITMAP* (CREATEBUFFER NEW-WIDTH-IN-POINTS NEW-HEIGHT-IN-POINTS))        (SETQ *BACKINGSTREAM* (IL:DSPCREATE *DESTINATION-BITMAP*))        (IL:DSPCLIPPINGREGION (IL:CREATEREGION 0 0 NEW-WIDTH-IN-POINTS NEW-HEIGHT-IN-POINTS)               *BACKINGSTREAM*)        NIL))(DEFUN BEGIN-PAGE (STREAM)(IL:* IL:|;;;| "begin a new page.")   (DSPRESET STREAM))(DEFUN END-PAGE (HQ-STREAM)(IL:* IL:|;;;| "send a page to the output stream.")   (DECLARE (SPECIAL IL:PROMPTWINDOW))   (LET* ((DD (GET-DD HQ-STREAM))          (DEST (DD-DESTINATION DD))          (OUTPUT-STREAM (GET-OUTPUT-STREAM HQ-STREAM))          (LIMITS (GET-LIMITS HQ-STREAM))          (ABORTFLG T))         (UNWIND-PROTECT             (PROGN (WHEN (AND OUTPUT-STREAM (IL:OPENP OUTPUT-STREAM 'IL:OUTPUT)                               (PAGE-CHANGED-P HQ-STREAM))                        (IL:* IL:|;;|                       "only if the output stream is open, and the page is changed do this.")                        (IF LIMITS                            (COMPRESS-AND-SEND-BM DEST OUTPUT-STREAM (IL:FOLDHI (LIMITERS-RIGHT                                                                                 LIMITS)                                                                            IL:BITSPERWORD)                                   (MIN (IL:BITMAPHEIGHT DEST)                                        (- (IL:BITMAPHEIGHT DEST)                                           (LIMITERS-TOP LIMITS)))                                   (LIMITERS-BOTTOM LIMITS))                            (COMPRESS-AND-SEND-BM DEST OUTPUT-STREAM))                        (INCF *CURRENT-PAGE*)                        (UNMARK-PAGE-CHANGED HQ-STREAM)                        (IL:* IL:|;;| "make sure the rest of the data gets to the printer, otherwise you end up with some of the page at the printer, and some on the 1186.  Since it can take a while to format another page, the printer may get confused and die.")                        (IL:FORCEOUTPUT OUTPUT-STREAM T)                        (IL:* IL:|;;| "give the printer a chance to clear itself")                        (IL:BLOCK 100))                    (WHEN (IL:OPENP OUTPUT-STREAM 'IL:OUTPUT)                        (IL:* IL:|;;|          "the stream is still open, so the page must not have changed, let's continue with output.")                        (SETQ ABORTFLG NIL)))             (WHEN ABORTFLG                 (PRINTER-MESSAGE "Error on destination, output aborted.")                 (IL:\\CLOSEFILE HQ-STREAM T)))))(DEFUN NEW-PAGE (HQ-STREAM)(IL:* IL:|;;;| "Start a new page.")   (END-PAGE HQ-STREAM)   (BEGIN-PAGE HQ-STREAM))(DEFUN MOVE-TO (HQ-STREAM X Y)(IL:* IL:|;;;| "move to the given x and y position.  X and Y are in USER coordinates.")   (SETQ X (IL:FIXR X)         Y         (IL:FIXR Y))   (LET ((DD (GET-DD HQ-STREAM)))        (WITH-TRANSFORMED-PAIR (X Y DD)               (X Y)               (SETF (DD-X-POSITION DD)                     X)               (SETF (DD-Y-POSITION DD)                     Y))))(DEFUN BITMAP-FILE (FILE BITMAP SCALE REGION ROTATION TITLE)(IL:* IL:|;;;| "print a window to the stream.")   (LET* ((OUTPUTSTREAM (IL:OPENIMAGESTREAM FILE 'IL:4045HQ))          (NEWBITMAP (COND                        (REGION (IL:BITMAPCREATE (IL:FETCH (IL:REGION IL:WIDTH) IL:OF REGION)                                       (IL:FETCH (IL:REGION IL:HEIGHT) IL:OF REGION)))                        (T BITMAP)))          (WIDTH (IL:BITMAPWIDTH NEWBITMAP))          (HEIGHT (IL:BITMAPHEIGHT NEWBITMAP))          (PAGE-REGION (IL:DSPCLIPPINGREGION NIL OUTPUTSTREAM))          (PAGE-WIDTH (IL:FETCH (IL:REGION IL:WIDTH) IL:OF PAGE-REGION))          (PAGE-HEIGHT (IL:FETCH (IL:REGION IL:HEIGHT) IL:OF PAGE-REGION))          (IMAGE-TITLE (OR TITLE "Window Image"))          (TITLE-REGION (IL:STRINGREGION IMAGE-TITLE OUTPUTSTREAM))          (SCALE 4)          ROTATE)         (AND REGION (IL:BITBLT BITMAP (IL:FETCH (IL:REGION IL:LEFT) IL:OF REGION)                            (IL:FETCH (IL:REGION IL:BOTTOM) IL:OF REGION)                            NEWBITMAP))         (IL:MOVETO (ROUND (- PAGE-WIDTH (IL:FETCH (IL:REGION IL:WIDTH) IL:OF TITLE-REGION))                           2)                (- PAGE-HEIGHT (IL:FONTPROP OUTPUTSTREAM 'IL:HEIGHT)                   10)                OUTPUTSTREAM)         (PRINC IMAGE-TITLE OUTPUTSTREAM)         (SETQ SCALE (LOOP (IF (EQ SCALE 0)                               (RETURN 0))                   (IL:* IL:\;                                                            "quit when the scale is exhausted.")                           (IF (AND (< (* WIDTH SCALE)                                       PAGE-WIDTH)                                    (< (* HEIGHT SCALE)                                       PAGE-HEIGHT))                               (RETURN SCALE)                               (IF (AND (< (* WIDTH SCALE)                                           PAGE-HEIGHT)                                        (< (* HEIGHT SCALE)                                           PAGE-WIDTH))                                   (PROGN (SETQ ROTATE T)                                          (RETURN SCALE))                                   (DECF SCALE)))))         (WHEN ROTATE             (SETQ NEWBITMAP (IL:ROTATE-BITMAP NEWBITMAP))             (SETQ WIDTH (IL:BITMAPWIDTH NEWBITMAP))             (SETQ HEIGHT (IL:BITMAPHEIGHT NEWBITMAP)))         (IL:SCALEDBITBLT NEWBITMAP 0 0 OUTPUTSTREAM (ROUND (- PAGE-WIDTH (* WIDTH SCALE))                                                            2)                (ROUND (- PAGE-HEIGHT (* HEIGHT SCALE))                       2)                NIL NIL 'IL:INPUT 'IL:REPLACE NIL NIL SCALE)         (CLOSE OUTPUTSTREAM)))(DEFUN SEND-FILE (HOST FILE OPTIONS)   T)(DEFUN MAKE-TEDIT (FILE SCRATCHFILE &OPTIONAL FONTS HEADING TABS OPTIONS)(IL:* IL:|;;;| "Dump a tedit file to IMAGESTREAM")   (LET (STREAM IMAGESTREAM)        (UNWIND-PROTECT            (PROGN (SETQ STREAM (IL:OPENTEXTSTREAM FILE))                   (SETQ IMAGESTREAM (IL:OPENIMAGESTREAM SCRATCHFILE 'IL:4045HQ OPTIONS))                   (IL:TEDIT.FORMAT.HARDCOPY STREAM IMAGESTREAM T NIL NIL NIL 'IL:4045HQ))            (IL:CLOSEF? IMAGESTREAM)            (IL:CLOSEF? STREAM))        IMAGESTREAM))(DEFUN MAKE-TEXT (FILE HQ-FILE &OPTIONAL FONTS HEADING TABS OPTIONS)(IL:* IL:|;;;| "Print FILE directly, as the file can't be stored on disk (it's too big).")   (IL:TEXTTOIMAGEFILE FILE HQ-FILE 'IL:4045HQ FONTS HEADING TABS OPTIONS))(DEFUN RESET-PRINTER ()(IL:* IL:|;;;| "hopefully this function will never be called.  This is a last ditch attempt to restart the printer.")   (LET (OUTPUT-STREAM)        (IL:WITH.MONITOR *DEVICE-LOCK*            (IF (SETQ OUTPUT-STREAM (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*))                (IF (TYPEP OUTPUT-STREAM 'STREAM)                    (CLOSE OUTPUT-STREAM)))            (SETF (IL:FFETCH (IL:FDEV IL:DEVICEINFO) IL:OF *DEVICE*)                  NIL))))(IL:* IL:|;;| "Export some symbols.")(EXPORT '(INITIALIZE RESET-PRINTER SETUP-DEFAULT-FONTS CHANGE-PAPER-SIZE *DEFAULT-DESTINATION*                 *FONT-COERCIONS* *FONT-DIRECTORIES* *MISSING-FONT-COERCIONS* *BREAK-PAGE*                 *DEFAULT-FONTS* *RETRY-COMPLEX-PAGE*))(IL:PUTPROPS IL:4045HQSTREAM IL:COPYRIGHT ("Xerox Corporation and Will Snow" 1987 1900 1988))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP