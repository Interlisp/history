(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated "22-Apr-88 15:27:28" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-LYRIC-WINDOW-TYPES.;10| 14654        il:|changes| il:|to:|  (il:functions titlediconw) (il:window-types :sketch) (il:vars il:rooms-lyric-window-typescoms)      il:|previous| il:|date:| "21-Apr-88 22:09:12" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-LYRIC-WINDOW-TYPES.;9|); Copyright (c) 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-lyric-window-typescoms)(il:rpaqq il:rooms-lyric-window-typescoms ((il:* il:|;;| "window types for various modules") (file-environments il:rooms-lyric-window-types) (il:p (require "ROOMS")) (il:window-types :exec :inspector :spy-button :chat) (il:coms (il:* il:|;;| "the prompt window") (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window)))))) (il:window-types :prompt-window) (il:globalvars il:promptwindow)) (il:coms (il:* il:|;;| "SEdit") (il:window-types :sedit) (il:advise (il:openwp :in il:|\\\\get.context|)) (il:declare\: il:eval@compile (il:p (fix-advice (quote (il:openwp :in il:|\\\\get.context|))))) (il:window-types :sedit)) (il:functions titlediconw) (il:coms (il:* il:|;;| "TEdit") (il:window-types :textstream :tedit) (il:* il:|;;| "make programmatic shrinking work") (il:p (il:changename (quote il:\\tedit.shrink.iconcreate) (quote il:titlediconw) (quote titlediconw)))) (il:coms (il:* il:|;;| "Sketch") (il:window-types :sketch) (il:* il:|;;| "make programmatic shrinking work") (il:p (il:changename (quote il:sk.shrink.iconcreate) (quote il:titlediconw) (quote titlediconw)))) (il:coms (il:* il:|;;| "File Browser") (il:declare\: il:eval@compile il:dontcopy (il:p (or (il:reclook (quote il:filebrowser)) (il:eval (il:sysreclook1 (quote il:filebrowser)))) (or (il:reclook (quote il:tablebrowser)) (il:eval (il:sysreclook1 (quote il:tablebrowser)))))) (il:window-types :file-browser :table-browser) (il:p (il:* il:|;;| "make programmatic shrinking work") (il:changename (quote il:fb.iconfn) (quote il:titlediconw) (quote titlediconw)) (il:* il:|;;| "keep shape & expand from hanging.  can't keep shrink from hanging for sure.") (il:changename (quote il:tb.reshapefn) (quote il:obtain.monitorlock) (quote true)) (il:changename (quote il:tb.repaintfn) (quote il:obtain.monitorlock) (quote true)) (il:changename (quote il:tb.expandfn) (quote il:obtain.monitorlock) (quote true)))) (il:coms (il:* il:|;;| "Logo Window") (il:window-types :logo-window) (il:advise il:logow) (il:declare\: il:eval@compile (il:p (fix-advice (quote il:logow))))) (il:coms (il:* il:|;;| "the PSW") (il:window-types :psw) (il:advise (il:closew :in il:process.status.window)) (il:declare\: il:eval@compile (il:p (fix-advice (quote (il:closew :in il:process.status.window))))))))(il:* il:|;;| "window types for various modules")(define-file-environment il:rooms-lyric-window-types :compiler :compile-file :readtable "XCL" :package "ROOMS")(require "ROOMS")(def-window-type :exec :recognizer (lambda (window) (il:eqmemb (quote xcl::exec-closefn) (il:windowprop window (quote il:closefn)))) :abstracter (lambda (window) (let* ((process (il:windowprop window (quote il:process)))) (when process (let ((profile (il:processprop process (quote il:profile)))) (il:bquote (:region (il:\\\, (externalize-region (window-region window))) :package (il:\\\, (if profile (package-name (getf profile (quote *package*))) "IL")) :readtable (il:\\\, (if profile (il:readtableprop (getf profile (quote *readtable*)) (quote il:name)) "OLD-INTERLISP-T")))))))) :reconstituter (lambda (args) (let ((process (add-exec :region (internalize-region (getf args :region (list 0 0 400 100))) :profile (or (getf args :profile) (il:bquote (*package* (il:\\\, (or (find-package (getf args :package)) (find-package "XCL-USER"))) *readtable* (il:\\\, (or (il:find-readtable (getf args :readtable)) (il:find-readtable "XCL"))))))))) (il:* il:|;;| "this is really grody.  why doesn't ADD-EXEC just take a window?") (il:block) (let ((window (il:wfromds (il:process.evalv process (quote *standard-output*))))) (xcl::exec-title-function window (il:process.evalv process (quote il:*exec-id*))) window))) :title (lambda (placement region dsp) (print-pep-title-string (il:windowprop (placement-window placement) (quote il:title)) region dsp)))(def-window-type :inspector :recognizer (il:lambda (window) (il:windowprop window (quote il:datum))) :title "Inspector")(def-window-type :spy-button :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:spy.buttona0001))) :abstracter (lambda (window) (declare (ignore window)) nil) :reconstituter (lambda (data) (declare (ignore data) (global il:spy.button)) (unless (boundp (quote il:spy.button)) (il:filesload "spy")) (if il:spy.button il:spy.button (progn (il:spy.button (make-position 0 0)) il:spy.button))) :title (lambda (placement region dsp) (print-pep-title-string "Spy" region dsp :no-title-bar? t)))(def-window-type :chat :recognizer (lambda (window) (eq (il:windowprop window (quote il:buttoneventfn)) (quote il:chat.buttonfn))) :abstracter (lambda (window) (list :host (il:canonical.hostname (first (il:windowprop window (quote il:chathost)))) :region (il:windowregion window))) :reconstituter (lambda (data) (let ((window (il:createw (getf data :region) "Chat"))) (il:* il:|;;| "start the chat process") (il:chat (getf data :host) nil nil window) (il:* il:|;;| "return the window") window)) :title (lambda (placement region dsp) (print-pep-title-string (format nil "Chat ~A" (first (il:windowprop (placement-window placement) (quote il:chathost)))) region dsp)))(il:* il:|;;| "the prompt window")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:window)) (il:eval (il:sysreclook1 (quote il:window)))))(def-window-type :prompt-window :recognizer (lambda (window) (eq window il:promptwindow)) :abstracter (lambda (window) nil) :reconstituter (lambda (data) il:promptwindow) :updater (lambda (placement) (let ((font (il:dspfont nil il:promptwindow))) (placement-prop placement :font (externalize-font font))) (placement-prop placement :border (il:windowprop il:promptwindow (quote il:border))) (placement-prop placement :shade (il:dsptexture nil il:promptwindow)) (placement-prop placement :title (il:windowprop il:promptwindow (quote il:title))) (placement-prop placement :operation (il:dspoperation nil il:promptwindow))) :placer (lambda (placement) (do* ((prop-list (placement-props placement) (cddr prop-list)) (prop (car prop-list) (car prop-list)) (value (cadr prop-list) (cadr prop-list))) ((null prop-list) (il:* il:|;;| "this is how we change the border without reshaping") (il:closew il:promptwindow) (il:advisewds il:promptwindow) (il:showwframe il:promptwindow) (il:clearw il:promptwindow)) (case prop (:border (il:replace (il:window il:wborder) il:of il:promptwindow il:with value)) (:font (il:dspfont (il:fontcreate value nil nil nil (quote il:display)) il:promptwindow)) (:operation (il:dspoperation value il:promptwindow)) (:shade (il:dsptexture value il:promptwindow)) (:title (il:replace (il:window il:wtitle) il:of il:promptwindow il:with value))))) :title (lambda (placement region dsp) (il:dspfill region il:blackshade (quote il:paint) dsp)))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:promptwindow))(il:* il:|;;| "SEdit")(def-window-type :sedit :recognizer (lambda (window) (il:eqmemb (quote il:|\\\\closefn|) (il:windowprop window (quote il:closefn)))) :title "SEdit")(reinstall-advice (quote (il:openwp :in il:|\\\\get.context|)) :before (quote ((:last (locally (declare (special il:window)) (and (il:windowp il:window) (un-hide-window il:window)))))))(il:readvise (il:openwp :in il:|\\\\get.context|))(il:declare\: il:eval@compile (fix-advice (quote (il:openwp :in il:|\\\\get.context|))))(def-window-type :sedit :recognizer (lambda (window) (il:eqmemb (quote il:|\\\\closefn|) (il:windowprop window (quote il:closefn)))) :title "SEdit")(defun titlediconw (icon title font position noopenflg just breakchars operation) (il:titlediconw icon title font (if position position (if (boundp (quote il:iconposition)) (locally (declare (special il:iconposition)) (il:* il:|;;| "IL:ICONPOSITION is bound by IL:SHRINKW") il:iconposition))) noopenflg just breakchars operation))(il:* il:|;;| "TEdit")(def-window-type :textstream :recognizer (lambda (window) (il:type? il:textobj (il:windowprop window (quote il:textobj)))) :title "Text")(def-window-type :tedit :dependencies (:textstream) :recognizer (lambda (window) (or (il:windowprop window (quote il:teditcreated)) (let ((textobj (il:windowprop window (quote il:textobj)))) (and (il:type? il:textobj textobj) (getf (il:ffetch (il:textobj il:editprops) il:of textobj) (quote il:teditcreatedwindow)))))) :abstracter (lambda (window) (let* ((stream (il:fetch (il:textobj il:txtfile) il:of (il:textobj window)))) (when stream (il:bquote (:region (il:\\\, (externalize-region (window-region window))) :pathname (il:\\\, (make-pathname :version :newest :defaults (pathname stream)))))))) :reconstituter (lambda (props) (il:filesload (il:sysload) il:tedit) (let* ((pathname (getf props :pathname)) (found (when pathname (probe-file pathname))) (namestring (when found (namestring found))) (window (il:\\tedit.createw.from.region (internalize-region (getf props :region (list 0 0 200 200))) (if found namestring)))) (il:tedit (if found (intern namestring "INTERLISP") (if pathname (format nil "Couldn't edit file ~A" (namestring pathname)))) window nil (list (quote il:leavetty) t)) window)) :title "TEdit")(il:* il:|;;| "make programmatic shrinking work")(il:changename (quote il:\\tedit.shrink.iconcreate) (quote il:titlediconw) (quote titlediconw))(il:* il:|;;| "Sketch")(def-window-type :sketch :recognizer (lambda (w) (il:windowprop w (quote il:sketch))) :abstracter (lambda (w) (list :file (il:fetch (il:sketch il:sketchname) il:of (il:windowprop w (quote il:sketch))) :region (externalize-region (window-region w)))) :reconstituter (lambda (data) (when (fboundp (quote il:sketch)) (il:sketch (getf data :file) (il:createw (internalize-region (getf data :region (list 0 0 500 500))) "Sketch")))) :title "Sketch")(il:* il:|;;| "make programmatic shrinking work")(il:changename (quote il:sk.shrink.iconcreate) (quote il:titlediconw) (quote titlediconw))(il:* il:|;;| "File Browser")(il:declare\: il:eval@compile il:dontcopy (or (il:reclook (quote il:filebrowser)) (il:eval (il:sysreclook1 (quote il:filebrowser))))(or (il:reclook (quote il:tablebrowser)) (il:eval (il:sysreclook1 (quote il:tablebrowser)))))(def-window-type :file-browser :dependencies (:table-browser) :recognizer (lambda (window) (il:type? il:filebrowser (il:windowprop window (quote il:filebrowser)))) :abstracter (lambda (window) (let ((fb (il:windowprop window (quote il:filebrowser)))) (list :region (externalize-region (window-region window)) :pattern (il:fetch (il:filebrowser il:pattern) il:of fb) :info (il:fetch (il:filebrowser il:infomenuchoices) il:of fb)))) :reconstituter (lambda (props) (unless (fboundp (quote il:filebrowser)) (il:filesload (il:sysload il:from il:lispusers) il:filebrowser)) (let ((window (il:filebrowser (getf props :pattern "*") (getf props :info) (list (quote il:region) (internalize-region (getf props :region)))))) (il:* il:|;;| "wait for FB to recompute") (il:block) (il:with.monitor (il:fetch (il:tablebrowser il:tblock) il:of (il:windowprop window (quote il:tablebrowser))) window))) :placer (il:* il:|;;| "This is the placer for table browsers, but since window type methods are not inherited right, we have to put it here too.") (lambda (placement) (when (and (not (shrunken? (placement-window placement))) (il:windowprop (placement-window placement) (quote il:tablebrowser))) (il:tb.expandfn (placement-window placement)))) :title "FB")(def-window-type :table-browser :recognizer (lambda (window) (il:type? il:tablebrowser (il:windowprop window (quote il:tablebrowser)))) :placer (il:* il:|;;| "HACK: hidden windows are not open.  table browsers save changes when they're closed & update when opened & can get out of date unless we call the expand fn when they're un-hidden.") (lambda (placement) (when (and (not (shrunken? (placement-window placement))) (il:windowprop (placement-window placement) (quote il:tablebrowser))) (il:tb.expandfn (placement-window placement)))))(il:* il:|;;| "make programmatic shrinking work")(il:changename (quote il:fb.iconfn) (quote il:titlediconw) (quote titlediconw))(il:* il:|;;| "keep shape & expand from hanging.  can't keep shrink from hanging for sure.")(il:changename (quote il:tb.reshapefn) (quote il:obtain.monitorlock) (quote true))(il:changename (quote il:tb.repaintfn) (quote il:obtain.monitorlock) (quote true))(il:changename (quote il:tb.expandfn) (quote il:obtain.monitorlock) (quote true))(il:* il:|;;| "Logo Window")(def-window-type :logo-window :recognizer (lambda (window) (eq (il:windowprop window (quote il:repaintfn)) (quote il:logowa0001))) :abstracter (lambda (window) (il:windowprop window (quote abstraction))) :reconstituter (lambda (abstraction) (il:logow (getf abstraction :string) nil (getf abstraction :title) (getf abstraction :title-location))) :placer (lambda (placement) (il:redisplayw (placement-window placement))) :title (lambda (placement region dsp) (print-pep-title-string "Xerox" region dsp :no-title-bar? t)))(reinstall-advice (quote il:logow) :after (quote ((:last (il:windowprop il:!value (quote abstraction) (il:bquote ((il:\\\,@ (when string (il:bquote (:string (il:\\\, string))))) (il:\\\,@ (when il:title (il:bquote (:title (il:\\\, il:title))))) (il:\\\,@ (when il:title-location (il:bquote (:title-location (il:\\\, il:title-location))))))))))))(il:readvise il:logow)(il:declare\: il:eval@compile (fix-advice (quote il:logow)))(il:* il:|;;| "the PSW")(def-window-type :psw :recognizer (lambda (window) (declare (global il:process.status.window)) (eq window il:process.status.window)) :title (lambda (placement region dsp) (print-pep-title-string "PSW" region dsp :no-title-bar? t)))(reinstall-advice (quote (il:closew :in il:process.status.window)) :before (quote ((:first (il:openw il:window)))))(il:readvise (il:closew :in il:process.status.window))(il:declare\: il:eval@compile (fix-advice (quote (il:closew :in il:process.status.window))))(il:putprops il:rooms-lyric-window-types il:copyright ("Xerox Corporation" 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop