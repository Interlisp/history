(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 4-Mar-88 16:22:26" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>ROOMS-LYRIC-PATCHES.;8| 8678         il:|changes| il:|to:|  (il:vars il:rooms-lyric-patchescoms) (il:functions il:fltstr)      il:|previous| il:|date:| " 4-Mar-88 15:51:15" il:|{POGO:AISNORTH:XEROX}<ROOMS>NEXT>ROOMS-LYRIC-PATCHES.;7|); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-lyric-patchescoms)(il:rpaqq il:rooms-lyric-patchescoms ((il:coms (il:* il:|;;| "some medley features which we like") (il:coms (il:* il:|;;| "a definer for file environments") (il:define-types file-environments) (il:functions define-file-environment) (file-environments il:rooms-lyric-patches)) (il:functions (il:* il:|;;| "a handy macro") with-collection)) (il:coms (il:* il:|;;| "patches for bugs in Lyric") (il:functions (il:* il:|;;| "work around for bugs in Lyric advice") fix-advice) (il:p (il:* il:|;;| "patch bug where SEdit stops redisplaying") (il:changename (quote il:|\\\\sedit|) (quote il:readp) (quote il:\\sysbufp))) (il:coms (il:* il:|;;| "patch bug where system hangs first time 0.0 is printed") (il:declare\: il:eval@compile il:dontcopy (il:files (il:loadcomp) il:llfloat il:cmlarray-support il:llchar)) (il:functions il:fltstr)))))(il:* il:|;;| "some medley features which we like")(il:* il:|;;| "a definer for file environments")(def-define-type file-environments "File info")(defdefiner define-file-environment file-environments (file &key readtable package base compiler) (let ((rootname (intern (string file) (find-package "INTERLISP")))) (il:bquote (eval-when (eval load) (il:\\\,@ (if (or readtable package base) (il:bquote ((setf (get (quote (il:\\\, rootname)) (quote il:makefile-environment)) (quote ((il:\\\,@ (if readtable (il:bquote (:readtable (il:\\\, readtable))))) (il:\\\,@ (if package (il:bquote (:package (il:\\\, package))))) (il:\\\,@ (if base (il:bquote (:base (il:\\\, base)))))))))))) (il:\\\,@ (if compiler (il:bquote ((setf (get (quote (il:\\\, rootname)) (quote il:filetype)) (quote (il:\\\, compiler)))))))))))(define-file-environment il:rooms-lyric-patches :compiler :compile-file :readtable "XCL" :package "ROOMS")(defmacro with-collection (&body xcl::body) (il:bquote (let ((si::$with-collection-result$ nil) si::$with-collection-tail$) (macrolet ((collect (xcl::form) (il:* il:|;;| "written in this way to take advantage of RPLCONS. The FORM is evaluated first so that COLLECT nests properly, i.e., The test to determine if this is the first value collected should be done after the value itself is generated in case it does collection as well.") (il:bquote (let ((si::$with-collection-value$ (il:\\\, xcl::form))) (if si::$with-collection-result$ (rplacd si::$with-collection-tail$ (setq si::$with-collection-tail$ (list si::$with-collection-value$))) (setq si::$with-collection-result$ (setq si::$with-collection-tail$ (list si::$with-collection-value$)))))))) (il:\\\,@ xcl::body) si::$with-collection-result$))))(il:* il:|;;| "patches for bugs in Lyric")(defun fix-advice (name) (il:* il:|;;;| "work-around for bugs in Lyric ADVICE ") (let* ((def (il:getdef name (quote il:advice))) (clean-def (remove-duplicates def :test (quote equal)))) (unless (equal def clean-def) (il:putdef name (quote il:advice) clean-def))) (il:unmarkaschanged name (quote il:advice)))(il:* il:|;;| "patch bug where SEdit stops redisplaying")(il:changename (quote il:|\\\\sedit|) (quote il:readp) (quote il:\\sysbufp))(il:* il:|;;| "patch bug where system hangs first time 0.0 is printed")(il:declare\: il:eval@compile il:dontcopy (il:filesload (il:loadcomp) il:llfloat il:cmlarray-support il:llchar))(defun il:fltstr (il:f il:k) (il:* il:|;;;| "Returns a string MANT and a fixp EXP such that F = MANT * 10 ** EXP, to K digits. Algorithm copped from \"An Implementation guide to a Proposed Standard for Floating-Point Arithmetic\" by J T Coonen (IEEE Computer Jan. 1980), and modified somewhat. The hack here when printing to unspecified precision is to always generate 7 digits, check to see if that's enough, and then clip trailing zeros from whatever results. This  tends to produce more digits than necessary for denormalized numbers, but it makes everything else print a LOT faster.") (il:if (= il:f 0.0) il:then (il:* il:|;;| "Foo!  You have to do it this way because the people who call FLTSTR assume they can smash whatever it returns... It would also be nice if it were documented somewhere that WITH-RESOURCES expands into a PROG1 and therefore can't return multiple-values...") (let (il:|outstring|) (il:with-resources (il:\\numstr il:\\numstr1) (il:rplcharcode il:\\numstr 1 (il:charcode 0)) (il:setq il:|outstring| (il:substring il:\\numstr 1 1 il:\\numstr1))) (values il:|outstring| 0)) il:else (prog (il:signf il:fexp il:fhi il:flo il:texp il:thi il:tlo il:mant il:exp il:roundingbits (il:localk (if il:k (min 9 il:k) 7)) il:flog10 il:mantstring) (declare (special il:texp il:thi il:tlo)) (il:* il:\; "used by extended  floating multiplier and inttoext") il:restart (il:* il:|;;| "drc - this is really gross.  .FLOATUNBOX. takes a go tag as its last arg & does `(if 'tag (go ,tag)) only problem is that if you leave this arg unspecified the PAV compiler complains about the GO to NIL, even though its within an (if nil ...) which should get optimized away.  so, since Rooms uses the PAV compiler, we have to pass a tag so this will compile right...") (il:.floatunbox. il:f il:signf il:fexp il:fhi il:flo nil nil il:restart) (il:* il:|;;| "Re-normalize ") (il:|if| (eq 0 il:fhi) il:|then| (il:setq il:fhi il:flo) (il:setq il:flo 0) (decf il:fexp 16)) (il:|while| (eq 0 (logand il:fhi il:\\signbit)) il:|do| (il:.llsh1. il:fhi il:flo) (decf il:fexp)) (il:* il:|;;| "find # of digits before decimal point by looking up base 10 log in extpowers") (il:setq il:flog10 (il:fltintlog il:fexp il:fhi il:flo)) il:moredigits (il:setq il:exp (- il:flog10 il:localk)) il:again (il:timespow10 (- il:exp) il:fexp il:fhi il:flo) (il:* il:\; "results in texp thi tlo") (il:setq il:mant (il:exttoint il:texp il:thi il:tlo)) (il:* il:|;;| "Now compare the result to 10**k to check if the exp guess was a good one") (il:* il:|;;| "This code is in the original algorithm, but I'm not sure it's needed here. What the heck, it's pretty fast...") (il:* il:|;;| "(cond ((>= mant (cl:1+ (cl:aref intpowers localk))) (cl:incf exp) (go again)) ((eql mant (cl:aref intpowers localk)) (cl:incf exp) (setq mant (cl:aref intpowers (cl:1- localk)))) ((<= mant (cl:1- (cl:aref intpowers (cl:1- localk)))) (cl:decf exp) (go again)))") (il:* il:|;;| "If K came in NIL, check to see if enough digits have been generated") (il:|if| (not il:k) il:|then| (il:inttoext il:mant) (il:* il:\; " values in texp thi tlo") (il:timespow10 il:exp il:texp il:thi il:tlo) (il:|while| (not (> il:texp 0)) il:|do| (il:.lrsh1. il:thi il:tlo) (incf il:texp)) (il:setq il:roundingbits (logand il:tlo 255)) (il:setq il:tlo (logand il:tlo 65280)) (il:* il:|;;| "Round the  32-bit result to 24 bits to try and match F") (il:|if| (or (il:igreaterp il:roundingbits 128) (and (eq il:roundingbits 128) (not (eq 0 (logand il:tlo 256))))) il:|then| (il:|if| (eq il:tlo 65280) il:|then| (il:setq il:tlo 0) (il:|if| (eq il:thi il:max.small.integer) il:|then| (il:setq il:thi il:\\signbit) (incf il:texp) il:|else| (incf il:thi)) il:|else| (incf il:tlo 256))) (il:|if| (or (not (eq il:fexp il:texp)) (not (eq il:fhi il:thi)) (not (eq il:flo il:tlo))) il:|then| (incf il:localk) (il:|if| (< il:localk 10) il:|then| (go il:moredigits)))) (il:* il:|;;| "Done! Convert integer mantissa to a string") (il:with-resources (il:\\numstr il:\\numstr1) (il:\\convertnumber il:mant 10 t nil il:\\numstr il:\\numstr1) (il:setq il:mantstring il:\\numstr1)) (il:* il:|;;| "If K came in NIL, clip trailing \"0\"s from mantissa string; if it came in bigger than 8, pad the string with 0s.") (il:|if| (not il:k) il:|then| (let ((il:endpointer (1- (il:nchars il:mantstring)))) (il:|while| (eq #\0 (char il:mantstring il:endpointer)) il:|do| (il:glc il:mantstring) (incf il:exp) (decf il:endpointer))) il:|else| (il:|freplace| (il:array-header il:fill-pointer-p) il:|of| il:mantstring il:|with| t) (il:|freplace| (il:array-header il:total-size) il:|of| il:mantstring il:|with| 128) (il:* il:\; "So VECTOR-PUSH will work...") (il:|while| (il:igreaterp il:k il:localk) il:|do| (vector-push #\0 il:mantstring) (decf il:exp) (incf il:localk))) (return (values il:mantstring il:exp)))))(il:putprops il:rooms-lyric-patches il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop