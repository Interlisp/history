(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "ROOMS")(il:filecreated " 6-Jan-88 13:38:19" il:|{POGO:AISNORTH:XEROX}<ROOMS>LYRIC>ROOMS-GEOMETRY.;8| 9404         il:|previous| il:|date:| " 5-Jan-88 10:31:16" il:{eris}<cutting>rooms-geometry.\;1); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:rooms-geometrycoms)(il:rpaqq il:rooms-geometrycoms ((file-environments il:rooms-geometry)                                 (il:p (export '(externalize-region internalize-region                                                        externalize-position internalize-position))                                       (require "ROOMS"))                                 (il:coms                                  (il:* il:|;;| "externalizing for suites & background text")                                        (il:functions externalize-region internalize-region                                                externalize-position internalize-position                                                externalize-coordinate internalize-coordinate)                                        (il:globalvars il:screenwidth il:screenheight))                                 (il:coms                                  (il:* il:|;;| "scaling used by placement editor & backgrounds")                                        (il:structures scale)                                        (il:variables *one-to-one*)                                        (il:functions make-scale equal-scales)                                        (il:functions scale-width scale-height scale-x scale-y                                                scale-region scale-position)                                        (il:functions un-scale-region un-scale-position                                                un-scale-height un-scale-width un-scale-x un-scale-y))                                 ))(define-file-environment il:rooms-geometry :compiler :compile-file :package "ROOMS" :readtable "XCL")(export '(externalize-region internalize-region externalize-position internalize-position))(require "ROOMS")(il:* il:|;;| "externalizing for suites & background text")(defun externalize-region (region) (make-region :left (externalize-coordinate (region-left region)                                                             il:screenwidth)                                          :bottom                                          (externalize-coordinate (region-bottom region)                                                 il:screenheight)                                          :width                                          (externalize-coordinate (region-width region)                                                 il:screenwidth)                                          :height                                          (externalize-coordinate (region-height region)                                                 il:screenheight)))(defun internalize-region (region) (make-region :left (internalize-coordinate (region-left region)                                                             il:screenwidth)                                          :bottom                                          (internalize-coordinate (region-bottom region)                                                 il:screenheight)                                          :width                                          (internalize-coordinate (region-width region)                                                 il:screenwidth)                                          :height                                          (internalize-coordinate (region-height region)                                                 il:screenheight)))(defun externalize-position (pos) (make-position (externalize-coordinate (position-x pos)                                                        il:screenwidth)                                         (externalize-coordinate (position-y pos)                                                il:screenheight)))(defun internalize-position (pos) (make-position (internalize-coordinate (position-x pos)                                                        il:screenwidth)                                         (internalize-coordinate (position-y pos)                                                il:screenheight)))(defun externalize-coordinate (n range) (let ((external (/ n range)))                                             (typecase external (integer (float external))                                                    (otherwise external))))(defun internalize-coordinate (n range) (etypecase n (integer n)                                               ((or float rational)                                                (round (* n range)))))(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:screenwidth il:screenheight))(il:* il:|;;| "scaling used by placement editor & backgrounds")(defstruct (scale (:constructor make-scale-internal)) (il:* il:|;;;| "used to scale coordinates.  X-FACTOR & Y-FACTOR are the scale factor, and X-OFFSET & Y-OFFSET are added after scaling.") (x-offset 0 :type integer) (x-factor 1 :type (or integer float rational)) (y-offset 0 :type integer) (y-factor 1 :type (or integer float rational)))(defglobalvar *one-to-one* (make-scale-internal) )(defun make-scale (region) (il:* il:|;;;| "return a scale which scales the screen into REGION ") (make-scale-internal :x-factor (/ (region-width region)                                   il:screenwidth)        :x-offset        (region-left region)        :y-factor        (/ (region-height region)           il:screenheight)        :y-offset        (region-bottom region)))(defun equal-scales (scale-1 scale-2) (and (= (scale-x-factor scale-1)                                              (scale-x-factor scale-2))                                           (= (scale-y-factor scale-1)                                              (scale-y-factor scale-2))))(defmacro scale-width (width scale) `(round (* ,width (scale-x-factor ,scale))))(defmacro scale-height (height scale) `(round (* ,height (scale-y-factor ,scale))))(definline scale-x (x scale) (+ (scale-width x scale)                                (scale-x-offset scale)))(definline scale-y (y scale) (+ (scale-height y scale)                                (scale-y-offset scale)))(defun scale-region (region scale) (if (eq scale *one-to-one*)                                       region                                       (make-region :left (scale-x (region-left region)                                                                 scale)                                              :bottom                                              (scale-y (region-bottom region)                                                     scale)                                              :width                                              (scale-width (region-width region)                                                     scale)                                              :height                                              (scale-height (region-height region)                                                     scale))))(defun scale-position (pos scale) (if (eq scale *one-to-one*)                                      pos                                      (make-position (scale-x (position-x pos)                                                            scale)                                             (scale-y (position-y pos)                                                    scale))))(defun un-scale-region (region scale) (make-region :left (un-scale-x (region-left region)                                                                scale)                                             :bottom                                             (un-scale-y (region-bottom region)                                                    scale)                                             :width                                             (un-scale-width (region-width region)                                                    scale)                                             :height                                             (un-scale-height (region-height region)                                                    scale)))(defun un-scale-position (pos scale) (make-position (un-scale-x (position-x pos)                                                           scale)                                            (un-scale-y (position-y pos)                                                   scale)))(defmacro un-scale-height (height scale) `(round ,height (scale-y-factor ,scale)))(defmacro un-scale-width (width scale) `(round ,width (scale-x-factor ,scale)))(defun un-scale-x (x scale) (un-scale-width (- x (scale-x-offset scale))                                   scale))(defun un-scale-y (y scale) (un-scale-height (- y (scale-y-offset scale))                                   scale))(il:putprops il:rooms-geometry il:copyright ("Xerox Corporation" 1987 1988))(il:declare\: il:dontcopy  (il:filemap (nil)))il:stop