(DEFINE-FILE-INFO §READTABLE "INTERLISP" §PACKAGE "INTERLISP")(FILECREATED "13-Feb-87 12:45:09" {ERINYES}<SANTOSA>PCE>PCEERD.;1 29668        changes to%:  (FNS PCE.CREATE.ERDFILE \PCE.ERD.AddrToFilePtr \PCE.ERD.Configure                          \PCE.ERD.FilePtrToAddr \PCE.ERD.FormatDrive \PCE.ERD.FormatTrack                          \PCE.ERD.GetDiskBufferAddr \PCE.ERD.GetMaxCylinder \PCE.ERD.GetMemBufferPtr                          \PCE.ERD.GetSectorBuffer \PCE.ERD.IncrementPCMemPtr \PCE.ERD.Init                          \PCE.ERD.Notify \PCE.ERD.NotifyProcedure \PCE.ERD.PutDiskBufferAddr                          \PCE.ERD.ReadSectorBuffer \PCE.ERD.ReadSectors \PCE.ERD.ReadSectorsProc                          \PCE.ERD.ReturnDriveParameters \PCE.ERD.Terminate \PCE.ERD.WriteSectorBuffer                          \PCE.ERD.WriteSectors \PCE.ERD.WriteSectorsProc)      previous date%: "29-Jul-86 15:21:58" {ERIS}<LISPCORE>INTERNAL>LIBRARY>PCEERD.;1)(* "Copyright (c) 1986, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT PCEERDCOMS)(RPAQQ PCEERDCOMS        ([DECLARE%: FIRST (P (* turn off PCE processes if already loaded and running)                            (NLSETQ (\PCE.TERMINATE]        (COMS (* user functions)              (FNS PCE.CREATE.ERDFILE))        (FNS \PCE.ERD.AddrToFilePtr \PCE.ERD.Configure \PCE.ERD.FilePtrToAddr \PCE.ERD.FormatDrive              \PCE.ERD.FormatTrack \PCE.ERD.GetDiskBufferAddr \PCE.ERD.GetMaxCylinder              \PCE.ERD.GetMemBufferPtr \PCE.ERD.GetSectorBuffer \PCE.ERD.IncrementPCMemPtr              \PCE.ERD.Init \PCE.ERD.Notify \PCE.ERD.NotifyProcedure \PCE.ERD.PutDiskBufferAddr              \PCE.ERD.ReadSectorBuffer \PCE.ERD.ReadSectors \PCE.ERD.ReadSectorsProc              \PCE.ERD.ReturnDriveParameters \PCE.ERD.Terminate \PCE.ERD.WriteSectorBuffer              \PCE.ERD.WriteSectors \PCE.ERD.WriteSectorsProc)        (INITVARS (\PCE.ERD.Condition)               (\PCE.ERD.Process)               (\PCE.ERD.SectorBuffer)               (\PCE.ERD.erdPresent)               (\PCE.ERD.erdStream)               (\PCE.ERD.gotUpNotify)               (\PCE.ERD.status 0))        (GLOBALVARS \PCE.ERD.Condition \PCE.ERD.Process \PCE.ERD.SectorBuffer \PCE.ERD.erdPresent                \PCE.ERD.erdStream \PCE.ERD.gotUpNotify \PCE.ERD.status)        (CONSTANTS erdMaxHeads erdMaxSectors)        (DECLARE%: DONTCOPY (RECORDS ERDAddr ERDBuffer))))(DECLARE%: FIRST (* turn off PCE processes if already loaded and running)(NLSETQ (\PCE.TERMINATE)))(* user functions)(DEFINEQ(PCE.CREATE.ERDFILE  [LAMBDA (FILENAME CYLINDERS AUTOCONFIRMFLG)                (* mjs "16-Jul-86 09:42")                    (* * Creates the ERD backing file FILENAME, large enough for CYLINDERS           cylinders. If AUTOCONFIRMFLG is non-NIL, the user is asked to confirm the size,           and dots are printed each cylinder to indicate progress)    (PROG (STREAM NBYTES)          (DECLARE (SPECVARS STREAM NBYTES))          (if (OR (NOT (NUMBERP CYLINDERS))                  (LESSP (FIX CYLINDERS)                         1))              then (ERROR "Bad CYLINDERS argument" CYLINDERS))          (SETQ CYLINDERS (FIX CYLINDERS))                    (* calculate length of file by finding fileptr to first sector of next cylinder)          (SETQ NBYTES (\PCE.ERD.AddrToFilePtr (create ERDAddr                                                      Cylinder _ CYLINDERS                                                      Head _ 0                                                      Sector _ 1)))                    (* if AUTOCONFIRMFLG is NIL, ask user to confirm size of file.)          (if (NOT AUTOCONFIRMFLG)              then (printout T "Create file " FILENAME " with " CYLINDERS " cylinders = "                          (IQUOTIENT NBYTES 512)                          " pages = " NBYTES " bytes (Y/N)? ")                   (if [NEQ 'Yes (ASKUSER NIL NIL "" '(Yes No]                       then (printout T "aborted" T)                            (RETURN)                     else (printout T T "Creating file...")))          (SETQ STREAM (\PCE.OPENSTREAM FILENAME 'OUTPUT 'NEW))          (RESETLST (RESETSAVE NIL (LIST 'CLOSEF? STREAM))                 (for LASTBYTEONPAGE from 512 to NBYTES by 512 bind (BYTESPERCYLINDER _                                                                           (IQUOTIENT NBYTES                                                                                   CYLINDERS))                    do                                       (* write zero into last byte of each                                                              page)                       (SETFILEPTR STREAM (SUB1 LASTBYTEONPAGE))                       (BOUT STREAM 0)                     (* if AUTOCONFIRMFLG is NIL, print out the cylinder number each time we write a           cylinder.)                       (if (AND (NOT AUTOCONFIRMFLG)                                (ZEROP (IMOD LASTBYTEONPAGE BYTESPERCYLINDER)))                           then (printout T (IQUOTIENT LASTBYTEONPAGE BYTESPERCYLINDER)                                       "..."))                       (BLOCK))                 (if (NOT AUTOCONFIRMFLG)                     then (printout T "done" T]))(DEFINEQ(\PCE.ERD.AddrToFilePtr  [LAMBDA (ADDR)                                             (* mjs " 1-May-86 12:14")                    (* * given an ERD address, returns the file pointer to the beginning of the           sector in the ERD backing file. Note that the head and cylinder numbers start           at 0, but the sector numbers start from 1)    (ITIMES 512 (IPLUS (SUB1 (fetch (ERDAddr Sector) of ADDR))                       (ITIMES erdMaxSectors (IPLUS (fetch (ERDAddr Head) of ADDR)                                                    (ITIMES erdMaxHeads (fetch (ERDAddr Cylinder)                                                                           of ADDR])(\PCE.ERD.Configure  [LAMBDA (ERD.CONFIG)                                       (* mjs " 2-Jul-86 14:49")                    (* * Set up variables used by ERD agent, and open ERD backing file.)                    (* * See RegidDiskBoot in PCERigidDisk.mesa)                    (* * Note%: the ERD bios code is now loaded with the main bios code, so it is           no longer necessary to load it here.)    (\PCE.ERD.Terminate)    (if (AND (LISTGET ERD.CONFIG 'RIGIDDISK)             (LISTGET ERD.CONFIG 'ERDFILE))        then (SETQ \PCE.ERD.erdStream (\PCE.OPENSTREAM (LISTGET ERD.CONFIG 'ERDFILE)                                             'BOTH                                             'OLD))             (if (ILESSP (\PCE.ERD.GetMaxCylinder)                        1)                 then (ERROR "ERD file smaller than one cylinder" (LISTGET ERD.CONFIG 'ERDFILE))                      (ERROR!))                              (* don't want CLOSEALL to close the                                                              ERD file)             (WHENCLOSE \PCE.ERD.erdStream 'CLOSEALL 'NO)             (SETQ \PCE.ERD.erdPresent T)             [replace (\PCE.RIGIDDISK.FCB maxCylinders) of \PCE.RIGIDDISK.FCBPTR                with (\DoveIO.ByteSwap (ADD1 (\PCE.ERD.GetMaxCylinder]      else (SETQ \PCE.ERD.erdPresent NIL)           (replace (\PCE.RIGIDDISK.FCB maxCylinders) of \PCE.RIGIDDISK.FCBPTR with 0)                     (* if no ERD, set word at byte loc "|xC8000" <first loc of XT bios> to zero)           (PCE.POKE.WORD 819200 0])(\PCE.ERD.FilePtrToAddr  [LAMBDA (FILEPTR)                                          (* mjs " 1-May-86 12:21")                    (* * Given a file pointer into the ERD backing file, returns the ERD address of           the sector containing that file pointer)    (PROG (SECTORINFILE CYL HEAD SEC REMAINDER)          (SETQ SECTORINFILE (IQUOTIENT FILEPTR 512))          (SETQ CYL (IQUOTIENT SECTORINFILE (ITIMES erdMaxHeads erdMaxSectors)))          (SETQ REMAINDER (IMOD SECTORINFILE (ITIMES erdMaxHeads erdMaxSectors)))          (SETQ HEAD (IQUOTIENT REMAINDER erdMaxSectors))          (SETQ SEC (ADD1 (IMOD REMAINDER erdMaxSectors)))          (RETURN (create ERDAddr                         Cylinder _ CYL                         Head _ HEAD                         Sector _ SEC])(\PCE.ERD.FormatDrive  [LAMBDA NIL                                                (* mjs " 1-May-86 12:23")                    (* * Formats from cylinder given by \PCE.ERD.GetDiskBufferAddr to the last           cylinder on the ERD, by transferring the ERD Sector Buffer to each sector)    (PROG (DISKADDR)          (SETQ DISKADDR (\PCE.ERD.GetDiskBufferAddr))                    (* make sure that we are pointing to the first sector of the first head of the           cylinder.)          (replace (ERDAddr Sector) of DISKADDR with 1)          (replace (ERDAddr Head) of DISKADDR with 0)          (\PCE.ERD.WriteSectorsProc DISKADDR (\PCE.ERD.GetSectorBuffer)                 [ITIMES erdMaxSectors erdMaxHeads (ADD1 (IDIFFERENCE (\PCE.ERD.GetMaxCylinder)                                                                (fetch (ERDAddr Cylinder)                                                                   of DISKADDR]                 NIL)          (RETURN 0])(\PCE.ERD.FormatTrack  [LAMBDA NIL                                                (* mjs " 1-May-86 12:24")                    (* * formats the single track specified by \PCE.ERD.GetDiskBufferAddr by           transferring the ERD Sector Buffer to each sector)    (PROG (DISKADDR)          (SETQ DISKADDR (\PCE.ERD.GetDiskBufferAddr))       (* make sure that sector is 1)          (replace (ERDAddr Sector) of DISKADDR with 1)          (\PCE.ERD.WriteSectorsProc DISKADDR (\PCE.ERD.GetSectorBuffer)                 erdMaxSectors NIL)          (RETURN 0])(\PCE.ERD.GetDiskBufferAddr  [LAMBDA NIL                                                (* mjs " 2-Jul-86 14:49")                    (* * Decode disk address stored in the CLReg, CHReg, and DHReg fields of the           ERD FCB.)                                                             (* Sector is six bits%: "CL[5..0]")                                                             (* Head is value of DHReg)                    (* Cylinder is 10-bits%: "Cylinder[9..8]" is "CL[7..6]" and "Cylinder[7..0]" is "CH[7..0]")    (with \PCE.RIGIDDISK.FCB \PCE.RIGIDDISK.FCBPTR (create ERDAddr                                                          Cylinder _ (LOGOR CHReg                                                                            (LLSH (LOGAND 192 CLReg)                                                                                  2))                                                          Head _ DHReg                                                          Sector _ (LOGAND 63 CLReg])(\PCE.ERD.GetMaxCylinder  [LAMBDA NIL                                                (* mjs " 1-May-86 12:29")                    (* * Calculate max possible full cylinder number from the length of the ERD           backing file)                    (* * warning%: In the mesa file ERDFileImpl.mesa, the function           ReturnCurrentDriveParameters returns a value named maxCylinder, which for some           reason is 1+ the max cylinder number)    (SUB1 (fetch (ERDAddr Cylinder) of (\PCE.ERD.FilePtrToAddr (GETFILEINFO \PCE.ERD.erdStream                                                                      'LENGTH])(\PCE.ERD.GetMemBufferPtr  [LAMBDA NIL                                                (* mjs " 2-Jul-86 15:57")                    (* Returns a ptr to a buffer in PC real memory starting at the PC location           specified by the ESReg and BXReg fields of the ERD FCB.          Because this can start on a non-word-aligned byte, it is returned as an           ERDBuffer record, which includes a byte offset.)    (PROG ((newESReg (\DoveIO.ByteSwap (fetch (\PCE.RIGIDDISK.FCB ESReg) of \PCE.RIGIDDISK.FCBPTR)))           (newBXReg (\DoveIO.ByteSwap (fetch (\PCE.RIGIDDISK.FCB BXReg) of \PCE.RIGIDDISK.FCBPTR)))           pcAddress)          (SETQ pcAddress (IPLUS (ITIMES 16 newESReg)                                 newBXReg))          (RETURN (create ERDBuffer                         MemoryPointer _ (\PCE.GET.PC.PTR pcAddress)                         ByteOffset _ (LOGAND pcAddress 1])(\PCE.ERD.GetSectorBuffer  [LAMBDA NIL                                                (* mjs " 1-Jul-86 14:56")                    (* * Returns an ERDBuffer pointer to a one-sector buffer in lisp memory.)    (create ERDBuffer           MemoryPointer _ (if \PCE.ERD.SectorBuffer                             else (SETQ \PCE.ERD.SectorBuffer (\ALLOCBLOCK 128 UNBOXEDBLOCK.GCT)))           ByteOffset _ 0])(\PCE.ERD.IncrementPCMemPtr  [LAMBDA (BUFFERPTR)                                        (* mjs " 1-Jul-86 14:58")                    (* * returns a PC mem pointer incremented by 512 bytes)    (create ERDBuffer           MemoryPointer _ (\ADDBASE (fetch (ERDBuffer MemoryPointer) of BUFFERPTR)                                  256)           ByteOffset _ (fetch (ERDBuffer ByteOffset) of BUFFERPTR])(\PCE.ERD.Init  [LAMBDA NIL                                                (* mjs "29-Jul-86 15:05")                    (* * Sets the ERD agent variables, and spawns the ERD agent process, if the PC           is configured to have an ERD. \PCE.ERD.Condition and \PCE.ERD.gotUpNotify are           used to signal \PCE.ERD.NotifyProcedure process that an up notify has been           received. \PCE.ERD.status is the status of last ERD operation)    (if \PCE.ERD.erdPresent        then (SETQ \PCE.ERD.Condition (CREATE.EVENT 'ERD.Condition))             (SETQ \PCE.ERD.gotUpNotify NIL)             (SETQ \PCE.ERD.status 0)             (SETQ \PCE.ERD.Process (ADD.PROCESS (LIST (FUNCTION \PCE.ERD.NotifyProcedure))                                           'NAME                                           'PCE-ERD                                           'AFTEREXIT                                           'DELETE                                           'RESTARTABLE                                           'HARDRESET                                           'RESTARTFORM                                           (LIST (FUNCTION \PCE.ERD.Init])(\PCE.ERD.Notify  [LAMBDA NIL                                                (* mjs " 1-May-86 12:44")                    (* * Notifies the ERD agent that an up notify has been received.)    (SETQ \PCE.ERD.gotUpNotify T)    (if (TYPENAMEP \PCE.ERD.Condition 'EVENT)        then (NOTIFY.EVENT \PCE.ERD.Condition)      elseif \PCE.DEBUG.FLG        then (\PCE.SYSTEM.ERROR "\PCE.ERD.Condition not an event" \PCE.ERD.Condition])(\PCE.ERD.NotifyProcedure  [LAMBDA NIL                                                (* mjs "28-Jul-86 14:26")                    (* * This is the printer agent procedure, that is spawned as a process.          It loops forever, waiting for an up notify, and handling the request)                    (* * See NotifyProcedure in PCERigidDisk.mesa)    (PROG NIL                    (* * Acknowledge any pending ERD command by returning the drive-not-ready           error. This keeps the PC from waiting forever for an ERD operation to complete,           if a hard reset occurs in the middle of it.)          (replace (\PCE.RIGIDDISK.FCB AHReg) of \PCE.RIGIDDISK.FCBPTR with 128)          (\DoveIO.NotifyIOP (fetch (\PCE.RIGIDDISK.FCB pceDiskWorkMask) of \PCE.RIGIDDISK.FCBPTR))                    (* * Now, loop forever, handling ERD commands)          (while T             do                     (* * wait for an up notify)                (until \PCE.ERD.gotUpNotify do (AWAIT.EVENT \PCE.ERD.Condition))                (SETQ \PCE.ERD.gotUpNotify NIL)                     (* * execute appropriate routine depending on the value of AHReg %, and stuff           error code back into AHReg)                [SETQ \PCE.ERD.status                 (if [NOT (AND \PCE.ERD.erdPresent (EQ 128 (fetch (\PCE.RIGIDDISK.FCB DLReg)                                                              of \PCE.RIGIDDISK.FCBPTR]                     then                                    (* error%: no ERD present)                          (if (AND \PCE.DEBUG.FLG (NOT \PCE.ERD.erdPresent))                              then (\PCE.SYSTEM.ERROR "ERD Up notify when ERD is not present"))                          128                   else (SELECTQ (fetch (\PCE.RIGIDDISK.FCB AHReg) of \PCE.RIGIDDISK.FCBPTR)                            (0                               (* ResetDisk)                               0)                            (1                               (* ReadStatus)                               (replace (\PCE.RIGIDDISK.FCB ALReg) of \PCE.RIGIDDISK.FCBPTR                                  with \PCE.ERD.status)                               0)                            (2                               (* ReadSectors)                               (\PCE.ERD.ReadSectors))                            (3                               (* WriteSectors)                               (\PCE.ERD.WriteSectors))                            (4                               (* verify sectors)                               0)                            (5                               (* FormatTrack)                               (\PCE.ERD.FormatTrack))                            (6                               (* FormatTrack -- ignore Bad Sector                                                              Flags)                               (\PCE.ERD.FormatTrack))                            (7                               (* FormatDrive)                               (\PCE.ERD.FormatDrive))                            (8                               (* ReturnDriveParameters)                               (\PCE.ERD.ReturnDriveParameters))                            (9                               (* init drive)                               0)                            (12                              (* Seek)                                0)                            (13                              (* alternative disk reset --                                                             not supported)                                0)                            (14                              (* ReadSectorBuffer)                                (\PCE.ERD.ReadSectorBuffer))                            (15                              (* WriteSectorBuffer)                                                             (* same as 3 above)                                (\PCE.ERD.WriteSectorBuffer))                            (16                              (* TestDriveReady)                                0)                            (17                              (* Recalibrate)                                0)                            (PROGN (if (AND \PCE.DEBUG.FLG (\PCE.SYSTEM.ERROR                                                                   "Unknown ERD command received"                                                                  (fetch (\PCE.RIGIDDISK.FCB AHReg)                                                                     of \PCE.RIGIDDISK.FCBPTR)))                                     else                    (* bad command received)                                          1]                (replace (\PCE.RIGIDDISK.FCB AHReg) of \PCE.RIGIDDISK.FCBPTR with \PCE.ERD.status)                (\DoveIO.NotifyIOP (fetch (\PCE.RIGIDDISK.FCB pceDiskWorkMask) of                                                                                 \PCE.RIGIDDISK.FCBPTR                                          ])(\PCE.ERD.PutDiskBufferAddr  [LAMBDA (DISKADDR)                                         (* mjs " 2-Jul-86 14:49")                    (* * Store the disk address DISKADDR into the CLReg, CHReg, and DHReg fields of           the ERD FCB.)                                                             (* Sector is six bits%: "CL[5..0]")                                                             (* Head is value of DHReg)                    (* Cylinder is 10-bits%: "Cylinder[9..8]" is "CL[7..6]" and "Cylinder[7..0]" is "CH[7..0]")    (with ERDAddr DISKADDR (replace (\PCE.RIGIDDISK.FCB CHReg) of \PCE.RIGIDDISK.FCBPTR                              with (LOGAND 255 Cylinder))          (replace (\PCE.RIGIDDISK.FCB DHReg) of \PCE.RIGIDDISK.FCBPTR with Head)          (replace (\PCE.RIGIDDISK.FCB CLReg) of \PCE.RIGIDDISK.FCBPTR             with (LOGOR (LOGAND 63 Sector)                         (LRSH (LOGAND 768 Cylinder)                               2])(\PCE.ERD.ReadSectorBuffer  [LAMBDA NIL                                                (* mjs " 1-Jul-86 15:05")                    (* * reads the contents of the ERD sector buffer into the specified PC buffer.          Both PCMEMBUFFERPTR and LISPBUFFERPTR are ERDBuffer records which include a           memory pointer and a byte offset <since the PC buffer may not be word-aligned>)    (PROG ((LISPBUFFERPTR (\PCE.ERD.GetSectorBuffer))           (PCMEMBUFFERPTR (\PCE.ERD.GetMemBufferPtr)))          (\MOVEBYTES (fetch (ERDBuffer MemoryPointer) of LISPBUFFERPTR)                 (fetch (ERDBuffer ByteOffset) of LISPBUFFERPTR)                 (fetch (ERDBuffer MemoryPointer) of PCMEMBUFFERPTR)                 (fetch (ERDBuffer ByteOffset) of PCMEMBUFFERPTR)                 512)          (RETURN 0])(\PCE.ERD.ReadSectors  [LAMBDA NIL                                                (* mjs " 2-Jul-86 14:49")                    (* * Reads sectors from the ERD backing file <specified by           \PCE.ERD.GetDiskBufferAddr and ALReg> into the PC memory buffer <specified by           \PCE.ERD.GetMemBufferPtr>)    (\PCE.ERD.ReadSectorsProc (\PCE.ERD.GetDiskBufferAddr)           (\PCE.ERD.GetMemBufferPtr)           (fetch (\PCE.RIGIDDISK.FCB ALReg) of \PCE.RIGIDDISK.FCBPTR)           T])(\PCE.ERD.ReadSectorsProc  [LAMBDA (DSKADDR BUFFERPTR CNT INCBUFFERP)                 (* mjs " 1-Jul-86 15:05")                    (* * Reads CNT sectors starting at DSKADDR into the buffer BUFFERPTR <a CONS           cell of a lisp pointer and a byte offset>.          If INCBUFFERP is NIL, BUFFERPTR is not incremented after each sector is           transferred, so the sectors are read into the same buffer repeatedly)                    (* * See ReadSectorsProc in ERDFile.mesa)    (PROG ((FILEADDR (\PCE.ERD.AddrToFilePtr DSKADDR)))          (SETFILEPTR \PCE.ERD.erdStream FILEADDR)          [for X from 1 to CNT do (\BINS \PCE.ERD.erdStream (fetch (ERDBuffer MemoryPointer)                                                               of BUFFERPTR)                                         (fetch (ERDBuffer ByteOffset) of BUFFERPTR)                                         512)                                  (if INCBUFFERP                                      then (SETQ BUFFERPTR (\PCE.ERD.IncrementPCMemPtr BUFFERPTR]          (RETURN 0])(\PCE.ERD.ReturnDriveParameters  [LAMBDA NIL                                                (* mjs " 2-Jul-86 14:49")                    (* * Stores ERD size and presence in ERD FCB.)    (PROG NIL          (\PCE.ERD.PutDiskBufferAddr (create ERDAddr                                             Cylinder _ (\PCE.ERD.GetMaxCylinder)                                             Head _ (SUB1 erdMaxHeads)                                             Sector _ erdMaxSectors))          (replace (\PCE.RIGIDDISK.FCB DLReg) of \PCE.RIGIDDISK.FCBPTR             with (if \PCE.ERD.erdPresent                      then 1                    else 0))          (RETURN 0])(\PCE.ERD.Terminate  [LAMBDA NIL                                                (* mjs " 1-May-86 13:03")                    (* * Delete ERD agent process, reset ERD agent variables, and close ERD backing           file.)    (if (PROCESSP \PCE.ERD.Process)        then                                                 (* flushes ERD process)             (DEL.PROCESS \PCE.ERD.Process))    (SETQ \PCE.ERD.erdPresent NIL)    (SETQ \PCE.ERD.Condition NIL)    (SETQ \PCE.ERD.gotUpNotify NIL)    (SETQ \PCE.ERD.status 0)    (SETQ \PCE.ERD.Process NIL)    (if (AND (STREAMP \PCE.ERD.erdStream)             (OPENP \PCE.ERD.erdStream))        then                                                 (* close any open ERD stream)             (CLOSEF \PCE.ERD.erdStream))    (SETQ \PCE.ERD.erdStream NIL])(\PCE.ERD.WriteSectorBuffer  [LAMBDA NIL                                                (* mjs " 1-Jul-86 15:03")                    (* writes the sector in the specified PC buffer into the ERD sector buffer)                    (* * Writes the sector in the specified PC buffer into the ERD sector buffer.          Both PCMEMBUFFERPTR and LISPBUFFERPTR are ERDBuffer records which include a           memory pointer and a byte offset <since the PC buffer may not be word-aligned>)    (PROG ((PCMEMBUFFERPTR (\PCE.ERD.GetMemBufferPtr))           (LISPBUFFERPTR (\PCE.ERD.GetSectorBuffer)))          (\MOVEBYTES (fetch (ERDBuffer MemoryPointer) of PCMEMBUFFERPTR)                 (fetch (ERDBuffer ByteOffset) of PCMEMBUFFERPTR)                 (fetch (ERDBuffer MemoryPointer) of LISPBUFFERPTR)                 (fetch (ERDBuffer ByteOffset) of LISPBUFFERPTR)                 512)          (RETURN 0])(\PCE.ERD.WriteSectors  [LAMBDA NIL                                                (* mjs " 2-Jul-86 14:49")                    (* * Writes sectors from the PC memory buffer <specified by           \PCE.ERD.GetMemBufferPtr> into the ERD backing file <specified by           \PCE.ERD.GetDiskBufferAddr and ALReg>)    (\PCE.ERD.WriteSectorsProc (\PCE.ERD.GetDiskBufferAddr)           (\PCE.ERD.GetMemBufferPtr)           (fetch (\PCE.RIGIDDISK.FCB ALReg) of \PCE.RIGIDDISK.FCBPTR)           T])(\PCE.ERD.WriteSectorsProc  [LAMBDA (DSKADDR BUFFERPTR CNT INCBUFFERP)                 (* mjs " 1-Jul-86 15:07")                    (* * Writes CNT sectors starting at DSKADDR from the buffer BUFFERPTR <an           ERDBuffer record of a lisp pointer and a byte offset>.          If INCBUFFERP is NIL, BUFFERPTR is not incremented after each sector is           transferred, so the sectors are written from the same buffer repeatedly)                    (* * See WriteSectorsProc in ERDFile.mesa)    (PROG ((FILEADDR (\PCE.ERD.AddrToFilePtr DSKADDR)))          (SETFILEPTR \PCE.ERD.erdStream FILEADDR)          [for X from 1 to CNT do (\BOUTS \PCE.ERD.erdStream (fetch (ERDBuffer MemoryPointer)                                                                of BUFFERPTR)                                         (fetch (ERDBuffer ByteOffset) of BUFFERPTR)                                         512)                                  (if INCBUFFERP                                      then (SETQ BUFFERPTR (\PCE.ERD.IncrementPCMemPtr BUFFERPTR]          (RETURN 0]))(RPAQ? \PCE.ERD.Condition )(RPAQ? \PCE.ERD.Process (RPAQ? \PCE.ERD.SectorBuffer )(RPAQ? \PCE.ERD.erdPresent )(RPAQ? \PCE.ERD.erdStream )(RPAQ? \PCE.ERD.gotUpNotify )(RPAQ? \PCE.ERD.status 0)(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \PCE.ERD.Condition \PCE.ERD.Process \PCE.ERD.SectorBuffer \PCE.ERD.erdPresent        \PCE.ERD.erdStream \PCE.ERD.gotUpNotify \PCE.ERD.status))(DECLARE%: EVAL@COMPILE (RPAQQ erdMaxHeads 4)(RPAQQ erdMaxSectors 17)(CONSTANTS erdMaxHeads erdMaxSectors))(DECLARE%: DONTCOPY (DECLARE%: EVAL@COMPILE(RECORD ERDAddr (Cylinder Head Sector))(RECORD ERDBuffer (MemoryPointer . ByteOffset))))(PUTPROPS PCEERD COPYRIGHT ("Xerox Corporation" 1986 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (2593 5477 (PCE.CREATE.ERDFILE 2603 . 5475)) (5478 28889 (\PCE.ERD.AddrToFilePtr 5488 . 6216) (\PCE.ERD.Configure 6218 . 7889) (\PCE.ERD.FilePtrToAddr 7891 . 8712) (\PCE.ERD.FormatDrive 8714 . 9773) (\PCE.ERD.FormatTrack 9775 . 10388) (\PCE.ERD.GetDiskBufferAddr 10390 . 11455) (\PCE.ERD.GetMaxCylinder 11457 . 12133) (\PCE.ERD.GetMemBufferPtr 12135 . 13088) (\PCE.ERD.GetSectorBuffer 13090 . 13528) (\PCE.ERD.IncrementPCMemPtr 13530 . 13972) (\PCE.ERD.Init 13974 . 15180) (\PCE.ERD.Notify 15182 . 15647) (\PCE.ERD.NotifyProcedure 15649 . 20985) (\PCE.ERD.PutDiskBufferAddr 20987 . 22029) (\PCE.ERD.ReadSectorBuffer 22031 . 22913) (\PCE.ERD.ReadSectors 22915 . 23458) (\PCE.ERD.ReadSectorsProc 23460 . 24608) (\PCE.ERD.ReturnDriveParameters 24610 . 25333) (\PCE.ERD.Terminate 25335 . 26188) (\PCE.ERD.WriteSectorBuffer 26190 . 27173) (\PCE.ERD.WriteSectors 27175 . 27721) (\PCE.ERD.WriteSectorsProc 27723 . 28887)))))STOP 