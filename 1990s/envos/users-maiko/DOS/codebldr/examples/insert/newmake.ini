#------------------------------------------------------------------------------# Intel 386/486 C Code Builder(TM) Kit# Copyright 1991 Intel Corporation.  All Rights Reserved.## Make initialization file for Insert example program (EXAMPLES\INSERT)#------------------------------------------------------------------------------## The operation lines associated with the .BEFORE pseudotarget get executed# once, before any targets get made.  The operation lines associated with# the .AFTER pseudotarget get executed once, after all required targets have# been made.  You can use these pseudotargets to customize the environment# for *every* child process or for turning on and off resident programs.## Here are a few samples, commented out.#.BEFORE:#       %set PATH=c:\special    # a special path for each child.#.AFTER:#       @erase \tmp\*.*         # erase any leftover temporary files created#                               # by the compiler or for other reasons.# The order to search for rules and files is specified by .SUFFIXES# You may change the default .SUFFIXES as follows.#.SUFFIXES:                                     # Cancel default .SUFFIXES#.SUFFIXES: .exe .lib .c .obj .c .asm           # Modify to suit your need# The directory Code Builder Make uses for temporary files is specified by# the MAKE_TMP macro.MAKE_TMP= $(TMP)# Initial flags to be passed to Code Builder Make.MFLAGS = /mD                            # memory miser and directory snapshot# Macros for compiler driver.#CC     = icc                           # Code Builder Make has this built in.# Other useful macrosCFLAGS  =LIBS    =SETARGV = $(LIB)\SETARGVLINK = il32LINKFLAGS =# You can do a recursive make with an operation line like:## recursive:#       (chdir subdirectory ; $(MAKE) $(MFLAGS))# DEFAULT RULES#       They are defined internally.  They are changed here to invoke#       the CONSOLE message displayer.##       To produce an `.obj' file from a `.c' file..c.obj:        @CONSOLE "   " ${CC} /c ${CFLAGS} $<        ${CC} /c ${CFLAGS} $<##       To produce an `.exe' file from an `.obj' file..obj.exe:        @CONSOLE "    " $(CC) $(LINKFLAGS) $<        $(CC) $(LINKFLAGS) $<##       You can produce '.exe' directly from '.c'..c.exe:        @CONSOLE "    " $(CC) $(CFLAGS) $(LINKFLAGS) $<        $(CC) $(CFLAGS) $(LINKFLAGS) $<# Some general purpose targets;## A universally useful target so "make clean" always works.clean:        -( erase *.bak ; erase *.map )