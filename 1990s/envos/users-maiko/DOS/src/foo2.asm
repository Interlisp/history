.MODEL FLATNAME foo2CODE32 SEGMENT READONLY PUBLIC USE32STK STRUC                               ;* ================================= *;   STK_RLOC             DD  ?           ;* Relocation factor                 *;                        DB  2 DUP (?)   ;* Reserved                          *;   STK_OPTS             DB  ?           ;* Options                           *;   STK_CC               DB  ?           ;* Command code                      *;   STK_EDI              DD  ?           ;* Registers of interrupted process  *;   STK_ESI              DD  ?           ;*     "     "       "         "     *;   STK_EBP              DD  ?           ;*     "     "       "         "     *;   STK_TMP              DD  ?           ;* (Points to global dat area-GDA)   *;   STK_EBX              DD  ?           ;*     "     "       "         "     *;   STK_EDX              DD  ?           ;*     "     "       "         "     *;   STK_ECX              DD  ?           ;*     "     "       "         "     *;   STK_EAX              DD  ?           ;*     "     "       "         "     *;   STK_ERC              DW  ?           ;* Error code or reserved            *;   STK_ID               DB  ?           ;* Interrupt ID (software INTs)      *;   STK_IDI              DB  ?           ;* Intel interrupt ID (exceptions)   *;   STK_EIP              DD  ?           ;* Registers                     EIP *;   STK_CS               DD  ?           ;* of the                         CS *;   STK_FLG              DD  ?           ;* interrupted                EFLAGS *;   STK_ESP              DD  ?           ;* process                       ESP *;   STK_SS               DD  ?           ;*                                SS *;   STK_ES               DD  ?           ;* V86-mode registers                *;   STK_DS               DD  ?           ;*  "   "                            *;   STK_FS               DD  ?           ;*  "   "                            *;   STK_GS               DD  ?           ;*  "   "                            *;STK ENDS                                ;* --------------------------------- *;_STK_WRK        EQU     8               ;* Length of stack work space        *;_STK_LEN        EQU     SIZE STK        ;* Length of stack frame             *;                                        ;* Stack options (STK_OPTS field) -- *;_STK_NOINT      EQU     80H             ;* Suppress interrupt                *;_STK_TERM       EQU     40H             ;* Terminate application             *;                                        ;* EFLAG Values -------------------- *;_FLAG_CARRY     EQU     00000001H       ;* Carry flag                        *;_FLAG_PARITY    EQU     00000004H       ;* Parity flag                       *;_FLAG_AUXCARRY  EQU     00000010H       ;* Auxillary carry flag              *;_FLAG_ZERO      EQU     00000040H       ;* Zero flag                         *;_FLAG_SIGN      EQU     00000080H       ;* Sign flag                         *;_FLAG_TRAP      EQU     00000100H       ;* Trap flag                         *;_FLAG_INTERRUPT EQU     00000200H       ;* Interrupt enable flag             *;_FLAG_DIRECTION EQU     00000400H       ;* Direction flag                    *;_FLAG_OVERFLOW  EQU     00000800H       ;* Overflow flag                     *;_FLAG_IOPL      EQU     00003000H       ;* I/O privilege level mask          *;_FLAG_NESTED    EQU     00004000H       ;* Nested task flag                  *;_FLAG_RESUME    EQU     00010000H       ;* Resume flag                       *;_FLAG_VM        EQU     00020000H       ;* Virtual 8086 mode                 *;ASSUME DS:DATA		PUBLIC Mouse		PUBLIC PostAmblerPostAmbler proc near		popad	; Restore all the registers		retPostAmbler endpMouse proc near	push    eax	pushad	mov     ebp,esp	sub     esp,4h	; Statement # 568	mov     eax,[ebp+_STK_WRK]	mov     DWORD PTR [ebp]+0fffffffch,eax	mov		; Statement # 569	mov     esp,ebp	popad	add     esp,4h	retMouse endpCODE32 ENDSEND