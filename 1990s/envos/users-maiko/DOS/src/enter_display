DoScroll.c:  Scroll( dsp, dsp->UpperLeftX, (int)((dsp->displaywidth *y) / dsp->VissibleHeight));DoScroll.c:  Scroll( dsp, (int)((dsp->displaywidth *x) / dsp->VissibleWidth), dsp->UpperLeftY);DoScroll.c:  Scroll( dsp, dsp->UpperLeftX - ScrollPitch, dsp->UpperLeftY);DoScroll.c:  Scroll( dsp, dsp->UpperLeftX + ScrollPitch, dsp->UpperLeftY);DoScroll.c:  Scroll( dsp, dsp->UpperLeftX, dsp->UpperLeftY - ScrollPitch);DoScroll.c:  Scroll( dsp, dsp->UpperLeftX, dsp->UpperLeftY + ScrollPitch);DoScroll.c:  dsp->UpperLeftX = bound(0, newX, dsp->displaywidth - dsp->VissibleWidth);DoScroll.c:  dsp->UpperLeftY = bound(0, newY, dsp->displayheight - dsp->VissibleHeight);DoScroll.c:  newX = (int)((dsp->UpperLeftX * dsp->VissibleWidth) / dsp->displaywidth);DoScroll.c:  newY = (int)((dsp->UpperLeftY * dsp->VissibleHeight) / dsp->displayheight);DoScroll.c:  XMoveWindow( dsp->display_id, dsp->HorScrollButton, newX, -dsp->InternalBorderWidth);DoScroll.c:  XMoveWindow( dsp->display_id, dsp->VerScrollButton, -dsp->InternalBorderWidth, newY );DoScroll.c:  (dsp->bitblt_to_screen)( dsp, dsp->UpperLeftX, 0, dsp->UpperLeftY,DoScroll.c:			  dsp->VissibleWidth, dsp->VissibleHeight);XCursor.c:  DefineCursor(currentdsp->display_id,XCursor.c:	       currentdsp->DisplayWindow,XCursor.c:  DefineCursor(currentdsp->display_id,XCursor.c:	       currentdsp->DisplayWindow,XCursor.c:  screen = ScreenOfDisplay( dsp->display_id, DefaultScreen( dsp->display_id ));XCursor.c:  Cursor_src = XCreatePixmapFromBitmapData(dsp->display_id,XCursor.c:					   dsp->DisplayWindow,XCursor.c:  Cursor_msk = XCreatePixmapFromBitmapData(dsp->display_id,XCursor.c:					   dsp->DisplayWindow,XCursor.c:  *return_cursor = XCreatePixmapCursor( dsp->display_idXCursor.c:  XFreePixmap(dsp->display_id, Cursor_src);XCursor.c:  XFreePixmap(dsp->display_id, Cursor_msk);XCursor.c:  XFlush( dsp->display_id );XInit.c:  XSelectInput(dsp->display_id, dsp->LispWindow, LispMask);XInit.c:  XSelectInput(dsp->display_id, dsp->DisplayWindow, DisplayMask);XInit.c:  XSelectInput(dsp->display_id, dsp->HorScrollBar, BarMask);XInit.c:  XSelectInput(dsp->display_id, dsp->VerScrollBar, BarMask);XInit.c:  XSelectInput(dsp->display_id, dsp->HorScrollButton, NoEventMask);XInit.c:  XSelectInput(dsp->display_id, dsp->VerScrollButton, NoEventMask);XInit.c:  XSelectInput(dsp->display_id, dsp->NEGrav, GravMask);XInit.c:  XSelectInput(dsp->display_id, dsp->SEGrav, GravMask);XInit.c:  XSelectInput(dsp->display_id, dsp->SWGrav, GravMask);XInit.c:  XSelectInput(dsp->display_id, dsp->NWGrav, GravMask);XInit.c:    ioctl(ConnectionNumber(dsp->display_id)XInit.c:    XDestroySubwindows( dsp->display_id, dsp->LispWindow );XInit.c:    XDestroyWindow( dsp->display_id, dsp->LispWindow );XInit.c:    XCloseDisplay( dsp->display_id );XInit.c:    XSelectInput( dsp->display_id, dsp->LispWindow,    NoEventMask );XInit.c:    XSelectInput( dsp->display_id, dsp->DisplayWindow, NoEventMask );XInit.c:    XSelectInput( dsp->display_id, dsp->VerScrollBar,    NoEventMask );XInit.c:    XSelectInput( dsp->display_id, dsp->HorScrollBar,    NoEventMask );XInit.c:    XSelectInput( dsp->display_id, dsp->NEGrav, NoEventMask);XInit.c:    XSelectInput( dsp->display_id, dsp->SEGrav, NoEventMask);XInit.c:    XSelectInput( dsp->display_id, dsp->SWGrav, NoEventMask);XInit.c:    XSelectInput (dsp->display_id, dsp->NWGrav, NoEventMask);XInit.c:    XFlush( dsp->display_id );XInit.c:    (dsp->bitblt_to_screen)( dsp, 0,XInit.c:			    dsp->UpperLeftX,XInit.c:			    dsp->UpperLeftY,XInit.c:			    dsp->VissibleWidth,XInit.c:			    dsp->VissibleHeight );XInit.c:    XFlush( dsp->display_id );XInit.c:  LispReadFds |= (1 << ConnectionNumber(dsp->display_id));XInit.c:  fcntl(ConnectionNumber(dsp->display_id), F_SETOWN, getpid());XInit.c:  XSynchronize(dsp->display_id, 1);XInit.c:  XSynchronize(dsp->display_id, 1);XInit.c:  Xscreen          = ScreenOfDisplay( dsp->display_id, DefaultScreen( dsp->display_id ) );XInit.c:  if (dsp->ScreenBitmap.data == NULL)XInit.c:    dsp->ScreenBitmap.data = (char *)DisplayRegion68k;XInit.c:  dsp->identifier = &Display_Name; /* This is a hack. The display name */XInit.c:  if( (dsp->display_id = XOpenDisplay( dsp->identifier )) == NULL )XInit.c:  Xscreen = ScreenOfDisplay( dsp->display_id, DefaultScreen( dsp->display_id ) ); XInit.c:    dsp->displayheight = HeightOfScreen( Xscreen ); /* Default */XInit.c:  else dsp->displayheight = bound(WIN_MIN_HEIGHT,XInit.c:    dsp->displaywidth = WidthOfScreen( Xscreen ); /* Default */XInit.c:  else dsp->displaywidth = bound(WIN_MIN_WIDTH,XInit.c:  dsp->displaywidth = ((dsp->displaywidth+31) >> 5) << 5;XInit.c:  dsp->enter_display = (PFV)Open_Display;XInit.c:  dsp->exit_display = (PFV)lisp_Xexit;XInit.c:  dsp->bitblt_to_screen = (PFUL)clipping_Xbitblt;XInit.c:  dsp->before_raid = (PFV)Xevent_before_raid;XInit.c:  dsp->after_raid = (PFV)Xevent_after_raid;XInit.c:  dsp->BitGravity = NorthWestGravity;XInit.c:  dsp->ScrollBarWidth = SCROLL_WIDTH;XInit.c:  dsp->InternalBorderWidth = DEF_BDRWIDE;XInit.c:  dsp->set_color_map_entry = (PFUL)GenericReturnT;XInit.c:  LispWindowRequestedWidth =- dsp->ScrollBarWidth;XInit.c:  LispWindowRequestedHeight =- dsp->ScrollBarWidth;XInit.c:  dsp->VissibleWidth = (LispWindowRequestedWidth > 0)? LispWindowRequestedWidth: DEF_WIN_WIDTH;XInit.c:  dsp->VissibleHeight = (LispWindowRequestedHeight > 0)? LispWindowRequestedHeight: DEF_WIN_HEIGHT;XInit.c:  dsp->ScreenBitmap.width   = dsp->displaywidth;XInit.c:  dsp->ScreenBitmap.height  = dsp->displayheight; XInit.c:  dsp->ScreenBitmap.xoffset = 0;XInit.c:  dsp->bitsperpixel = DefaultDepthOfScreen( ScreenOfDisplay( dsp->display_id,XInit.c:							    DefaultScreen( dsp->display_id ) ) );XInit.c:    dsp->ScreenBitmap.byte_order = LSBFirst;XInit.c:    dsp->ScreenBitmap.byte_order = MSBFirst;XInit.c:  dsp->ScreenBitmap.data =XInit.c:    dsp->ScreenBitmap.format  = ZPixmap;XInit.c:    dsp->ScreenBitmap.bitmap_unit = BitmapUnit( dsp->display_id );XInit.c:    dsp->ScreenBitmap.bitmap_bit_order = MSBFirst;XInit.c:    dsp->ScreenBitmap.bitmap_pad = 32;XInit.c:    dsp->ScreenBitmap.depth = 8;XInit.c:    dsp->ScreenBitmap.bits_per_pixel = 8;XInit.c:    dsp->ScreenBitmap.bytes_per_line = (dsp->displaywidth);XInit.c:    dsp->ScreenBitmap.red_mask = 7;XInit.c:    dsp->ScreenBitmap.green_mask = 7;XInit.c:    dsp->ScreenBitmap.blue_mask = 3;XInit.c:    dsp->ScreenBitmap.format  = XYBitmap;XInit.c:    dsp->ScreenBitmap.bitmap_unit = BitmapUnit( dsp->display_id );XInit.c:    dsp->ScreenBitmap.bitmap_bit_order = MSBFirst;XInit.c:    dsp->ScreenBitmap.bitmap_pad = 32;XInit.c:    dsp->ScreenBitmap.depth = 1;XInit.c:    dsp->ScreenBitmap.bytes_per_line = ((dsp->displaywidth+(BITSPER_DLWORD-1))Xbbt.c:  LowerRightX = dsp->UpperLeftX + dsp->VissibleWidth;Xbbt.c:  LowerRightY = dsp->UpperLeftY + dsp->VissibleHeight;Xbbt.c:  if ( (temp_x < dsp->UpperLeftX)Xbbt.c:      || (temp_y < dsp->UpperLeftY) Xbbt.c:  if ( ( x >= dsp->UpperLeftX ) Xbbt.c:      && ( y >= dsp->UpperLeftY ) Xbbt.c:      XPutImage( dsp->display_id,Xbbt.c:		dsp->DisplayWindow,Xbbt.c:		dsp->Copy_GC,Xbbt.c:		dsp->ScreenBitmap,Xbbt.c:		x , y, x - dsp->UpperLeftX,Xbbt.c:		y - dsp->UpperLeftY, w, h );Xbbt.c:      XFlush(dsp->display_id);Xbbt.c:  if ( x < dsp->UpperLeftX )Xbbt.c:      w -= dsp->UpperLeftX - x; Xbbt.c:      x = dsp->UpperLeftX; Xbbt.c:  if ( y < dsp->UpperLeftY )Xbbt.c:      h -= dsp->UpperLeftY - y; Xbbt.c:      y = dsp->UpperLeftY; Xbbt.c:      XPutImage( dsp->display_id,Xbbt.c:		dsp->DisplayWindow,Xbbt.c:		dsp->Copy_GC,Xbbt.c:		dsp->ScreenBitmap,Xbbt.c:		x , y, x - dsp->UpperLeftX,Xbbt.c:		y - dsp->UpperLeftY, w, h );Xbbt.c:      XFlush(dsp->display_id);Xlspwin.c:#define OUTER_SB_WIDTH(dsp) (dsp->ScrollBarWidth + 2*(dsp->InternalBorderWidth))Xlspwin.c:  GravSize = (int)(dsp->ScrollBarWidth/2) - (dsp->InternalBorderWidth);Xlspwin.c:  Col2 = dsp->VissibleWidth;Xlspwin.c:  Row2 = dsp->VissibleHeight;Xlspwin.c:  Col3 = dsp->VissibleWidth + (int)(OUTER_SB_WIDTH(dsp)/2);Xlspwin.c:  Row3 = dsp->VissibleHeight + (int)(OUTER_SB_WIDTH(dsp)/2);Xlspwin.c:  screen = ScreenOfDisplay( dsp->display_id, DefaultScreen( dsp->display_id ));Xlspwin.c:  dsp->LispWindow = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					dsp->VissibleWidth + OUTER_SB_WIDTH( dsp ), /* Default width */Xlspwin.c:					dsp->VissibleHeight + OUTER_SB_WIDTH( dsp ), /* Default height */Xlspwin.c:  Lisp_SetWinAttributes.bit_gravity = dsp->BitGravity;Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->LispWindowXlspwin.c:  dsp->DisableEventMask = NoEventMask;Xlspwin.c:  dsp->EnableEventMask = ButtonPressMask |Xlspwin.c:  gcv.foreground = BlackPixelOfScreen( ScreenOfDisplay( dsp->display_id,Xlspwin.c:						       DefaultScreen( dsp->display_id )));Xlspwin.c:  gcv.background = WhitePixelOfScreen( ScreenOfDisplay( dsp->display_id,Xlspwin.c:						       DefaultScreen( dsp->display_id )));Xlspwin.c:  dsp->Copy_GC = XCreateGC( dsp->display_id, dsp->LispWindowXlspwin.c:  szhint.max_width = dsp->displaywidth + dsp->ScrollBarWidth;Xlspwin.c:  szhint.max_height = dsp->displayheight + dsp->ScrollBarWidth;Xlspwin.c:  szhint.min_width =(dsp->ScrollBarWidth + 2*(dsp->InternalBorderWidth));Xlspwin.c:  szhint.min_height =(dsp->ScrollBarWidth + 2*(dsp->InternalBorderWidth));Xlspwin.c:  szhint.win_gravity = dsp->BitGravity;Xlspwin.c:  XSetWMProperties( dsp->display_id,Xlspwin.c:		   dsp->LispWindow,Xlspwin.c:  dsp->UpperLeftX = 0;Xlspwin.c:  dsp->UpperLeftY = 0;Xlspwin.c:  XSelectInput( dsp->display_id,  dsp->LispWindow, dsp->EnableEventMask );Xlspwin.c:  init_Xcursor(dsp->display_id, dsp->LispWindow);Xlspwin.c:  dsp->DisplayWindow = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					   dsp->LispWindow,Xlspwin.c:					   0, 0, dsp->VissibleWidth, dsp->VissibleHeight, 0,Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->LispWindowXlspwin.c:  XSelectInput( dsp->display_id,  dsp->DisplayWindow, dsp->EnableEventMask );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->DisplayWindow );Xlspwin.c:  dsp->ScrollBarPixmap =Xlspwin.c:    XCreatePixmapFromBitmapData( dsp->display_id,Xlspwin.c:				dsp->LispWindow,Xlspwin.c:  dsp->GravityOnPixmap =Xlspwin.c:    XCreatePixmapFromBitmapData(dsp->display_id,Xlspwin.c:				dsp->LispWindow,Xlspwin.c:  dsp->GravityOffPixmap =Xlspwin.c:    XCreatePixmapFromBitmapData(dsp->display_id,Xlspwin.c:				dsp->LispWindow,Xlspwin.c:  dsp->VerScrollBar = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					  dsp->LispWindow,Xlspwin.c:					  0-dsp->InternalBorderWidth, /* y */Xlspwin.c:					  dsp->ScrollBarWidth, /* width */Xlspwin.c:					  dsp->VissibleHeight,Xlspwin.c:					  dsp->InternalBorderWidth,Xlspwin.c:  DefineCursor( dsp->display_id, dsp->VerScrollBar, &VertScrollCursor );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->VerScrollBar );Xlspwin.c:  dsp->HorScrollBar = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					  dsp->LispWindow,Xlspwin.c:					  0-dsp->InternalBorderWidth,Xlspwin.c:					  dsp->VissibleWidth, /* width */Xlspwin.c:					  dsp->ScrollBarWidth,Xlspwin.c:					  dsp->InternalBorderWidth,Xlspwin.c:  DefineCursor( dsp->display_id, dsp->HorScrollBar, &HorizScrollCursor );Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->HorScrollBarXlspwin.c:  XMapWindow( dsp->display_id, dsp->HorScrollBar );Xlspwin.c:  dsp->VerScrollButton = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					     dsp->VerScrollBar,Xlspwin.c:					     0-dsp->InternalBorderWidth, /* x */Xlspwin.c:					     (int)((dsp->UpperLeftY * dsp->VissibleHeight) / dsp->displayheight), /* y */Xlspwin.c:					     dsp->ScrollBarWidth, /* width */Xlspwin.c:					     (int)((dsp->VissibleHeight*dsp->VissibleHeight) / dsp->displayheight) + 1,Xlspwin.c:					     dsp->InternalBorderWidth,Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->VerScrollButtonXlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_id,Xlspwin.c:			     dsp->VerScrollButton,Xlspwin.c:			     dsp->ScrollBarPixmap );Xlspwin.c:  XClearWindow( dsp->display_id, dsp->VerScrollButton );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->VerScrollButton );Xlspwin.c:  dsp->HorScrollButton = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:					     dsp->HorScrollBar,Xlspwin.c:					     (int)((dsp->UpperLeftX * dsp->VissibleWidth) / dsp->displaywidth),Xlspwin.c:					     0-dsp->InternalBorderWidth, /* y */Xlspwin.c:					     (int)((dsp->VissibleWidth*dsp->VissibleWidth)/ dsp->displaywidth) + 1,Xlspwin.c:					     dsp->ScrollBarWidth,Xlspwin.c:					     dsp->InternalBorderWidth,Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->HorScrollButtonXlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_id,Xlspwin.c:			     dsp->HorScrollButton,Xlspwin.c:			     dsp->ScrollBarPixmap );Xlspwin.c:  XClearWindow( dsp->display_id, dsp->HorScrollButton );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->HorScrollButton );  Xlspwin.c:  dsp->NWGrav = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:				    dsp->LispWindow,Xlspwin.c:				    dsp->InternalBorderWidth,Xlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_idXlspwin.c:			     , dsp->NWGravXlspwin.c:			     , dsp->GravityOnPixmap );Xlspwin.c:  DefineCursor( dsp->display_id, dsp->NWGrav, &DefaultCursor );Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->NWGravXlspwin.c:  XClearWindow( dsp->display_id, dsp->NWGrav );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->NWGrav );Xlspwin.c:  dsp->SEGrav = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:				    dsp->LispWindow,Xlspwin.c:				    dsp->InternalBorderWidth,Xlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_idXlspwin.c:			     , dsp->SEGravXlspwin.c:			     , dsp->GravityOffPixmap );Xlspwin.c:  DefineCursor( dsp->display_id, dsp->SEGrav, &DefaultCursor );Xlspwin.c:  XChangeWindowAttributes( dsp->display_idXlspwin.c:			  , dsp->SEGravXlspwin.c:  XClearWindow( dsp->display_id, dsp->NWGrav );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->SEGrav );Xlspwin.c:  dsp->SWGrav = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:				    dsp->LispWindow,Xlspwin.c:				    dsp->InternalBorderWidth,Xlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_idXlspwin.c:			     , dsp->SWGravXlspwin.c:			     , dsp->GravityOffPixmap );Xlspwin.c:  DefineCursor( dsp->display_id, dsp->SWGrav, &DefaultCursor );Xlspwin.c:  XClearWindow( dsp->display_id, dsp->NWGrav );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->SWGrav );Xlspwin.c:  dsp->NEGrav = XCreateSimpleWindow( dsp->display_id,Xlspwin.c:				    dsp->LispWindow,Xlspwin.c:				    dsp->InternalBorderWidth,Xlspwin.c:  XSetWindowBackgroundPixmap( dsp->display_idXlspwin.c:			     , dsp->NEGravXlspwin.c:			     , dsp->GravityOffPixmap );Xlspwin.c:  DefineCursor( dsp->display_id, dsp->NEGrav, &DefaultCursor );Xlspwin.c:  XClearWindow( dsp->display_id, dsp->NWGrav );Xlspwin.c:  XMapWindow( dsp->display_id, dsp->NEGrav );Xlspwin.c:  /* DefineCursor( dsp->display_id, dsp->DisplayWindow, &WaitCursor ); */Xlspwin.c:  XMapWindow( dsp->display_id, dsp->LispWindow );Xlspwin.c:  XFlush(dsp->display_id);Xlspwin.c:  XCopyArea( currentdsp->display_id  Xlspwin.c:	    , currentdsp->DisplayWindowXlspwin.c:	    , currentdsp->DisplayWindowXlspwin.c:	    , currentdsp->Copy_GCXlspwin.c:	    , currentdsp->VissibleWidthXlspwin.c:	    , currentdsp->VissibleHeightXlspwin.c:  XChangeGC( currentdsp->display_id, cursor_source_gc , GCFunction , &gcv );Xlspwin.c:  XFlush(currentdsp->display_id);Xlspwin.c:  dest_x = (x&0xFFFF) - currentdsp->UpperLeftX;Xlspwin.c:  dest_y = (y&0xFFFF) - currentdsp->UpperLeftY;Xlspwin.c:  if( (dest_x>=0) && (dest_x<= currentdsp->VissibleWidth)Xlspwin.c:     && (dest_y>=0) && (dest_y<=currentdsp->VissibleHeight) ) {Xlspwin.c:    XWarpPointer( currentdsp->display_id, NULL, currentdsp->DisplayWindowXlspwin.c:    XFlush( currentdsp->display_id );Xmkicon.c:    value = XReadBitmapFile(dsp->display_id,Xmkicon.c:			    RootWindow(dsp->display_id, 0),Xmkicon.c:      IconPixmap = XCreatePixmap( dsp->display_id, dsp->LispWindowXmkicon.c:				 , DefaultDepthOfScreen( ScreenOfDisplay( dsp->display_id,Xmkicon.c:									 DefaultScreen( dsp->display_id ) ) ) );Xmkicon.c:      XPutImage( dsp->display_id, IconPixmap, dsp->Copy_GC, &IconImageXwinman.c:#define OUTER_SB_WIDTH(dsp) (dsp->ScrollBarWidth + 2*(dsp->InternalBorderWidth))Xwinman.c:  switch( dsp->BitGravity ) {Xwinman.c:  case NorthWestGravity: OldWindow = dsp->NWGrav;Xwinman.c:  case NorthEastGravity: OldWindow = dsp->NEGrav;Xwinman.c:  case SouthWestGravity: OldWindow = dsp->SWGrav;Xwinman.c:  case SouthEastGravity: OldWindow = dsp->SEGrav;Xwinman.c:  dsp->BitGravity = grav;Xwinman.c:			     , dsp->GravityOffPixmap );Xwinman.c:			     , dsp->GravityOnPixmap );Xwinman.c:  lspWinWidth = bound(OUTER_SB_WIDTH(dsp)+2, lspWinWidth, dsp->displaywidth);Xwinman.c:  lspWinHeight = bound(OUTER_SB_WIDTH(dsp)+2, lspWinHeight, dsp->displayheight);Xwinman.c:  GravSize = (int)(dsp->ScrollBarWidth/2) - (dsp->InternalBorderWidth);Xwinman.c:  Col2 = dsp->VissibleWidth = lspWinWidth - OUTER_SB_WIDTH(dsp);Xwinman.c:  Row2 = dsp->VissibleHeight = lspWinHeight - OUTER_SB_WIDTH(dsp);Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->DisplayWindow, 0, 0, Col2, Row2);Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->VerScrollBar,Xwinman.c:		    Col2, 0-dsp->InternalBorderWidth,		/* y */Xwinman.c:		    dsp->ScrollBarWidth, /* width */Xwinman.c:		    dsp->VissibleHeight); /* height */Xwinman.c:  XMoveResizeWindow( dsp->display_id,Xwinman.c:		    dsp->HorScrollBar,Xwinman.c:		    0-dsp->InternalBorderWidth, Row2, /* y */Xwinman.c:		    dsp->VissibleWidth,	/* width */Xwinman.c:		    dsp->ScrollBarWidth); /* height */Xwinman.c:  XMoveResizeWindow( dsp->display_id,Xwinman.c:		    dsp->HorScrollButton,Xwinman.c:		    (int)((dsp->UpperLeftX * dsp->VissibleWidth) / dsp->displaywidth), /* x */Xwinman.c:		    0-dsp->InternalBorderWidth,		/* y */Xwinman.c:		    (int)((dsp->VissibleWidth*dsp->VissibleWidth)/ dsp->displaywidth) + 1, /* width */Xwinman.c:		     dsp->ScrollBarWidth); /* height */Xwinman.c:  XMoveResizeWindow( dsp->display_id,Xwinman.c:		    dsp->VerScrollButton,Xwinman.c:		    0-dsp->InternalBorderWidth, /* x */Xwinman.c:		    (int)((dsp->UpperLeftY * dsp->VissibleHeight) / dsp->displayheight), /* y */Xwinman.c:		    dsp->ScrollBarWidth,	/* width */Xwinman.c:		    (int)((dsp->VissibleHeight*dsp->VissibleHeight) / dsp->displayheight) + 1);	/* height */Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->NWGrav, Col2, Row2, GravSize, GravSize);Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->NEGrav, Col3, Row2, GravSize, GravSize);Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->SEGrav, Col3, Row3, GravSize, GravSize);Xwinman.c:  XMoveResizeWindow( dsp->display_id, dsp->SWGrav, Col2, Row3, GravSize, GravSize);Xwinman.c:  (dsp->bitblt_to_screen)( dsp, 0, x, y, dsp->VissibleWidth, dsp->VissibleHeight );Xwinman.c:  XFlush(dsp->display_id);Xwinman.c:    while( XPending( dsp->display_id ) )Xwinman.c:	XNextEvent( dsp->display_id, &report );Xwinman.c:	if( report.xany.window == dsp->DisplayWindow ) /* Try the most important window first. */Xwinman.c:	    *EmCursorX68K = (*((DLword *)EmMouseX68K)) = (short) ((report.xmotion.x + dsp->UpperLeftX)&0xFFFF);Xwinman.c:	    *EmCursorY68K = (*((DLword *)EmMouseY68K)) = (short) ((report.xmotion.y + dsp->UpperLeftY)&0xFFFF);Xwinman.c:	    (dsp->bitblt_to_screen)( dsp, 0,Xwinman.c:				    report.xexpose.x+dsp->UpperLeftX,Xwinman.c:				    report.xexpose.y+dsp->UpperLeftY,Xwinman.c:	else if( report.xany.window == dsp->LispWindow )Xwinman.c:	else if ( report.xany.window == dsp->HorScrollBar )Xwinman.c:	      DefineCursor( dsp->display_id, dsp->HorScrollBar, &ScrollLeftCursor );Xwinman.c:	      DefineCursor( dsp->display_id, dsp->HorScrollBar, &HorizThumbCursor );Xwinman.c:	      DefineCursor( dsp->display_id, dsp->HorScrollBar, &ScrollRightCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &HorizScrollCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &HorizScrollCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &HorizScrollCursor );Xwinman.c:	else if ( report.xany.window == dsp->VerScrollBar )Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &ScrollUpCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &VertThumbCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &ScrollDownCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &VertScrollCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &VertScrollCursor );Xwinman.c:	      DefineCursor( dsp->display_id, report.xany.window, &VertScrollCursor );Xwinman.c:	else if (( report.xany.window == dsp->NEGrav ) &&Xwinman.c:	  Set_BitGravity(report, dsp, dsp->NEGrav, NorthEastGravity);Xwinman.c:	else if (( report.xany.window == dsp->SEGrav ) &&Xwinman.c:	  Set_BitGravity(report, dsp, dsp->SEGrav, SouthEastGravity);Xwinman.c:	else if (( report.xany.window == dsp->SWGrav ) &&Xwinman.c:	  Set_BitGravity(report, dsp, dsp->SWGrav, SouthWestGravity);Xwinman.c:	else if (( report.xany.window == dsp->NWGrav ) &&Xwinman.c:	  Set_BitGravity(report, dsp, dsp->NWGrav, NorthWestGravity);Xwinman.c:	XFlush(dsp->display_id);Xwinman.c:	XSelectInput( dsp->display_id,Xwinman.c:		     dsp->DisplayWindow,Xwinman.c:		     dsp->EnableEventMask );Xwinman.c:	XFlush( dsp->display_id );Xwinman.c:	XSelectInput( dsp->display_id,Xwinman.c:		     dsp->DisplayWindow,Xwinman.c:		     dsp->DisableEventMask );Xwinman.c:	XFlush( dsp->display_id );Xwinman.c:		XBell( dsp->display_id, (int) 50 );Xwinman.c:		XFlush( dsp->display_id );bbtsub.c:        XFlush(currentdsp->display_id);bbtsub.c:    XFlush(currentdsp->display_id);bbtsub.c:    XFlush(currentdsp->display_id);cgfourinit.c:  dsp->enter_display = &cgfour_enter_color;cgfourinit.c:  dsp->exit_display = &cgfour_exit_color;cgfourinit.c:  dsp->before_raid = &VGA_exit;cgfourinit.c:  dsp->after_raid = &VGA_setmax;cgfourinit.c:  dsp->drawline = &VGA_panic;cgfourinit.c:  dsp->cleardisplay = &VGA_cleardisplay;cgfourinit.c:  dsp->get_color_map_entry = &VGA_not_color;cgfourinit.c:  dsp->set_color_map_entry = &VGA_not_color;cgfourinit.c:  dsp->available_colors = &VGA_not_color;cgfourinit.c:  dsp->possible_colors = &VGA_not_color;cgfourinit.c:  dsp->medley_to_native_bm = &VGA_panic;cgfourinit.c:  dsp->native_to_medley_bm = &VGA_panic;cgfourinit.c:  dsp->bitblt_to_screen = &DosbbtC1;cgfourinit.c:  dsp->bitblt_from_screen = &VGA_panic;cgfourinit.c:  dsp->scroll_region = &VGA_panic;cgfourinit.c:  dsp->enter_display = &cgfour_enter_color;cgfourinit.c:  dsp->exit_display = &cgfour_exit_color;cgfourinit.c:  dsp->before_raid = &VGA_exit;cgfourinit.c:  dsp->after_raid = &VGA_setmax;cgfourinit.c:  dsp->drawline = &VGA_panic;cgfourinit.c:  dsp->cleardisplay = &VGA_cleardisplay;cgfourinit.c:  dsp->get_color_map_entry = &VGA_not_color;cgfourinit.c:  dsp->set_color_map_entry = &VGA_not_color;cgfourinit.c:  dsp->available_colors = &VGA_not_color;cgfourinit.c:  dsp->possible_colors = &VGA_not_color;cgfourinit.c:  dsp->medley_to_native_bm = &VGA_panic;cgfourinit.c:  dsp->native_to_medley_bm = &VGA_panic;cgfourinit.c:  dsp->bitblt_to_screen = &DosbbtC1;cgfourinit.c:  dsp->bitblt_from_screen = &VGA_panic;cgfourinit.c:  dsp->scroll_region = &VGA_panic;initdsp.c:    (currentdsp->enter_display)(currentdsp);initdsp.c:    displaywidth  = currentdsp->displaywidth;initdsp.c:    displayheight = currentdsp->displayheight;initdsp.c:    (currentdsp->cleardisplay)(currentdsp);initdsp.c:    (currentdsp->exit_display)(currentdsp);initdsp.c:    (currentdsp->cleardisplay)(currentdsp);initdsp.c:    (currentdsp->bitblt_to_screen)(currentdsp, DisplayRegion68k, 0, 0, displaywidth, displayheight );initdsp.c:    (currentdsp->bitblt_to_screen)(currentdsp, DisplayRegion68k, x, y, w, h);initdsp.c:    (currentdsp->bitblt_to_screen)(currentdsp, DisplayRegion68k, x, y, w, h);initdsp.c:  (currentdsp->bitblt_to_screen)(currentdsp, DisplayRegion68k, x, y, w, h);initkbd.c:	xcode = XKeysymToKeycode(currentdsp->display_id, sym);keyevent.c:    if (rfds & (1 << ConnectionNumber(currentdsp->display_id)))keyevent.c:    else if (colordsp->display_id)keyevent.c:      if (rfds & (1 << ConnectionNumber(colordsp->display_id)))rawcolor.c:    (colordsp->bitblt_to_screen)(colordsp, 0,rawcolor.c:				   colordsp->UpperLeftX,rawcolor.c:				   colordsp->UpperLeftY,rawcolor.c:				   colordsp->VissibleHeight,rawcolor.c:				   colordsp->VissibleWidth);subr.c:	                (colordsp->enter_display)(colordsp);subr.c:			TopOfStack=(currentdsp->set_color_map_entry)(args[0]);timer.c:	  if (ioctl(ConnectionNumber(currentdsp->display_id)uraid.c:	(currentdsp->before_raid)(currentdsp);uraid.c:	(currentdsp->cleardisplay)(currentdsp);uraid.c:	(currentdsp->before_raid)(currentdsp);uraid.c:    (currentdsp->after_raid)(currentdsp);vesainit.c:  dsp->displaywidth = VESA_DSP_WIDTH(VESAmodebytes);vesainit.c:  dsp->displayheight = VESA_DSP_HEIGHT(VESAmodebytes);vesainit.c:  dsp->colors = VESA_DSP_COLORS(VESAmodebytes);vesainit.c:  dsp->bitsperpixel = VESA_DSP_BPP(VESAmodebytes);vesainit.c:  dsp->numberofbanks = VESA_DSP_NUM_OF_BANKS(VESAmodebytes);vesainit.c:  /* dsp->graphicsstate = (unsigned long *)mode; */vesainit.c:  /* VESA_setmode( dsp->graphicsstate , TRUE); */vesainit.c:  dsp->enter_display = &VESA_enter;vesainit.c:  dsp->exit_display = &VESA_exit;vesainit.c:  dsp->before_raid = &VESA_beforeraid;vesainit.c:  dsp->after_raid = &VESA_afterraid;vesainit.c:  dsp->drawline = &VGA_panic;vesainit.c:  dsp->cleardisplay = &Dosclearbanks;vesainit.c:  dsp->get_color_map_entry = &VGA_not_color;vesainit.c:  dsp->set_color_map_entry = &VGA_not_color;vesainit.c:  dsp->available_colors = &VGA_not_color;vesainit.c:  dsp->possible_colors = &VGA_not_color;vesainit.c:  dsp->medley_to_native_bm = &VGA_panic;vesainit.c:  dsp->native_to_medley_bm = &VGA_panic;vesainit.c:    dsp->bitblt_to_screen = &Dosbbt1;vesainit.c:    dsp->bitblt_to_screen = &Dosbbt2;vesainit.c:  dsp->bitblt_from_screen = &VGA_panic;vesainit.c:  dsp->scroll_region = &VGA_panic;vgainit.c:  dsp->displaywidth = vc.numxpixels;vgainit.c:  dsp->displayheight = vc.numypixels;vgainit.c:  dsp->bitsperpixel = vc.bitsperpixel;vgainit.c:  dsp->colors = vc.numcolors;vgainit.c:  return(1 << dsp->bitsperpixel);vgainit.c:  return(dsp->colors);vgainit.c:  dsp->enter_display = &VGA_setmax;vgainit.c:  dsp->exit_display = &VGA_exit;vgainit.c:  dsp->before_raid = &VGA_exit;vgainit.c:  dsp->after_raid = &VGA_setmax;vgainit.c:  dsp->drawline = &VGA_mono_drawline;vgainit.c:  dsp->cleardisplay = &VGA_cleardisplay;vgainit.c:  dsp->get_color_map_entry = &VGA_not_color;vgainit.c:  dsp->set_color_map_entry = &VGA_not_color;vgainit.c:  dsp->available_colors = &VGA_not_color;vgainit.c:  dsp->possible_colors = &VGA_not_color;vgainit.c:  dsp->medley_to_native_bm = &VGA_panic;vgainit.c:  dsp->native_to_medley_bm = &VGA_panic;vgainit.c:  dsp->bitblt_to_screen = &Dosbbt1;vgainit.c:  dsp->bitblt_from_screen = &VGA_panic;vgainit.c:  dsp->scroll_region = &VGA_panic;vgainit.c:  dsp->enter_display = &VGA_setmax;vgainit.c:  dsp->exit_display = &VGA_exit;vgainit.c:  dsp->before_raid = &VGA_exit;vgainit.c:  dsp->after_raid = &VGA_setmax;vgainit.c:  dsp->drawline = &VGA_panic;vgainit.c:  dsp->cleardisplay = &VGA_cleardisplay;vgainit.c:  dsp->get_color_map_entry = &VGA_not_color;vgainit.c:  dsp->set_color_map_entry = &VGA_not_color;vgainit.c:  dsp->available_colors = &VGA_not_color;vgainit.c:  dsp->possible_colors = &VGA_not_color;vgainit.c:  dsp->medley_to_native_bm = &VGA_panic;vgainit.c:  dsp->native_to_medley_bm = &VGA_panic;vgainit.c:/*   dsp->bitblt_to_screen = &DosbbtC1; */vgainit.c:  dsp->bitblt_from_screen = &VGA_panic;vgainit.c:  dsp->scroll_region = &VGA_panic;