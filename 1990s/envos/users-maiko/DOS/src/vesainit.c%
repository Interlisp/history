#include <i32.h>                       /* #pragma interrupt & _get_stk_frame */#include <errno.h>#include <stk.h>                       /* _XSTACK struct definition          */#include <dos.h>#include <stdio.h>#include <string.h>#include <graph.h>#include "lispemul.h"#include "dspif.h"typedef void (*PFV)();		/* Pointer to Function returning Void */#define VESA		0x4f#define SUCESS		0x00				/* VESA functions */#define _DESCRIBEMODE	0x1#define _SETMODE	0x2#define _GETCURRENTMODE	0x3				/* VESA modevector indexes */#define _DISPLAYWIDTH	0x12#define _DISPLAYHEIGHT	0x14#define _COLORPLANES	0x18#define _BITSPERPIXEL	0x19#define VESA_MODE_SUPPORTED_P(vector)	((((short *)vector)[0] & 1)? TRUE : FALSE)#define VESA_OPT_INFO_P(vector)		((((short *)vector)[0] & 2)? TRUE : FALSE)#define VESA_COLOR_MODE_P(vector)	((((short *)vector)[0] & 4)? TRUE : FALSE)#define VESA_GRAPHICS_MODE_P(vector)	((((short *)vector)[0] & 8)? TRUE : FALSE)#define VESA_DSP_WIDTH(vector)		((long)(((short *)vector)[9]))#define VESA_DSP_HEIGHT(vector)		((long)(((short *)vector)[10]))#define VESA_DSP_COLORS(vector)		((long)( 1 << (((char *)vector)[0x19])))#define VESA_DSP_BPP(vector)		((long)(((char *)vector)[0x19]))#define VESA_DSP_NUM_OF_BANKS(vector)	((long)(((char *)vector)[0x1a]))#define VESA_DSP_BANK_SIZE(vector)	((long)(((char *)vector)[0x1c]))#define MAKE_SEG(low_flat) ((FP_OFF(low_flat) & 0xfffffff0) >> 4)#define MAKE_OFF(low_flat) (FP_OFF(low_flat & 0x0000000f))#pragma interrupt(VESA_Intrpt_Hndlr) /* int 0x10 intercept                 *//* ############################### *//* Generallize these. */extern void      (*prev_int_09)(); /* keeps address of previous 09 handlr*/extern void  DOSkbd(void);	   /* the DOS-kbd handler INT 0x09   *//* ############################### */extern void VGA_panic();extern unsigned long VGA_not_color();extern void VGA_exit();extern void Dosbbt2();extern void Dosbbt1();extern void Dosclearbanks();void  VESA_Intrpt_Hndlr(void);void *VESA_prev_hndlr;			/* addr of previous 0x10 intercept      */extern int dosdisplaymode;/**************************************************************//*                      V E S A _ c a l l                     *//* General utility function for doing a BIOS call to the VESA *//* bios.                                                      */ /**************************************************************/VESA_call(class, subfunc)     int class, subfunc;{  union REGS inregs, outregs;  inregs.h.ah = VESA;  inregs.h.al = class;  inregs.x.bx = subfunc;  int86( 0x10, &inregs, &outregs );  return( (outregs.h.al == VESA) && (outregs.h.ah == SUCESS));}/**************************************************************//*		V E S A _ c u r r e n t m o d e               *//* Returns the current VESA mode for the display.             *//* Modes defined to date are:                                 *//* 0x100	640x400 & 256 colors  (Not tested yet)        *//* 0x101	640x480 & 256 colors                          *//* 0x102	800x600 & 16 colors                           *//* 0x103	800x600 & 256 colors  (Not tested yet)        *//* 0x104       1024x768 & 16 colors                           *//* 0x105       1024x768 & 256 colors  (Not tested yet)        *//* 0x106      1280x1024 & 16 colors   (Not tested yet)        *//* 0x107      1280x1024 & 256 colors  (Not tested yet)        *//*                                                            *//**************************************************************/int VESA_currentmode(){  union REGS inregs, outregs;  inregs.h.ah = VESA;  inregs.h.al = _GETCURRENTMODE;  inregs.x.bx = 0;  int86( 0x10, &inregs, &outregs );  if ( (outregs.h.al == VESA) && (outregs.h.ah == SUCESS)) {    return (outregs.x.bx);  } else {    return ( FALSE );  }}int VESA_setmode( mode, clearscreen)     int mode, clearscreen;{  union REGS inregs, outregs;  inregs.h.ah = VESA;  inregs.h.al = _SETMODE | ((clearscreen) ? 0x8000 : 0);  inregs.x.bx = mode;  int86( 0x10, &inregs, &outregs );  return ( (outregs.h.al == VESA) && (outregs.h.ah == SUCESS) );}#define VESABUFLEN 256char VESAmodevector[VESABUFLEN];char *VESAmodebytes = VESAmodevector;/* VESA_describemode */int VESA_describemode( mode )     int mode;{  union REGS inregs, outregs;  int i;  unsigned buf;  VESA_prev_hndlr = _dos_getvect(0x10);	/* get current 10 intercept, if any   */  _dos_setvect(0x10, VESA_Intrpt_Hndlr); /* install our int 10 intercept       */  if ( _dos_allocmem( VESABUFLEN, &buf ) != 0 ) return( -1 );  inregs.w.eax = 0x4f01;  inregs.w.ebx = buf;  inregs.w.ecx = mode;  int86( 0x10, &inregs, &outregs );  if (outregs.x.ax == VESA) {    for (i = 0; i < VESABUFLEN; i++) {      VESAmodebytes[i] = ((char *)buf)[i];    }  } else {    return ( -1 );  }  _dos_freemem( buf );		/* release the buffer */  _dos_setvect(0x10, VESA_prev_hndlr); /* re-install previous 10 intercept   */  return( 0 );}void  VESA_Intrpt_Hndlr(void){  int      inbuffer, func;  _XSTACK *stk_ptr;  /* get ptr to _XSTACK - regs, etc  */  stk_ptr = (_XSTACK *)_get_stk_frame();  func = (unsigned short)stk_ptr->eax; /* get function */  if (((stk_ptr->flg & _FLAG_VM) == 0) /* process only if NOT virtual mode*/      && (func == 0x4f01)) {	/* AND only if func 4f             */    inbuffer = stk_ptr->ebx;	/* get ebx as passed (flat addr)   */    stk_ptr->edi = MAKE_OFF(inbuffer); /* convert to seg:off form         */    stk_ptr->es = MAKE_SEG(inbuffer); /* service requires it in es:di    */    ((PFV)VESA_prev_hndlr)();		/* call VESA getmode */  } else {    _chain_intr(VESA_prev_hndlr);	/* always best to chain to prev int*/  }}void VESA_enter( dsp )     DspInterface dsp;{  union REGS regs;    VESA_setmode( dosdisplaymode , TRUE);    if (!((VESA_describemode( dosdisplaymode ) == 0))){      _setvideomode( _DEFAULTMODE );      _clearscreen( _GCLEARSCREEN );      fprintf( stderr, "Can't set VESA mode %o.\n", dosdisplaymode );      exit(0);    }  dsp->displaywidth = VESA_DSP_WIDTH(VESAmodebytes);  dsp->displayheight = VESA_DSP_HEIGHT(VESAmodebytes);  dsp->colors = VESA_DSP_COLORS(VESAmodebytes);  dsp->bitsperpixel = VESA_DSP_BPP(VESAmodebytes);  dsp->numberofbanks = VESA_DSP_NUM_OF_BANKS(VESAmodebytes);  /* dsp->graphicsstate = (unsigned long *)mode; */}void VESA_exit( dsp )     DspInterface dsp;{  union REGS regs;#ifdef NEVER  regs.h.ah = 0x0;		/* Interrupt 0x10, function 0 = change video mode */  regs.h.al = (int)dsp->oldstate; /* Restore original video mode */  int86(0x10, &regs, &regs);#endif /* NEVER */  _setvideomode( _DEFAULTMODE );  _clearscreen( _GCLEARSCREEN );}void VESA_beforeraid( dsp )     DspInterface dsp;{  _dos_setvect(0x09, prev_int_09); /* unhook our handlr, install previous */  _setvideomode( _DEFAULTMODE );  _clearscreen( _GCLEARSCREEN );}void VESA_afterraid( dsp )     DspInterface dsp;{  /* VESA_setmode( dsp->graphicsstate , TRUE); */  _dos_setvect(0x09, DOSkbd); /* hook our int handler to interrupt  */}VESA_errorexit( s )     char *s;{  _setvideomode( _DEFAULTMODE );  _clearscreen( _GCLEARSCREEN );  fprintf( stderr, s );  exit(0);}VESA_init( dsp )     DspInterface dsp;{  switch ( dosdisplaymode ) {  case 0:    if ((VESA_describemode( 0x104 ) == 0) &&	(VESA_MODE_SUPPORTED_P( VESAmodevector )))      dosdisplaymode = 0x104;    else if ((VESA_describemode( 0x102 ) == 0) &&	     (VESA_MODE_SUPPORTED_P( VESAmodevector )))      dosdisplaymode = 0x102;    else VESA_errorexit("Displaymode not supported");    break;  case 0x102:    if ((VESA_describemode( dosdisplaymode ) == 0) &&	(VESA_MODE_SUPPORTED_P( VESAmodevector )))      break;    VESA_errorexit("Displaymode not supported");  case 0x104:    if ((VESA_describemode( dosdisplaymode ) == 0) &&	(VESA_MODE_SUPPORTED_P( VESAmodevector )))      break;    VESA_errorexit("Displaymode not supported");  default:    VESA_errorexit("Displaymode not supported");  }    VESA_setmode( dosdisplaymode , TRUE);    dsp->enter_display = &VESA_enter;  dsp->exit_display = &VESA_exit;  dsp->before_raid = &VESA_beforeraid;  dsp->after_raid = &VESA_afterraid;      dsp->drawline = &VGA_panic;  dsp->cleardisplay = &Dosclearbanks;  dsp->get_color_map_entry = &VGA_not_color;  dsp->set_color_map_entry = &VGA_not_color;  dsp->available_colors = &VGA_not_color;  dsp->possible_colors = &VGA_not_color;  dsp->switch_colormode = &VGA_not_color;  dsp->medley_to_native_bm = &VGA_panic;  dsp->native_to_medley_bm = &VGA_panic;  switch ( dosdisplaymode ) {  case 0x102:    dsp->bitblt_to_screen = &Dosbbt1;    break;  case 0x104:    dsp->bitblt_to_screen = &Dosbbt2;    break;  }  dsp->bitblt_from_screen = &VGA_panic;  dsp->scroll_region = &VGA_panic;}