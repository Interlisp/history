.386PDATA SEGMENT USE32	EXTRN DisplayHeight: NEAR	EXTRN DisplayWidth8: NEAR  ;; DisplayWidth in bytes	EXTRN tmpbuffer: NEARDATA ENDSCODE SEGMENT USE32	PUBLIC dosputimASSUME DS:DATAASSUME CS:CODE;; **************************************************;;                  d o s p u t i m;; arg1: buffer (pointer to array of word);; arg2: srcwidth  (word) (in multiples of 32);; arg3: height (word) (in multiples of 32);; arg4: left   (word) (in multiples of 32);; arg5: top    (word) (in multiples of 32);;;; Puts the image stored in into the display memory;;;; C-CALL: void dosputim( ... );;; RETURN: 0 in eax. should be ignored...;; **************************************************buffer	EQU	8srcwidth	EQU	12height	EQU	16left	EQU	20top	EQU	24PUBLIC dosputimdosputim	PROC NEAR	;; *****************************	;; Save the volatile environment	;; *****************************	enter	0,0	;;; Preamble to outper loop	mov	esi,buffer[ebp]	; src into ESI	mov	edi,0a0000h	; dest into EDI	mov	ecx,height[ebp]	; line counter	;; push the results @foot:	push	ecx	; push the column counter	push	esi	push	edi	mov	ecx, srcwidth[ebp]	; srcwidth into ecx	and	ecx, 0ffffh	; adjust ecx to the bank width	;; write one line to the display bank	rep movsd	;; Get the src and dest for the start of the line.	pop	edi	pop	esi	;; calc vals for src and dest for the next line.	add	edi,DWORD PTR DisplayWidth8	; dest = edi + displaywidth	add	esi,srcwidth[ebp]		; src  = esi + srcwidth	pop	ecx	;; get the column counter	loop	@foot	;; *****************************	;; Provide return value	;; *****************************	mov	eax,0	;; *****************************	;; Restore the stack and return	;; *****************************	leave        retdosputim ENDPCODE ENDSEND