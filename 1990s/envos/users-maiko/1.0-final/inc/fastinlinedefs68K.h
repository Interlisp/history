/* This is G-file @(#) fastinlinedefs68K.h Version 1.10 (5/16/88). copyright Xerox & Fuji Xerox  *//* 	fastinlinedefs68K.h *//* 	Bob Krivacic 2/23/88 *//* 	These are the Macros Used to generate inline 68K assembly code.	The call inline code which really CHEATS!	BEWARE the inline code makes many register assumptions! 	Such as:		D7 = TOPOFSTACK		D5 = 15		A3 = CSTKPTR*/#undef DIFFERENCE#define DIFFERENCE {						\	fast_op_difference(POP_TOS_1);				\	nextop1;						\diff_err:							\	asm("diff_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_difference(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef IDIFFERENCE#define IDIFFERENCE {						\	fast_op_idifference(POP_TOS_1);				\	nextop1;						\idiff_err:							\	asm("idiff_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_idifference(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef IDIFFERENCE_N#define IDIFFERENCE_N(n) {					\	fast_op_idifferencen(n);					\	nextop2;						\idiffn_err:							\	asm("idiffn_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_idifferencen(TOPOFSTACK, n, ufn_1d);	\	nextop2;						\	}#undef PLUS2#define PLUS2 {							\	fast_op_plus(POP_TOS_1);				\	nextop1;						\plus_err:							\	asm("plus_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_plus2(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef IPLUS2#define IPLUS2 {							\	fast_op_iplus(POP_TOS_1);				\	nextop1;						\iplus_err:							\	asm("iplus_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_iplus2(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef IPLUS_N#define IPLUS_N(n) {						\	fast_op_iplusn(n);					\	nextop2;						\iplusn_err:							\	asm("iplusn_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_iplusn(TOPOFSTACK, n, ufn_1d);	\	nextop2;						\	}#undef GREATERP#define	GREATERP {						\	fast_op_greaterp(POP_TOS_1);				\	nextop1;						\greaterp_err:							\	asm("greaterp_err:");					\	TOPOFSTACK = N_OP_greaterp(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef IGREATERP#define	IGREATERP {						\	fast_op_igreaterp(POP_TOS_1);				\	nextop1;						\igreaterp_err:							\	asm("igreaterp_err:");					\	TOPOFSTACK = N_OP_igreaterp(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef LRSH8#define LRSH8 {							\	fast_op_lrsh8();					\	nextop1;						\lrsh8_err:							\	asm("lrsh8_err:");					\	TOPOFSTACK = N_OP_lrsh8(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#undef LRSH1#define LRSH1 {							\	fast_op_lrsh1();					\	nextop1;						\lrsh1_err:							\	asm("lrsh1_err:");					\	TOPOFSTACK = N_OP_lrsh1(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#undef LLSH8#define LLSH8 {							\	fast_op_llsh8();					\	nextop1;						\llsh8_err:							\	asm("llsh8_err:");					\	TOPOFSTACK = N_OP_llsh8(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#undef LLSH1#define LLSH1 {							\	fast_op_llsh1();					\	nextop1;						\llsh1_err:							\	asm("llsh1_err:");					\	TOPOFSTACK = N_OP_llsh1(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#undef LOGOR#define LOGOR { 						\	fast_op_logor(POP_TOS_1);				\	nextop1;						\logor_err:							\	asm("logor_err:");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_logor(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	} #undef LOGAND#define LOGAND {						\	fast_op_logand(POP_TOS_1);				\	nextop1;						\logand_err:							\	asm("logand_err:");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_logand(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef LOGXOR#define LOGXOR { 						\	fast_op_logxor(POP_TOS_1);				\	nextop1;						\logxor_err:							\	asm("logxor_err:");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_logxor(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	} #undef ADDBASE#define ADDBASE {						\	fast_op_addbase(POP_TOS_1);				\	nextop1;						\addbase_err:							\	asm("addbase_err:");					\	asm("addqb #7,d7");					\	asm("rorl d5,d7");					\	TOPOFSTACK = N_OP_addbase(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#undef LOLOC#define LOLOC	{ fast_op_loloc(); nextop1; }#undef HILOC#define HILOC	{ fast_op_hiloc(); nextop1; }#undef VAG2#define VAG2	{ fast_op_vag2(POP_TOS_1); nextop1; }/*#undef LISTP#define LISTP	{ fast_op_listp(); nextop1;}#undef NTYPEX#define NTYPEX	{ fast_op_ntypex(); nextop1; }#undef TYPEP#define TYPEP(x) { fast_op_typep(); nextop2; }*/