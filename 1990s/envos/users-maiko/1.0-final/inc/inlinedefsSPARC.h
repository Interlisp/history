/* This is G-file @(#) inlinedefsSPARC.h Version 1.1 (3/23/88). copyright Xerox & Fuji Xerox  *//* This is G-file @(#) inlinedefs68K.h Version 1.4 (3/13/88). copyright Xerox & Fuji Xerox  *//* 	inlinedefsSPARC.h *//* 	Bob Krivacic 2/23/88 *//* 	These are the Macros Used to generate inline 68K assembly code 	to implement the opcodes.  Used by both dispatch 	loop and native code.*//* ******** noop for now ********#undef DIFFERENCE#undef PLUS#undef GREATERP#undef LOGOR#undef LOGAND#undef LOGXOR#undef LRSH8#undef LRSH1#undef LLSH8#undef LLSH1#undef ADDBASE#undef LOLOC#undef HILOC#undef VAG2#undef LISTP#undef NTYPEX#undef TYPEP#undef SWAP_WORDS#define SWAP_WORDS(x) swapx(x) #define DIFFERENCE {						\	TOPOFSTACK = op_difference(POP_TOS_1, TOPOFSTACK);	\	nextop1;						\diff_err:							\	asm("diff_err:");					\	TOPOFSTACK = N_OP_difference(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#define PLUS {							\	TOPOFSTACK = op_plus(POP_TOS_1, TOPOFSTACK);		\	nextop1;						\plus_err:							\	asm("plus_err:");					\	TOPOFSTACK = N_OP_plus2(GET_POPPED, TOPOFSTACK, ufn_2);	\	nextop1;						\	}#define	GREATERP {						\	TOPOFSTACK = op_greaterp(POP_TOS_1, TOPOFSTACK);	\	nextop1;						\greaterp_err:							\	asm("greaterp_err:");					\	TOPOFSTACK = N_OP_greaterp(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#define LOGOR { 						\	TOPOFSTACK = op_logor(POP_TOS_1, TOPOFSTACK);		\	nextop1;						\logor_err:							\	asm("logor_err:");					\	TOPOFSTACK = N_OP_logor(GET_POPPED, TOPOFSTACK, ufn_2);	\	nextop1;						\	} #define LOGAND {						\	TOPOFSTACK = op_logand(POP_TOS_1, TOPOFSTACK);		\	nextop1;						\logand_err:							\	asm("logand_err:");					\	TOPOFSTACK = N_OP_logand(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#define LOGXOR {						\	TOPOFSTACK = op_logxor(POP_TOS_1, TOPOFSTACK);		\	nextop1;						\logxor_err:							\	asm("logxor_err:");					\	TOPOFSTACK = N_OP_logxor(GET_POPPED, TOPOFSTACK, ufn_2);\	nextop1;						\	}#define LRSH8 {							\	TOPOFSTACK = op_lrsh8(TOPOFSTACK);			\	nextop1;						\lrsh8_err:							\	asm("lrsh8_err:");					\	TOPOFSTACK = N_OP_lrsh8(TOPOFSTACK, ufn_1);		\	nextop1;						\	}	#define LRSH1 {							\	TOPOFSTACK = op_lrsh1(TOPOFSTACK);			\	nextop1;						\lrsh1_err:							\	asm("lrsh1_err:");					\	TOPOFSTACK = N_OP_lrsh1(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#define LLSH8 {							\	TOPOFSTACK = op_llsh8(TOPOFSTACK);			\	nextop1;						\llsh8_err:							\	asm("llsh8_err:");					\	TOPOFSTACK = N_OP_llsh8(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#define LLSH1 {							\	TOPOFSTACK = op_llsh1(TOPOFSTACK);			\	nextop1;						\llsh1_err:							\	asm("llsh1_err:");					\	TOPOFSTACK = N_OP_llsh1(TOPOFSTACK, ufn_1);		\	nextop1;						\	}#define ADDBASE {						\	TOPOFSTACK = addbase(POP_TOS_1, TOPOFSTACK);		\	nextop1;						\	}#define LOLOC	{ TOPOFSTACK = loloc(TOPOFSTACK); nextop1; }#define HILOC	{ TOPOFSTACK = hiloc(TOPOFSTACK); nextop1; }#define VAG2	{ TOPOFSTACK = vag2(POP_TOS_1, TOPOFSTACK); nextop1; }#define LISTP	{ TOPOFSTACK = listp(TOPOFSTACK); nextop1;}#define NTYPEX	{ TOPOFSTACK = ntypex(TOPOFSTACK); nextop1; }#define TYPEP	{ TOPOFSTACK = typep(TOPOFSTACK, Get_BYTE(PCMAC+1)); nextop2; }*/