h49201s 00000/00000/00062d D 1.5 88/11/02 13:48:22 krivacic 5 4c no-change, update from SCCS because python lost changeses 00000/00000/00062d D 1.4 88/11/02 13:44:55 krivacic 4 3c no-change, update from SCCS because python lost changeses 00013/00029/00049d D 1.3 88/10/19 19:05:57 krivacic 3 2c fix lex script for new PC stuffes 00019/00010/00059d D 1.2 88/10/19 17:16:11 shih 2 1c minor cleanup, should be no functional differencees 00069/00000/00000d D 1.1 88/10/12 17:13:38 krivacic 1 0c date and time created 88/10/12 17:13:38 by krivaciceuUtTI 1D 2/* This is G-file %Z% %M% Version %I% (%G%). copyright envos & Fuji Xerox  */E 2I 2/* %Z% %M% Version %I% (%G%). copyright envos & Fuji Xerox  */E 2REG	"%"[oilg][0-9]LABEL	L[0-9]+COMPUTE	"\tcall\t_compute_dispatch_table,0\n	nop\n\tmov\t%o0,"DISPATCH "\tmov\t"{REG}",%o0\n\tcall\t_fast_dispatcher,2\n\tnop\n"HEXD	0x[0-3]ADDX	"\tadd\t"{REG}","{HEXD}","{REG}LDUB	"\tldub\t["{REG}"],"{REG}I 3LDUBm1	"\tldub\t["{REG}"+-0x1],%o1"E 3MOV	"\tmov\t"{REG}",%o1"%%	extern char *dispatch_label;D 3{COMPUTE}	printf("\tset\t%s,", dispatch_label);E 3I 3{COMPUTE}	printf(" set %s,", dispatch_label);E 3D 3{ADDX}\n{LDUB}\n{DISPATCH} {E 3I 3{ADDX}\n{LDUBm1}\n{DISPATCH} {E 3D 2	if (memcmp(yytext + 5, yytext + 13, 3)	    || memcmp(yytext + 5, yytext + 24, 3)E 2I 2	if (    memcmp(yytext + 5, yytext + 13, 3)D 3	    ||  memcmp(yytext + 5, yytext + 24, 3)E 2	    || !memcmp(yytext + 5, yytext + 29, 3)) {REJECT};E 3I 3	    ||  memcmp(yytext + 5, yytext + 24, 3)) {REJECT};E 3D 3	printf("\tldub\t[%.3s+%.3s],%.3s\n",yytext+5,yytext+9,yytext+29);	printf("\tsll\t%%o1,2,%%o1\n\tld\t[%%o1+%%%.2s],%%o1\n\tjmp\t%%o1\n",		yytext+39);E 3I 3	printf(" ldub [%.3s+%.3s+-0x1],%%o1\n",yytext+5, yytext+9);	printf(" sll %%o1,2,%%o1\n");	printf(" ld [%%o1+%.3s],%%o1\n",yytext+43);	printf(" jmp %%o1\n");E 3	printf("%.16s\n", yytext);}D 3{ADDX}\n{MOV}\n{DISPATCH} {D 2	if (memcmp(yytext + 5, yytext + 13, 3)E 2I 2	if (    memcmp(yytext + 5, yytext + 13, 3)E 2	    || !memcmp(yytext + 5, yytext + 22, 3)	    || !memcmp(yytext + 5, yytext + 26, 3)	    || !memcmp(yytext + 5, yytext + 35, 3)) {REJECT};E 3D 3	printf("\tsll\t%.3s,2,%%o1\n\tld\t[%%o1+%.3s],%%o1\n\tjmp\t%%o1\n",		yytext+22, yytext+35);	printf("%.16s\n", yytext);}E 3D 3"\tmov\t"{REG}",%o0\n\tcall\t_fast_jump,2\n\tnop\n" {I 2	printf("\tsll\t%%o1,2,%%o1\n");	printf("\tld\t[%%o1+%%%.2s],%%o1\n", yytext + 6);	printf("\tjmp\t%%o1\n");	printf("\tnop\n");/*****E 2	printf("\tsll\t%%o1,2,%%o1\n\tld\t[%%o1+%%%.2s],%%o1\n\tjmp\t%%o1\n\tnop\n",D 2	       yytext + 6);E 2I 2	       yytext + 6);  ***/E 2}E 3{DISPATCH}	{D 3	printf("\tsll\t%%o1,2,%%o1\n\tld\t[%%o1+%%%.2s],%%o1\n\tjmp\t%%o1\n\tnop\n",	       yytext + 6);E 3I 3	printf(" sll %%o1,2,%%o1\n");	printf(" ld [%%o1+%%%.2s],%%o1\n",yytext + 6);	printf(" jmp %%o1\n");	printf(" nop\n");E 3}{ADDX}\n{LDUB}	{D 2	if (!memcmp(yytext + 5, yytext + 13, 3)E 2I 2	if (   !memcmp(yytext + 5, yytext + 13, 3)E 2	    && !memcmp(yytext + 5, yytext + 24, 3)D 2	    && memcmp(yytext + 5, yytext + 29, 3)) {E 2I 2	    &&  memcmp(yytext + 5, yytext + 29, 3)) {E 2D 3		printf("\tldub\t[%.3s+%.3s],%.3s\n%.16s\n",E 3I 3		printf(" ldub [%.3s+%.3s],%.3s\n%.16s\n",E 3			 yytext+5,yytext+9,yytext+29,yytext);	} else		printf("%s", yytext);}{LDUB}\n\tcmp\t{REG}",255\n\tbgu\t"{LABEL}\n\t\sll\t{REG}",2,"{REG}\n\tset\t{LABEL}","	{D 2	if (memcmp(yytext+yyleng-strlen(dispatch_label)-1,dispatch_label,strlen(dispatch_label))) {		fprintf(stderr, "Label in dispatch changed. Edit disphack.lex and change '%s' to label in  last line of \n\n%s\n\n and retry!\n", dispatch_label,			yytext);E 2I 2	if (memcmp(yytext+yyleng-strlen(dispatch_label)-1,			dispatch_label,			strlen(dispatch_label))) {		fprintf(stderr, "Label in dispatch changed. Edit disphack.lex");		fprintf(stderr, " and change '%s' to label", dispatch_label);		fprintf(stderr, " in last line of \n\n%s\n\n and retry!\n", yytext);E 2		exit(-1);	} else if (memcmp(yytext + 12, yytext + 21, 3)) {		fprintf(stderr, "Odd sequence %s\n", yytext);	};	REJECT;};E 1