h01324s 00018/00018/00095d D 1.8 92/05/27 19:14:05 sybalsky 8 7c retrofit of 386 unix changes \nes 00006/00001/00107d D 1.7 92/05/26 17:18:34 sybalsky 7 6c Retrofit 386-unix changeses 00009/00009/00099d D 1.6 92/04/28 15:01:51 nilsson 6 5c Fixes to Xdisplay.es 00010/00005/00098d D 1.5 92/04/21 16:15:33 sybalsky 5 4c shortening file names for DOSes 00034/00039/00069d D 1.4 91/04/16 17:49:30 sybalsky 4 3c Retrofit foreign-OS changes from Savoir.es 00001/00001/00107d D 1.3 91/02/04 12:58:30 sybalsky 3 2c Fix errors in teh Savoir retrofit (placement of ifdefs &c)es 00018/00000/00090d D 1.2 90/06/01 16:37:22 sybalsky 2 1c Comments addedes 00090/00000/00000d D 1.1 90/03/01 15:26:22 osamu 1 0c date and time created 90/03/01 15:26:22 by osamueuUf e 0tTI 1D 3/* %Z% %M% Version %I% (%G%). copyright Venue & Fuji Xerox  */E 3I 3D 5/* @(#) MyWindow.h Version 1.2 (6/1/90). copyright Venue & Fuji Xerox  */E 5I 5D 8/* @(#) MyWindow.h Version 1.2 (6/1/90). copyright Venue   */E 8I 8/* %Z% %M% Version %I% (%G%). copyright Venue & Fuji Xerox  */E 8E 5E 3D 4/**** Copyright (C) 1988 by Fuji Xerox co.,Ltd. All rights reserved.**		Author: Mitsunori Matsuda*		Date  : July 26,1988*/E 4I 2/************************************************************************//*									*/I 5/*			    M y W i n d o w . h				*/E 5/*									*//*									*//*									*/D 5/*									*/E 5/************************************************************************/I 5E 5/************************************************************************//*									*/D 4/*	Copyright 1989, 1990 Venue, Fuji Xerox Co., Ltd, Xerox Corp.	*/E 4I 4D 5/*	Copyright 1989, 1990, 1991 Venue.				*/E 5I 5/*	(C) Copyright 1989-92 Venue. All Rights Reserved.		*//*	Manufactured in the United States of America.			*/E 5E 4/*									*/D 4/*	This file is work-product resulting from the Xerox/Venue	*/E 4I 4D 5/*	This file was work-product resulting from the Xerox/Venue	*/E 4/*	Agreement dated 18-August-1989 for support of Medley.		*/E 5I 5/*	The contents of this file are proprietary information 		*//*	belonging to Venue, and are provided to you under license.	*//*	They may not be further distributed or disclosed to third	*//*	parties without the specific permission of Venue.		*/E 5/*									*//************************************************************************/I 7#include "ldeXdefs.h"E 7E 2#define VERTICAL   0#define HORIZONTAL 1#define PERCENT_OF_SCREEN 95#define SCROLL_PITCH      30D 4typedef struct _MyEvent{	int       type; 	/* Event type */	int     (*func)();      /* Pointer to Event Handler */	struct _MyEvent *next;	/* Pointer to next event */} MyEvent;E 4I 4typedef struct _MyEvent  {    int       type; 		/* Event type */    int     (*func)();     	/* Pointer to Event Handler */    struct _MyEvent *next;	/* Pointer to next event */  } MyEvent;E 4D 4typedef struct _MyWindow{	char      *name;	/* name of this window */	Window     win;         /* window id */	int        x,y;         /* x and y cordinates */	int        width,height;/* window size */	int        border;      /* border width */	GC        *gc; 		/* Current GC */	unsigned long event_mask;	Cursor    *cursor;      /* Current Cursor */	int      (*before_create)();        /* Pointer to Initializer */	int      (*after_create)();	int	 (*before_resize)();        /* Pointer to Configurator */	int	 (*after_resize)(); 	int      (*event_func)();           /* Pointer to Event Handler */	MyEvent   *event_head;	struct _MyWindow *parent;      /* pointer to parent window */	struct _MyWindow *next;	/* pointer of next window */} MyWindow;E 4I 4typedef struct _MyWindow  {    char      *name;	/* name of this window */    Window     win;         /* window id */    int        x,y;         /* x and y coordinates */    int        width,height;/* window size */    int        border;      /* border width */    GC        *gc; 		/* Current GC */    unsigned   long event_mask;    Cursor    *cursor;      /* Current Cursor */    int       (*before_create)();        /* Pointer to Initializer */    int       (*after_create)();    int	      (*before_resize)();        /* Pointer to Configurator */    int	      (*after_resize)();     int       (*event_func)();           /* Pointer to Event Handler */    MyEvent   *event_head;    struct _MyWindow *parent;      /* pointer to parent window */    struct _MyWindow *next;	/* pointer of next window */  } MyWindow;E 4D 4typedef struct {	int left_x;  /* x cordinate of upperleft corner */	int top_y;   /* y cordinate of upperlert corner */	int right_x; /* x cordinate of lowerright corner */	int bottom_y;/* y cordinate of lowerright corner */} DisplayArea;E 4I 4typedef struct  {    int left_x;  /* x cordinate of upperleft corner */    int top_y;   /* y cordinate of upperlert corner */    int right_x; /* x cordinate of lowerright corner */    int bottom_y;/* y cordinate of lowerright corner */  } DisplayArea;E 4D 6#define CreateWindow(parent_win,child_win) { \E 6I 6#define CreateWindow(display, parent_win,child_win) { \E 6		if( parent_win && child_win ) { \			if( (child_win)->before_create ) \			   ((child_win)->before_create)(parent_win,child_win); \D 6 			(child_win)->win = XCreateSimpleWindow( Xdisplay \E 6I 6 			(child_win)->win = XCreateSimpleWindow( display \E 6						, (parent_win)->win \						, (child_win)->x \						, (child_win)->y \						, (child_win)->width \						, (child_win)->height \						, (child_win)->border \						, Black_Pixel \						, White_Pixel ); \D 6			XFlush( Xdisplay ); 	\E 6I 6			XFlush( display ); 	\E 6			(child_win)->parent = parent_win; \			if( (child_win)->after_create ) \			    ((child_win)->after_create)(parent_win,child_win);\		} \}D 6#define ResizeWindow( window ) { \E 6I 6D 7#define ResizeWindow(display window ) { \E 7I 7D 8#define ResizeWindow(display, window ) { \E 7E 6		if( window ) { \			if( (window)->before_resize ) \				((window)->before_resize)( window ); \I 7			XLOCK; E 7D 6			XMoveResizeWindow( Xdisplay \E 6I 6			XMoveResizeWindow( display \E 6					, (window)->win \					, (window)->x \					, (window)->y \					, (window)->width \					, (window)->height ); \D 6			XFlush( Xdisplay ); 	\E 6I 6			XFlush( display ); 	\I 7			XUNLOCK;E 7E 6			if( (window)->after_resize ) \				((window)->after_resize)( window ); \E 8I 8#define ResizeWindow(display,window) { 				\		if( window ) {									\			if( (window)->before_resize ) 				\				((window)->before_resize)( window ); 	\			XLOCK;\			XMoveResizeWindow( (display) 					\					, (window)->win 					\					, (window)->x 						\					, (window)->y 						\					, (window)->width 					\					, (window)->height ); 				\			XFlush( display ); 							\			XUNLOCK;									\			if( (window)->after_resize ) 				\				((window)->after_resize)( window ); 	\E 8		} \}D 6#define DefineCursor(window,mycursor) { \		XDefineCursor( Xdisplay, (window)->win, *(mycursor) ); \		XFlush( Xdisplay ); 	 \E 6I 6#define DefineCursor(display, window,mycursor) { \I 7D 8		XLOCK;E 8I 8		XLOCK;													\E 8E 7		XDefineCursor( display, (window)->win, *(mycursor) ); \		XFlush( display ); 	 \I 7D 8		XUNLOCK;E 8I 8		XUNLOCK;										\E 8E 7E 6		(window)->cursor = mycursor; \}E 1