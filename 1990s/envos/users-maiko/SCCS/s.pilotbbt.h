h13707s 00010/00011/00135d D 2.6 92/11/25 20:21:02 sybalsky 8 7c Fixing extra text in endifs => comment.\nes 00000/00000/00146d D 2.5 92/04/21 16:33:00 sybalsky 7 6c shortening file names for DOSes 00014/00000/00132d D 2.4 90/06/04 14:45:53 sybalsky 6 5c reformat, copyrightes 00067/00000/00065d D 2.3 89/03/28 00:45:49 sybalsky 5 4c byte swapped the fieldses 00017/00017/00048d D 2.2 89/01/09 17:52:22 shih 4 3c spellinges 00000/00000/00065d D 2.1 88/05/17 09:19:03 hayata 3 2c Version up to 2.1es 00001/00001/00064d D 1.2 88/03/13 13:24:27 hayata 2 1c Add SCCS key id (%Z%)es 00065/00000/00000d D 1.1 88/02/23 18:37:05 hayata 1 0c date and time created 88/02/23 18:37:05 by hayataeuUtTI 1D 2/* This is G-file %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */E 2I 2D 4/* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */E 4I 4D 8/* %Z% %M% Version %I% (%G%). copyright envos & Fuji Xerox  */E 8I 8/* %Z% %M% Version %I% (%G%). copyright Venue  */E 8E 4E 2D 8/* *	Copyright (C) 1987 by Fuji Xerox Co., Ltd. All rights reserved. *D 4 *	Auther	:	Osamu NakamuraE 4I 4 *	Author	:	Osamu NakamuraE 4 */E 8I 6I 8E 8/************************************************************************//*									*/D 8/*	Copyright 1989, 1990 Venue, Fuji Xerox Co., Ltd, Xerox Corp.	*/E 8I 8/*	(C) Copyright 1989-92 Venue. All Rights Reserved.		*//*	Manufactured in the United States of America.			*/E 8/*									*/D 8/*	This file is work-product resulting from the Xerox/Venue	*//*	Agreement dated 18-August-1989 for support of Medley.		*/E 8I 8/*	The contents of this file are proprietary information 		*//*	belonging to Venue, and are provided to you under license.	*//*	They may not be further distributed or disclosed to third	*//*	parties without the specific permission of Venue.		*/E 8/*									*//************************************************************************/D 8E 8E 6/**************************************************************** *								* *	pilotbbt.h		July 6, 1987 by Osamu Nakamura	* *								* ****************************************************************/I 5#ifndef BYTESWAP	/**********************************/	/* Normal byte-order declarations */	/**********************************/E 5D 4typedef struct pilotbbt{ E 4I 4typedef struct pilotbbt{E 4	DLword	pbtdestlo;        DLword  pbtdesthi;        DLword  pbtdestbit;	/* destination bit address */D 4        short   pbtdestbpl;     /* destination bits per line         			 *  -- distance in bits to move between items */E 4I 4        short   pbtdestbpl;     /* destination bits per line				 *  -- distance in bits to move between items */E 4        DLword  pbtsourcelo;        DLword  pbtsourcehi;        DLword  pbtsourcebit;	/* source bit address */        short   pbtsourcebpl;	/* source bits per line */        DLword  pbtwidth;	/* width of an item in bits */        DLword  pbtheight;	/* number of items -- height in scanlines */D 4        unsigned 	pbtbackward : 1; E 4I 4        unsigned	pbtbackward : 1;E 4        unsigned        pbtdisjoint : 1;        unsigned        pbtdisjointitems : 1;        unsigned        pbtusegray  : 1;        unsigned        pbtsourcetype : 1;        unsigned        pbtoperation : 2;        unsigned        nil  : 9;        DLword  dummy[5];	/* unused, needed to make 16-alignment */} PILOTBBT;typedef struct texturebbt{	DLword	pbtdestlo;        DLword  pbtdesthi;D 4        DLword  pbtdestbit;     /* destination bit address */ E 4I 4        DLword  pbtdestbit;     /* destination bit address */E 4        short   pbtdestbpl;     /* destination bits per lineD 4        			 * -- distance in bits to move between items */E 4I 4				 * -- distance in bits to move between items */E 4        DLword  pbtsourcelo;        DLword  pbtsourcehi;        DLword  pbtsourcebit;	/* source bit address */D 4        unsigned 	dummy2 : 4;        			/* overlay on pbtsourcebpl when pbtusegray */        unsigned  	pbtgrayoffset : 4;        			/* offset in gray block where bitblt should start */        unsigned  	pbtgraywidthlessone : 4; E 4I 4        unsigned	dummy2 : 4;				/* overlay on pbtsourcebpl when pbtusegray */        unsigned	pbtgrayoffset : 4;				/* offset in gray block where bitblt should start */        unsigned	pbtgraywidthlessone : 4;E 4				/* width-1 of gray block in words */D 4        unsigned  	pbtgrayheightlessone : 4;                   				/* height-1 of gray block */E 4I 4        unsigned	pbtgrayheightlessone : 4;				/* height-1 of gray block */E 4        DLword  pbtwidth;	/* width of an item in bits */        DLword  pbtheight;	/* number of items -- height in scanlines */D 4        unsigned 	pbtbackward : 1; E 4I 4        unsigned	pbtbackward : 1;E 4        unsigned        pbtdisjoint : 1;        unsigned        pbtdisjointitems : 1;        unsigned        pbtusegray  : 1;        unsigned        pbtsourcetype : 1;        unsigned        pbtoperation : 2;        unsigned        nil  : 9;        DLword  dummy[5];	/* unused, needed to make 16-alignment */} TEXTUREBBT;D 4                                        E 4I 4I 5#else	/****************************/	/* Byte-swapped definitions */	/****************************/typedef struct pilotbbt  {        DLword  pbtdesthi;	DLword	pbtdestlo;        short   pbtdestbpl;     /* destination bits per line				 *  -- distance in bits to move between items */        DLword  pbtdestbit;	/* destination bit address */        DLword  pbtsourcehi;        DLword  pbtsourcelo;        short   pbtsourcebpl;	/* source bits per line */        DLword  pbtsourcebit;	/* source bit address */        DLword  pbtheight;	/* number of items -- height in scanlines */        DLword  pbtwidth;	/* width of an item in bits */	DLword	dummy1;        unsigned        nil  : 9;        unsigned        pbtoperation : 2;        unsigned        pbtsourcetype : 1;        unsigned        pbtusegray  : 1;        unsigned        pbtdisjointitems : 1;        unsigned        pbtdisjoint : 1;        unsigned	pbtbackward : 1;        DLword  dummy[4];	/* unused, needed to make 16-alignment */  } PILOTBBT;typedef struct texturebbt  {        DLword  pbtdesthi;	DLword	pbtdestlo;        short   pbtdestbpl;     /* destination bits per line				 * -- distance in bits to move between items */        DLword  pbtdestbit;     /* destination bit address */        DLword  pbtsourcehi;        DLword  pbtsourcelo;        unsigned	pbtgrayheightlessone : 4;				/* height-1 of gray block */        unsigned	pbtgraywidthlessone : 4;				/* width-1 of gray block in words */        unsigned	pbtgrayoffset : 4;				/* offset in gray block where bitblt should start */        unsigned	dummy2 : 4;				/* overlay on pbtsourcebpl when pbtusegray */        DLword  pbtsourcebit;	/* source bit address */        DLword  pbtheight;	/* number of items -- height in scanlines */        DLword  pbtwidth;	/* width of an item in bits */	DLword	dummy1;        unsigned        nil  : 9;        unsigned        pbtoperation : 2;        unsigned        pbtsourcetype : 1;        unsigned        pbtusegray  : 1;        unsigned        pbtdisjointitems : 1;        unsigned        pbtdisjoint : 1;        unsigned	pbtbackward : 1;        DLword  dummy[4];	/* unused, needed to make 16-alignment */} TEXTUREBBT;D 8#endif BYTESWAPE 8I 8#endif /* BYTESWAP */E 8E 5E 4E 1