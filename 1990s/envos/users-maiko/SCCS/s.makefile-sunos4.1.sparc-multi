h11534s 00002/00002/00077d D 1.11 93/03/25 12:15:20 sybalsky 11 10c es 00026/00025/00053d D 1.10 92/07/24 10:43:16 sybalsky 10 9c retrofit of SGI & DEC OSF1 changes \nes 00001/00001/00077d D 1.9 92/03/24 11:53:53 sybalsky 9 8c Add -DNOEUROKBD, so we make non-european-kbd version for now.es 00001/00001/00077d D 1.8 92/03/20 17:23:00 sybalsky 8 7c Add -ldld to LDFLAGS, to support foreign function call.es 00001/00001/00077d D 1.7 92/03/05 13:49:50 nilsson 7 6c support for foreign functions.es 00001/00001/00077d D 1.6 91/04/09 17:06:20 sybalsky 6 5c Fix default make targets to be in right directory.es 00001/00001/00077d D 1.5 91/03/07 19:54:00 sybalsky 5 4c Add -DBIGATOMS for 3 byte atom emulator.es 00000/00000/00078d D 1.4 90/11/19 16:51:02 sybalsky 4 3c es 00001/00001/00077d D 1.3 90/07/26 18:48:39 mitani 3 2c add -DNEW_STORAGE flages 00003/00001/00075d D 1.2 90/07/04 01:35:31 sybalsky 2 1c Bob Bane changes:  Consolidate nromal and -x tails, move forking earlier.es 00076/00000/00000d D 1.1 90/05/14 15:57:59 fuji 1 0c date and time created 90/05/14 15:57:59 by fujieuUf e 0tTI 1# makefile-sunos4.sparc-multi#  @(#) makefile-sunos4.sparc-multi Version 1.6 (5/9/90). ## Options for SunOS4 and SPARC for CG3 or CG6 # Add -DDISPLAYBUFFER in DFLAGS# ${RELEASENAME} is "sunos4.sparc-multi"# This is to make the %$#@! Apollo cc happyOEXT = .o# OPTFLAGS is normally -O2.D 11OPTFLAGS = -O2I 10DISPOPTFLAGS = -O2E 11I 11OPTFLAGS = -g -O2DISPOPTFLAGS = -g -O2E 11E 10FPFLAGS =# Now share the same ldemulti for Mono-Medley & Color-Medley# If you load MAIKOCOLOR.LCOM etc., you can use color functionsD 2DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DDISPLAYBUFFER -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFERE 2I 2D 3DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DDISPLAYBUFFER -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMME 3I 3D 5DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DDISPLAYBUFFER -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMME 5I 5D 9DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DDISPLAYBUFFER -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMM -DBIGATOMSE 9I 9DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DDISPLAYBUFFER -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DDISPLAYBUFFER -DFORKCOMM -DBIGATOMS -DNOEUROKBDE 9E 5E 3D 7LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lmE 7I 7D 8LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lm -dldE 8I 8LDFLAGS = -lsuntool -lsunwindow -lpixrect -ldld -lc -lmE 8E 7E 2# SPARC Assemble optimize checkDFLAGS:sh += optck.sh ; true#-Dsparc?D 10INLINE = $(SRCDIR)dispSPARC.ilBITBLTFILE = $(OBJECTDIR)bitbltSPARC.oE 10I 10INLINE = $(SRCDIR)dspSPARC.ilBITBLTFILE = $(OBJECTDIR)bbtSPARC.oE 10OBJECTDIR = ../$(RELEASENAME)/I 2D 10COLORFILES = $(OBJECTDIR)colorbltfns.oE 10I 10COLORFILES = $(OBJECTDIR)rawcolor.oE 10E 2D 6default	: $(OBJECTDIR)lde $(OBJECTDIR)ldeetherE 6I 6default	: ../$(OSARCHNAME)/lde ../$(OSARCHNAME)/ldeetherE 6# Special rules to create xc.c on Sun4#run cpp to expand macrosD 10$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \E 10I 10$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \E 10	 $(INCDIR)arith.h $(INCDIR)stream.h \D 10	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inline68K.hE 10I 10	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inln68k.hE 10	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i#run c compiler to produce first pass assembly$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i	rm -f $(OBJECTDIR)xc.s1	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1#generate C program to remove dispatch loop, optimizeD 10$(OBJECTDIR)disphack.c: $(SRCDIR)disphack.lex	rm -f $(OBJECTDIR)disphack.c	lex -t $(SRCDIR)disphack.lex > $(OBJECTDIR)disphack.cE 10I 10$(OBJECTDIR)dsphack.c: $(SRCDIR)dsphack.lex	rm -f $(OBJECTDIR)dsphack.c	lex -t $(SRCDIR)dsphack.lex > $(OBJECTDIR)dsphack.cE 10#uses this program to find dispatchD 10$(OBJECTDIR)find-disp.c: $(SRCDIR)find-disp.lex	rm -f $(OBJECTDIR)find-disp.c	lex -t $(SRCDIR)find-disp.lex > $(OBJECTDIR)find-disp.cE 10I 10$(OBJECTDIR)find-dsp.c: $(SRCDIR)find-dsp.lex	rm -f $(OBJECTDIR)find-dsp.c	lex -t $(SRCDIR)find-dsp.lex > $(OBJECTDIR)find-dsp.cE 10D 10$(OBJECTDIR)find-disp: $(OBJECTDIR)find-disp.c	cc -o $(OBJECTDIR)find-disp $(OBJECTDIR)find-disp.c -llE 10I 10$(OBJECTDIR)find-dsp: $(OBJECTDIR)find-dsp.c	cc -o $(OBJECTDIR)find-dsp $(OBJECTDIR)find-dsp.c -llE 10D 10$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-disp $(OBJECTDIR)xc.s1E 10I 10$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-dsp $(OBJECTDIR)xc.s1E 10	rm -f $(OBJECTDIR)dispatch-label.cD 10	$(OBJECTDIR)find-disp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 10I 10	$(OBJECTDIR)find-dsp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 10D 10$(OBJECTDIR)disphack: $(OBJECTDIR)disphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)disphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)disphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)disphack.oE 10I 10$(OBJECTDIR)dsphack: $(OBJECTDIR)dsphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)dsphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)dsphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)dsphack.oE 10D 10$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)disphackE 10I 10$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)dsphackE 10	rm -f $(OBJECTDIR)xc.s2D 10	$(OBJECTDIR)disphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 10I 10	$(OBJECTDIR)dsphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 10$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)	rm -f $(OBJECTDIR)xc.s3	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3E 1