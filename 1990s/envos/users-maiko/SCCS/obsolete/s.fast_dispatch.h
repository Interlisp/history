h18795s 00015/00001/00052d D 2.7 90/03/22 16:35:07 sybalsky 11 10c Add 386 fast-dispatch macroses 00008/00004/00045d D 2.6 88/10/19 19:06:46 krivacic 10 9c normalize the sparc nextops so lex can find themes 00001/00003/00048d D 2.5 88/10/13 19:28:44 krivacic 9 8c ifdef cleanuupes 00010/00003/00041d D 2.4 88/10/12 17:10:57 krivacic 8 7c fix sparc PC alignment es 00005/00013/00039d D 2.3 88/10/10 14:12:48 krivacic 7 6c sun3/4 mergees 00008/00007/00044d D 2.2 88/09/16 14:39:02 bane 6 5c Adjusted PC changeses 00000/00000/00051d D 2.1 88/05/17 09:17:37 hayata 5 4c Version up to 2.1es 00001/00001/00050d D 1.4 88/04/25 12:14:03 krivacic 4 3c change MC68K def to mc68020 defes 00001/00001/00050d D 1.3 88/03/28 11:10:24 krivacic 3 2c fix endif errores 00006/00002/00045d D 1.2 88/03/28 10:04:48 krivacic 2 1c sparc dispatches 00047/00000/00000d D 1.1 88/03/23 10:11:18 krivacic 1 0c date and time created 88/03/23 10:11:18 by krivaciceuUtTI 1D 6/* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  *//* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */E 6I 6D 8/* This is G-file @(#) fast_dispatch.h Version 1.4 (4/25/88). copyright Xerox & Fuji Xerox  *//* This is G-file @(#) fast_dispatch.h Version 1.4 (4/25/88). copyright Xerox & Fuji Xerox  */E 8I 8D 11/* This is G-file %Z% %M% Version %I% (%G%). copyright Xerox & Fuji Xerox  */E 11I 11/* This is G-file @(#) fast_dispatch.h Version 2.6 (10/19/88). copyright Xerox & Fuji Xerox  */E 11E 8E 6/* 	fast_dispatch.h *//* 	Bob Krivacic 3/2/88 *//* 	These are the Macros Used to generate fast dispatch inline code. */I 7D 9#ifndef NOASME 9#ifdef OPDISPE 7D 4#ifdef MC68KE 4I 4#ifdef mc68020E 4#undef nextop0#undef nextop1#undef nextop2#undef nextop3#undef nextop4D 6#define nextop0 { fast_dispatcher(); goto nextopcode; }#define nextop1 { PCMAC += 1; nextop0; }#define nextop2 { PCMAC += 2; nextop0; }#define nextop3 { PCMAC += 3; nextop0; }#define nextop4 { PCMAC += 4; nextop0; }E 6I 6/* JRB - fast case is now nextop1 */#define nextop0 { fast0_dispatcher(); goto nextopcode; }#define nextop1 { fast1_dispatcher(); goto nextopcode; }#define nextop2 { fast1_dispatcher2(); }I 11#define nextop3 { PCMACL += 2; nextop1; }#define nextop4 { PCMACL += 3; nextop1; }#endif#ifdef I386#undef nextop0#undef nextop1#undef nextop2#undef nextop3#undef nextop4/* JRB - fast case is now nextop1 */#define nextop0 { fast0_dispatcher(); goto nextopcode; }#define nextop1 { fast1_dispatcher(); goto nextopcode; }#define nextop2 { fast2_dispatcher(); }E 11#define nextop3 { PCMACL += 2; nextop1; }#define nextop4 { PCMACL += 3; nextop1; }E 6#endifI 7#endifD 9#endifE 9E 7D 2#ifdef SPARC#undef nextop0E 2I 2D 9#ifdef sparcE 9I 9#ifdef SPARCDISPE 9D 7#undef nextop/*E 2#undef nextop1#undef nextop2#undef nextop3#undef nextop4I 2*/E 7I 7D 8#undef nextopE 8I 8#undef nextop0#undef nextop1#undef nextop2#undef nextop3#undef nextop4E 8E 7#define nextop0 { fast_dispatcher(table, Get_BYTE(PCMAC)); goto nextopcode; }I 8D 10#define nextop1 { fast_dispatcher(table, Get_BYTE(PCMACL++)); goto nextopcode; }#define nextop2 { PCMACL += 1; nextop1; }#define nextop3 { PCMACL += 2; nextop1; }#define nextop4 { PCMACL += 3; nextop1; }E 10I 10#define nextop_n(n) {							\	PCMACL += n;							\	nextop0; 							\}#define nextop1 { nextop_n(1); }#define nextop2 { nextop_n(2); }#define nextop3 { nextop_n(3); }#define nextop4 { nextop_n(4); }E 10E 8D 7/*E 2#define nextop0 {qdisp0();}#define nextop1 {qdisp1();}#define nextop2 {qdisp2();}#define nextop3 {qdisp3();}#define nextop4 {qdisp4();}D 3#endifE 3I 2*/E 7I 3#endifE 3E 2E 1