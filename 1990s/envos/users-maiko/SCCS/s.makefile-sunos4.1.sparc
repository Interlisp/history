h34491s 00002/00001/00071d D 1.9 93/03/25 12:12:50 sybalsky 9 8c es 00025/00025/00047d D 1.8 92/07/24 10:43:03 sybalsky 8 7c retrofit of SGI & DEC OSF1 changes \nes 00001/00001/00071d D 1.7 92/03/24 11:51:18 sybalsky 7 6c Add -DNOEUROKBD, to let us make non-European-kbd versions of the system for now.es 00001/00001/00071d D 1.6 92/03/19 10:34:14 sybalsky 6 5c Add dld library to LDFLAGSes 00001/00001/00071d D 1.5 91/04/09 23:05:41 sybalsky 5 4c change default make targets to right directory.es 00001/00001/00071d D 1.4 91/03/07 19:55:50 sybalsky 4 3c Add -DBIGATOMS for 3 byte atom emulator.es 00001/00001/00071d D 1.3 90/07/26 18:48:12 mitani 3 2c add -DNEW_STORAGE flages 00003/00001/00069d D 1.2 90/07/04 01:35:14 sybalsky 2 1c Bob Bane changes:  Consolidate nromal and -x tails, move forking earlier.es 00070/00000/00000d D 1.1 90/05/14 15:57:49 fuji 1 0c date and time created 90/05/14 15:57:49 by fujieuUf e 0tTI 1# Options for SunOS4 and SPARC#  @(#) makefile-sunos4.sparc Version 1.19 (5/9/90). ## This is to make the %$#@! Apollo cc happyOEXT = .o# OPTFLAGS is normally -O2.D 9OPTFLAGS = -O2E 9I 9OPTFLAGS = -g -O2DISPOPTFLAGS = -gE 9FPFLAGS =# Now share the same ldesingle with COLOR(CG4)/MONO Suns# If you load MAIKOCOLOR.LCOM etc., you can use color functionsD 2DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAYE 2I 2D 3DFLAGS = -DKBINT -DFSERROR -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DFORKCOMME 3I 3D 4DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DFORKCOMME 4I 4D 7DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DFORKCOMM -DBIGATOMSE 7I 7DFLAGS = -DKBINT -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DCOLOR -DNEWBITBLT -DLOGINT -DSUNDISPLAY -DFORKCOMM -DBIGATOMS -DNOEUROKBDE 7E 4E 3D 6LDFLAGS = -lsuntool -lsunwindow -lpixrect -lc -lmE 6I 6LDFLAGS = -lsuntool -lsunwindow -lpixrect -ldld -lc -lmE 6E 2# SPARC Assemble optimize checkDFLAGS:sh += optck.sh ; true#-Dsparc?D 8INLINE = $(SRCDIR)dispSPARC.ilBITBLTFILE = $(OBJECTDIR)bitbltSPARC.oE 8I 8INLINE = $(SRCDIR)dspSPARC.ilBITBLTFILE = $(OBJECTDIR)bbtSPARC.oE 8OBJECTDIR = ../$(RELEASENAME)/I 2D 8COLORFILES = $(OBJECTDIR)colorbltfns.oE 8I 8COLORFILES = $(OBJECTDIR)rawcolor.oE 8E 2D 5default	: $(OBJECTDIR)lde $(OBJECTDIR)ldeetherE 5I 5default	: ../$(OSARCHNAME)/lde ../$(OSARCHNAME)/ldeetherE 5# Special rules to create xc.c on Sun4#run cpp to expand macrosD 8$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatoms.h  $(INCDIR)gc.h  \E 8I 8$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \E 8	 $(INCDIR)arith.h $(INCDIR)stream.h \D 8	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inline68K.hE 8I 8	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   \	 $(INCDIR)inln68k.hE 8	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i#run c compiler to produce first pass assembly$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i	rm -f $(OBJECTDIR)xc.s1	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1#generate C program to remove dispatch loop, optimizeD 8$(OBJECTDIR)disphack.c: $(SRCDIR)disphack.lex	rm -f $(OBJECTDIR)disphack.c	lex -t $(SRCDIR)disphack.lex > $(OBJECTDIR)disphack.cE 8I 8$(OBJECTDIR)dsphack.c: $(SRCDIR)dsphack.lex	rm -f $(OBJECTDIR)dsphack.c	lex -t $(SRCDIR)dsphack.lex > $(OBJECTDIR)dsphack.cE 8#uses this program to find dispatchD 8$(OBJECTDIR)find-disp.c: $(SRCDIR)find-disp.lex	rm -f $(OBJECTDIR)find-disp.c	lex -t $(SRCDIR)find-disp.lex > $(OBJECTDIR)find-disp.cE 8I 8$(OBJECTDIR)find-dsp.c: $(SRCDIR)find-dsp.lex	rm -f $(OBJECTDIR)find-dsp.c	lex -t $(SRCDIR)find-dsp.lex > $(OBJECTDIR)find-dsp.cE 8D 8$(OBJECTDIR)find-disp: $(OBJECTDIR)find-disp.c	cc -o $(OBJECTDIR)find-disp $(OBJECTDIR)find-disp.c -llE 8I 8$(OBJECTDIR)find-dsp: $(OBJECTDIR)find-dsp.c	cc -o $(OBJECTDIR)find-dsp $(OBJECTDIR)find-dsp.c -llE 8D 8$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-disp $(OBJECTDIR)xc.s1E 8I 8$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-dsp $(OBJECTDIR)xc.s1E 8	rm -f $(OBJECTDIR)dispatch-label.cD 8	$(OBJECTDIR)find-disp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 8I 8	$(OBJECTDIR)find-dsp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.cE 8D 8$(OBJECTDIR)disphack: $(OBJECTDIR)disphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)disphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)disphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)disphack.oE 8I 8$(OBJECTDIR)dsphack: $(OBJECTDIR)dsphack.c $(OBJECTDIR)dispatch-label.c	cc -o $(OBJECTDIR)dsphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)dsphack.c -ll	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)dsphack.oE 8D 8$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)disphackE 8I 8$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)dsphackE 8	rm -f $(OBJECTDIR)xc.s2D 8	$(OBJECTDIR)disphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 8I 8	$(OBJECTDIR)dsphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2E 8$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)	rm -f $(OBJECTDIR)xc.s3	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3E 1