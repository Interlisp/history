h43639s 00004/00002/00174d D 1.12 92/11/25 20:19:28 sybalsky 12 11c Fixing extra text in endifs => comment.\nes 00000/00000/00176d D 1.11 92/04/21 16:29:48 sybalsky 11 10c shortening file names for DOSes 00108/00093/00068d D 1.10 92/03/24 12:09:19 sybalsky 10 9c Cleanup and comment, change copyright.es 00022/00010/00139d D 1.9 92/03/20 17:18:27 sybalsky 9 8c Add European kbd support, NOEUROKBD flg to suppress it.es 00025/00008/00124d D 1.8 90/06/04 13:00:52 sybalsky 8 7c reformat, copyrightes 00001/00001/00131d D 1.7 90/03/19 14:19:33 takeshi 7 6c Fix the declaration for KBEVENT for i386es 00004/00001/00128d D 1.6 90/03/02 14:38:58 takeshi 6 5c Use same macro RCLK for MC/SPARC & i386es 00009/00005/00120d D 1.5 90/03/02 13:17:39 takeshi 5 4c Modify the declaration for KEYEVENT(for386)es 00033/00018/00092d D 1.4 89/03/30 20:29:28 sybalsky 4 3c Byteswapped KBEVENT ok; also byteswapped RCLK.es 00047/00001/00063d D 1.3 89/03/29 14:48:08 sybalsky 3 2c some byte swapping.  NEED TO CHECK KBEVENT defn -- odd-word alignment of an int.  Does it parallel a Lisp structure?es 00000/00000/00064d D 1.2 89/03/29 14:46:57 sybalsky 2 1c false alarmes 00064/00000/00000d D 1.1 88/10/10 19:47:26 shimizu 1 0c date and time created 88/10/10 19:47:26 by shimizueuUtTI 1D 3/* This is G-file %Z% %M% Version %I% (%G%). copyright envos & Fuji Xerox  */E 3I 3D 6/* This is G-file @(#) keyboard.h Version 1.1 (10/10/88). copyright envos & Fuji Xerox  */E 6I 6D 10/* %Z% %M% Version %I% (%G%). copyright venue & Fuji Xerox  */E 10I 10/* %Z% %M% Version %I% (%G%). copyright venue  */E 10I 8E 8E 6E 3D 10/** Header FIle for K/B MOUSE */E 10I 10/** Header File for K/B MOUSE */E 10I 8I 10E 10/************************************************************************//*									*/D 10/*	Copyright 1989, 1990 Venue, Fuji Xerox Co., Ltd, Xerox Corp.	*/E 10I 10/*	(C) Copyright 1989-92 Venue. All Rights Reserved.		*//*	Manufactured in the United States of America.			*/E 10/*									*/D 10/*	This file is work-product resulting from the Xerox/Venue	*//*	Agreement dated 18-August-1989 for support of Medley.		*/E 10I 10/*	The contents of this file are proprietary information 		*//*	belonging to Venue, and are provided to you under license.	*//*	They may not be further distributed or disclosed to third	*//*	parties without the specific permission of Venue.		*/E 10/*									*//************************************************************************/E 8D 10#define	MOUSE_LEFT		13#define	MOUSE_MIDDLE		15#define	MOUSE_RIGHT		14#define	CAPSKEY			16#define DLMOUSEUP 		0#define DLMOUSEWAITING 		1#define DLMOUSENORMAL 		2#define MOUSE_ALLBITS		7#define KB_ALLUP		0xffff#define HARDCURSORHEIGHT 	16E 10I 10#define	MOUSE_LEFT	13#define	MOUSE_MIDDLE	15#define	MOUSE_RIGHT	14#define	CAPSKEY		16#define DLMOUSEUP 	0#define DLMOUSEWAITING 	1#define DLMOUSENORMAL 	2#define MOUSE_ALLBITS	7#define KB_ALLUP	0xffff#define HARDCURSORHEIGHT 16E 10I 3#ifndef BYTESWAPE 3D 8typedef struct {		DLword read;		DLword write; } RING;E 8I 8typedef struct  {    DLword read;    DLword write;  } RING;E 8I 3#elseD 8typedef struct {		DLword write;		DLword read; } RING;E 8I 8typedef struct  {    DLword write;    DLword read;  } RING;E 8D 12#endif BYTESWAPE 12I 12#endif /* BYTESWAP */E 12I 8I 12E 12D 10E 10I 10	/* macros for getting to the next-read and next-write ring buf ptrs */E 10E 8E 3#define RING_READ(head68k)	(((RING*)(head68k))->read)#define RING_WRITE(head68k)	(((RING*)(head68k))->write)	D 9#define MAXKEYEVENT		4598E 9D 10#define MINKEYEVENT		2E 10I 10	/* Size of a KEYBOARDEVENT structure, and	*/	/* the size of the kbd-event ring buffer	*/#define MINKEYEVENT	2	/* leave 2 words for read,write offsets */E 10D 9#define KEYEVENTSIZE		12		E 9I 9#ifdef NOEUROKBD	/* set to disable new european kbd support */#define KEYEVENTSIZE 12#else#define KEYEVENTSIZE ((sizeof(KBEVENT)+1)>>1)#endifD 10E 10I 10	/* Offset of the end of the ring buffer */E 10#define MAXKEYEVENT	(MINKEYEVENT + (383*KEYEVENTSIZE))E 9/* for feature use */I 3#ifndef BYTESWAPE 3D 10typedef struct {	DLword 	mousex;	DLword	mousey;	DLword	utilin;	DLword	kbdad0;	DLword	kbdad1;	DLword	kbdad2;	DLword	kbdad3;	DLword	kbdad4;	DLword	kbdad5;I 3	DLword	nil;E 3} IOState;typedef struct {	DLword W0;	DLword W1;	DLword W2;	DLword W3;	DLword WU;	DLword W4;	DLword W5;E 10I 10typedef struct  {    DLword 	mousex;    DLword	mousey;    DLword	utilin;    DLword	kbdad0;    DLword	kbdad1;    DLword	kbdad2;    DLword	kbdad3;    DLword	kbdad4;    DLword	kbdad5;    DLword	nil;  } IOState;	/* Corresponds to the Lisp KEYBOARDEVENT structure */typedef struct  {    DLword W0;    DLword W1;    DLword W2;    DLword W3;    DLword WU;    DLword W4;    DLword W5;E 10D 9	int		time;E 9I 9	/* int		time; */D 10	short  timehi;	short	timelo;E 9	unsigned	mousestate	: 3;	unsigned	shift1		: 1;	unsigned	shift2		: 1;	unsigned	lock		: 1;	unsigned	ctrl		: 1;	unsigned	meta		: 1;	unsigned	font		: 1;	unsigned	usermode1	: 1;	unsigned	usermode2	: 1;	unsigned	usermode3	: 1;D 9	unsigned	nil		: 4;E 9I 9	unsigned	altgr :		  1;	unsigned	deadkey		: 1;	unsigned	nil		: 2;E 9	DLword	mousex;	DLword	mousey;E 10I 10    short  timehi;    short	timelo;    unsigned	mousestate	: 3;    unsigned	shift1		: 1;    unsigned	shift2		: 1;    unsigned	lock		: 1;    unsigned	ctrl		: 1;    unsigned	meta		: 1;    unsigned	font		: 1;    unsigned	usermode1	: 1;    unsigned	usermode2	: 1;    unsigned	usermode3	: 1;    unsigned	altgr :		  1;    unsigned	deadkey		: 1;    unsigned	nil		: 2;    DLword	mousex;    DLword	mousey;E 10I 4D 9	DLword  nil2;E 9I 9	/* DLword  nil2; */D 10	LispPTR deadkeyalist;E 9E 4} KBEVENT;E 10I 10    LispPTR deadkeyalist;  } KBEVENT;E 10I 4#define RCLK(place) {  struct timeval time;\					gettimeofday(&time,NULL);\					(place)=(time.tv_sec * 1000000)+time.tv_usec;}E 4I 3#elseD 10typedef struct {	DLword	mousey;	DLword 	mousex;	DLword	kbdad0;	DLword	utilin;	DLword	kbdad2;	DLword	kbdad1;	DLword	kbdad4;	DLword	kbdad3;	DLword	nil;	DLword	kbdad5;} IOState;typedef struct {D 4	DLword W0;E 4	DLword W1;D 4	DLword W2;E 4I 4	DLword W0;E 4	DLword W3;D 4	DLword WU;E 4I 4	DLword W2;E 4	DLword W4;I 4	DLword WU;D 5	short  time_hi;E 5E 4D 7	DLword W5;E 7I 5D 9	DLword nil0;E 9I 9	DLword timehi;E 9I 7	DLword W5;E 7D 9	int time;E 9I 9	short timelo;E 10I 10typedef struct  {    DLword	mousey;    DLword 	mousex;    DLword	kbdad0;    DLword	utilin;    DLword	kbdad2;    DLword	kbdad1;    DLword	kbdad4;    DLword	kbdad3;    DLword	nil;    DLword	kbdad5;  } IOState;E 10E 9D 10	DLword	mousex;E 5D 4	int		time;	unsigned	mousestate	: 3;	unsigned	shift1		: 1;	unsigned	shift2		: 1;	unsigned	lock		: 1;	unsigned	ctrl		: 1;	unsigned	meta		: 1;	unsigned	font		: 1;	unsigned	usermode1	: 1;	unsigned	usermode2	: 1;	unsigned	usermode3	: 1;E 4	unsigned	nil		: 4;D 4	DLword	mousex;E 4I 4	unsigned	usermode3	: 1;	unsigned	usermode2	: 1;	unsigned	usermode1	: 1;	unsigned	font		: 1;	unsigned	meta		: 1;	unsigned	ctrl		: 1;	unsigned	lock		: 1;	unsigned	shift2		: 1;	unsigned	shift1		: 1;	unsigned	mousestate	: 3;E 10I 10	/* Corresponds to the Lisp KEYBOARDEVENT structure */typedef struct   {    DLword W1;    DLword W0;    DLword W3;    DLword W2;    DLword W4;    DLword WU;    DLword timehi;    DLword W5;    short timelo;    DLword	mousex;    unsigned	nil		: 4;    unsigned	usermode3	: 1;    unsigned	usermode2	: 1;    unsigned	usermode1	: 1;    unsigned	font		: 1;    unsigned	meta		: 1;    unsigned	ctrl		: 1;    unsigned	lock		: 1;    unsigned	shift2		: 1;    unsigned	shift1		: 1;    unsigned	mousestate	: 3;E 10D 5	short  time_lo;E 5I 5D 9	DLword  nil2;E 9I 9/*		DLword  nil2; */E 9E 5E 4D 10	DLword	mousey;I 4D 5	DLword	mousex;E 4} KBEVENT;E 5I 5D 9} KBEVENT;  /* CHANGED-BY-TAKE ***/E 9I 9	LispPTR deadkeyalist;E 10I 10    DLword	mousey;    LispPTR deadkeyalist;E 10  } KBEVENT;  /* CHANGED-BY-TAKE ***/E 9E 5I 4D 5#define RCLK(hi,lo) \E 5I 5/*** OBSLOETE **#define RCLK(hi,lo) \E 5  { \    struct timeval time;\    int timetemp; \    gettimeofday(&time,NULL);\    timetemp = (time.tv_sec * 1000000)+time.tv_usec; \    (hi)=(DLword)(timetemp>>16); \    (lo) = (DLword)(timetemp & 0xFFFF); \}I 5******/I 6#define RCLK(place) {  struct timeval time;\					gettimeofday(&time,NULL);\					(place)=(time.tv_sec * 1000000)+time.tv_usec;}E 6E 5E 4D 12#endif BYTESWAPE 12I 12#endif /* BYTESWAP */E 12E 3D 4#define RCLK(place) {  struct timeval time;\					gettimeofday(&time,NULL);\					(place)=(time.tv_sec * 1000000)+time.tv_usec;}E 4E 1