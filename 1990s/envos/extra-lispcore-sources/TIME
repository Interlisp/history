(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "CL")(IL:FILECREATED "17-May-90 15:51:58" IL:|{DSK}<usr>local>lde>lispcore>sources>TIME.;2| 15558        IL:|changes| IL:|to:|  (IL:VARS IL:TIMECOMS)      IL:|previous| IL:|date:| " 2-May-88 19:54:15" IL:|{DSK}<usr>local>lde>lispcore>sources>TIME.;1|); Copyright (c) 1986, 1987, 1988, 1990 by Venue & Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:TIMECOMS)(IL:RPAQQ IL:TIMECOMS          ((IL:STRUCTURES STATS-OBJECT)           (IL:FUNCTIONS %COPY-TIME-STATS %STATS-OBJECT-DIFFERENCE)           (IL:FUNCTIONS %GET-TIMING-INFO TIME-CALL TIME)           (IL:FUNCTIONS %CAPTURE-COUNTERS-BEFORE %CAPTURE-COUNTERS-AFTER TIME-FORMAT                   %PRINT-TIMING-ITEM %PRINT-TIMING-INFO)           (IL:DECLARE\: IL:DONTCOPY IL:DOEVAL@COMPILE (IL:FUNCTIONS %CAPTURE-BEFORE-STATS                                                               %CAPTURE-AFTER-STATS %MOVE-FIXP-FIELD))           (IL:SPECIAL-FORMS TIME)           (IL:COMMANDS "TIME")                      (IL:* IL:|;;| "Interlisp Timeall function")           (IL:FNS IL:TIMEALL)                      (IL:* IL:|;;| "file package stuff")           (IL:PROP IL:FILETYPE TIME)           (IL:PROP IL:MAKEFILE-ENVIRONMENT TIME)           (IL:DECLARE\: IL:DONTEVAL@LOAD IL:DOEVAL@COMPILE IL:DONTCOPY (IL:LOCALVARS . T))           (IL:DECLARE\: IL:DONTEVAL@LOAD IL:DOEVAL@COMPILE IL:DONTCOPY IL:COMPILERVARS                  (IL:ADDVARS (IL:NLAMA)                         (IL:NLAML IL:TIMEALL)                         (IL:LAMA)))))(DEFSTRUCT (STATS-OBJECT (:TYPE LIST)                             (:COPIER NIL)                             (:PREDICATE NIL))   (ELAPSED-TIME (IL:CLOCK 0))   (TIME-BLOCK (IL:|create| IL:MISCSTATS))   (DATA-COUNTERS (MAKE-ARRAY (1+ IL:|\\MaxTypeNumber|)                         :ELEMENT-TYPE                         '(SIGNED-BYTE 32)                         :INITIAL-ELEMENT 0))   DATATYPES)(DEFUN %COPY-TIME-STATS (REFERENCE-BLOCK DESTINATION-BLOCK)   (IL:* IL:|;;| "Copies various fields from one miscstats block to another. Both reference-block and destination-block should be unboxed hunks (made by (IL:create IL:miscstats)), but IL:\\\\miscstats is also a valid value for reference-block")   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:SWAPWAITTIME)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:GCTIME)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:PAGEFAULTS)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:SWAPWRITES)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:TOTALTIME)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:DISKIOTIME)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:NETIOTIME)          DESTINATION-BLOCK REFERENCE-BLOCK)   (%MOVE-FIXP-FIELD (IL:MISCSTATS IL:DISKOPS)          DESTINATION-BLOCK REFERENCE-BLOCK)   DESTINATION-BLOCK)(DEFUN %STATS-OBJECT-DIFFERENCE (BEFORE AFTER)   (IL:* IL:|;;|  "puts the differences between the stat-object after and  stat-object before back into after.")   (LET ((BEFORE-DATA-COUNTERS (STATS-OBJECT-DATA-COUNTERS BEFORE))         (BEFORE-TIME-BLOCK (STATS-OBJECT-TIME-BLOCK BEFORE))         (AFTER-DATA-COUNTERS (STATS-OBJECT-DATA-COUNTERS AFTER))         (AFTER-TIME-BLOCK (STATS-OBJECT-TIME-BLOCK AFTER)))        (DOTIMES (I (LENGTH BEFORE-DATA-COUNTERS))            (DECF (AREF AFTER-DATA-COUNTERS I)                  (AREF BEFORE-DATA-COUNTERS I)))        (DECF (STATS-OBJECT-ELAPSED-TIME AFTER)              (STATS-OBJECT-ELAPSED-TIME BEFORE))        (DECF (IL:|fetch| (IL:MISCSTATS IL:SWAPWAITTIME) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:SWAPWAITTIME) IL:|of| BEFORE-TIME-BLOCK))        (DECF (IL:|fetch| (IL:MISCSTATS IL:GCTIME) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:GCTIME) IL:|of| BEFORE-TIME-BLOCK))        (DECF (IL:|fetch| (IL:MISCSTATS IL:DISKIOTIME) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:DISKIOTIME) IL:|of| BEFORE-TIME-BLOCK))        (DECF (IL:|fetch| (IL:MISCSTATS IL:PAGEFAULTS) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:PAGEFAULTS) IL:|of| BEFORE-TIME-BLOCK))        (DECF (IL:|fetch| (IL:MISCSTATS IL:SWAPWRITES) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:SWAPWRITES) IL:|of| BEFORE-TIME-BLOCK))        (DECF (IL:|fetch| (IL:MISCSTATS IL:DISKOPS) IL:|of| AFTER-TIME-BLOCK)              (IL:|fetch| (IL:MISCSTATS IL:DISKOPS) IL:|of| BEFORE-TIME-BLOCK))        AFTER))(DEFUN %GET-TIMING-INFO (TIMED-FUNCTION TIME-BEFORE TIME-AFTER &OPTIONAL (REPEAT 1))   (IL:* IL:|;;| "Side-effects TIME-BEFORE and TIME-AFTER. Returns the value (or values of TIMED-FUNCTION, and the timing-info in TIME-AFTER.")   (LET ((VALUES NIL))        (%CAPTURE-BEFORE-STATS TIME-BEFORE)        (DOTIMES (I (1- REPEAT))            (FUNCALL TIMED-FUNCTION))        (SETQ VALUES (MULTIPLE-VALUE-LIST (FUNCALL TIMED-FUNCTION)))        (%CAPTURE-AFTER-STATS TIME-AFTER)        (%STATS-OBJECT-DIFFERENCE TIME-BEFORE TIME-AFTER)        (VALUES-LIST VALUES)))(DEFUN TIME-CALL (TIMED-FUNCTION &KEY (OUTPUT *TRACE-OUTPUT*)                            (TIMED-FORM NIL TIMED-FORM-P)                            (DATA-TYPES (IL:DATATYPES))                            (REPEAT 1))   (LET ((VALUES NIL)         (TIME-BEFORE (MAKE-STATS-OBJECT))         (TIME-AFTER (MAKE-STATS-OBJECT))         (TIME-DO-NOTHING (MAKE-STATS-OBJECT)))        (IL:* IL:|;;| "Calibrate")        (%GET-TIMING-INFO #'(LAMBDA NIL NIL)               TIME-BEFORE TIME-DO-NOTHING)        (SETQ VALUES (MULTIPLE-VALUE-LIST (%GET-TIMING-INFO TIMED-FUNCTION TIME-BEFORE TIME-AFTER                                                  REPEAT)))        (%STATS-OBJECT-DIFFERENCE TIME-DO-NOTHING TIME-AFTER)        (IF TIMED-FORM-P (TIME-FORMAT OUTPUT "Timing for ~[~;~:;~:* ~D x~]:~20T ~S~&" REPEAT                                 TIMED-FORM))        (%PRINT-TIMING-ITEM OUTPUT "Elapsed time" (STATS-OBJECT-ELAPSED-TIME TIME-AFTER)               T T)        (%PRINT-TIMING-INFO OUTPUT TIME-AFTER DATA-TYPES)        (VALUES-LIST VALUES)))(DEFMACRO TIME (TIMED-FORM &REST KEYWORDS)   `(TIME-CALL #'(LAMBDA NIL ,TIMED-FORM)           :TIMED-FORM           ',TIMED-FORM           ,@KEYWORDS))(DEFUN %CAPTURE-COUNTERS-BEFORE (VECTOR)   (IL:* IL:|;;| "Record box count for all known datatypes before timing. Note, IL:BOXCOUNT may create fixp's, so count down, so the FIXP count is recorded last")   (DO ((I (1- (LENGTH VECTOR))           (1- I)))       ((< I 0)        VECTOR)     (SETF (AREF VECTOR I)           (IL:BOXCOUNT I))))(DEFUN %CAPTURE-COUNTERS-AFTER (VECTOR)   (IL:* IL:|;;| "Record box count for all known datatypes after  timing. Note, IL:BOXCOUNT may create fixp's, so count up, so the FIXP count is recorded first")   (DOTIMES (I (LENGTH VECTOR)               VECTOR)       (SETF (AREF VECTOR I)             (IL:BOXCOUNT I))))(DEFUN TIME-FORMAT (STREAM FORMAT-STRING &REST ARGS)   (IF (EQ STREAM :EXEC)       (APPLY 'XCL:EXEC-FORMAT FORMAT-STRING ARGS)       (APPLY 'FORMAT STREAM FORMAT-STRING ARGS)))(DEFUN %PRINT-TIMING-ITEM (STREAM STRING NUM TIME-P ALWAYS-P)   (IF (OR ALWAYS-P (> NUM 0))       (IF TIME-P           (TIME-FORMAT STREAM "~&~A ~20,5T= ~9,3F seconds~&" STRING (MAX 0 (/ NUM 1000.0)))           (TIME-FORMAT STREAM "~&~A ~20,5T= ~9D~&" STRING NUM))))(DEFUN %PRINT-TIMING-INFO (STREAM STATS-OBJECT DATA-TYPES)   (LET ((TIME-BLOCK (STATS-OBJECT-TIME-BLOCK STATS-OBJECT))         (DATA-TYPE-INFO (LET ((DATA-COUNTER (STATS-OBJECT-DATA-COUNTERS STATS-OBJECT))                               (RESULT NIL)                               (RESULT-TAIL NIL)                               CNT TYPE-NAME)                              (DOTIMES (I (MIN (LENGTH DATA-COUNTER)                                               (1+ IL:|\\MaxTypeNumber|))                                          RESULT)                                  (SETQ CNT (AREF DATA-COUNTER I))                                  (WHEN (> CNT 0)                                      (SETQ TYPE-NAME (IL:\\TYPENAMEFROMNUMBER I))                                      (IF (MEMBER TYPE-NAME DATA-TYPES :TEST #'EQ)                                          (IF RESULT                                              (RPLACD RESULT-TAIL (SETQ RESULT-TAIL                                                                        (LIST (LIST CNT TYPE-NAME))))                                              (SETQ RESULT (SETQ RESULT-TAIL (LIST (LIST CNT                                                                                          TYPE-NAME)))                                                    ))))))))        (%PRINT-TIMING-ITEM STREAM "SWAP time" (IL:|fetch| (IL:MISCSTATS IL:SWAPWAITTIME)                                                  IL:|of| TIME-BLOCK)               T)        (%PRINT-TIMING-ITEM STREAM "reclaim time" (IL:|fetch| (IL:MISCSTATS IL:GCTIME)                                                     IL:|of| TIME-BLOCK)               T)        (%PRINT-TIMING-ITEM STREAM "Disk i/o time" (IL:|fetch| (IL:MISCSTATS IL:DISKIOTIME)                                                      IL:|of| TIME-BLOCK)               T)        (%PRINT-TIMING-ITEM STREAM "net compute time" (- (STATS-OBJECT-ELAPSED-TIME STATS-OBJECT)                                                         (IL:|fetch| (IL:MISCSTATS                                                                                 IL:SWAPWAITTIME)                                                            IL:|of| TIME-BLOCK)                                                         (IL:|fetch| (IL:MISCSTATS IL:GCTIME)                                                            IL:|of| TIME-BLOCK)                                                         (IL:|fetch| (IL:MISCSTATS IL:DISKIOTIME)                                                            IL:|of| TIME-BLOCK)                                                         (IL:|fetch| (IL:MISCSTATS IL:NETIOTIME)                                                            IL:|of| TIME-BLOCK))               T)        (%PRINT-TIMING-ITEM STREAM "Page faults" (IL:|fetch| (IL:MISCSTATS IL:PAGEFAULTS)                                                    IL:|of| TIME-BLOCK))        (%PRINT-TIMING-ITEM STREAM "Swap writes" (IL:|fetch| (IL:MISCSTATS IL:SWAPWRITES)                                                    IL:|of| TIME-BLOCK))        (%PRINT-TIMING-ITEM STREAM "Disk operations" (IL:|fetch| (IL:MISCSTATS IL:DISKOPS)                                                        IL:|of| TIME-BLOCK))        (IF DATA-TYPE-INFO (TIME-FORMAT STREAM "~&Storage allocated:~%~{~{~D ~A~}~^, ~}~&"                                   DATA-TYPE-INFO))        (TIME-FORMAT STREAM "~%")))(IL:DECLARE\: IL:DONTCOPY IL:DOEVAL@COMPILE (DEFMACRO %CAPTURE-BEFORE-STATS (STATS-OBJECT)   (IL:* IL:|;;|  "Capture machine state before timeing an evaluation. Note that ordering is important")   `(LET ((%$$STATS-OBJECT ,STATS-OBJECT))         (%CAPTURE-COUNTERS-BEFORE (STATS-OBJECT-DATA-COUNTERS %$$STATS-OBJECT))         (%COPY-TIME-STATS IL:\\MISCSTATS (STATS-OBJECT-TIME-BLOCK %$$STATS-OBJECT))         (IL:CLOCK0 (STATS-OBJECT-ELAPSED-TIME %$$STATS-OBJECT))))(DEFMACRO %CAPTURE-AFTER-STATS (STATS-OBJECT)   `(LET ((%$$STATS-OBJECT ,STATS-OBJECT))         (IL:CLOCK0 (STATS-OBJECT-ELAPSED-TIME %$$STATS-OBJECT))         (%COPY-TIME-STATS IL:\\MISCSTATS (STATS-OBJECT-TIME-BLOCK %$$STATS-OBJECT))         (%CAPTURE-COUNTERS-AFTER (STATS-OBJECT-DATA-COUNTERS %$$STATS-OBJECT))))(DEFMACRO %MOVE-FIXP-FIELD (FIELD-NAME DEST SOURCE)   `(IL:\\BLT (IL:LOCF (IL:FETCH ,FIELD-NAME IL:OF ,DEST))           (IL:LOCFmakefile.") (SETQ FNSLST (OR (for FL in (GETPROP ROOTNAME (QUOTE FILEGROUP)) when (fetch FILEPROP of FL) join (FILEFNSLST FL)) (FILEFNSLST ROOTNAME)))) (if (OR (LISTP PRTTYFNS) (LISTP (GETTOPVAL PRTTYFNS))) then (* ; "Ancient cruft from before the days of MAKEFILE.") (PRINTFNS PRTTYFNS T) (PRETTYCOM PRTTYFNS T)) (if (SETQ PRETTYCOMSLST (OR (LISTP PRTTYCOMS) (AND (LITATOM PRTTYCOMS) (LISTP (GETTOPVAL PRTTYCOMS))))) then (PRETTYCOM PRTTYCOMS T) (* ; "PRTTYCOMS is just like the argument to a COMS command.  see comment in prettycom1") (for L on PRETTYCOMSLST do (PRETTYCOM (CAR L) NIL L)) (* ; "The original value of PRTTYCOMS is saved so that it can be rewritten if a spelling correction occurs.  The list PRTTYCOMSLST is searched by PRETTYCOM1 for * commands to see if the variable has be dumped out as well.")) (if (PRETTYDEF1) then (* ; "The coms were reprinted by PRETTYDEF1 due to a change to nlama and or nlaml") elseif PRTTYSPELLFLG then (* ; "A correction on prettycoms was performed, so dump it out aain to get the corrected version on the file.") (PRETTYCOM PRTTYCOMS T)) (if (NEQ COPYRIGHTFLG (QUOTE NEVER)) then (SAVECOPYRIGHT ROOTNAME)) (if NEWFILEMAP then (PRIN1 "(") (PRIN2 (QUOTE DECLARE%:)) (SPACES 1) (PRIN2 (QUOTE DONTCOPY)) (TERPRI) (SPACES 2) (for ADR in MAPADR do (SETQ PRTTYTEM (GETFILEPTR PRTTYFILE)) (SETFILEPTR PRTTYFILE ADR) (* ; "Write the current file positon into the filecreated expression, and then restores the file pointer.") (PRIN2 PRTTYTEM) (SETFILEPTR PRTTYFILE PRTTYTEM)) (PRIN2 (LIST (QUOTE FILEMAP) NEWFILEMAP)) (* ; "printed instead of prettyprinted, so wont take up two pages of listing.") (PRIN1 (QUOTE ")")) (PUTFILEMAP (FULLNAME PRTTYFILE) NEWFILEMAP NIL DESTINATIONENV NIL FCLOCATION) (* ; "Also save map, so can be used for subsequent makefiles.")) (ENDFILE PRTTYFILE) (if (AND FILEDATES ROOTNAME) then (/replace FILEDATES of ROOTNAME with FILEDATES))) (RETURN (FULLNAME PRTTYFILE))))))(PRETTYDEFCOMS(LAMBDA (PRTTYCOMS FNSLST) (* ; "Edited 19-Aug-88 16:07 by raf") (DECLARE (SPECVARS FNSLST)) (PROG ((%#RPARS %#RPARS) (*PRINT-ARRAY* T) (XCL:*PRINT-STRUCTURE* T) (*PRINT-LEVEL* NIL) (*PRINT-LENGTH* NIL) BUILDMAPFLG PRTTYSPELLFLG ORIGFLG SOURCEFILE) (DECLARE (SPECVARS *PRINT-ARRAY* XCL:*PRINT-STRUCTURE* *PRINT-LEVEL* *PRINT-LENGTH* BUILDMAPFLG NEWFILEMAP ORIGFLG PRTTYSPELLFLG LAM?LST ORIGFLG SOURCEFILE %#RPARS)) (if (NOT (SYNTAXP (CHARCODE "[") (QUOTE LEFTBRACKET))) then (* ; "can't use brackets on this read table") (SETQ %#RPARS NIL)) (for L on (OR (LISTP PRTTYCOMS) (AND (LITATOM PRTTYCOMS) (LISTP (GETTOPVAL PRTTYCOMS)))) do (PRETTYCOM (CAR L) NIL L)))))(PRETTYDEF0(LAMBDA (MADEFILE) (* bvm%: " 2-Aug-86 16:24") (* ;; "Cleans up after prettydef in case of control-d.") (COND ((OPENP MADEFILE (QUOTE OUTPUT)) (DELFILE (CLOSEF MADEFILE))))))(PRETTYDEF1(LAMBDA NIL (* wt%: " 9-SEP-78 16:05") (* ; "Updates the DECLARE: for NLAMA/NLAML") (PROG (PRTTYCOM PRTTYTEM PRTTYNEW) (COND ((NULL (SOME PRETTYCOMSLST (FUNCTION (LAMBDA (X) (AND (EQ (CAR X) (QUOTE DECLARE%:)) (SETQ PRTTYTEM (MEMB (QUOTE COMPILERVARS) (SETQ PRTTYCOM X))) (EQ (CAAR (SETQ PRTTYTEM (CDR PRTTYTEM))) (QUOTE ADDVARS))))))) (AND (NULL NLAMALST) (NULL NLAMLST) (NULL LAMALST) (RETURN NIL)) (* ;; "If thee is no DECLARE: and no nlambdas, dont bother to add any.  note tha if thee is IS a DECLARE: