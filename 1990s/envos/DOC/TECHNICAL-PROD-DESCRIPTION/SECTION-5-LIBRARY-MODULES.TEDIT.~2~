1

TECHNICAL PRODUCT DESCRIPTION
1

TECHNICAL PRODUCT DESCRIPTION
5.  LIBRARY MODULES
1

5.  LIBRARY MODULES
1


5.	LIBRARY MODULES
6


The XAIE Library contains over sixty utilities which can be used to customize the development environment and to add functionality to applications. Some of the modules, like TEdit and FileBrowser, are used in almost all installations. Others are needed only during development, like Spy, or only in special cases, like GCHax (a package for debugging complex data structures and their Garbage Collection effects). The current categories of modules include those for Common Lisp, Communications/Network, Documentation Tools, Editing, Extensions to Lisp, File Utilities, Graphics, Input/Output, On-line Documentation, Printing, Program Analysis, System Programming, and User Interface.
All code in the library is maintained and documented by Xerox. Some of the library modules are described below.
Chat is a remote terminal facility that allows the user to communicate with other machines while inside Lisp. Chat sets up a  communications connection to a remote machine, so that everything the remote machine prints is displayed in a Chat window.
Chat is an extensible terminal emulation facility. Its core provides both terminal, and network protocol independent functionality; new terminal types and new Chat protocols, based on this core, can be added to Chat at any time. The user can choose any terminal type to be used with any network protocol type. 
There are currently terminal emulators available for the following terminals: Datamedia 2500, Digital VT100, Tektronix 4010, and TEdit. The network protocol interfaces that are available and can be used with Chat are: PUP Chat, NS Chat (using GAP protocol), TCP (ARPANET) TELNET, and RS232 Chat (using either the RS232 or TTY ports of the 1185 or 1186 processors).
This library module provides a means of transferring files between a Xerox AI workstation and any other computer that supports either Kermit or Modem, using ordinary RS232 and modem connections. The library module KermitMenu provides a menu-oriented interface for issuing Kermit or Modem commands.
The 1186 workstation supports two RS232 ports: the Data Terminal Equipment (DTE), and the Data Communication Equipment (DCE) port. The DTE port is intended to be connected to modems or terminal ports on other computers, and is referred to as the RS232 port. The DCE port is used to drive printers or terminals, and is referred to as the TTY port.
XAIE provides a stream-oriented interface to both of these ports. Programs can open streams to the hosts, RS232 or TTY, and perform input or output using standard Lisp I/O functions.
The RS232 Chat module is a facility that permits the Lisp Chat library module to communicate over the RS232 port. Files may be transferred using RS232 Chat and either the Kermit or Modem protocols. The RS232 Menu utility provides a menu interface to control the settings of the RS232 port.
The Transport Control Protocol/Internet Protocol (TCP/IP) was developed under the auspices of the U.S. Department of Defense for the purpose of standardizing communication mechanisms within such DoD networks as the ArpaNet.
The TCP/IP family consists of four principal protocol layers: the link layer, the internet layer, the transport layer, and the application layer.
The physical link layer, the medium for transferring packets between hosts, is assumed to be any medium capable of transporting ªpacketizedº data between hosts. Common link layers in this family include the Ethernet and the ArpaNet. The Address Resolution (AR) protocol is applied to enable hosts to map between internet addresses and link layer medium addresses.
The internet layer is responsible for routing packets between hosts. The term IP in TCP/IP refers to the Internet Protocol, the protocol that performs this task in the TCP/IP family.
The transport layer is responsible for assuring error-free, duplicate-free, sequenced delivery of packets between communicating processes. The most common transport layer is TCP, the Transport Control Protocol. TCP maintains the appearance of a perfect byte stream between processes.
The application layer supports  file transfer and virtual terminal interaction. Two principal file transfer applications are in use: FTP, based on TCP, and TFTP (Trivial File Transfer Protocol) based on the User Datagram Protocol (UDP). The TELNET protocol specifies the protocol for virtual terminal interaction between a user and a remote system. The XAIE Chat system uses the TELNET  protocol to connect to TCP-only hosts.
HEADING
1

TEdit is the system for entering, editing, formatting, and printing documents. Like other parts of XAIE, it is built around the point and click, ªWhat-You-See-Is-What-You-Getº philosophy of interfacing. TEdit contains most of the formatting and text manipulation features of standard word processors, but also includes access to bitmaps, sketches, and multiple fonts. When TEdit is invoked the user is asked to draw the edit window anywhere on the screen, and it may be any size desired. Within the window the file is shown and edited using either a mouse and menu interface or the marked keys on the keyboard. The main window may be split and each section separately scrolled and changed. Many TEdit windows may be present on the screen simultaneously, and text can be moved between them.
Within each TEdit window text may be displayed in many fonts and sizes, with bold, italic, and underlining attributes, and additional menus may be invoked for complex text formatting. The most important aspect of TEdit is an extension of the point and click capability which allows the editor to include bitmaps and sketches in a text document, and to manipulate them as if they were words. Just as when a user points at a word the system knows it is a word, when a bitmap is pointed at, an appropriate menu is brought up listing operations for bitmaps.
This can be further extended as developers can design their own image objects and include them in complex documents. End users are very comfortable with the concept of illustrations in text, and XAIE provides them with the capability to point at an illustration (or spreadsheet, or graph, etc.) and see it ªjumpº into action, or query them about their problem.
TEdit files are the basic material used by DInfo to provide automatic and heirarchical indexing to a document. There is a spelling checker available for TEdit, and a LispUsers package which adds many Emacs features to TEdit for those who are accustomed to it and would prefer to enter code or data in that way.
Sketch is a drawing program for XAIE which enables the user to interactively construct figures from a combination of text and graphics. These can be included in TEdit documents, as can bitmaps, and both can be combined within the same document if desired. Images can be ªzoomedº in or out, rotated, and filled.
A sketch consists of elements such as text, lines, curves, boxes, circles, and ellipses. Each element has one or more positions that determine its location and shape, and a set of properties such as brush that determine how it looks. A sketch is viewed in one or more sketch windows that provide a region and scale. Within a window, a user can edit a sketch by adding or deleting elements, or by changing the element positions or the values of properties.
Figure X-X.  XXXXX
DEdit is a structure-oriented, modeless, display-based editor for objects represented as list structures, such as functions, property lists, and data values. It operates directly on the codes executed by the interpreter, not on an ASCII file. This ability is useful during program development as it lets programmers change one or two lines within a function and continue execution without compiling, without re-entering a source file, and most importantly without delay.
Editing with DEdit is stack oriented, as is Lisp. As forms within functions are selected, they are placed on the edit stack; then edit operations act on the top two selections. The top selection can be moved before or after the next selection, or it can replace or switch positions with the next selection. Selections can be deleted or copied, parentheses rearranged, or previous operations undone, all with one to three mouse clicks. Far more than a text editor that ºknowsº about the syntax of Lisp, DEdit emphasizes the structure and meaning of the forms, and allows rapid modifications of structures without misplacing parentheses.
Because DEdit operates on structures as they exist in the current memory image, S-expressions can be evaluated from within the editor, again, by simply using the mouse to point to the function to be  evaluated and to other EVAL commands on the editor¹s menu.
Functions can also be compiled from the editor, or new functions defined ? in fact, anything than can be done from anywhere within XAIE can be done from within DEdit. Any number of edit windows can be open at the same time, and code can be moved with the mouse between functions. Or, since selections from all windows are placed on the same edit stack, edit operations can be performed between functions in different windows.
Aside from providing an extremely fast interface for modifying the structures of Lisp programs and data, DEdit improves programmer productivity by eliminating the overhead associated with converting text to data structures in the Lisp address space from within the edit-test loop; the results of each edit are immediately available to the system for execution even before the editor is exited.
Yet another advantage of structure-oriented editors is that they can be implemented efficiently: they use the data manipulation primitives built into Lisp.
Figure X-X.  XXXXX
HEADING
1

FileBrowser provides a convenient user interface for manipulating files stored on a workstation, file server, or floppy. It enables the user to see, edit (SEdit or TEdit), delete, print, load, copy, move, rename, compile, and retrieve several types of information about groups of files. Most FileBrowser operations are performed by selecting a single file or group of files, and then selecting the command from the menu that specifies what to do with the file(s). When copying files from multiple subdirectories, it allows the user the choice of maintaining the subdirectory structure. The FileBrowser can also be customized by adding commands.
Figure X-X.  XXXXX
EditBitmap provides an interface, or bitmap editor, for creating and editing bitmaps. The bitmap editor is called by entering commands into an executive for named bitmaps. If the bitmap is part of another type of a file, such as TEdit, then EditBitmap presents the main menu, and if the appropriate selection is made in the menu, the bitmap editor is displayed.

Figure X-X.  XXXXX
Figure X-X.  XXXXX
The Grapher library module contains a collection of functions and an interface for laying out, displaying, and editing graphs (i.e., networks of nodes and links). Grapher can create a graph from an S-expression, representing the structure of the graph, or from records describing the graph nodes. A GRAPHNODE record contains information about each node, such as the node position, node level, to nodes, from nodes, and node font. Node labels can be single lines of text, bitmaps of arbitrary size, or image objects. Facilities exist for triggering actions by selecting nodes in graphs. Image objects containing graphs can be constructed, so users can include graphs in documents and other image structures. A menu also exists which allows the user to dynamically change the structure of the graph.
Figure X-X.  XXXXX
ReadNumber contains functions for implementing a calculator-type menu for entering numbers with the mouse.
DInfo is a tool for creating and browsing structured documentation in the form of graphs. It uses the Grapher library module to display the graphs on the screen, and TEdit to display the text of the selected graph node. The DInfo graph shows the overall organization of the structured documentation. When a node is selected, a TEdit window opens, providing the documentation for that node. In addition to the TEdit window,  a menu provides the user with information relating to the selected node, and previous nodes selected. DInfo allows system documentation to be maintained and accessible for developers, or may be the basis for a part of an application itself.

Figure X-X.  XXXXX
FX-80Driver is a module that prints text and graphics on Epson FX-80-compatible printers. It implements a full device-independent graphics interface, and can print source code, TEdit documents, bitmaps, and windows, at a variety of qualities and speeds.
4045XLPStream implements an image stream for the Xerox 4045 Laser CP, a 300 dot-per-inch laser printer.  The printer can emulate one of two printers, The Xerox 2700-II laser printer or the Xerox Diablo 630; the software can produce output for either.
The output from the workstation may be sent directly to the 4045 printer through the DLRS232C, or DLTY driver modules, or to a file for printing later. This software has been designed primarily for the RS232C port, since the port is buffered.
The user can specify the 4045 as the DEFAULTPRINTINGHOST, so any HARDCOPY or file listings can by automatically sent to the 4045. The library module contains an image stream interface to the 4045 printer, so the user can send graphic commands (e.g., DRAWLINE) to the printer. The software automatically opens and closes the stream for the user.
MasterScope is an interactive program for analyzing and cross referencing user programs. It analyzes a file containing an application¹s function definitions, recording information about its content and operation, such as which functions call which other functions, how and where variables are bound, set, or referenced, or which functions use particular record declarations. MasterScope is able to analyze definitions directly from a file as well as in-core definitions. The results of its analyses are maintained in a database that can be interrogated with an English-like query language.
The commands deal with sets of program objects and relations between the sets, corresponding to English nouns and verbs. Programmers can get the answers to such MasterScope inquires as:
.DOES function SET variable
or
.WHICH FUNCTIONS CALL ANY FUNCTION THAT USES fieldname AS A FIELD
simply by typing them into the Lisp executive.

In addition, on can use MasterScope to make consistent, global changes to a program. For example, to change the calling convention of a procedure and be sure that all of the places in other programs that use it have been found and modified, a single MasterScope command will delete the second argument to every call to the function FOO:
.EDIT WHERE ANY CALLS FOO - (3)
Or, given the command:
.EDIT WHERE ANY USES FOO AS A FIELD - (R FOO BAR)
MasterScope will replace FOO with BAR only in those cases where FOO is used as the name of a field of a record.
Like the rest of the tools in XAIE, MasterScope is informed about the events that occur elsewhere in the environment, and automatically re-analyzes programs whenever required.
MasterScope can also use the XAIE library module, Browser, which alters the output of the MasterScope SHOW PATHS commands. With Browser loaded into the user environment, MasterScope will create a program browser that presents a graphical depiction of various dependencies between different parts of a program. Each function of the program is represented by a box containing the function name. As the graphic can be quite large it is possible to scroll it both horizontally and vertically. Mousing a function name brings up source code or a tabular list of what MasterScope knows about the function, or can invoke the editor on the source code.
.ANALYZE CONFIGDEMO
.SHOW PATHS FROM CONFIGDEMO
Figure X-X.  XXXXX
Spy is a performance tool used to make programs run faster. It provides a graphical picture of where the program is spending its time.
Spy has two parts: a ªsamplerº and a ªdisplayer.º The ªsamplerº is run while executing the user's program. It monitors the running program by periodically interrupting it to account for the functions in the current call stack. This allows Spy to remember not only how long is spent in each individual function, but also how long each function is seen on the call stack.
The ªdisplayerº uses the Grapher package to display the data gathered by the sampler. Each function that executed is shown in a boxed node linked to its calling function. The size of a function's node is proportional to the number of cycles consumed by the execution of that function, making performance bottle-necks instantly obvious. The displayer is interactive as well as graphical. Since the displayer knows the whole call graph, it can show the entire tree structure or merge separate calls to the same functions. The sampler records the entire calling stack when it samples, so it can account for both individual and comulative time.
Spy is activated by clicking the ªSPY button,º first to start spying, then to stop and display the result in the graphical format.
Figure X-X.  XXXXX
By selecting nodes on the graph, the user can create subtrees, edit the function, delete the selected item (and its subbranches)  from the graph, merge nodes, or change the parameters for the graph (i.e., reset the threshold).
TeleRaid is an interactive debugger which can be used either to examine, from one workstation, the state of another workstation¹s virtual memory, or to look inside the sysout file of a workstation.
Virtual keyboards allows users to change the behavior of the basic workstation keyboard to mimic another keyboard. It displays pictures of keyboards on the screen and use them as menus for ºtypingº occasional special characters. Several keyboards may be displayed on the screen at once, letting the user switch easily among keyboards for several languages and making hundreds of characters available for typing.
The virtual keyboards supplied with this module are DVorak, German, Greek, Italian, logic, math, Spanish, European accents, and standard Russian. The user can also define new keyboards with the associated Keyboard Editor module, which permits editing a keyboard while seeing the actual look of the characters.
LispUsers packages are written by users of XAIE. They are supported by the individuals who wrote them, not by Xerox, and Xerox assumes no responsibility for the reliability or maintenance  of these packages. Each package is documented, and the top of each document indicates the name of the author and his electronic mail or U.S. mail address. By following a few guidelines, all experienced XAIE users are encouraged to submit useful and interesting packages to Xerox.
There are over 150 tools, games, and utilities in the current version of LispUsers. While there has been no effort yet to categorize the entries, some examples include:
ACE
1

ACE is a system for computer-assisted animation. The user supplies a series of frames, which represents a sequence. The system plays back the frames, creating an animated effect. The ACE system consists of a frame compiler and an environment. The environment provides the editing tools, frame manipulation, and display capabilities. The compiler operates automatically to produce a compressed-storage representation for frames.
ActiveRegions
1

ActiveRegions allows a user to specify certain portions of a window as being mouse sensitive. Functions are associated with each region in the window, and when an active region is selected with the mouse, the associated function is invoked.
AIRegions
1

AIRegions (Active Irregular Regions) provide menu-like operations on irregularly shaped regions within a window, and make general functions available that allow users to create their own applications using irregularly shaped active regions.
BackGroundImages
1

BackGroundImages makes it possible to apply graphically interesting static images to the background of a Xerox AI workstation display screen.
BiClock
1

BiClock is a real time screen clock, with hour, minute, and second hands. It behaves as a kind of icon, in that is is partly transparent. The clock image may be either black or white, and the shadow around the image is the opposite color.
A separate feature enables the use of BiClock as an idle function. Selecting the alternative ºBouncing BiClockº from ªChoose Displayº in the idle menu will create a bouncing clock when idle mode is entered.
Others
1

	Courierevalserver	Courierevalserve allows a Xerox AI workstation to become an Ethernet ªknowledge server.º
	DirectoryTools	DirectoryTools graphically displays file directories and invokes FileBrowser.
	FillRegion	FillRegion allows the user to ªfill-inº arbitrary regions of a bitmap or window with a shade or bitmap.
	History Menu	The history menu module provides a simple way to access the history list using a menu. Through this menu users can REDO, UNDO, FIX and ?? select items.
	Imagewriter	Imagewriter allows a user to print text files, windows and bitmaps on Imagewriter compatible printers.
	Mathfns	Mathfns provides additional math functions, including extra trigonometric functions, hyperbolic functions, and macros and functions for complex arithmetic.
	MusicKeyBoard	MusicKeyBoard is equivalent to a piano¹s keyboard and can be used for writing and replaying tunes.
	Plot	Plot is a module designed to assist in the production of analytic graphics. It provides automatic scaling, labeling, incremental modification, generalized selection, and a collection of standard graphics primitives.
	PrinterMenu	PrinterMenu is a menu-driven utility that shows the status of print servers on the network.
     (LIST ((PAGE NIL (PAPERSIZE NIL STARTINGPAGE# 1) (0 0 612 792) ((FOLIO NIL (PARALOOKS (QUAD RIGHT) CHARLOOKS (SUPERSCRIPT 0 INVISIBLE OFF SELECTPOINT OFF PROTECTED OFF SIZE 10 FAMILY OPTIMA OVERLINE OFF STRIKEOUT OFF UNDERLINE OFF EXPANSION REGULAR SLOPE REGULAR WEIGHT MEDIUM INVERTED OFF USERINFO NIL STYLE NIL) FORMATINFO NIL) (270 15 288 36) NIL) (HEADING NIL (HEADINGTYPE FOOTINGR) (54 27 558 36) NIL) (TEXT NIL NIL (54 54 504 723) NIL))) (PAGE NIL (PAPERSIZE NIL) (0 0 612 792) ((FOLIO NIL (PARALOOKS (QUAD LEFT) CHARLOOKS (SUPERSCRIPT 0 INVISIBLE OFF SELECTPOINT OFF PROTECTED OFF SIZE 10 FAMILY OPTIMA OVERLINE OFF STRIKEOUT OFF UNDERLINE OFF EXPANSION REGULAR SLOPE REGULAR WEIGHT MEDIUM INVERTED OFF USERINFO NIL STYLE NIL) FORMATINFO NIL) (54 15 288 36) NIL) (HEADING NIL (HEADINGTYPE FOOTINGV) (54 27 558 36) NIL) (HEADING NIL (HEADINGTYPE VERSOHEAD) (54 762 558 36) NIL) (TEXT NIL NIL (54 54 504 684) NIL))) (PAGE NIL (PAPERSIZE NIL) (0 0 612 792) ((FOLIO NIL (PARALOOKS (QUAD RIGHT) CHARLOOKS (SUPERSCRIPT 0 INVISIBLE OFF SELECTPOINT OFF PROTECTED OFF SIZE 10 FAMILY OPTIMA OVERLINE OFF STRIKEOUT OFF UNDERLINE OFF EXPANSION REGULAR SLOPE REGULAR WEIGHT MEDIUM INVERTED OFF USERINFO NIL STYLE NIL) FORMATINFO NIL) (270 15 288 36) NIL) (HEADING NIL (HEADINGTYPE FOOTINGR) (54 27 558 36) NIL) (HEADING NIL (HEADINGTYPE RECTOHEAD) (54 762 558 36) NIL) (TEXT NIL NIL (54 54 504 684) NIL)))))       5 H Ìø       ´ Ì                              -    ø                         T         -    ø                        T         , Ì Ìø                                 , Ì Ìø                                 3 Ì Ìø        ø                   T         F    ø        ø       PAGEHEADING 	VERSOHEAD                   F    ø        ø       PAGEHEADING 	RECTOHEAD                   E    ø      ø       PAGEHEADING FOOTINGV                   E    ø      ø       PAGEHEADING FOOTINGR                   ,                                                CLASSIC          CLASSIC          CLASSIC           MODERN                    HRULE.GETFN  CLASSIC                                          	     HRULE.GETFN  CLASSIC                      	                                      HRULE.GETFN  CLASSIC                                        HRULE.GETFN  CLASSIC                                        HRULE.GETFN  CLASSIC                                    «             p             ù            7            m            *            [             ·            "             à                         l             ·                        ª                            HRULE.GETFN  CLASSIC                                   *            i            7            7            È                         ×            |                        ª                                                                  HRULE.GETFN  CLASSIC                                                j                                                                             k                                                   þ             û             ó            Y            N             º                                       B             /                         Q                                        2             p             °                                                                            r                                                   ã             Æ                        6            Õ             ©                            HRULE.GETFN  CLASSIC                       ¬                            HRULE.GETFN  CLASSIC                        ñ                            HRULE.GETFN  CLASSIC                        ñ                            HRULE.GETFN  CLASSIC                                                    HRULE.GETFN  CLASSIC                        ï             Ï                            HRULE.GETFN  CLASSIC                        l             ^             t             ¦             t             ¥             r             Þ             i                  U øzº