(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (DEFPACKAGE "GABRIEL"))(IL:FILECREATED "12-Aug-88 10:32:50" IL:{ERIS}<LISPCORE>GABRIEL>TOOLS>GABRIEL-TIMERS.\;7 17901        IL:|changes| IL:|to:|  (IL:FUNCTIONS RUN-BENCHMARKS)      IL:|previous| IL:|date:| "28-Jul-88 03:21:26" IL:{ERIS}<LISPCORE>GABRIEL>TOOLS>GABRIEL-TIMERS.\;6); Copyright (c) 1987, 1988 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:GABRIEL-TIMERSCOMS)(IL:RPAQQ IL:GABRIEL-TIMERSCOMS          (           (IL:* IL:|;;| "Main file for running [Gabriel] Benchmark suites in Xerox Lisp:")           (IL:COMS                   (IL:* IL:|;;| "Definitions for the TIMERS type, and the definer for them:")                  (IL:DEFINE-TYPES TIMERS)                  (IL:FUNCTIONS DEFINE-TIMER))           (IL:COMS                   (IL:* IL:|;;| "CONTROL VARIABLES")                                    (IL:* IL:|;;|                 " *ALL-TIMERS* - List of all the benchmark definitions you've loaded.")                                    (IL:* IL:|;;|                 " *MINIMUM-TESTS* - Min # of times to run each test, defaults to 2.")                  (IL:VARIABLES *ALL-TIMERS* *MINIMUM-TESTS* *MOST-TIMERS*))           (IL:COMS                   (IL:* IL:|;;| "Functions for running benchmarks.  RUN-BENCHMARKS is the main entry; DESCRIBE-IMPLEMENTATION is a sub-function.")                  (IL:FUNCTIONS RUN-BENCHMARKS DESCRIBE-IMPLEMENTATION))           (IL:COMS                   (IL:* IL:|;;| "Functions for running benchmarks and saving the results in a database of benchmarks.  RUN-BENCHMARKS-TO-DATABASE is the main entry; DESCRIBE-IMPLEMENTATION is a sub-function.")                  (IL:FUNCTIONS RUN-BENCHMARKS-TO-DATABASE TIME-CALL ALL-TIME-INDICATORS))           (IL:DECLARE\: IL:DONTCOPY IL:DOEVAL@COMPILE (IL:LOCALVARS . T))           (IL:PROP (IL:FILETYPE IL:MAKEFILE-ENVIRONMENT)                  IL:GABRIEL-TIMERS)))(IL:* IL:|;;| "Main file for running [Gabriel] Benchmark suites in Xerox Lisp:")(IL:* IL:|;;| "Definitions for the TIMERS type, and the definer for them:")(XCL:DEF-DEFINE-TYPE TIMERS "Gabriel Benchmarks")(XCL:DEFDEFINER (DEFINE-TIMER (:NAME (LAMBDA (WHOLE)                                                (IF (CONSP (SECOND WHOLE))                                                    (CAR (SECOND WHOLE))                                                    (SECOND WHOLE))))) TIMERS (NAME-AND-OPTIONS                                                                               DOCUMENTATION &BODY                                                                                BODY)   (LET ((NAME (IF (CONSP NAME-AND-OPTIONS)                   (CAR NAME-AND-OPTIONS)                   NAME-AND-OPTIONS))         (SETUPFORM (CADR (ASSOC ':SETUP NAME-AND-OPTIONS)))         (AFTER-EVERY-FORM (CADR (ASSOC ':AFTER-EVERY NAME-AND-OPTIONS)))         (AFTERFORM (CADR (ASSOC ':AFTER NAME-AND-OPTIONS))))        (LET ((TIMER (GENTEMP)))             `(PROGN (PUSHNEW ',NAME *ALL-TIMERS*)                     (DEFUN ,TIMER ()                        ,@BODY)                     (SETF (GET ',NAME 'TIMING-FUNCTION)                           ',TIMER)                     ,@(IF SETUPFORM                           (LET ((SETUP (GENTEMP)))                                `((DEFUN ,SETUP ()                                     ,SETUPFORM)                                  (SETF (GET ',NAME 'SETUP-FUNCTION)                                        ',SETUP))))                     ,@(IF AFTER-EVERY-FORM                           (LET ((AFTER-EVERY (GENTEMP)))                                `((DEFUN ,AFTER-EVERY ()                                     ,AFTER-EVERY-FORM)                                  (SETF (GET ',NAME 'AFTER-EVERY-FUNCTION)                                        ',AFTER-EVERY))))                     ,@(IF AFTERFORM                           (LET ((AFTER (GENTEMP)))                                `((DEFUN ,AFTER ()                                     ,AFTERFORM)                                  (SETF (GET ',NAME 'AFTER-FUNCTION)                                        ',AFTER))))                     (SETF (GET ',NAME 'TIMING-DOCUMENTATION)                           ,DOCUMENTATION)))))(IL:* IL:|;;| "CONTROL VARIABLES")(IL:* IL:|;;| " *ALL-TIMERS* - List of all the benchmark definitions you've loaded.")(IL:* IL:|;;| " *MINIMUM-TESTS* - Min # of times to run each test, defaults to 2.")(DEFVAR *ALL-TIMERS* NIL)(DEFPARAMETER *MINIMUM-TESTS* 2   "Run each test at least this many times")(DEFVAR *MOST-TIMERS*   '(TAKR TAKL TAK STAK CTAK TRIANG TRAVERSE-INIT TRAVERSE TPRINT PUZZLE FPRINT FREAD FFT DIV2-2           DIV2-1 DESTRU DERIV DDERIV BROWSE BOYER TRAVERSE-INIT* TRAVERSE* BROWSE*))(IL:* IL:|;;| "Functions for running benchmarks.  RUN-BENCHMARKS is the main entry; DESCRIBE-IMPLEMENTATION is a sub-function.")(DEFUN RUN-BENCHMARKS (&OPTIONAL (BENCHMARKS *ALL-TIMERS*)                                 (DRIBBLE-FILE '{DSK}GABRIEL.BENCHMARKS)                                 (NUMBER-OF-ITERATIONS *MINIMUM-TESTS*)                                 (APPEND-DRIBBLE-FILE NIL))   (IL:* IL:|;;| "Run the benchmarks named in BENCHMARKS (defaulting to all known timers)")   (IL:* IL:|;;| "Dribble the timings to DRIBBLE-FILE")   (IL:* IL:|;;| "Run each test NUMBER-OF-ITERATIONS times.")   (LET ((OLD-PACKAGE (PACKAGE-NAME *PACKAGE*))         (*MINIMUM-TESTS* NUMBER-OF-ITERATIONS))        (UNWIND-PROTECT            (PROGN                    (IL:* IL:|;;|              "Set up so we're in the GABRIEL package, and the type-out won't pause on screen-full:")                   (IN-PACKAGE "GABRIEL")                   (IL:WINDOWPROP (IL:WFROMDS *STANDARD-OUTPUT*)                          'IL:PAGEFULLFN                          'IL:NILL)                   (IL:* IL:|;;|                  "Set up the dribble file, and describe the machine we're running on:")                   (DRIBBLE DRIBBLE-FILE APPEND-DRIBBLE-FILE)                   (DESCRIBE-IMPLEMENTATION)                   (LET (TIMING-FUNCTION SETUP-FUNCTION AFTER-EVERY-FUNCTION AFTER-FUNCTION                                DOCUMENTATION)                        (DOLIST (BENCHMARK BENCHMARKS)                            (FORMAT *STANDARD-OUTPUT* "~%~%***** ~A Benchmark ***~%" BENCHMARK)                            (SETQ TIMING-FUNCTION (GET BENCHMARK 'TIMING-FUNCTION))                            (SETQ SETUP-FUNCTION (GET BENCHMARK 'SETUP-FUNCTION))                            (SETQ AFTER-EVERY-FUNCTION (GET BENCHMARK 'AFTER-EVERY-FUNCTION))                            (SETQ AFTER-FUNCTION (GET BENCHMARK 'AFTER-FUNCTION))                            (SETQ DOCUMENTATION (GET BENCHMARK 'TIMING-DOCUMENTATION))                            (IF DOCUMENTATION (FORMAT *STANDARD-OUTPUT* "~%~A~%~%" DOCUMENTATION))                            (IL:* IL:|;;| "Set up for the test:")                            (IF SETUP-FUNCTION                                (PROGN (FORMAT *STANDARD-OUTPUT* "~%Evaluating setup for ~a~%"                                               BENCHMARK)                                       (FUNCALL SETUP-FUNCTION)))                            (IL:* IL:|;;| "Run the test the right number of times:")                            (DOTIMES (I *MINIMUM-TESTS*)                                (FORMAT *STANDARD-OUTPUT* "~%Iteration ~s of ~a~%" I BENCHMARK)                                (IL:* IL:|;;| "Run the timing:")                                (CL::TIME-CALL #'(LAMBDA NIL (FUNCALL TIMING-FUNCTION))                                       :TIMED-FORM BENCHMARK :OUTPUT *STANDARD-OUTPUT*)                                (IL:* IL:|;;| "Run the cleanup-after-each-iteration function:")                                (IF AFTER-EVERY-FUNCTION                                    (PROGN (FORMAT *STANDARD-OUTPUT*                                                   "~%Evaluating after every function for ~a~%"                                                   BENCHMARK)                                           (FUNCALL AFTER-EVERY-FUNCTION)))                                (DOTIMES (J 10)                                    (IL:RECLAIM)))                            (IL:* IL:|;;| "Now clean up after the test:")                            (IF AFTER-FUNCTION                                (PROGN (FORMAT *STANDARD-OUTPUT*                                               "~%Evaluating after function for ~a~%" BENCHMARK)                                       (FUNCALL AFTER-FUNCTION))))))            (IL:* IL:|;;| "Now clean up:  Set the package back as it was, close the dribble file, and restore the page-full function on the main window:")            (DRIBBLE)            (IN-PACKAGE OLD-PACKAGE)            (IL:WINDOWPROP (IL:WFROMDS *STANDARD-OUTPUT*)                   'IL:PAGEFULLFN                   'NIL))        (FORMAT *STANDARD-OUTPUT* "~%~%Output on ~s~%" DRIBBLE-FILE)))(DEFUN DESCRIBE-IMPLEMENTATION (&OPTIONAL (STREAM *STANDARD-OUTPUT*))   (FORMAT STREAM "~&Lisp Type:~20T~A" (LISP-IMPLEMENTATION-TYPE))   (FORMAT STREAM "~&Lisp Version:~20T~A" (LISP-IMPLEMENTATION-VERSION))   (FORMAT STREAM "~&Software Type:~20T~A" (SOFTWARE-TYPE))   (FORMAT STREAM "~&Software Version:~20T~A" (SOFTWARE-VERSION))   (FORMAT STREAM "~&Machine Type:~20T~A" (MACHINE-TYPE))   (FORMAT STREAM "~&Machine Version:~20T~A" (MACHINE-VERSION))   (FORMAT STREAM "~&Machine Instance:~20T~A" (MACHINE-INSTANCE))   (FORMAT STREAM "~&Site:~20T~A" (LONG-SITE-NAME))   (FORMAT STREAM "~&Features:~20T~S" *FEATURES*))(IL:* IL:|;;| "Functions for running benchmarks and saving the results in a database of benchmarks.  RUN-BENCHMARKS-TO-DATABASE is the main entry; DESCRIBE-IMPLEMENTATION is a sub-function.")(DEFUN RUN-BENCHMARKS-TO-DATABASE (&OPTIONAL (BENCHMARKS *ALL-TIMERS*)                                             (DRIBBLE-FILE '{DSK}GABRIEL.BENCHMARKS)                                             (NUMBER-OF-ITERATIONS *MINIMUM-TESTS*)                                             (TOTAL-TIMES-FILE '{DSK} GABRIEL.TOTALTIMES))   (IL:* IL:|;;| "Run the benchmarks named in BENCHMARKS (defaulting to all known timers)")   (IL:* IL:|;;| "Dribble the timings to DRIBBLE-FILE")   (IL:* IL:|;;| "Run each test NUMBER-OF-ITERATIONS times.")   (LET    ((OLD-PACKAGE (PACKAGE-NAME *PACKAGE*))     (*MINIMUM-TESTS* NUMBER-OF-ITERATIONS)     TOTALTIMES TIMES AVG-TIMES)    (UNWIND-PROTECT        (PROGN         (IL:* IL:|;;|        "Set up so we're in the GABRIEL package, and the type-out won't pause on screen-full:")         (IN-PACKAGE "GABRIEL")         (IL:WINDOWPROP (IL:WFROMDS *STANDARD-OUTPUT*)                'IL:PAGEFULLFN                'IL:NILL)         (IL:* IL:|;;| "Set up the dribble file, and describe the machine we're running on:")         (DRIBBLE DRIBBLE-FILE)         (DESCRIBE-IMPLEMENTATION)         (LET (TIMING-FUNCTION SETUP-FUNCTION AFTER-EVERY-FUNCTION AFTER-FUNCTION DOCUMENTATION)              (WITH-OPEN-FILE               (RESULT-STREAM TOTAL-TIMES-FILE :DIRECTION :OUTPUT :IF-EXISTS :NEW-VERSION)               (DOLIST (BENCHMARK BENCHMARKS)                   (FORMAT *STANDARD-OUTPUT* "~%~%***** ~A Benchmark ***~%" BENCHMARK)                   (SETQ TIMING-FUNCTION (GET BENCHMARK 'TIMING-FUNCTION))                   (SETQ SETUP-FUNCTION (GET BENCHMARK 'SETUP-FUNCTION))                   (SETQ AFTER-EVERY-FUNCTION (GET BENCHMARK 'AFTER-EVERY-FUNCTION))                   (SETQ AFTER-FUNCTION (GET BENCHMARK 'AFTER-FUNCTION))                   (SETQ DOCUMENTATION (GET BENCHMARK 'TIMING-DOCUMENTATION))                   (IF DOCUMENTATION (FORMAT *STANDARD-OUTPUT* "~%~A~%~%" DOCUMENTATION))                   (IL:* IL:|;;| "Set up for the test:")                   (IF SETUP-FUNCTION                       (PROGN (FORMAT *STANDARD-OUTPUT* "~%Evaluating setup for ~a~%" BENCHMARK)                              (FUNCALL SETUP-FUNCTION)))                   (IL:* IL:|;;| "Run the test the right number of times:")                   (DOTIMES (I *MINIMUM-TESTS*)                       (FORMAT *STANDARD-OUTPUT* "~%Iteration ~s of ~a~%" I BENCHMARK)                       (IL:* IL:|;;| "Run the timing:")                       (SETQ TIMES (CONS (TIME-CALL #'(LAMBDA NIL (FUNCALL TIMING-FUNCTION))                                                :TIMED-FORM BENCHMARK :OUTPUT *STANDARD-OUTPUT*)                                         TIMES))                       (IL:* IL:|;;| "Run the cleanup-after-each-iteration function:")                       (IF AFTER-EVERY-FUNCTION                           (PROGN (FORMAT *STANDARD-OUTPUT*                                          "~%Evaluating after every function for ~a~%" BENCHMARK)                                  (FUNCALL AFTER-EVERY-FUNCTION)))                       (DOTIMES (J 10)                           (IL:RECLAIM)))                   (IL:* IL:|;;| "Now clean up after the test:")                   (IF AFTER-FUNCTION                       (PROGN (FORMAT *STANDARD-OUTPUT* "~%Evaluating after function for ~a~%"                                      BENCHMARK)                              (FUNCALL AFTER-FUNCTION)))                   (IL:* IL:|;;| "Now compute the average times for this group of runs:")                   (DOLIST (INDICATOR (ALL-TIME-INDICATORS TIMES))                       (IL:* IL:|;;| "TOTAL THE TIMES")                       (IL:* IL:|;;| "COMPUTE THE AVERAGE")                       (IL:* IL:|;;| "ADD TO TOTALTIMES FOR THIS TIMING.")                       (SETQ AVG-TIMES (APPEND (LIST INDICATOR                                                     (/ (IL:FOR TIME-LIST IL:IN TIMES                                                           IL:SUM (OR (IL:LISTGET TIME-LIST                                                                                  INDICATOR)                                                                          0))                                                        *MINIMUM-TESTS*))                                              AVG-TIMES)))                   (PRINT (LIST BENCHMARK (IL:DATE)                                AVG-TIMES                                (REVERSE TIMES))                          RESULT-STREAM)))))        (IL:* IL:|;;| "Now clean up:  Set the package back as it was, close the dribble file, and restore the page-full function on the main window:")        (DRIBBLE)        (IN-PACKAGE OLD-PACKAGE)        (IL:WINDOWPROP (IL:WFROMDS *STANDARD-OUTPUT*)               'IL:PAGEFULLFN               'NIL))    (FORMAT *STANDARD-OUTPUT* "~%~%Output on ~s~%" DRIBBLE-FILE)))(DEFUN TIME-CALL (CL::TIMED-FUNCTION &KEY (CL::OUTPUT *TRACE-OUTPUT*)                            (CL::TIMED-FORM NIL CL::TIMED-FORM-P)                            (CL::DATA-TYPES (IL:DATATYPES))                            (CL::REPEAT 1))   (LET ((VALUES NIL)         (CL::TIME-BEFORE (CL::MAKE-STATS-OBJECT))         (CL::TIME-AFTER (CL::MAKE-STATS-OBJECT))         (CL::TIME-DO-NOTHING (CL::MAKE-STATS-OBJECT)))        (IL:* IL:|;;| "Calibrate")        (CL::%GET-TIMING-INFO #'(LAMBDA NIL NIL)               CL::TIME-BEFORE CL::TIME-DO-NOTHING)        (SETQ VALUES (MULTIPLE-VALUE-LIST (CL::%GET-TIMING-INFO CL::TIMED-FUNCTION CL::TIME-BEFORE                                                  CL::TIME-AFTER CL::REPEAT)))        (CL::%STATS-OBJECT-DIFFERENCE CL::TIME-DO-NOTHING CL::TIME-AFTER)        (IF CL::TIMED-FORM-P (CL::TIME-FORMAT CL::OUTPUT "Timing for ~[~;~:;~:* ~D x~]:~20T ~S~&"                                     CL::REPEAT CL::TIMED-FORM))        (CL::%PRINT-TIMING-ITEM CL::OUTPUT "Elapsed time" (CL::STATS-OBJECT-ELAPSED-TIME                                                                  CL::TIME-AFTER)               T T)        (CL::%PRINT-TIMING-INFO CL::OUTPUT CL::TIME-AFTER CL::DATA-TYPES)        (LIST ':TOTAL (CL::STATS-OBJECT-ELAPSED-TIME CL::TIME-AFTER)              :GC              (IL:|fetch| (IL:MISCSTATS IL:GCTIME) IL:|of| (CL::STATS-OBJECT-TIME-BLOCK                                                                    CL::TIME-AFTER))              :SWAP              (IL:|fetch| (IL:MISCSTATS IL:SWAPWAITTIME) IL:|of| (CL::STATS-OBJECT-TIME-BLOCK                                                                          CL::TIME-AFTER))              :I/O              (IL:|fetch| (IL:MISCSTATS IL:DISKIOTIME) IL:|of| (CL::STATS-OBJECT-TIME-BLOCK                                                                        CL::TIME-AFTER)))))(DEFUN ALL-TIME-INDICATORS (TIME-LIST)   (LET (ALL-INDICATORS)        (DOLIST (TIMES TIME-LIST)            (SETQ ALL-INDICATORS (UNION ALL-INDICATORS (IL:FOR IND IL:IN TIMES IL:BY                                                                                       CDDR                                                          IL:COLLECT IND))))        ALL-INDICATORS))(IL:DECLARE\: IL:DONTCOPY IL:DOEVAL@COMPILE (IL:DECLARE\: IL:DOEVAL@COMPILE IL:DONTCOPY(IL:LOCALVARS . T)))(IL:PUTPROPS IL:GABRIEL-TIMERS IL:FILETYPE COMPILE-FILE)(IL:PUTPROPS IL:GABRIEL-TIMERS IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE                                                                      (XCL:DEFPACKAGE "GABRIEL")))(IL:PUTPROPS IL:GABRIEL-TIMERS IL:COPYRIGHT ("Xerox Corporation" 1987 1988))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP