(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP")(FILECREATED "20-Jan-93 14:22:53" {DSK}<python>lde>lispcore>library>POSTSCRIPTSTREAM.;3 230156       changes to%:  (VARS POSTSCRIPTSTREAMCOMS)                    (RECORDS FONTID PSCFONT \POSTSCRIPTDATA POSTSCRIPTXFORM)      previous date%: "19-Jan-93 21:44:03" {DSK}<python>lde>lispcore>library>POSTSCRIPTSTREAM.;2)(* ; "Copyright (c) 1989, 1990, 1991, 1992, 1993 by Venue  This program or documentation contains confidential information and trade secrets of Venue.  Reverse engineering, reverse compiling and disassembling of object code are prohibited.  Use of this program or documentation is governed by written agreement with Venue.  Use of copyright notice is precautionary and does not imply publication or disclosure of trade secrets.  All rights reserved.")(PRETTYCOMPRINT POSTSCRIPTSTREAMCOMS)(RPAQQ POSTSCRIPTSTREAMCOMS        [        (* ;; "PostScript printer support for Medley")        (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS FONTID PSCFONT \POSTSCRIPTDATA POSTSCRIPTXFORM))        (INITRECORDS \POSTSCRIPTDATA)        (FNS POSTSCRIPT.INIT)                (* ;; "Font-reading code")        (FNS PSCFONT.READFONT PSCFONT.SPELLFILE PSCFONT.WRITEFONT READ-AFM-FILE POSTSCRIPT.GETFONTID             POSTSCRIPT.FONTCREATE POSTSCRIPT.FONTSAVAILABLE)        (FNS OPENPOSTSCRIPTSTREAM CLOSEPOSTSCRIPTSTREAM)        (FNS POSTSCRIPT.HARDCOPYW POSTSCRIPT.TEDIT POSTSCRIPT.TEXT POSTSCRIPTFILEP)        (FNS POSTSCRIPT.BITMAPSCALE POSTSCRIPT.CLOSESTRING POSTSCRIPT.ENDPAGE POSTSCRIPT.OUTSTR              POSTSCRIPT.PUTBITMAPBYTES POSTSCRIPT.PUTCOMMAND POSTSCRIPT.SET-FAKE-LANDSCAPE              POSTSCRIPT.SHOWACCUM POSTSCRIPT.STARTPAGE \POSTSCRIPTTAB \PS.BOUTFIXP \PS.SCALEHACK              \PS.SCALEREGION \SCALEDBITBLT.PSC \SETPOS.PSC \SETXFORM.PSC \STRINGWIDTH.PSC              \SWITCHFONTS.PSC \TERPRI.PSC)                (* ;; "DIG operations: ")        (FNS \BITBLT.PSC \BLTSHADE.PSC \CHARWIDTH.PSC \DRAWARC.PSC \DRAWCIRCLE.PSC \DRAWCURVE.PSC              \DRAWELLIPSE.PSC \DRAWLINE.PSC \DRAWPOINT.PSC \DRAWPOLYGON.PSC \DSPBOTTOMMARGIN.PSC              \DSPCLIPPINGREGION.PSC \DSPCOLOR.PSC \DSPFONT.PSC \DSPLEFTMARGIN.PSC \DSPLINEFEED.PSC              \DSPPUSHSTATE.PSC \DSPPOPSTATE.PSC \DSPRESET.PSC \DSPRIGHTMARGIN.PSC \DSPROTATE.PSC              \DSPSCALE.PSC \DSPSCALE2.PSC \DSPSPACEFACTOR.PSC \DSPTOPMARGIN.PSC \DSPTRANSLATE.PSC              \DSPXPOSITION.PSC \DSPYPOSITION.PSC \FILLCIRCLE.PSC \FILLPOLYGON.PSC \FIXLINELENGTH.PSC             \MOVETO.PSC \NEWPAGE.PSC)        [COMS               (* ;; "Character-output, plus special-cases:")              (FNS \POSTSCRIPT.OUTCHARFN \UPDATE.PSC \POSTSCRIPT.SYMBOLOUTCHAR                    \POSTSCRIPT.DINGBATOUTCHAR \POSTSCRIPT.ACCENTFN)                            (* ;;        "The mapping of NS characters to Postscript renderings, both as an AList and as a hashtable")              (FNS \POSTSCRIPT.NSHASH)              (VARS (*POSTSCRIPT-UNACCENTED-FONTS* '(Dancer ZapfDingbats "Dancer" "ZapfDingbats"))                    [*POSTSCRIPT-NS-TRANSLATIONS* '(("0,244" NIL "2,250")                                                    ("0,254" SYMBOL "2,254")                                                    ("0,255" SYMBOL "2,255")                                                    ("0,256" SYMBOL "2,256")                                                    ("0,257" SYMBOL "2,257")                                                    ("0,260" SYMBOL "2,260")                                                    ("0,261" SYMBOL "2,261")                                                    ("0,264" SYMBOL "2,264")                                                    ("0,270" SYMBOL "2,270")                                                    ("0,274" FUNCTION " f14 ")                                                    ("0,275" FUNCTION " f12 ")                                                    ("0,276" FUNCTION " f34 ")                                                    ("0,322" SYMBOL "2,342")                                                    ("0,323" SYMBOL "2,343")                                                    ("0,324" SYMBOL "2,344")                                                    ("0,334" FUNCTION " f18 ")                                                    ("0,335" FUNCTION " f38 ")                                                    ("0,336" FUNCTION " f58 ")                                                    ("0,337" FUNCTION " f78 ")                                                    ("41,172" DINGBAT "0,110")                                                    ("42,42" DINGBAT "0,161")                                                             (* ; "ballot-box")                                                    ("357,44" NIL "2,261")                                                    ("357,45" NIL "2,320")                                                    ("357,60" NIL "2,262")                                                    ("357,61" NIL "2,263")                                                    ("357,70" SYMBOL "2,315")                                                    ("357,101" NIL "2,275")                                                    ("357,110" SYMBOL "2,312")                                                    ("357,111" SYMBOL "2,315")                                                    ("357,116" SYMBOL "2,333")                                                    ("357,120" SYMBOL "2,253")                                                    ("357,121" SYMBOL "2,333")                                                    ("357,122" SYMBOL "2,333")                                                    ("357,146" NIL "2,267")                                                    ("357,264" SYMBOL "2,44")                                                    ("357,265" SYMBOL "2,42")                                                    ("357,317" DINGBAT "0,63")                                                    ("357,375" FUNCTION " f13 ")                                                    ("357,376" FUNCTION " f23 ")                                                    ("361,042" ACCENT "0,1")                                                    ("361,043" ACCENT "0,2")                                                    ("361,047" ACCENT "0,3")                                                    ("361,041" ACCENT "0,4")                                                    ("361,044" ACCENT "0,6")                                                    ("361,050" ACCENT "0,5")                                                    ("361,055" ACCENT "0,7")                                                    ("361,060" ACCENT "0,13")                                                    ("361,061" ACCENT "0,10")                                                    ("361,062" ACCENT "0,11")                                                    ("361,065" ACCENT "0,12")                                                    ("361,076" ACCENT "0,17")                                                    ("361,077" ACCENT "0,14")                                                    ("361,100" ACCENT "0,15")                                                    ("361,104" ACCENT "0,16")                                                    ("361,114" ACCENT "0,20")                                                    ("361,117" ACCENT "0,24")                                                    ("361,120" ACCENT "0,21")                                                    ("361,121" ACCENT "0,22")                                                    ("361,122" ACCENT "0,25")                                                    ("361,124" ACCENT "0,23")                                                    ("361,134" ACCENT "0,26")                                                    ("361,137" ACCENT "0,32")                                                    ("361,140" ACCENT "0,27")                                                    ("361,141" ACCENT "0,30")                                                    ("361,145" ACCENT "0,31")                                                    ("361,155" ACCENT "0,33")                                                    ("361,160" ACCENT "0,34")                                                    ("361,241" ACCENT "0,204")                                                    ("361,242" ACCENT "0,201")                                                    ("361,243" ACCENT "0,202")                                                    ("361,244" ACCENT "0,206")                                                    ("361,247" ACCENT "0,203")                                                    ("361,250" ACCENT "0,205")                                                    ("361,255" ACCENT "0,207")                                                    ("361,260" ACCENT "0,213")                                                    ("361,261" ACCENT "0,210")                                                    ("361,262" ACCENT "0,211")                                                    ("361,265" ACCENT "0,212")                                                    ("361,276" ACCENT "0,217")                                                    ("361,277" ACCENT "0,214")                                                    ("361,300" ACCENT "0,215")                                                    ("361,304" ACCENT "0,216")                                                    ("361,314" ACCENT "0,220")                                                    ("361,317" ACCENT "0,224")                                                    ("361,320" ACCENT "0,221")                                                    ("361,321" ACCENT "0,222")                                                    ("361,322" ACCENT "0,225")                                                    ("361,324" ACCENT "0,223")                                                    ("361,334" ACCENT "0,226")                                                    ("361,337" ACCENT "0,232")                                                    ("361,340" ACCENT "0,227")                                                    ("361,341" ACCENT "0,230")                                                    ("361,345" ACCENT "0,231")                                                    ("361,355" ACCENT "0,233")                                                    ("361,360" ACCENT "0,234")                                                                                                        (* ;; "NS Greek characters")                                                    ("46,101" SYMBOL "2,101")                                                             (* ; "Alpha")                                                    ("46,102" SYMBOL "2,102")                                                             (* ; "Beta")                                                    ("46,103" SYMBOL 0)                                                             (* ; "--empty--")                                                    ("46,104" SYMBOL "2,107")                                                             (* ; "Gamma")                                                    ("46,105" SYMBOL "2,104")                                                             (* ; "Delta")                                                    ("46,106" SYMBOL "2,105")                                                             (* ; "Epsilon")                                                    ("46,107" SYMBOL 0)                                                             (* ; "Stigma")                                                    ("46,110" SYMBOL 0)                                                             (* ; "Digamma")                                                    ("46,111" SYMBOL "2,132")                                                             (* ; "Zeta")                                                    ("46,112" SYMBOL "2,110")                                                             (* ; "Eta")                                                    ("46,113" SYMBOL "2,121")                                                             (* ; "Theta")                                                    ("46,114" SYMBOL "2,111")                                                             (* ; "Iota")                                                    ("46,115" SYMBOL "2,113")                                                             (* ; "Kappa")                                                    ("46,116" SYMBOL "2,114")                                                             (* ; "Lambda")                                                    ("46,117" SYMBOL "2,115")                                                             (* ; "Mu")                                                    ("46,120" SYMBOL "2,116")                                                             (* ; "Nu")                                                    ("46,121" SYMBOL "2,130")                                                             (* ; "Xi")                                                    ("46,122" SYMBOL "2,117")                                                             (* ; "Omicron")                                                    ("46,123" SYMBOL "2,120")                                                             (* ; "Pi")                                                    ("46,124" SYMBOL 0)                                                             (* ; "Koppa")                                                    ("46,125" SYMBOL "2,122")                                                             (* ; "Rho")                                                    ("46,126" SYMBOL "2,123")                                                             (* ; "Sigma")                                                    ("46,127" SYMBOL 0)                                                             (* ; "--empty--")                                                    ("46,130" SYMBOL "2,124")                                                             (* ; "Tau")                                                    ("46,131" SYMBOL "2,125")                                                             (* ; "Upsilon")                                                    ("46,132" SYMBOL "2,106")                                                             (* ; "Phi")                                                    ("46,133" SYMBOL "2,103")                                                             (* ; "Chi")                                                    ("46,134" SYMBOL "2,131")                                                             (* ; "Psi")                                                    ("46,135" SYMBOL "2,132")                                                             (* ; "Omega")                                                    ("46,141" SYMBOL "2,141")                                                             (* ; "alpha")                                                    ("46,142" SYMBOL "2,142")                                                             (* ; "beta")                                                    ("46,143" SYMBOL 0)                                                             (* ; "(md beta)")                                                    ("46,144" SYMBOL "2,147")                                                             (* ; "gamma")                                                    ("46,145" SYMBOL "2,144")                                                             (* ; "delta")                                                    ("46,146" SYMBOL "2,145")                                                             (* ; "epsilon")                                                    ("46,147" SYMBOL "2,126")                                                             (* ; "stigma")                                                    ("46,150" SYMBOL 0)                                                             (* ; "digamma")                                                    ("46,151" SYMBOL "2,172")                                                             (* ; "zeta")                                                    ("46,152" SYMBOL "2,150")                                                             (* ; "eta")                                                    ("46,153" SYMBOL "2,161")                                                             (* ; "theta")                                                    ("46,154" SYMBOL "2,151")                                                             (* ; "iota")                                                    ("46,155" SYMBOL "2,153")                                                             (* ; "kappa")                                                    ("46,156" SYMBOL "2,154")                                                             (* ; "lambda")                                                    ("46,157" SYMBOL "2,155")                                                             (* ; "mu")                                                    ("46,160" SYMBOL "2,156")                                                             (* ; "nu")                                                    ("46,161" SYMBOL "2,170")                                                             (* ; "xi")                                                    ("46,162" SYMBOL "2,157")                                                             (* ; "omicron")                                                    ("46,163" SYMBOL "2,160")                                                             (* ; "pi")                                                    ("46,164" SYMBOL 0)                                                             (* ; "(koppa)")                                                    ("46,165" SYMBOL "2,162")                                                             (* ; "rho")                                                    ("46,166" SYMBOL "2,163")                                                             (* ; "sigma")                                                    ("46,167" SYMBOL "2,126")                                                             (* ; "(fl sigma)")                                                    ("46,170" SYMBOL "2,164")                                                             (* ; "tau")                                                    ("46,171" SYMBOL "2.165")                                                             (* ; "upsilon")                                                    ("46,172" SYMBOL "2,146")                                                             (* ; "phi")                                                    ("46,173" SYMBOL "2,143")                                                             (* ; "chi")                                                    ("46,174" SYMBOL "2,171")                                                             (* ; "psi")                                                    ("46,175" SYMBOL "2,167")                                                             (* ; "omega")]                    (*POSTSCRIPT-NS-HASH* (\POSTSCRIPT.NSHASH *POSTSCRIPT-NS-TRANSLATIONS*]        (DECLARE%: EVAL@COMPILE DONTCOPY (MACROS \POSTSCRIPT.FRACTION))        (VARS (\POSTSCRIPT.ORIENTATION.MENU (create MENU ITEMS _ '(("Landscape" T                                             "Print this file/document/image in Landscape Orientation"                                                                          )                                                                   ("Portrait" 'NIL                                              "Print this file/document/image in Portrait Orientation"                                                                          ))                                                   TITLE _ "Orientation" CENTERFLG _ T MENUOFFSET _                                                   (create POSITION XCOORD _ -1 YCOORD _ 0)                                                   CHANGEOFFSETFLG _ 'Y))              (\POSTSCRIPT.ORIENTATION.OPTIONS.MENU (create MENU ITEMS _ '(("Ask" 'ASK                                    "Always ask whether to print in Landscape or Portrait Orientation"                                                                                  )                                                                           ("Landscape" T                                                           "Default printing to Landscape Orientation"                                                                                  )                                                                           ("Portrait" 'NIL                                                            "Default printing to Portrait Orientation"                                                                                  ))                                                           TITLE _ "Default Orientation" CENTERFLG _                                                           T))              PS.BITMAPARRAY \POSTSCRIPT.JOB.SETUP SlopeMenuItems WeightMenuItems)        [ADDVARS (BackgroundMenuCommands ("PS Orientation" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE                                                                  (MENU                                                                  \POSTSCRIPT.ORIENTATION.OPTIONS.MENU                                                                        ))                                                                                               "Select the default Orientation for PostScript output"                                                (SUBITEMS ("Ask" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE                                                                        'ASK)                                                                                                    "Always ask whether to print in Landscape or Portrait Orientation"                                                                 )                                                       ("Landscape" '(SETQ                                                                           POSTSCRIPT.PREFER.LANDSCAPE                                                                           T)                                                                                                                        "Default printing to Landscape Orientation"                                                              )                                                       ("Portrait" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE                                                                          NIL)                                                                                                                         "Default printing to Portrait Orientation"                                                              ]        (VARS (BackgroundMenu NIL))        (CONSTANTS (GOLDEN.RATIO 1.618034)               (\PS.SCALE0 100)               (\PS.TEMPARRAYLEN 20))        (INITVARS (POSTSCRIPT.BITMAP.SCALE 1)               (POSTSCRIPT.EOL 'CR)               (POSTSCRIPT.IMAGESIZEFACTOR 1)               (POSTSCRIPT.PREFER.LANDSCAPE NIL)               (POSTSCRIPT.TEXTFILE.LANDSCAPE NIL)               (POSTSCRIPT.DEFAULT.PAGEREGION '(4800 4800 52800 70800))               (POSTSCRIPT.TEXTURE.SCALE 4)               [POSTSCRIPTFONTDIRECTORIES (LIST (COND ((EQ (MACHINETYPE)                                                           'MAIKO)                                                       "{dsk}/USR/LOCAL/LDE/FONTS/POSTSCRIPT/")                                                      (T "{DSK}<LISPFILES>POSTSCRIPT>"]               (\POSTSCRIPT.MAX.WILD.FONTSIZE 72))        [ADDVARS (POSTSCRIPT.FONT.ALIST (HELVETICA . HELVETICA)                        (HELVETICAD . HELVETICA)                        (TIMESROMAN . TIMES)                        (TIMESROMAND . TIMES)                        (COURIER . COURIER)                        (GACHA . COURIER)                        (CLASSIC . NEWCENTURYSCHLBK)                        (MODERN . HELVETICA)                        (CREAM . HELVETICA)                        (TERMINAL . COURIER)                        (LOGO . HELVETICA)                        (TITAN . COURIER))               [PRINTERTYPES ((POSTSCRIPT)                              (CANPRINT (POSTSCRIPT))                              (STATUS TRUE)                              (PROPERTIES NILL)                              (SEND UnixPrint)                              (BITMAPSCALE POSTSCRIPT.BITMAPSCALE)                              (BITMAPFILE (POSTSCRIPT.HARDCOPYW FILE BITMAP SCALEFACTOR REGION                                                  ROTATION TITLE]               [PRINTFILETYPES (POSTSCRIPT (TEST POSTSCRIPTFILEP)                                      (EXTENSION (PS PSC))                                      (CONVERSION (TEXT POSTSCRIPT.TEXT TEDIT POSTSCRIPT.TEDIT]               (IMAGESTREAMTYPES (POSTSCRIPT (OPENSTREAM OPENPOSTSCRIPTSTREAM)                                        (FONTCREATE POSTSCRIPT.FONTCREATE)                                        (FONTSAVAILABLE POSTSCRIPT.FONTSAVAILABLE)                                        (CREATECHARSET NILL]        (INITVARS (POSTSCRIPT.PAGETYPE 'LETTER))        [APPENDVARS (POSTSCRIPT.PAGEREGIONS (LETTER (0 0 8.5 11)                                                   (-0.1 -0.1 8.7 11.2))                           (LEGAL (0 0 8.5 14)                                  (-0.1 -0.1 8.7 14.2))                           (NOTE (0 0 8.5 11)                                 (-0.1 -0.1 8.7 11.2]        (GLOBALVARS DEFAULTPRINTINGHOST POSTSCRIPT.BITMAP.SCALE POSTSCRIPT.EOL POSTSCRIPT.FONT.ALIST               POSTSCRIPT.PREFER.LANDSCAPE POSTSCRIPT.TEXTFILE.LANDSCAPE POSTSCRIPT.TEXTURE.SCALE                POSTSCRIPTFONTDIRECTORIES \POSTSCRIPT.JOB.SETUP \POSTSCRIPT.MAX.WILD.FONTSIZE                \POSTSCRIPT.ORIENTATION.MENU \POSTSCRIPTIMAGEOPS POSTSCRIPT.PAGETYPE                POSTSCRIPT.PAGEREGIONS)        (DECLARE%: DONTEVAL@LOAD DOCOPY (P (POSTSCRIPT.INIT)))        (PROP (FILETYPE MAKEFILE-ENVIRONMENT)              POSTSCRIPTSTREAM)        (DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)                                                                             (NLAML)                                                                             (LAMA                                                                                 POSTSCRIPT.PUTCOMMAND                                                                                   ])(* ;; "PostScript printer support for Medley")(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(RECORD FONTID (FONTIDNAME FONTXFACTOR FONTOBLIQUEFACTOR))(RECORD PSCFONT (FID IL-FONTID FIRSTCHAR LASTCHAR ASCENT DESCENT WIDTHS))(DATATYPE \POSTSCRIPTDATA           ((POSTSCRIPTACCENTED FLAG)                         (* ;                         "T if we're to do NS-to-PS translations on characters in the current font.")           POSTSCRIPTFONT                                    (* ;                                                            "The fontdescriptor of the current font")           POSTSCRIPTX                                       (* ; "The current X")           POSTSCRIPTY                                       (* ; "... and Y")           POSTSCRIPTLEFTMARGIN                              (* ; "The margins")           POSTSCRIPTRIGHTMARGIN POSTSCRIPTBOTTOMMARGIN POSTSCRIPTTOPMARGIN POSTSCRIPTLINESPACING                                                              (* ; "Line to line spacing")           POSTSCRIPTCOLOR                                   (* ;                                            "Color (or grey shade) in effect; 0.0=black, 1.0=white.")           POSTSCRIPTSCALE                                   (* ; "Scale of the stream")           POSTSCRIPTOPERATION                               (* ;                                                           "Default operation (PAINT, REPLACE, ...)")           POSTSCRIPTCLIPPINGREGION                          (* ;                                                   "The current region available to be written into")           POSTSCRIPTPAGENUM                                 (* ; "Current page number")           POSTSCRIPTHEADING                                 (* ; "The heading")           POSTSCRIPTHEADINGFONT                             (* ; "Font for the heading")           POSTSCRIPTSPACEFACTOR                             (* ;                                                  "Expansion factor for spaces (see DSPSPACEFACTOR)")           POSTSCRIPTSPACEWIDTH                              (* ;                                                          "The width of a space in the current font")           POSTSCRIPTLANDSCAPE                               (* ;                                                            "non-NIL for paper in 'landscape' mode")           POSTSCRIPTCHARSTOSHOW                             (* ;                  "non-NIL if the string (PostScript-type string) of chars has already been started")           POSTSCRIPTFONTCHANGEDFLG                          (* ; "Font has changed")           POSTSCRIPTMOVEFLG                                 (* ; "Need to move")           POSTSCRIPTWIDTHS                                  (* ;                                                            "The widths vector of the current font")           POSTSCRIPTTRANSX                                  (* ; "Translation in X")           POSTSCRIPTTRANSY                                  (* ; "... and Y")           POSTSCRIPTPENDINGXFORM                            (* ;                                                   "A userspace to devicespace transform is pending")           POSTSCRIPTPAGEREGION                              (* ; "The whole page")           POSTSCRIPTPAGEBLANK                               (* ; "This page is blank flag")           POSTSCRIPTSCALEHACK                               (* ;                           "For \PS.SCALEHACK since DSPSCALE doesn't change the scale of the stream")           POSTSCRIPTTEMPARRAY                               (* ;                                                      "For converting FIXP to string of digit chars")           POSTSCRIPTXFORMSTACK                              (* ; "The stack of transformations.  DSPPUSHSTATE pushes one onto this, DSPPOPSTATE uses it to reset values.")           POSTSCRIPTROTATION                                (* ;                                                            "Rotation value currently in effect.")           POSTSCRIPTPENDINGROTATION                         (* ;                                                         "Rotation to take effect at next SETXFORM.")           POSTSCRIPTFONTSUSED                               (* ; "List of FONTIDs of the fonts that've been used before. This is used to control the re-encoding of fonts for accented-character rendering.")           )          POSTSCRIPTX _ 0 POSTSCRIPTY _ 0 POSTSCRIPTTRANSX _ 0 POSTSCRIPTTRANSY _ 0           POSTSCRIPTSPACEFACTOR _ 1 POSTSCRIPTPAGENUM _ 0 POSTSCRIPTSCALEHACK _ 1 POSTSCRIPTTEMPARRAY          _ (ARRAY \PS.TEMPARRAYLEN 'BYTE 0 0)          POSTSCRIPTROTATION _ 0 POSTSCRIPTCOLOR _ 0.0)(RECORD POSTSCRIPTXFORM (                             (* ;; "Holds the transformation state as saved by DSPPUSHSTATE.  Used by DSPPOPSTATE to restore the tranformation state.")                             PSXCLIP                         (* ; "Clipping region")                             PSXPAGE                         (* ; "Page region")                             PSXX                            (* ; "X position?")                             PSXY                            (* ; "Y position?")                             PSXLEFT                         (* ; "Left margin")                             PSXRIGHT                        (* ; "Right margin")                             PSXTOP                          (* ; "Top margin")                             PSXBOTTOM                       (* ; "Bottom Margin")                             PSXTRANX                        (* ; "X-translation in effect")                             PSXTRANY                        (* ; "Y-translation in effect")                             PSXLAND                         (* ; "Landscape?")                             PSXXFORMPEND                    (* ; "Are there transforms pending?  ")                             )))(/DECLAREDATATYPE '\POSTSCRIPTDATA       '(FLAG POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              )       '((\POSTSCRIPTDATA 0 (FLAGBITS . 0))         (\POSTSCRIPTDATA 0 POINTER)         (\POSTSCRIPTDATA 2 POINTER)         (\POSTSCRIPTDATA 4 POINTER)         (\POSTSCRIPTDATA 6 POINTER)         (\POSTSCRIPTDATA 8 POINTER)         (\POSTSCRIPTDATA 10 POINTER)         (\POSTSCRIPTDATA 12 POINTER)         (\POSTSCRIPTDATA 14 POINTER)         (\POSTSCRIPTDATA 16 POINTER)         (\POSTSCRIPTDATA 18 POINTER)         (\POSTSCRIPTDATA 20 POINTER)         (\POSTSCRIPTDATA 22 POINTER)         (\POSTSCRIPTDATA 24 POINTER)         (\POSTSCRIPTDATA 26 POINTER)         (\POSTSCRIPTDATA 28 POINTER)         (\POSTSCRIPTDATA 30 POINTER)         (\POSTSCRIPTDATA 32 POINTER)         (\POSTSCRIPTDATA 34 POINTER)         (\POSTSCRIPTDATA 36 POINTER)         (\POSTSCRIPTDATA 38 POINTER)         (\POSTSCRIPTDATA 40 POINTER)         (\POSTSCRIPTDATA 42 POINTER)         (\POSTSCRIPTDATA 44 POINTER)         (\POSTSCRIPTDATA 46 POINTER)         (\POSTSCRIPTDATA 48 POINTER)         (\POSTSCRIPTDATA 50 POINTER)         (\POSTSCRIPTDATA 52 POINTER)         (\POSTSCRIPTDATA 54 POINTER)         (\POSTSCRIPTDATA 56 POINTER)         (\POSTSCRIPTDATA 58 POINTER)         (\POSTSCRIPTDATA 60 POINTER)         (\POSTSCRIPTDATA 62 POINTER)         (\POSTSCRIPTDATA 64 POINTER))       '66))(/DECLAREDATATYPE '\POSTSCRIPTDATA       '(FLAG POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER              )       '((\POSTSCRIPTDATA 0 (FLAGBITS . 0))         (\POSTSCRIPTDATA 0 POINTER)         (\POSTSCRIPTDATA 2 POINTER)         (\POSTSCRIPTDATA 4 POINTER)         (\POSTSCRIPTDATA 6 POINTER)         (\POSTSCRIPTDATA 8 POINTER)         (\POSTSCRIPTDATA 10 POINTER)         (\POSTSCRIPTDATA 12 POINTER)         (\POSTSCRIPTDATA 14 POINTER)         (\POSTSCRIPTDATA 16 POINTER)         (\POSTSCRIPTDATA 18 POINTER)         (\POSTSCRIPTDATA 20 POINTER)         (\POSTSCRIPTDATA 22 POINTER)         (\POSTSCRIPTDATA 24 POINTER)         (\POSTSCRIPTDATA 26 POINTER)         (\POSTSCRIPTDATA 28 POINTER)         (\POSTSCRIPTDATA 30 POINTER)         (\POSTSCRIPTDATA 32 POINTER)         (\POSTSCRIPTDATA 34 POINTER)         (\POSTSCRIPTDATA 36 POINTER)         (\POSTSCRIPTDATA 38 POINTER)         (\POSTSCRIPTDATA 40 POINTER)         (\POSTSCRIPTDATA 42 POINTER)         (\POSTSCRIPTDATA 44 POINTER)         (\POSTSCRIPTDATA 46 POINTER)         (\POSTSCRIPTDATA 48 POINTER)         (\POSTSCRIPTDATA 50 POINTER)         (\POSTSCRIPTDATA 52 POINTER)         (\POSTSCRIPTDATA 54 POINTER)         (\POSTSCRIPTDATA 56 POINTER)         (\POSTSCRIPTDATA 58 POINTER)         (\POSTSCRIPTDATA 60 POINTER)         (\POSTSCRIPTDATA 62 POINTER)         (\POSTSCRIPTDATA 64 POINTER))       '66)(DEFINEQ(POSTSCRIPT.INIT  [LAMBDA NIL                                            (* ; "Edited 17-Sep-92 17:33 by jds")    (DECLARE (GLOBALVARS \POSTSCRIPT.CHARTYPE))    [MAPC     [CL:REMOVE-DUPLICATES (NCONC (for FD in FONTDEFS                                     join (for FP in (CDR (ASSOC 'FONTPROFILE                                                                             (CDR FD)))                                                 collect (CAR FP)))                                  '(FONT7 FONT6 FONT5 FONT4 FONT3 FONT2 FONT1 BOLDFONT LITTLEFONT                                           BIGFONT PRETTYCOMFONT COMMENTFONT USERFONT SYSTEMFONT                                           CLISPFONT LAMBDAFONT CHANGEFONT DEFAULTFONT]     (FUNCTION (LAMBDA (CLASS)                 (LET                  (COPYFD OLDPSCFD)                  (if (BOUNDP CLASS)                      then                      (SETQ CLASS (EVALV CLASS))                      (if (TYPEP CLASS 'FONTCLASS)                          then (SETQ COPYFD (OR (fetch (FONTCLASS PRESSFD) of CLASS)                                                    (fetch (FONTCLASS INTERPRESSFD) of CLASS)                                                    (fetch (FONTCLASS DISPLAYFD) of CLASS)))                                (if (SETQ OLDPSCFD (ASSOC 'POSTSCRIPT (fetch (FONTCLASS                                                                                      OTHERFDS)                                                                             of CLASS)))                                    then [if (NOT (CDR OLDPSCFD))                                                 then (RPLACD OLDPSCFD (if (LISTP COPYFD)                                                                               then COPYFD                                                                             else (FONTUNPARSE                                                                                       COPYFD]                                  else (push (fetch (FONTCLASS OTHERFDS) of CLASS)                                                  (CONS 'POSTSCRIPT (if (LISTP COPYFD)                                                                        then COPYFD                                                                      else (FONTUNPARSE COPYFD]    (SETQ \POSTSCRIPT.CHARTYPE (CL:MAKE-ARRAY 256 :INITIAL-ELEMENT T))    (* ;; "\POSTSCRIPT.OUTCHARFN uses this array to quickly determine whether a character needs any special processing -- T means yes")    (for x from (CHARCODE SP) to 126 unless (FMEMB x (CHARCODE (%( %) \)))       do (CL:SETF (CL:AREF \POSTSCRIPT.CHARTYPE x)                     NIL))    (SETQ \POSTSCRIPTIMAGEOPS (create IMAGEOPS                                     IMAGETYPE _ 'POSTSCRIPT                                     IMCLOSEFN _ (FUNCTION CLOSEPOSTSCRIPTSTREAM)                                     IMXPOSITION _ (FUNCTION \DSPXPOSITION.PSC)                                     IMYPOSITION _ (FUNCTION \DSPYPOSITION.PSC)                                     IMMOVETO _ (FUNCTION \MOVETO.PSC)                                     IMFONT _ (FUNCTION \DSPFONT.PSC)                                     IMLEFTMARGIN _ (FUNCTION \DSPLEFTMARGIN.PSC)                                     IMRIGHTMARGIN _ (FUNCTION \DSPRIGHTMARGIN.PSC)                                     IMLINEFEED _ (FUNCTION \DSPLINEFEED.PSC)                                     IMDRAWLINE _ (FUNCTION \DRAWLINE.PSC)                                     IMDRAWCURVE _ (FUNCTION \DRAWCURVE.PSC)                                     IMDRAWCIRCLE _ (FUNCTION \DRAWCIRCLE.PSC)                                     IMDRAWELLIPSE _ (FUNCTION \DRAWELLIPSE.PSC)                                     IMFILLCIRCLE _ (FUNCTION \FILLCIRCLE.PSC)                                     IMBLTSHADE _ (FUNCTION \BLTSHADE.PSC)                                     IMBITBLT _ (FUNCTION \BITBLT.PSC)                                     IMSCALEDBITBLT _ (FUNCTION \SCALEDBITBLT.PSC)                                     IMNEWPAGE _ (FUNCTION \NEWPAGE.PSC)                                     IMSCALE _ (FUNCTION \DSPSCALE.PSC)                                     IMSCALE2 _ (FUNCTION \DSPSCALE2.PSC)                                     IMCOLOR _ (FUNCTION \DSPCOLOR.PSC)                                     IMTERPRI _ (FUNCTION \TERPRI.PSC)                                     IMTOPMARGIN _ (FUNCTION \DSPTOPMARGIN.PSC)                                     IMBOTTOMMARGIN _ (FUNCTION \DSPBOTTOMMARGIN.PSC)                                     IMSPACEFACTOR _ (FUNCTION \DSPSPACEFACTOR.PSC)                                     IMFONTCREATE _ 'POSTSCRIPT                                     IMCLIPPINGREGION _ (FUNCTION \DSPCLIPPINGREGION.PSC)                                     IMRESET _ (FUNCTION \DSPRESET.PSC)                                     IMDRAWPOLYGON _ (FUNCTION \DRAWPOLYGON.PSC)                                     IMFILLPOLYGON _ (FUNCTION \FILLPOLYGON.PSC)                                     IMSTRINGWIDTH _ (FUNCTION \STRINGWIDTH.PSC)                                     IMCHARWIDTH _ (FUNCTION \CHARWIDTH.PSC)                                     IMDRAWARC _ (FUNCTION \DRAWARC.PSC)                                     IMROTATE _ (FUNCTION \DSPROTATE.PSC)                                     IMTRANSLATE _ (FUNCTION \DSPTRANSLATE.PSC)                                     IMDRAWPOINT _ (FUNCTION \DRAWPOINT.PSC)                                     IMPUSHSTATE _ (FUNCTION \DSPPUSHSTATE.PSC)                                     IMPOPSTATE _ (FUNCTION \DSPPOPSTATE.PSC]))(* ;; "Font-reading code")(DEFINEQ(PSCFONT.READFONT  [LAMBDA (FONTFILENAME)                                 (* ; "Edited  1-Sep-89 10:55 by jds")    (* ;; "Read one of Matt Heffron's .PSC files, to get postscript font metrics.")    (LET ((PF (create PSCFONT))          [S (OPENSTREAM FONTFILENAME 'INPUT NIL '((SEQUENTIAL T]          FID W)         [replace (PSCFONT FID) of PF with (SETQ FID (READ S (FIND-READTABLE "INTERLISP"]         (* ;; "Read until we hit a 255 byte, marking the end of the font-id section.")         (CL:DO NIL                ((EQ (BIN S)                     255))             (* ;; "Body of the loop is empty, the test does all of the work")             )         (replace (PSCFONT IL-FONTID) of PF with (CAR FID))         (replace (PSCFONT FIRSTCHAR) of PF with (\WIN S))         (replace (PSCFONT LASTCHAR) of PF with (\WIN S))         (replace (PSCFONT ASCENT) of PF with (\WIN S))         (replace (PSCFONT DESCENT) of PF with (\WIN S))         (replace (PSCFONT WIDTHS) of PF with (SETQ W (ARRAY 256 'SMALLPOSP 0 0)))         (for C from 0 to 255 do (SETA W C (\WIN S)))         (CLOSEF S)         (* ;;      "PATCH JDS 9/1/89:  The afm font reader made fonts too tall.  This should fix things pro tem.")         (replace (PSCFONT ASCENT) of PF with (- 1000 (fetch (PSCFONT DESCENT)                                                                     OF PF)))         PF])(PSCFONT.SPELLFILE  [LAMBDA (FAMILY SIZE FACE ROTATION DEVICE)             (* ; "Edited  5-Oct-92 15:23 by jds")    (* ;;   "Find the font file for a postscript font.  Does the display-name conversion as well, for DOS.")    (\FINDFONTFILE (OR (CDR (FASSOC FAMILY POSTSCRIPT.FONT.ALIST))                       FAMILY)           SIZE FACE 0 DEVICE 0 POSTSCRIPTFONTDIRECTORIES '(PSCFONT PF PSC])(PSCFONT.WRITEFONT  [LAMBDA (FONTFILENAME PF)                       (* ; "Edited 15-Oct-87 11:12 by Matt Heffron")    (LET ([S (OPENSTREAM FONTFILENAME 'OUTPUT NIL '((TYPE BINARY)                                                    (SEQUENTIAL T]          (W (fetch (PSCFONT WIDTHS) of PF))          (*READTABLE* (FIND-READTABLE "INTERLISP")))         (PRIN3 (fetch (PSCFONT FID) of PF)                S)         (BOUT S 0)         (BOUT S 255)         (\WOUT S (fetch (PSCFONT FIRSTCHAR) of PF))         (\WOUT S (fetch (PSCFONT LASTCHAR) of PF))         (\WOUT S (fetch (PSCFONT ASCENT) of PF))         (\WOUT S (fetch (PSCFONT DESCENT) of PF))         (for C from 0 to 255 do (\WOUT S (ELT W C)))         (CLOSEF S)         FONTFILENAME])(READ-AFM-FILE  [LAMBDA (FILE)                                         (* ; "Edited 13-Jan-93 17:31 by jds")    (LET ((IFILE (OPENSTREAM FILE 'INPUT))          (PSCFONT (create PSCFONT))          (FCHAR 1000)          (LCHAR 0)          (W (ARRAY 256 'SMALLPOSP 0 0))          TOKEN WEIGHT SLOPE CMCOUNT FBBOX)         (with PSCFONT PSCFONT (repeatuntil (STRING-EQUAL "FontName" (RSTRING IFILE))                                      do (READCCODE IFILE))                (repeatwhile (STRING-EQUAL "" (SETQ TOKEN (RSTRING IFILE)))                   do (READCCODE IFILE))                [COND                   ((NOT (AND (BOUNDP 'WeightMenu)                              (type? MENU WeightMenu)))                    (SETQ WeightMenu (create MENU                                            ITEMS _ WeightMenuItems                                            MENUFONT _ (FONTCREATE 'HELVETICA 12]                [COND                   ((NOT (AND (BOUNDP 'SlopeMenu)                              (type? MENU SlopeMenu)))                    (SETQ SlopeMenu (create MENU                                           ITEMS _ SlopeMenuItems                                           MENUFONT _ (FONTCREATE 'HELVETICA 12]                (printout T T "Font WEIGHT for " PSCFONT ": " (SETQ WEIGHT (MENU WeightMenu))                       T)                (printout T T "Font SLOPE for " PSCFONT ": " (SETQ SLOPE (MENU SlopeMenu))                       T)                (SETQ FID (LIST TOKEN WEIGHT SLOPE 'REGULAR))                [SETQ IL-FONTID (COND                                   ((AND (EQ SLOPE 'REGULAR)                                         (EQ WEIGHT 'MEDIUM))                                    TOKEN)                                   (T (POSTSCRIPT.GETFONTID FID WEIGHT SLOPE 'REGULAR]                [repeatuntil (STRING-EQUAL "StartCharMetrics" TOKEN)                   do (SETQ TOKEN (RSTRING IFILE))                         (COND                            ((STRING-EQUAL "FontBBox" TOKEN)                             (SETQ FBBOX (LIST (READ IFILE)                                               (READ IFILE)                                               (READ IFILE)                                               (READ IFILE)))                             (* ;; "The Ascender and Descender properties from the AFM file are currently ignored, and the values from the FontBBox are used.")                             (SETQ DESCENT (IABS (CADR FBBOX)))                             (SETQ ASCENT (CADDDR FBBOX)))                            (T (READCCODE IFILE]                (SETQ CMCOUNT (RATOM IFILE))                (repeatuntil (EQ (CHARCODE EOL)                                     (READCCODE IFILE)) do)                (SETQ WIDTHS W)                (for CC from 1 to CMCOUNT                   do (LET (CCODE)                               (repeatuntil (EQ 'C (RATOM IFILE)) do)                               (SETQ CCODE (READ IFILE))                               [COND                                  ((CL:PLUSP CCODE)                                   (COND                                      ((ILESSP CCODE FCHAR)                                       (SETQ FCHAR CCODE)))                                   (COND                                      ((IGREATERP CCODE LCHAR)                                       (SETQ LCHAR CCODE)))                                   (RATOMS 'W IFILE)                                   (SETA W CCODE (READ IFILE]                               (repeatuntil (EQ (CHARCODE EOL)                                                    (READCCODE IFILE)) do)))                (SETQ FIRSTCHAR FCHAR)                (SETQ LASTCHAR LCHAR))         (CLOSEF IFILE)         PSCFONT])(POSTSCRIPT.GETFONTID  [LAMBDA (FID WEIGHT SLOPE EXPANSION)        (* ;                                                 "Edited 20-Nov-92 15:04 by sybalsky:mv:envos")    (LET (FONTID)         (SETQ FONTID (create FONTID                             FONTIDNAME _ (CAR FID)                             FONTXFACTOR _ 1.0                             FONTOBLIQUEFACTOR _ 0.0))         [if (AND (NEQ (CADDR FID)                           SLOPE)                      (EQ SLOPE 'ITALIC))             then (replace (FONTID FONTOBLIQUEFACTOR) of FONTID                         with (CONSTANT (TAN 7.0]         (if (AND (NEQ (CADR FID)                           WEIGHT)                      (EQ WEIGHT 'BOLD))             then                                        (* ; "Fake bold by slight expansion.")                   (replace (FONTID FONTXFACTOR) of FONTID with 1.1))         [if (NEQ EXPANSION 'REGULAR)             then (replace (FONTID FONTXFACTOR) of FONTID                         with (TIMES (fetch (FONTID FONTXFACTOR) of FONTID)                                         (if (EQ EXPANSION 'COMPRESSED)                                             then (CONSTANT (QUOTIENT 1.0 GOLDEN.RATIO))                                           else GOLDEN.RATIO]         FONTID])(POSTSCRIPT.FONTCREATE  [LAMBDA (FAMILY SIZE FACE ROTATION DEVICE)             (* ; "Edited 14-Jan-93 17:41 by jds")    (LET (UNITFONT FULLNAME SCALEFONTP PSCFD ASCENT DESCENT FIXPWIDTHS CHARSETINFO0 CHATSETINFO42                 CHARSETINFO357 CHARSETINFO361 WIDTHS42 WIDTHS357 WIDTHS361 WIDTHSBLOCK FD FACECHANGED                (WEIGHT (CAR FACE))                (SLOPE (CADR FACE))                (EXPANSION (CADDR FACE)))         (* ;;   "Ignore rotations, it is **MUCH** easier to rotate the Postscript stream user space coordinates.")         [COND            [(EQ SIZE 1)             (* ;; "Since a 1 point font is rediculously small, and it is the standard size for Postscript font info, a 1 point font is presumed to be the unit size Postscript font info")             (COND                ((SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE FACE ROTATION DEVICE))                 (SETQ FACECHANGED NIL))                ((AND (NEQ EXPANSION 'REGULAR)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST WEIGHT SLOPE                                                                              'REGULAR)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (EQ SLOPE 'ITALIC)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST WEIGHT 'REGULAR                                                                               EXPANSION)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (NEQ EXPANSION 'REGULAR)                      (EQ SLOPE 'ITALIC)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST WEIGHT 'REGULAR                                                                              'REGULAR)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (NEQ WEIGHT 'MEDIUM)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST 'MEDIUM SLOPE EXPANSION                                                                              )                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (NEQ WEIGHT 'MEDIUM)                      (NEQ EXPANSION 'REGULAR)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST 'MEDIUM SLOPE                                                                              'REGULAR)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (NEQ WEIGHT 'MEDIUM)                      (EQ SLOPE 'ITALIC)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST 'MEDIUM 'REGULAR                                                                               EXPANSION)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T))                ((AND (NEQ WEIGHT 'MEDIUM)                      (NEQ EXPANSION 'REGULAR)                      (EQ SLOPE 'ITALIC)                      (SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE (LIST 'MEDIUM 'REGULAR                                                                              'REGULAR)                                            ROTATION DEVICE)))                 (SETQ FACECHANGED T)))             (COND                (FULLNAME (SETQ PSCFD (PSCFONT.READFONT FULLNAME))                       (SETQ ASCENT (FIXR (TIMES (fetch (PSCFONT ASCENT) of PSCFD)                                                 0.1)))                       (SETQ DESCENT (FIXR (TIMES (fetch (PSCFONT DESCENT) of PSCFD)                                                  0.1)))                       (COND                          (FACECHANGED (replace (PSCFONT IL-FONTID) of PSCFD                                          with (POSTSCRIPT.GETFONTID (fetch (PSCFONT                                                                                         FID)                                                                                of PSCFD)                                                          WEIGHT SLOPE EXPANSION]            ((SETQ UNITFONT (FONTCREATE FAMILY 1 FACE ROTATION DEVICE T))             (SETQ PSCFD (LISTGET (fetch (FONTDESCRIPTOR OTHERDEVICEFONTPROPS) of UNITFONT)                                'PSCFONT))             (* ;; "Scale the ASCENT and DESCENT")             (SETQ ASCENT (FIXR (TIMES SIZE (fetch (PSCFONT ASCENT) of PSCFD)                                       0.1)))             (SETQ DESCENT (FIXR (TIMES SIZE (fetch (PSCFONT DESCENT) of PSCFD)                                        0.1)))             (SETQ SCALEFONTP T))            (T                (* ;; "Here for fonts that only come in specific sizes.  Their info is not scaled like built-in Postscript fonts, it is already correct for this pointsize.")               (COND                  ((SETQ FULLNAME (PSCFONT.SPELLFILE FAMILY SIZE FACE ROTATION DEVICE))                   (SETQ PSCFD (PSCFONT.READFONT FULLNAME))                   (SETQ ASCENT (fetch (PSCFONT ASCENT) of PSCFD))                   (SETQ DESCENT (fetch (PSCFONT DESCENT) of PSCFD))                   (SETQ SCALEFONTP NIL]         (COND            (PSCFD                    (* ;;                 "Set up the Charset descriptions and Widths vectors for the common character sets:")                   (SETQ FIXPWIDTHS (fetch (PSCFONT WIDTHS) of PSCFD))                   (SETQ CHARSETINFO0 (create CHARSETINFO))                   (SETQ CHARSETINFO357 (create CHARSETINFO))                   (SETQ CHARSETINFO42 (create CHARSETINFO))                   (SETQ CHARSETINFO361 (create CHARSETINFO))                   (SETQ WIDTHSBLOCK (fetch (CHARSETINFO WIDTHS) of CHARSETINFO0))                   (SETQ FD                    (create FONTDESCRIPTOR                           OTHERDEVICEFONTPROPS _ (LIST 'PSCFONT PSCFD)                           FONTSCALE _ 100                           FONTDEVICE _ DEVICE                           FONTFAMILY _ FAMILY                           FONTSIZE _ SIZE                           FONTFACE _ FACE                           ROTATION _ 0                           \SFHeight _ (IPLUS ASCENT DESCENT)                           \SFAscent _ ASCENT                           \SFDescent _ DESCENT))                   (replace (CHARSETINFO IMAGEWIDTHS) of CHARSETINFO0 with WIDTHSBLOCK)                   (replace (CHARSETINFO CHARSETASCENT) of CHARSETINFO0 with ASCENT)                   (replace (CHARSETINFO CHARSETDESCENT) of CHARSETINFO0 with DESCENT)                   (replace (CHARSETINFO IMAGEWIDTHS) of CHARSETINFO42                      with (SETQ WIDTHS42 (fetch (CHARSETINFO WIDTHS) of CHARSETINFO42)))                   (replace (CHARSETINFO IMAGEWIDTHS) of CHARSETINFO357                      with (SETQ WIDTHS357 (fetch (CHARSETINFO WIDTHS) of CHARSETINFO357)                                ))                   (replace (CHARSETINFO IMAGEWIDTHS) of CHARSETINFO361                      with (SETQ WIDTHS361 (fetch (CHARSETINFO WIDTHS) of CHARSETINFO361)                                ))                   (replace (CHARSETINFO CHARSETASCENT) of CHARSETINFO42 with ASCENT)                   (replace (CHARSETINFO CHARSETASCENT) of CHARSETINFO357 with ASCENT)                   (replace (CHARSETINFO CHARSETASCENT) of CHARSETINFO361 with ASCENT)                   (replace (CHARSETINFO CHARSETDESCENT) of CHARSETINFO42 with DESCENT)                   (replace (CHARSETINFO CHARSETDESCENT) of CHARSETINFO357 with DESCENT)                   (replace (CHARSETINFO CHARSETDESCENT) of CHARSETINFO361 with DESCENT)                   (\SETCHARSETINFO (fetch FONTCHARSETVECTOR of FD)                          0 CHARSETINFO0)                   (\SETCHARSETINFO (fetch FONTCHARSETVECTOR of FD)                          239 CHARSETINFO357)                   (\SETCHARSETINFO (fetch FONTCHARSETVECTOR of FD)                          241 CHARSETINFO361)                   (\SETCHARSETINFO (fetch FONTCHARSETVECTOR of FD)                          34 CHARSETINFO42)                   [COND                      [SCALEFONTP (for CH from 0 to 255                                     do (\FSETWIDTH WIDTHSBLOCK CH (FIXR (TIMES SIZE                                                                                    (ELT FIXPWIDTHS                                                                                          CH)                                                                                    0.1]                      (T (for CH from 0 to 255 do (\FSETWIDTH WIDTHSBLOCK CH                                                                         (ELT FIXPWIDTHS CH]                   [LET [(TMP (COND                                 (FULLNAME (\FONTINFOFROMFILENAME FULLNAME DEVICE))                                 (UNITFONT (fetch FONTDEVICESPEC of UNITFONT]                        (* ;; "If face got coerced (possibly in recursive call for unit font) then set FONTDEVICESPEC to describe what we really got")                        (COND                           ((AND TMP (NEQ FAMILY (CAR TMP)))                            (replace FONTDEVICESPEC of FD with (LIST (CAR TMP)                                                                                 SIZE                                                                                 (COPY FACE)                                                                                 0 DEVICE]                   (* ;; "Fill in character widths for known CS 357NS characters with PSC equivalents in CS0:  Bullet, M-dash, N-dash, dagger, and double-dagger, respectiely.")                   (for NSCHAR in '(36 37 48 49 65 102) as PSCCHAR                      in '(183 208 177 178 189 179) do (\FSETWIDTH WIDTHS357 NSCHAR                                                                      (ELT FIXPWIDTHS PSCCHAR)))                   [LET* [(SYMBOLFILE (PSCFONT.SPELLFILE 'SYMBOL 1 '(MEDIUM REGULAR REGULAR)                                             ROTATION DEVICE))                          (SYMBOLPS (AND SYMBOLFILE (PSCFONT.READFONT SYMBOLFILE)))                          [SYMWIDTHS (AND SYMBOLPS (SETQ FIXPWIDTHS (fetch (PSCFONT WIDTHS)                                                                       of SYMBOLPS]                          (DINGFILE (PSCFONT.SPELLFILE 'ZAPFDINGBATS 1 '(MEDIUM REGULAR REGULAR)                                           ROTATION DEVICE))                          (DINGPS (AND DINGFILE (PSCFONT.READFONT DINGFILE)))                          (DINGWIDTHS (AND DINGPS (SETQ FIXPWIDTHS (fetch (PSCFONT WIDTHS)                                                                      of DINGPS]                         (* ;;                        "Fill in the widths of characters that are really in the SYMBOL font.")                         [COND                            (SYMWIDTHS [for NSCHAR                                          in '(72 73 56 78 180 181) as SYMCHAR                                          in '(202 205 205 219 36 34)                                          do (\FSETWIDTH WIDTHS357 NSCHAR                                                        (FIXR (TIMES SIZE (ELT SYMWIDTHS SYMCHAR)                                                                     0.1]                                   (for NSCHAR                                      in (CHARCODE ("0,254" "0,255" "0,256" "0,257" "0,260"                                                               "0,261" "0,264" "0,270" "0,322" "0,323"                                                              "0,324")) as SYMCHAR                                      in (CHARCODE ("0,254" "0,255" "0,256" "0,257" "0,260"                                                               "0,261" "0,264" "0,270" "0,342" "0,343"                                                              "0,344"))                                      do (\FSETWIDTH WIDTHSBLOCK NSCHAR                                                    (FIXR (TIMES SIZE (ELT SYMWIDTHS SYMCHAR)                                                                 0.1]                         (* ;; "Fill in the widths of characters that we're faking by taking them from Zapf Dingbats (e.g. ballot box)")                         (COND                            (DINGWIDTHS [for NSCHAR in '(34) as DINGCHAR                                           in (CHARCODE ("0,161"))                                           do (\FSETWIDTH WIDTHS42 NSCHAR                                                         (FIXR (TIMES SIZE (ELT DINGWIDTHS DINGCHAR)                                                                      0.1]                                   (for NSCHAR in '(96) as DINGCHAR                                      in (CHARCODE ("0,161"))                                      do (\FSETWIDTH WIDTHS357 NSCHAR                                                    (FIXR (TIMES SIZE (ELT DINGWIDTHS DINGCHAR)                                                                 0.1]                   [for NSCHAR in (CHARCODE ("0,274" "0,275" "0,276" "0,277" "0,344" "0,345"                                                           "0,346" "0,347"))                      do                             (* ;; "Fractions in CS 0")                            (\FSETWIDTH WIDTHSBLOCK NSCHAR (IPLUS (\FGETWIDTH WIDTHSBLOCK 164)                                                                  (FIXR (FTIMES 1.3                                                                               (\FGETWIDTH                                                                                WIDTHSBLOCK                                                                                (CHARCODE 1]                   [for NSCHAR in (CHARCODE ("0,375" "0,376"))                      do                             (* ;; "Fractions in CS 357 -- 1/3 & 2/3.")                            (\FSETWIDTH WIDTHS357 NSCHAR (IPLUS (\FGETWIDTH WIDTHSBLOCK 164)                                                                (FIXR (FTIMES 1.3 (\FGETWIDTH                                                                                   WIDTHSBLOCK                                                                                   (CHARCODE 1]                   (* ;;         "Fill in the widths of accented characters, using the base character's width as the width.")                   (for NSCHAR                      in (CHARCODE ("361,042" "361,043" "361,047" "361,041" "361,050" "361,044"                                               "361,055" "361,061" "361,062" "361,065" "361,060"                                               "361,077" "361,100" "361,104" "361,076" "361,114"                                               "361,120" "361,121" "361,124" "361,117" "361,122"                                               "361,134" "361,140" "361,141" "361,145" "361,137"                                               "361,155" "361,160" "361,242" "361,243" "361,247"                                               "361,241" "361,250" "361,244" "361,255" "361,261"                                               "361,262" "361,265" "361,260" "361,277" "361,300"                                               "361,304" "361,276" "361,314" "361,320" "361,321"                                               "361,324" "361,317" "361,322" "361,334" "361,340"                                               "361,341" "361,345" "361,337" "361,355" "361,360"))                      as BASECHAR                      in (CHARCODE (A A A A A A C E E E E I I I I N O O O O O S U U U U Y Z a a a                                          a a a c e e e e i i i i n o o o o o s u u u u y z))                      do                             (* ;; "Fractions in CS 357 -- 1/3 & 2/3.")                            (\FSETWIDTH WIDTHS361 (\CHAR8CODE NSCHAR)                                   (\FGETWIDTH WIDTHSBLOCK BASECHAR)))                   FD)            (T NIL])(POSTSCRIPT.FONTSAVAILABLE  [LAMBDA (FAMILY SIZE FACE ROTATION DEVICE)      (* ; "Edited 12-Jan-88 13:04 by Matt Heffron")    (* ;; "the filtering code was borrowed from Richard Burton's \SEARCHINTERPRESSFONTS.  Note that without it [HELVETICA * (MEDIUM REGULAR REGULAR)]  would pick up [HELVETICA-NARROW * (MEDIUM REGULAR REGULAR)] as well.")    (LET     ((PATTERN (\FONTFILENAME (OR (CDR (ASSOC FAMILY POSTSCRIPT.FONT.ALIST))                                  FAMILY)                      SIZE FACE 'PSCFONT))      [INVERSE.ALIST (for PAIR in POSTSCRIPT.FONT.ALIST collect (CONS (CDR PAIR)                                                                                  (CAR PAIR]      FONTSAVAILABLE)     (SETQ FONTSAVAILABLE      (for FD in [for DIRECTORY in POSTSCRIPTFONTDIRECTORIES                            join (for FILE in (DIRECTORY (CONCAT DIRECTORY PATTERN))                                        collect (LET* ((RAWFD (\FONTINFOFROMFILENAME FILE DEVICE)                                                                  )                                                           (RAWNAME (CAR RAWFD)))                                                          (RPLACA RAWFD                                                                 (OR (CDR (ASSOC RAWNAME                                                                                  INVERSE.ALIST))                                                                     RAWNAME]         when (AND (OR (EQ FAMILY '*)                           (EQ FAMILY (CAR FD)))                       (OR (EQ SIZE '*)                           (EQ SIZE (CADR FD))                           (EQ (CADR FD)                               1))                       (OR (EQ FACE '*)                           (EQUAL FACE (CADDR FD))                           (EQUAL [CDR (ASSOC FACE '((MRR MEDIUM REGULAR REGULAR)                                                     (STANDARD MEDIUM REGULAR REGULAR)                                                     (MIR MEDIUM ITALIC REGULAR)                                                     (ITALIC MEDIUM ITALIC REGULAR)                                                     (BRR BOLD REGULAR REGULAR)                                                     (BOLD BOLD REGULAR REGULAR)                                                     (BIR BOLD ITALIC REGULAR)                                                     (BOLDITALIC BOLD ITALIC REGULAR]                                  (CADDR FD)))                       (NOT (MEMBER FD $$VAL))) collect FD))     (if (EQ SIZE '*)         then(* ;;; "If SIZE was wildcarded, then provide list of pointsizes for Postscript scaled fonts (those with a 1 point descriptor file)")         (for FD in FONTSAVAILABLE            join (if (EQ 1 (CADR FD))                         then (CONS FD (for NF                                              in (for S from 2 to                                                                         \POSTSCRIPT.MAX.WILD.FONTSIZE                                                        collect (LET ((NFD (COPY FD)))                                                                         (RPLACA (CDR NFD)                                                                                S)                                                                         NFD))                                              unless (MEMBER NF FONTSAVAILABLE) collect                                                                                    NF))                       else (LIST FD)))       else FONTSAVAILABLE]))(DEFINEQ(OPENPOSTSCRIPTSTREAM  [LAMBDA (FILE OPTIONS)                                 (* ; "Edited 23-Dec-92 01:17 by jds")    (LET ([FP (OPENSTREAM FILE 'OUTPUT NIL `((EOL ,POSTSCRIPT.EOL)                                             (TYPE POSTSCRIPT)                                             (SEQUENTIAL T]          (IMAGEDATA (create \POSTSCRIPTDATA))          PAPER IMAGESIZEFACTOR CLIP REG)         (replace (STREAM OUTCHARFN) of FP with '\FILEOUTCHARFN)         (replace (STREAM IMAGEDATA) of FP with IMAGEDATA)         (replace (STREAM IMAGEOPS) of FP with \POSTSCRIPTIMAGEOPS)         (printout FP "%%!PS-Adobe-2.0" T "%%%%Title: " (MKSTRING (OR (LISTGET OPTIONS                                                                              'DOCUMENT.NAME)                                                                      FILE))                T                 "%%%%Creator: PostScript ImageStream Driver Copyright (C) 1988-1992 Venue and others"                T "%%%%CreationDate: " (DATE)                T "%%%%For: " (COND                                 ((STRING-EQUAL INITIALS "Edited:")                                  (MKSTRING USERNAME))                                 (T INITIALS))                T "%%%%EndComments" T)         (for X in \POSTSCRIPT.JOB.SETUP do (POSTSCRIPT.OUTSTR FP X)                                                       (\FILEOUTCHARFN FP (CHARCODE EOL)))         (SETQ PAPER (OR (CDR (CL:ASSOC (SETQ PAPER (OR (LISTGET OPTIONS 'PAGETYPE)                                                        (LISTGET OPTIONS 'PAPERTYPE)                                                        POSTSCRIPT.PAGETYPE))                                     POSTSCRIPT.PAGEREGIONS :TEST #'STRING-EQUAL))                         (ERROR "Unknown PostScript page type" PAPER)))         (* ;; "Set the paper size:")         (PRINTOUT FP (L-CASE (OR (LISTGET OPTIONS 'PAGETYPE)                                  (LISTGET OPTIONS 'PAPERTYPE)                                  POSTSCRIPT.PAGETYPE))                T)         (COND            ((NOT (AND [SETQ IMAGESIZEFACTOR (NUMBERP (LISTGET OPTIONS 'IMAGESIZEFACTOR]                       (CL:PLUSP IMAGESIZEFACTOR)))             (SETQ IMAGESIZEFACTOR 1)))         [COND            ((AND (NUMBERP POSTSCRIPT.IMAGESIZEFACTOR)                  (CL:PLUSP POSTSCRIPT.IMAGESIZEFACTOR))             (SETQ IMAGESIZEFACTOR (TIMES IMAGESIZEFACTOR POSTSCRIPT.IMAGESIZEFACTOR]         (printout FP "/imagesizefactor " IMAGESIZEFACTOR " def" T)         (printout FP "%%%%EndSetup" T)         (replace (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA with \PS.SCALE0)         (replace (STREAM OUTCHARFN) of FP with '\POSTSCRIPT.OUTCHARFN)         (replace (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION) of IMAGEDATA            with (\PS.SCALEREGION (/ (TIMES 72 \PS.SCALE0)                                             IMAGESIZEFACTOR)                            (CAR PAPER)))         [replace (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA            with (SETQ CLIP (\PS.SCALEREGION (/ (TIMES 72 \PS.SCALE0)                                                        IMAGESIZEFACTOR)                                       (CADR PAPER]         (* ;; "If a REGION parameter was supplied, it establishes the initial margins.")         (SETQ REG (OR (AND (SETQ REG (LISTGET OPTIONS 'REGION))                            (INTERSECTREGIONS REG CLIP))                       (CREATEREGION 3600 3600 54000 72000)))         (replace (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA            with (fetch (REGION LEFT) of REG))         (replace (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA            with (fetch (REGION BOTTOM) of REG))         (replace (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA            with (PLUS (fetch (REGION BOTTOM) of REG)                           (fetch (REGION HEIGHT) of REG)                           -1))         (replace (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA            with (PLUS (fetch (REGION LEFT) of REG)                           (fetch (REGION WIDTH) of REG)                           -1))         (\DSPFONT.PSC FP (FONTCREATE (OR [CAR (MKLIST (LISTGET OPTIONS 'FONTS]                                              DEFAULTFONT)                                     NIL NIL NIL FP))         [COND            ((replace (\POSTSCRIPTDATA POSTSCRIPTHEADING) of IMAGEDATA                with (LISTGET OPTIONS 'HEADING))             (replace (\POSTSCRIPTDATA POSTSCRIPTHEADINGFONT) of IMAGEDATA                with (COND                            ((LISTGET OPTIONS 'HEADINGFONT)                             (FONTCREATE (LISTGET OPTIONS 'HEADINGFONT)                                    NIL NIL NIL FP))                            (T (fetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA]         (* ;; "Decide if it's landscape:  if (LANDSCAPE T) appears in OPTIONS, it is.  IF ROTATION isn't DEFAULT, it is.")         (COND            ([COND                ((CL:GETF OPTIONS 'LANDSCAPE NIL))                ((EQL (CL:GETF OPTIONS 'ROTATION 'DEFAULT)                      'DEFAULT)                 (COND                    ((EQL POSTSCRIPT.PREFER.LANDSCAPE 'ASK)                     (MENU \POSTSCRIPT.ORIENTATION.MENU))                    (T POSTSCRIPT.PREFER.LANDSCAPE)))                (T (CL:GETF OPTIONS 'ROTATION]             (POSTSCRIPT.SET-FAKE-LANDSCAPE FP 90)))         (POSTSCRIPT.STARTPAGE FP)         FP])(CLOSEPOSTSCRIPTSTREAM  [LAMBDA (STREAM)                                (* ; "Edited 30-Mar-90 17:18 by Matt Heffron")    (POSTSCRIPT.ENDPAGE STREAM)    (POSTSCRIPT.PUTCOMMAND STREAM :EOL "%%%%Trailer" :EOL)    (BOUT STREAM (CHARCODE ^D]))(DEFINEQ(POSTSCRIPT.HARDCOPYW  [LAMBDA (FILE BITMAP SCALEFACTOR REGION Landscape? TITLE)                                                  (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (ALLOW.BUTTON.EVENTS)    (LET* ((STREAM (OPENPOSTSCRIPTSTREAM FILE (LIST 'DOCUMENT.NAME TITLE 'ROTATION Landscape?                                                        'IMAGESIZEFACTOR SCALEFACTOR)))           (IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (SCLIP (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA))           SCALE)          [COND             [REGION (SETQ REGION (COPY REGION))             (* ; "In case we need to change it.")                    [COND                       ((< (fetch BITMAPWIDTH of BITMAP)                           (+ (fetch (REGION LEFT) of REGION)                              (fetch (REGION WIDTH) of REGION)))                        (replace (REGION WIDTH) of REGION with (- (fetch BITMAPWIDTH                                                                                 of BITMAP)                                                                              (fetch (REGION                                                                                          LEFT)                                                                                 of REGION]                    (COND                       ((< (fetch BITMAPHEIGHT of BITMAP)                           (+ (fetch (REGION BOTTOM) of REGION)                              (fetch (REGION HEIGHT) of REGION)))                        (replace (REGION HEIGHT) of REGION                           with (- (fetch BITMAPHEIGHT of BITMAP)                                       (fetch (REGION BOTTOM) of REGION]             (T (SETQ REGION (create REGION                                    LEFT _ 0                                    BOTTOM _ 0                                    WIDTH _ (fetch BITMAPWIDTH of BITMAP)                                    HEIGHT _ (fetch BITMAPHEIGHT of BITMAP]          (SETQ SCALE (TIMES POSTSCRIPT.BITMAP.SCALE (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE)                                                        of IMAGEDATA)))          (BITBLT BITMAP (fetch (REGION LEFT) of REGION)                 (fetch (REGION BOTTOM) of REGION)                 STREAM                 (PLUS (fetch (REGION LEFT) of SCLIP)                       (QUOTIENT (DIFFERENCE (fetch (REGION WIDTH) of SCLIP)                                        (TIMES SCALE (fetch (REGION WIDTH) of REGION)))                              2))                 (PLUS (fetch (REGION BOTTOM) of SCLIP)                       (QUOTIENT (DIFFERENCE (fetch (REGION HEIGHT) of SCLIP)                                        (TIMES SCALE (fetch (REGION HEIGHT) of REGION)))                              2))                 (fetch (REGION WIDTH) of REGION)                 (fetch (REGION HEIGHT) of REGION)                 'INPUT                 'REPLACE)          (CLOSEF STREAM)          (FULLNAME STREAM])(POSTSCRIPT.TEDIT  [LAMBDA (FILE PFILE)                                   (* ; "Edited 18-Sep-91 18:16 by jds")    (* ;; "Make a PS file from a TEdit document.  If FILE is a string, make it into a symbol for the file-name.  If it's a STREAM, use that stream.")    [COND       ((STRINGP FILE)        (SETQ FILE (MKATOM FILE]    (SETQ FILE (OPENTEXTSTREAM FILE))    (TEDIT.FORMAT.HARDCOPY FILE PFILE T NIL NIL NIL 'POSTSCRIPT)    (CLOSEF? FILE)    PFILE])(POSTSCRIPT.TEXT  [LAMBDA (FILE PSCFILE FONTS HEADING TABS)              (* ; "Edited 23-Apr-89 11:31 by TAL")    (TEXTTOIMAGEFILE FILE PSCFILE 'POSTSCRIPT FONTS HEADING TABS           `(REGION ,POSTSCRIPT.DEFAULT.PAGEREGION ROTATION ,(NOT (NOT POSTSCRIPT.TEXTFILE.LANDSCAPE])(POSTSCRIPTFILEP  [LAMBDA (FILE)                                         (* ; "Edited 14-Jan-93 10:56 by jds")    (OR (CL:MEMBER (UNPACKFILENAME.STRING FILE 'EXTENSION)               '("PS" "PSC" "PSF")               :TEST               (FUNCTION STRING-EQUAL))        (PROGN (SETFILEPTR FILE 0)               (AND (EQ (BIN FILE)                        (CHARCODE %%))                    (EQ (BIN FILE)                        (CHARCODE !]))(DEFINEQ(POSTSCRIPT.BITMAPSCALE  [LAMBDA (WIDTH HEIGHT)                      (* ;                                                 "Edited 20-Nov-92 14:52 by sybalsky:mv:envos")    (LET* ([PAGEREGION (\PS.SCALEREGION (/ 72 POSTSCRIPT.BITMAP.SCALE)                              (CADDR (FASSOC POSTSCRIPT.PAGETYPE POSTSCRIPT.PAGEREGIONS]           (LONGEDGE (MAX (fetch (REGION WIDTH) of PAGEREGION)                          (fetch (REGION HEIGHT) of PAGEREGION)))           (SHORTEDGE (MIN (fetch (REGION WIDTH) of PAGEREGION)                           (fetch (REGION HEIGHT) of PAGEREGION)))           [MINDIMP (MIN (FQUOTIENT LONGEDGE (SETQ HEIGHT (TIMES HEIGHT POSTSCRIPT.BITMAP.SCALE)))                         (FQUOTIENT SHORTEDGE (SETQ WIDTH (TIMES WIDTH POSTSCRIPT.BITMAP.SCALE]           (MINDIML (MIN (FQUOTIENT SHORTEDGE HEIGHT)                         (FQUOTIENT LONGEDGE WIDTH)))           (PPL (if (EQ POSTSCRIPT.PREFER.LANDSCAPE 'ASK)                    then (MENU \POSTSCRIPT.ORIENTATION.MENU)                  else POSTSCRIPT.PREFER.LANDSCAPE))           MINDIM OTHERDIM SF1 SF2)          (if PPL              then (SETQ MINDIM MINDIML)                    (SETQ OTHERDIM MINDIMP)            else (SETQ MINDIM MINDIMP)                  (SETQ OTHERDIM MINDIML))          (SETQ SF1 (if (GREATERP MINDIM 1)                        then 1                      elseif (GREATERP MINDIM 0.75)                        then 0.75                      elseif (GREATERP MINDIM 0.5)                        then 0.5                      elseif (GREATERP MINDIM 0.25)                        then 0.25                      else MINDIM))          (SETQ SF2 (if (GREATERP OTHERDIM 1)                        then 1                      elseif (GREATERP OTHERDIM 0.75)                        then 0.75                      elseif (GREATERP OTHERDIM 0.5)                        then 0.5                      elseif (GREATERP OTHERDIM 0.25)                        then 0.25                      else OTHERDIM))          (if (AND (LESSP SF1 1)                       (LESSP SF1 SF2))              then (CONS SF2 (NOT PPL))            else (CONS SF1 PPL])(POSTSCRIPT.CLOSESTRING  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (COND            ((fetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA)             (POSTSCRIPT.OUTSTR STREAM ") ")             (replace (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA with NIL)             T)            (T NIL])(POSTSCRIPT.ENDPAGE  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (POSTSCRIPT.SHOWACCUM STREAM)         (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with NIL)         (COND            ((NOT (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGEBLANK) of IMAGEDATA)                         (POSTSCRIPT.PUTCOMMAND STREAM "grestore savepage restore ")))             (POSTSCRIPT.PUTCOMMAND STREAM "showpage" :EOL)))         (* ;; "Force re-encoding of fonts, because the restore wipes out any you encoded while writing this page.")         (replace (\POSTSCRIPTDATA POSTSCRIPTFONTSUSED) of IMAGEDATA with NIL])(POSTSCRIPT.OUTSTR  [LAMBDA (STREAM X)                              (* ; "Edited 14-Jul-89 14:05 by Matt Heffron")    (DECLARE (LOCALVARS . T))    (COND       ((FIXP X)                                             (* ; "Common case, speed helps")        (\PS.BOUTFIXP STREAM X))       [(STRINGP X)                                          (* ; "Other common case")        (COND           [(ffetch (STRINGP FATSTRINGP) of X)            (for c infatstring X do (BOUT STREAM (\CHAR8CODE c]           (T (\BOUTS STREAM (ffetch (STRINGP BASE) of X)                     (ffetch (STRINGP OFFST) of X)                     (ffetch (STRINGP LENGTH) of X]       [(LITATOM X)        (for c inatom X do (BOUT STREAM (\CHAR8CODE c]       ((ZEROP X)        (BOUT STREAM (CHARCODE 0)))       (T [COND             ((TYPEP X 'RATIO)              (SETQ X (FLOAT X]          (for c in (CHCON X) do (BOUT STREAM (\CHAR8CODE c])(POSTSCRIPT.PUTBITMAPBYTES  [LAMBDA (STREAM BITMAP DELIMFLG)    (DECLARE (GLOBALVARS PS.BITMAPARRAY)           (LOCALVARS . T))                       (* ; "Edited 30-Mar-90 20:15 by Matt Heffron")    (LET*     ((WIDTH (fetch BITMAPWIDTH of BITMAP))      (HEIGHT (fetch BITMAPHEIGHT of BITMAP))      (BMBASE (fetch BITMAPBASE of BITMAP))      (BYTESPERROW (LRSH (IPLUS WIDTH 7)                         3))      (BYTEOFFSETPERROW (LSH (fetch BITMAPRASTERWIDTH of BITMAP)                             1))      (PS.BITMAPARRAYBASE (fetch (ARRAYP BASE) of PS.BITMAPARRAY)))     (COND        [DELIMFLG (LET ((POS 0)                        BYTE)                       (\FILEOUTCHARFN STREAM (CHARCODE SPACE))                       (\FILEOUTCHARFN STREAM (CHARCODE <))                       (\FILEOUTCHARFN STREAM (CHARCODE EOL))                       (for R from (SUB1 HEIGHT) to 0 by -1 as ROWOFFSET                          from (ITIMES (SUB1 HEIGHT)                                          BYTEOFFSETPERROW) by (IMINUS BYTEOFFSETPERROW)                          do (for B from 1 to BYTESPERROW as BYTEOFFSET                                    from ROWOFFSET by 1                                    do (COND                                              ((IGEQ POS 254)                                               (\FILEOUTCHARFN STREAM (CHARCODE EOL))                                               (SETQ POS 0)))                                          (SETQ BYTE (\GETBASEBYTE BMBASE BYTEOFFSET))                                          [BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                              (LOGAND 15 (LRSH BYTE 4]                                          (BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                              (LOGAND 15 BYTE)))                                          (SETQ POS (IPLUS POS 2)))                                (\FILEOUTCHARFN STREAM (CHARCODE EOL))                                (SETQ POS 0))                       (\FILEOUTCHARFN STREAM (CHARCODE SPACE))                       (\FILEOUTCHARFN STREAM (CHARCODE >))                       (\FILEOUTCHARFN STREAM (CHARCODE EOL]        (T         (LET*          ((PRVBM (BITMAPCREATE WIDTH 1))           (PRVBASE (fetch BITMAPBASE of PRVBM)))          (for R from 0 to (SUB1 HEIGHT) as ROWOFFSET             from (ITIMES (SUB1 HEIGHT)                             BYTEOFFSETPERROW) by (IMINUS BYTEOFFSETPERROW)             do             (LET ((POS 0)                   (BYTEOFFSET ROWOFFSET)                   (B 1)                   (PRVO 0)                   BYTE REPC)                  [while (ILEQ B BYTESPERROW)                     do (SETQ REPC                             (for BB from B to BYTESPERROW as BO from BYTEOFFSET                                by 1 as PO from PRVO by 1                                while (EQ (\GETBASEBYTE BMBASE BO)                                              (\GETBASEBYTE PRVBASE PO)) count T))                           (COND                              [(IGEQ REPC 3)                               (SETQ B (IPLUS B REPC))                               (SETQ BYTEOFFSET (IPLUS BYTEOFFSET REPC))                               (SETQ PRVO (IPLUS PRVO REPC))                               (while (CL:PLUSP (SETQ REPC (IDIFFERENCE REPC 1)))                                  do (COND                                            ((IGEQ POS 251)                                             (\FILEOUTCHARFN STREAM (CHARCODE EOL))                                             (SETQ POS 0)))                                        (BOUT STREAM (CHARCODE B))                                        (BOUT STREAM (CHARCODE 3))                                        [COND                                           ((IGEQ REPC 256)                                            (BOUT STREAM (CHARCODE F))                                            (BOUT STREAM (CHARCODE F)))                                           (T [BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                  (LOGAND 15 (LRSH REPC 4]                                              (BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                  (LOGAND 15 REPC]                                        (SETQ REPC (IDIFFERENCE REPC 256))                                        (SETQ POS (IPLUS POS 4]                              (T (SETQ BYTE (\GETBASEBYTE BMBASE BYTEOFFSET))                                 (SETQ REPC                                  (for BB from B to BYTESPERROW as BO from                                                                                            BYTEOFFSET                                     by 1 while (EQ (\GETBASEBYTE BMBASE BO)                                                            BYTE) count T))                                 (COND                                    [(IGEQ REPC 3)                                     (SETQ B (IPLUS B REPC))                                     (SETQ BYTEOFFSET (IPLUS BYTEOFFSET REPC))                                     (SETQ PRVO (IPLUS PRVO REPC))                                     (while (CL:PLUSP (SETQ REPC (IDIFFERENCE REPC 1)))                                        do (COND                                                  ((IGEQ POS 249)                                                   (\FILEOUTCHARFN STREAM (CHARCODE EOL))                                                   (SETQ POS 0)))                                              (BOUT STREAM (CHARCODE B))                                              (BOUT STREAM (CHARCODE 2))                                              [COND                                                 ((IGEQ REPC 256)                                                  (BOUT STREAM (CHARCODE F))                                                  (BOUT STREAM (CHARCODE F)))                                                 (T [BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                        (LOGAND 15 (LRSH REPC 4]                                                    (BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                        (LOGAND 15 REPC]                                              [BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                  (LOGAND 15 (LRSH BYTE 4]                                              (BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                                  (LOGAND 15 BYTE)))                                              (SETQ REPC (IDIFFERENCE REPC 256))                                              (SETQ POS (IPLUS POS 4]                                    (T (SETQ BYTE (\GETBASEBYTE BMBASE BYTEOFFSET))                                       (COND                                          ((IGEQ POS 251)                                           (\FILEOUTCHARFN STREAM (CHARCODE EOL))                                           (SETQ POS 0)))                                       [COND                                          ((FMEMB BYTE '(178 179 180))                                           (* ;; "BYTE is B2, B3, or B4; quote it")                                           (BOUT STREAM (CHARCODE B))                                           (BOUT STREAM (CHARCODE 4))                                           (SETQ POS (IPLUS POS 2]                                       [BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE                                                           (LOGAND 15 (LRSH BYTE 4]                                       (BOUT STREAM (\GETBASEBYTE PS.BITMAPARRAYBASE (LOGAND 15 BYTE)                                                           ))                                       (SETQ B (IPLUS B 1))                                       (SETQ BYTEOFFSET (IPLUS BYTEOFFSET 1))                                       (SETQ PRVO (IPLUS PRVO 1))                                       (SETQ POS (IPLUS POS 2]                  (\FILEOUTCHARFN STREAM (CHARCODE EOL)))             (\MOVEBYTES BMBASE ROWOFFSET PRVBASE 0 BYTESPERROW])(POSTSCRIPT.PUTCOMMAND  [LAMBDA S.STRS                              (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (LET* ((STREAM (ARG S.STRS 1))           (IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           S#S)          (freplace (\POSTSCRIPTDATA POSTSCRIPTPAGEBLANK) of IMAGEDATA with NIL)          (COND             ((ffetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA)              (POSTSCRIPT.SHOWACCUM STREAM)))          (COND             ((ffetch (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA)              (\SETXFORM.PSC STREAM IMAGEDATA)))          (for STR# from 2 to S.STRS do (COND                                                           ((EQ (SETQ S#S (ARG S.STRS STR#))                                                                :EOL)                                                            (\FILEOUTCHARFN STREAM (CHARCODE EOL)))                                                           (T (POSTSCRIPT.OUTSTR STREAM S#S])(POSTSCRIPT.SET-FAKE-LANDSCAPE  [LAMBDA (STREAM ROTATION)                   (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (* ;; "Set up for (or disable) fake landscaping")    (* ;;   "we only know 90 degrees of rotation for now (0 means portrait, anything else is landscape).")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OLAND (COND                     ((fetch (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA)                      90)                     (T 0)))           LAND C0 P0 C P ML MB MR MT)          (COND             ((AND ROTATION (NEQ (SETQ LAND (NOT (ZEROP ROTATION)))                                 (fetch (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA)))              (POSTSCRIPT.SHOWACCUM STREAM)              (\DSPTRANSLATE.PSC STREAM 0 0)              (SETQ C0 (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA))              (SETQ P0 (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION) of IMAGEDATA))              (SETQ C (create REGION                             WIDTH _ (fetch (REGION HEIGHT) of C0)                             HEIGHT _ (fetch (REGION WIDTH) of C0)))              (SETQ P (create REGION                             LEFT _ 0                             BOTTOM _ 0                             WIDTH _ (fetch (REGION HEIGHT) of P0)                             HEIGHT _ (fetch (REGION WIDTH) of P0)))              [COND                 (LAND (replace (REGION LEFT) of C with (fetch (REGION BOTTOM)                                                                       of C0))                       [replace (REGION BOTTOM) of C with                                                             (- (fetch (REGION WIDTH)                                                                   of P0)                                                                (+ (fetch (REGION LEFT)                                                                      of C0)                                                                   (fetch (REGION WIDTH)                                                                      of C0]                       (SETQ ML (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA)                        )                       (SETQ MB (- (fetch (REGION WIDTH) of P0)                                   (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of                                                                                             IMAGEDATA                                          )                                   1))                       (SETQ MR (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA))                       (SETQ MT (- (fetch (REGION WIDTH) of P0)                                   (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA                                          )                                   1)))                 (T [replace (REGION LEFT) of C with (- (fetch (REGION HEIGHT)                                                                       of P0)                                                                    (+ (fetch (REGION BOTTOM)                                                                          of C0)                                                                       (fetch (REGION HEIGHT)                                                                          of C0]                    (replace (REGION BOTTOM) of C with (fetch (REGION LEFT)                                                                      of C0))                    (SETQ ML (- (fetch (REGION HEIGHT) of P0)                                (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA)                                1))                    (SETQ MB (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA))                    (SETQ MR (- (fetch (REGION HEIGHT) of P0)                                (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA)                                1))                    (SETQ MT (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA]              (replace (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA with                                                                                       C)              (replace (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION) of IMAGEDATA with P)              (replace (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA with ML)              (replace (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA with MB)              (replace (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA with MR)              (replace (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA with MT)              (replace (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA with LAND)              (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with T)              (\DSPRESET.PSC STREAM)))          OLAND])(POSTSCRIPT.SHOWACCUM  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (* ;;   "Send commands to SHOW the accumulated characters.  Uses S (= SHOW) for regular characters.")    (* ;; "Uses WIDTHSHOW if the space-factor isn't 1")    (* ;; "Uses ASHOW if a KERN value is on STREAM's properties")    (* ;; "USES AWIDTHSHOW if both space-factor != 1 and there's a KERN value.")    (LET [(IMAGEDATA (ffetch (STREAM IMAGEDATA) of STREAM))          (KERN (STREAMPROP STREAM 'KERN]         (COND            ((fetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA)             [COND                [(EQP (ffetch (\POSTSCRIPTDATA POSTSCRIPTSPACEFACTOR) of IMAGEDATA)                      1)                 (COND                    (KERN (POSTSCRIPT.OUTSTR STREAM (CONCAT ") " KERN " 0 3 -1 roll ashow")))                    (T (POSTSCRIPT.OUTSTR STREAM ") S"]                (T (POSTSCRIPT.OUTSTR STREAM ") ")                   [POSTSCRIPT.OUTSTR STREAM (DIFFERENCE (ffetch (\POSTSCRIPTDATA                                                                                 POSTSCRIPTSPACEWIDTH)                                                                of IMAGEDATA)                                                        (\FGETWIDTH (ffetch (\POSTSCRIPTDATA                                                                                 POSTSCRIPTWIDTHS)                                                                       of IMAGEDATA)                                                               (CHARCODE SPACE]                   (COND                      (KERN (POSTSCRIPT.OUTSTR STREAM (CONCAT " 0 " (CHARCODE SPACE)                                                                 " " KERN " 0 "                                                                  " 6 -1 roll awidthshow")))                      (T (POSTSCRIPT.OUTSTR STREAM (CONSTANT (CONCAT " 0 " (CHARCODE SPACE)                                                                        " 4 -1 roll widthshow"]             (\FILEOUTCHARFN STREAM (CHARCODE EOL))             (freplace (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA with NIL])(POSTSCRIPT.STARTPAGE  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (* ;; "Start up a new page in a Postscript document.")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with NIL)                                                             (* ; "shouldnt need this")         (POSTSCRIPT.PUTCOMMAND STREAM :EOL "%%%%BeginPageSetup" :EOL "/savepage save def" :EOL                (FQUOTIENT 1 \PS.SCALE0)                " imagesizefactor mul dup scale" :EOL "%%%%EndPageSetup" :EOL "%%%%Page" :EOL)         (\SETXFORM.PSC STREAM IMAGEDATA T)         (* ;; "Lisp depends on the current font being carried over from page to page, but in postscript there is no current font at the beginning of a page, so force a setfont.")         (replace (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of IMAGEDATA with T)         (replace (\POSTSCRIPTDATA POSTSCRIPTPAGEBLANK) of IMAGEDATA with T)                                                             (* ; "nothing printed yet...")         (COND            ((fetch (\POSTSCRIPTDATA POSTSCRIPTHEADING) of IMAGEDATA)             (* ;; "Here we handle headings.  This imitates the INTERPRESS code.")             (LET [(FONT (\DSPFONT.PSC STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTHEADINGFONT)                                                     of IMAGEDATA]                  (\DSPRESET.PSC STREAM)                  (PRIN3 (fetch (\POSTSCRIPTDATA POSTSCRIPTHEADING) of IMAGEDATA)                         STREAM)                  (RELMOVETO (CONSTANT (TIMES 72 \PS.SCALE0))                         0 STREAM)                           (* ; "Skip an inch before page number")                  (PRIN3 "Page " STREAM)                  (PRIN3 (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGENUM) of IMAGEDATA))                         STREAM)                  (\TERPRI.PSC STREAM)                   (* ; "Skip 2 lines")                  (\TERPRI.PSC STREAM)                  (\DSPFONT.PSC STREAM FONT)))            (T (\DSPRESET.PSC STREAM])(\POSTSCRIPTTAB  [LAMBDA (POSTSCRIPTDATA)                    (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (LET [(TABSPACE (TIMES 8 (ffetch FONTAVGCHARWIDTH of (ffetch (\POSTSCRIPTDATA                                                                                     POSTSCRIPTFONT)                                                                    of POSTSCRIPTDATA]         (IDIFFERENCE TABSPACE (IREMAINDER (IDIFFERENCE (ffetch (\POSTSCRIPTDATA POSTSCRIPTX)                                                           of POSTSCRIPTDATA)                                                  (ffetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN)                                                     of POSTSCRIPTDATA))                                      TABSPACE])(\PS.BOUTFIXP  [LAMBDA (STREAM N)                          (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (* ;; "BOUT the decimal representation of N to STREAM using temp storage from the imagedata.  Done this way for speed.")    (DECLARE (LOCALVARS . T))    [COND       ((MINUSP N)        (BOUT STREAM (CHARCODE -))        (SETQ N (IMINUS N]    (COND       [(LESSP N 10)        (BOUT STREAM (IPLUS N (CHARCODE 0]       [(LESSP N 1000000000)        (LET ([BASE (fetch (ARRAYP BASE) of (fetch (\POSTSCRIPTDATA POSTSCRIPTTEMPARRAY)                                                       of (fetch (STREAM IMAGEDATA)                                                                 of STREAM]              (i (SUB1 \PS.TEMPARRAYLEN)))             [for old i by -1 do (\PUTBASEBYTE BASE i (IPLUS (IREMAINDER N 10)                                                                             (CHARCODE 0)))                repeatwhile (NEQ 0 (SETQ N (IQUOTIENT N 10]             (\BOUTS STREAM BASE i (IDIFFERENCE \PS.TEMPARRAYLEN i]       (T                                                    (* ; "Just in case we get a bignum")          (for c in (CHCON N) do (BOUT STREAM (\CHAR8CODE c])(\PS.SCALEHACK  [LAMBDA (STREAM SCALEFACTOR)                (* ;                                                 "Edited 20-Nov-92 15:11 by sybalsky:mv:envos")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OLDSCALE (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALEHACK) of IMAGEDATA))           FACTOR)          (COND             ((AND (NUMBERP SCALEFACTOR)                   (NOT (EQP OLDSCALE SCALEFACTOR)))              (POSTSCRIPT.SHOWACCUM STREAM)              (SETQ FACTOR (/ OLDSCALE SCALEFACTOR))              [for REG in (LIST (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION)                                           of IMAGEDATA)                                        (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION)                                           of IMAGEDATA))                 do (change (fetch (REGION LEFT) of REG)                               (FIXR (CL:* DATUM FACTOR)))                       (change (fetch (REGION BOTTOM) of REG)                              (FIXR (CL:* DATUM FACTOR)))                       (change (fetch (REGION WIDTH) of REG)                              (FIXR (CL:* DATUM FACTOR)))                       (change (fetch (REGION HEIGHT) of REG)                              (FIXR (CL:* DATUM FACTOR]              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (change (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA)                     (FIXR (CL:* DATUM FACTOR)))              (replace (\POSTSCRIPTDATA POSTSCRIPTSCALEHACK) of IMAGEDATA with                                                                                         SCALEFACTOR)              (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with T)))          OLDSCALE])(\PS.SCALEREGION  [LAMBDA (SCALE REGION)                                 (* ; "Edited  5-Apr-89 16:15 by TAL")                                                             (* ; "Scales a region")    (create REGION           LEFT _ (FIXR (TIMES SCALE (fetch (REGION LEFT) of REGION)))           BOTTOM _ (FIXR (TIMES SCALE (fetch (REGION BOTTOM) of REGION)))           WIDTH _ (FIXR (TIMES SCALE (fetch (REGION WIDTH) of REGION)))           HEIGHT _ (FIXR (TIMES SCALE (fetch (REGION HEIGHT) of REGION])(\SCALEDBITBLT.PSC  [LAMBDA (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT                 SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM                  SCALE)                       (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (* ;; "Postscript can only handle OPERATION REPLACE and PAINT.  SOURCETYPE = TEXTURE is converted to BLTSHADE before getting here (so the TEXTURE argument can be ignored).  If the destination region lies completely outside the clipping region we do nothing, otherwise we output the whole thing and let the printer clip.  Could be more clever.")    (OR (NUMBERP SCALE)        (SETQ SCALE 1))    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (SCALE1 (TIMES SCALE (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA)))           (SCALE2 (TIMES SCALE1 (OR (NUMBERP POSTSCRIPT.BITMAP.SCALE)                                     1)))           DESTREGION           (BITMAPWIDTH (fetch BITMAPWIDTH of SOURCEBITMAP))           (BITMAPHEIGHT (fetch BITMAPHEIGHT of SOURCEBITMAP))           TEMPBM)          [COND             ((NULL DESTINATIONLEFT)              (SETQ DESTINATIONLEFT (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA]          [COND             ((NULL DESTINATIONBOTTOM)              (SETQ DESTINATIONBOTTOM (fetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA]          (COND             ((OR (NULL WIDTH)                  (NULL HEIGHT))              (SETQ WIDTH BITMAPWIDTH)              (SETQ HEIGHT BITMAPHEIGHT)))          (COND             ((GREATERP WIDTH BITMAPWIDTH)              (SETQ WIDTH BITMAPWIDTH)))          (COND             ((GREATERP HEIGHT BITMAPHEIGHT)              (SETQ HEIGHT BITMAPHEIGHT)))          [SETQ DESTREGION (INTERSECTREGIONS (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION)                                                of IMAGEDATA)                                  (CREATEREGION DESTINATIONLEFT DESTINATIONBOTTOM (TIMES SCALE1 WIDTH                                                                                         )                                         (TIMES SCALE1 HEIGHT]          (COND             ((AND DESTREGION (OR (NULL CLIPPINGREGION)                                  (REGIONSINTERSECTP DESTREGION CLIPPINGREGION)))              [COND                 ((AND (EQ SOURCELEFT 0)                       (EQ SOURCEBOTTOM 0)                       (EQP WIDTH BITMAPWIDTH)                       (EQP HEIGHT BITMAPHEIGHT))            (* ;                                                            "Avoid copy if sending entire bitmap")                  (SETQ TEMPBM SOURCEBITMAP))                 (T (SETQ TEMPBM (BITMAPCREATE WIDTH HEIGHT 1))                    (BITBLT SOURCEBITMAP SOURCELEFT SOURCEBOTTOM TEMPBM 0 0 WIDTH HEIGHT SOURCETYPE                           'REPLACE]              (POSTSCRIPT.PUTCOMMAND STREAM "/bitbltsave save def " DESTINATIONLEFT " "                      DESTINATIONBOTTOM " translate " (TIMES SCALE2 WIDTH)                     " "                     (TIMES SCALE2 HEIGHT)                     " scale " WIDTH " " HEIGHT (COND                                                   ((EQ OPERATION 'PAINT)                                                    " true")                                                   (T " false"))                     " thebitimage" :EOL)              (POSTSCRIPT.PUTBITMAPBYTES STREAM TEMPBM NIL)              (POSTSCRIPT.PUTCOMMAND STREAM :EOL "bitbltsave restore" :EOL)              (\MOVETO.PSC STREAM DESTINATIONLEFT DESTINATIONBOTTOM)              T)             (T NIL])(\SETPOS.PSC  [LAMBDA (STREAM IMAGEDATA)                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (POSTSCRIPT.PUTCOMMAND STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)           " "           (ffetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA)           " M ")    (freplace (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA with NIL])(\SETXFORM.PSC  [LAMBDA (STREAM IMAGEDATA NORESTORE)        (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (* ;;   "Write transforms into the PS file to make what it prints match what we think it should print.")    (LET ((CLIP (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA)))         (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with NIL)         (COND            ((NOT NORESTORE)             (POSTSCRIPT.OUTSTR STREAM "grestore ")))         (POSTSCRIPT.PUTCOMMAND STREAM "gsave" :EOL)         (* ;; "Scaling")         (COND            ((NOT (EQP (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALEHACK) of IMAGEDATA)                       1))             (POSTSCRIPT.PUTCOMMAND STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALEHACK)                                                  of IMAGEDATA)                    " dup scale" :EOL)))         (* ;;        "Landscape mode (as in POSTSCRIPT.PREFER.LANDSCAPE, not as in TEdit doing landscaping)")         (COND            ((fetch (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA)             (POSTSCRIPT.OUTSTR STREAM " 90 rotate 0 -61200 translate ")))         (* ;; "Any rotation that is in effect.")         (POSTSCRIPT.PUTCOMMAND STREAM " " (fetch (\POSTSCRIPTDATA POSTSCRIPTROTATION)                                                  of IMAGEDATA)                " rotate " :EOL)         (* ;; "Any translations that are in effect.")         (COND            ([NOT (AND (ZEROP (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA))                       (ZEROP (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA]             (POSTSCRIPT.PUTCOMMAND STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSX)                                                  of IMAGEDATA)                    " "                    (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA)                    " translate" :EOL)))         (* ;; "Clipping region:")         (POSTSCRIPT.PUTCOMMAND STREAM " " (fetch (REGION HEIGHT) of CLIP)                " "                (fetch (REGION WIDTH) of CLIP)                " "                (fetch (REGION LEFT) of CLIP)                " "                (fetch (REGION BOTTOM) of CLIP)                " CLP" :EOL)         (* ;; "And force recaching of location and font.")         (replace (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA with T)         (replace (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of IMAGEDATA with T])(\STRINGWIDTH.PSC  [LAMBDA (STREAM STR RDTBL)                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (ffetch (STREAM IMAGEDATA) of STREAM)))         (\STRINGWIDTH.GENERIC STR (fetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA)                RDTBL                (ffetch (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA])(\SWITCHFONTS.PSC  [LAMBDA (STREAM POSTSCRIPTDATA)                        (* ; "Edited 14-Jan-93 17:21 by jds")    (* ;; "Actually emit the PS commands to change the font.  If the new font hasn't been used (on this page) before, re-encode it to support accented characters.")    (LET* [(FONT (ffetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of POSTSCRIPTDATA))           (FONTID (fetch (PSCFONT IL-FONTID) of (LISTGET (fetch (FONTDESCRIPTOR                                                                                  OTHERDEVICEFONTPROPS                                                                                    ) of FONT)                                                                'PSCFONT]          [COND             [(LISTP FONTID)              [COND                 ((MEMB (fetch (FONTID FONTIDNAME) of FONTID)                        (ffetch (\POSTSCRIPTDATA POSTSCRIPTFONTSUSED) of POSTSCRIPTDATA)))                 ((MEMB (fetch (FONTID FONTIDNAME) of FONTID)                        *POSTSCRIPT-UNACCENTED-FONTS*))                 (T                     (* ;;        "This font hasn't been used on this page yet.  Re-encode it to include accented characters.")                    (POSTSCRIPT.PUTCOMMAND STREAM "/" (fetch (FONTID FONTIDNAME) of                                                                                         FONTID)                           " /"                           (CONCAT (fetch (FONTID FONTIDNAME) of FONTID)                                  "-Acnt")                           " encodefont" :EOL)                    (CL:PUSH (fetch (FONTID FONTIDNAME) of FONTID)                           (FFETCH (\POSTSCRIPTDATA POSTSCRIPTFONTSUSED) OF POSTSCRIPTDATA]              (COND                 ((MEMB (fetch (FONTID FONTIDNAME) of FONTID)                        *POSTSCRIPT-UNACCENTED-FONTS*)                  (FREPLACE (\POSTSCRIPTDATA POSTSCRIPTACCENTED) OF POSTSCRIPTDATA                     WITH NIL)                  (POSTSCRIPT.PUTCOMMAND STREAM "/" (fetch (FONTID FONTIDNAME) of FONTID)                         " findfont ["                         (TIMES (fetch (FONTID FONTXFACTOR) of FONTID)                                (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                100)                         " 0 "                         (TIMES (fetch (FONTID FONTOBLIQUEFACTOR) of FONTID)                                (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                100)                         " "                         (TIMES (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                100)                         " 0 0] makefont setfont" :EOL))                 (T (FREPLACE (\POSTSCRIPTDATA POSTSCRIPTACCENTED) OF POSTSCRIPTDATA                       WITH T)                    (POSTSCRIPT.PUTCOMMAND STREAM "/" (CONCAT (fetch (FONTID FONTIDNAME)                                                                     of FONTID)                                                                 "-Acnt")                           " findfont ["                           (TIMES (fetch (FONTID FONTXFACTOR) of FONTID)                                  (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                  100)                           " 0 "                           (TIMES (fetch (FONTID FONTOBLIQUEFACTOR) of FONTID)                                  (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                  100)                           " "                           (TIMES (fetch (FONTDESCRIPTOR FONTSIZE) of FONT)                                  100)                           " 0 0] makefont setfont" :EOL]             (T [COND                   ((MEMB FONTID (ffetch (\POSTSCRIPTDATA POSTSCRIPTFONTSUSED) of                                                                                        POSTSCRIPTDATA                                        )))                   ((MEMB FONTID *POSTSCRIPT-UNACCENTED-FONTS*))                   (T                       (* ;;        "This font hasn't been used on this page yet.  Re-encode it to include accented characters.")                      (POSTSCRIPT.PUTCOMMAND STREAM "/" FONTID " /" (CONCAT FONTID "-Acnt")                             " encodefont" :EOL)                      (CL:PUSH FONTID (FFETCH (\POSTSCRIPTDATA POSTSCRIPTFONTSUSED) OF                                                                                        POSTSCRIPTDATA                                             ]                (COND                   ((MEMB FONTID *POSTSCRIPT-UNACCENTED-FONTS*)                    (freplace (\POSTSCRIPTDATA POSTSCRIPTACCENTED) of POSTSCRIPTDATA                       with NIL)                    (POSTSCRIPT.PUTCOMMAND STREAM (TIMES (fetch (FONTDESCRIPTOR FONTSIZE)                                                                of FONT)                                                             100)                           " /" FONTID " F" :EOL))                   (T (FREPLACE (\POSTSCRIPTDATA POSTSCRIPTACCENTED) OF POSTSCRIPTDATA                         WITH T)                      (POSTSCRIPT.PUTCOMMAND STREAM (TIMES (fetch (FONTDESCRIPTOR FONTSIZE)                                                                  of FONT)                                                               100)                             " /"                             (CONCAT FONTID "-Acnt")                             " F" :EOL]          (replace (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of POSTSCRIPTDATA with                                                                                        NIL])(\TERPRI.PSC  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET* [(IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (NEWY (PLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA)                       (ffetch (\POSTSCRIPTDATA POSTSCRIPTLINESPACING) of IMAGEDATA]          (COND             ([LESSP NEWY (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of                                                                                             IMAGEDATA                                        )                                 (fetch (FONTDESCRIPTOR \SFDescent) of (ffetch                                                                                (\POSTSCRIPTDATA                                                                                 POSTSCRIPTFONT)                                                                                  of IMAGEDATA]              (DSPNEWPAGE STREAM))             (T (replace (STREAM CHARPOSITION) of STREAM with 0)                (\MOVETO.PSC STREAM (ffetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN)                                           of IMAGEDATA)                       NEWY)))          NIL]))(* ;; "DIG operations: ")(DEFINEQ(\BITBLT.PSC  [LAMBDA (SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT                 SOURCETYPE OPERATION TEXTURE CLIPPINGREGION CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM)                                                             (* ; "Edited  7-Apr-89 19:53 by TAL")    (\SCALEDBITBLT.PSC SOURCEBITMAP SOURCELEFT SOURCEBOTTOM STREAM DESTINATIONLEFT            DESTINATIONBOTTOM WIDTH HEIGHT SOURCETYPE OPERATION TEXTURE CLIPPINGREGION            CLIPPEDSOURCELEFT CLIPPEDSOURCEBOTTOM 1])(\BLTSHADE.PSC  [LAMBDA (TEXTURE STREAM DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT OPERATION CLIPPINGREGION)                                                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (* ;; "Maybe we should do something with OPERATION")    (LET ((RGN (CREATEREGION DESTINATIONLEFT DESTINATIONBOTTOM WIDTH HEIGHT))          (IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          TEXTUREBM TEXTUREWIDTH LEFT BOTTOM WIDTH HEIGHT)         [COND            [CLIPPINGREGION (SETQ RGN (INTERSECTREGIONS RGN CLIPPINGREGION (fetch (                                                                                      \POSTSCRIPTDATA                                                                                                                                                                    POSTSCRIPTCLIPPINGREGION                                                                                       ) of                                                                                         IMAGEDATA]            (T (SETQ RGN (INTERSECTREGIONS RGN (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION)                                                  of IMAGEDATA]         (COND            (RGN (SETQ LEFT (fetch (REGION LEFT) of RGN))                 (SETQ BOTTOM (fetch (REGION BOTTOM) of RGN))                 (SETQ WIDTH (CL:1- (fetch (REGION WIDTH) of RGN)))                 (SETQ HEIGHT (CL:1- (fetch (REGION HEIGHT) of RGN)))                 [COND                    ((FIXP TEXTURE)                     (SETQ TEXTURE (SELECT TEXTURE ((BLACKSHADE -1)                                                    0.0)                                          (WHITESHADE 1.0)                                          TEXTURE]                 [COND                    ((AND (FLOATP TEXTURE)                          (<= 0.0 TEXTURE 1.0))                     (POSTSCRIPT.PUTCOMMAND STREAM HEIGHT " " WIDTH " " LEFT " " BOTTOM " "                             TEXTURE " R" :EOL))                    ((OR (TEXTUREP TEXTURE)                         (NULL TEXTURE))                     (SETQ TEXTUREBM (BITMAPCREATE 16 16 1))                     (SETQ TEXTUREWIDTH 16)                     (BLTSHADE TEXTURE TEXTUREBM))                    ((BITMAPP TEXTURE)                     (SETQ TEXTUREWIDTH (MIN (fetch BITMAPWIDTH of TEXTUREBM)                                             (fetch BITMAPHEIGHT of TEXTUREBM)))                     (SETQ TEXTUREBM (BITMAPCREATE TEXTUREWIDTH TEXTUREWIDTH 1))                     (BITBLT TEXTURE 0 0 TEXTUREBM 0 0 TEXTUREWIDTH TEXTUREWIDTH 'INPUT 'REPLACE]                 (COND                    (TEXTUREBM (POSTSCRIPT.PUTCOMMAND STREAM "gsave newpath ")                           (POSTSCRIPT.PUTCOMMAND STREAM "100 100 scale " (QUOTIENT LEFT 100.0)                                  " "                                  (QUOTIENT BOTTOM 100.0)                                  " M "                                  (SETQ WIDTH (QUOTIENT WIDTH 100.0))                                  " 0 rlineto 0 "                                  (QUOTIENT HEIGHT 100.0)                                  " rlineto "                                  (MINUS WIDTH)                                  " 0 rlineto closepath" :EOL)                           (POSTSCRIPT.PUTBITMAPBYTES STREAM TEXTUREBM T)                           (POSTSCRIPT.PUTCOMMAND STREAM TEXTUREWIDTH " "                                  (LSH (fetch BITMAPRASTERWIDTH of TEXTUREBM)                                       1)                                  " 0 "                                  (TIMES 72 (QUOTIENT (DSPSCALE NIL STREAM)                                                   100.0))                                  " findresolution " TEXTUREWIDTH " div div ceiling "                                   POSTSCRIPT.TEXTURE.SCALE " mul setpattern eofill" :EOL "grestore"                                   :EOL)))                 (\MOVETO.PSC STREAM DESTINATIONLEFT DESTINATIONBOTTOM)                 T)            (T NIL])(\CHARWIDTH.PSC  [LAMBDA (STREAM CHARCODE)                   (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (* ;; "no NS character set treatment yet")    (LET ((IMAGEDATA (ffetch (STREAM IMAGEDATA) of STREAM)))         (COND            ((EQ CHARCODE (CHARCODE SPACE))             (fetch (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA))            (T (\FGETWIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTWIDTHS) of IMAGEDATA)                      (\CHAR8CODE CHARCODE])(\DRAWARC.PSC  [LAMBDA (STREAM CENTERX CENTERY RADIUS STARTANGLE NDEGREES BRUSH DASHING)                                                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          WIDTH COLOR)         [COND            ((NUMBERP BRUSH)             (SETQ WIDTH BRUSH))            ((LISTP BRUSH)             (COND                ((NEQ (fetch BRUSHSHAPE of BRUSH)                      'ROUND)                 (printout T T                         "[In \DRAWARC.PSC: Non-ROUND BRUSH not supported.][Using ROUND BRUSH]" T)))             (SETQ WIDTH (fetch BRUSHSIZE of BRUSH))             (SETQ COLOR (fetch BRUSHCOLOR of BRUSH)))            (T                                               (* ;                                                            "If FUNCTIONAL BRUSH big trouble!")               (printout T T                      "[In \DRAWARC.PSC: Functional BRUSH not supported.][Using ROUND 1 point BRUSH]" T)               (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA]         (COND            ((NOT (ZEROP WIDTH))             (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")             (COND                ((FLOATP COLOR)                 (POSTSCRIPT.PUTCOMMAND STREAM COLOR " setgray ")                                                             (* ;                                                "COLOR is specified in POSTSCRIPT setgray notation.")                 ))             (COND                ((LISTP DASHING)                 (POSTSCRIPT.OUTSTR STREAM " [")                 (for D in DASHING do (POSTSCRIPT.PUTCOMMAND STREAM (TIMES D WIDTH)                                                         " "))                 (POSTSCRIPT.PUTCOMMAND STREAM "] 0 setdash" :EOL)                                                             (* ;          "Since Interlisp DASHING are in terms of BRUSH units, we must multiply by the brush size.")                 ))             (POSTSCRIPT.PUTCOMMAND STREAM WIDTH " setlinewidth 1 setlinecap 1 setlinejoin "                     CENTERX " " CENTERY " " RADIUS " " STARTANGLE " " (+ STARTANGLE NDEGREES)                    " arc stroke" :EOL "grestore" :EOL)))         (\MOVETO.PSC STREAM CENTERX CENTERY])(\DRAWCIRCLE.PSC  [LAMBDA (STREAM CENTERX CENTERY RADIUS BRUSH DASHING)                                                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          WIDTH COLOR)         [COND            ((NUMBERP BRUSH)             (SETQ WIDTH BRUSH))            ((LISTP BRUSH)             (COND                ((NEQ (fetch BRUSHSHAPE of BRUSH)                      'ROUND)                 (printout T T                         "[In \DRAWCIRCLE.PSC: Non-ROUND BRUSH not supported.][Using ROUND BRUSH]" T)))             (SETQ WIDTH (fetch BRUSHSIZE of BRUSH))             (SETQ COLOR (fetch BRUSHCOLOR of BRUSH)))            (T                                               (* ;                                                            "If FUNCTIONAL BRUSH big trouble!")               (printout T T                       "[In \DRAWCIRCLE.PSC: Functional BRUSH not supported.][Using (ROUND 1) BRUSH]" T)               (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA]         (COND            ((NOT (ZEROP WIDTH))             (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")             (COND                ((FLOATP COLOR)                 (POSTSCRIPT.PUTCOMMAND STREAM COLOR " setgray ")                                                             (* ;                                                "COLOR is specified in POSTSCRIPT setgray notation.")                 ))             (COND                ((LISTP DASHING)                 (POSTSCRIPT.OUTSTR STREAM " [")                 (for D in DASHING do (POSTSCRIPT.PUTCOMMAND STREAM (TIMES D WIDTH)                                                         " "))                 (POSTSCRIPT.PUTCOMMAND STREAM "] 0 setdash" :EOL)                                                             (* ;          "Since Interlisp DASHING are in terms of BRUSH units, we must multiply by the brush size.")                 ))             (POSTSCRIPT.PUTCOMMAND STREAM WIDTH " setlinewidth 1 setlinecap 1 setlinejoin "                     CENTERX " " CENTERY " " RADIUS " 0 360 arc stroke" :EOL "grestore" :EOL)))         (\MOVETO.PSC STREAM CENTERX CENTERY])(\DRAWCURVE.PSC  [LAMBDA (STREAM KNOTS CLOSED BRUSH DASHING) (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          WIDTH SHAPE COLOR PSPLINE XA YA DXA DYA N PREVX PREVY PREV-DX3 PREV-DY3)         [COND            ((NUMBERP BRUSH)             (SETQ WIDTH BRUSH)             (SETQ SHAPE 'ROUND))            ((LISTP BRUSH)             (SETQ WIDTH (fetch BRUSHSIZE of BRUSH))             (SETQ SHAPE (fetch BRUSHSHAPE of BRUSH))             (SETQ COLOR (fetch BRUSHCOLOR of BRUSH)))            (T                (* ;; "If FUNCTIONAL BRUSH then BIG trouble!")               (printout T T                       "[In \DRAWCURVE.PSC: Functional BRUSH not supported.][Using (ROUND 1) BRUSH]" T)               (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA))               (SETQ SHAPE 'ROUND]         (COND            ((NOT (ZEROP WIDTH))             (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")             (COND                ((FLOATP COLOR)                 (POSTSCRIPT.PUTCOMMAND STREAM COLOR " setgray ")                 (* ;; "COLOR is specified in POSTSCRIPT setgray notation.")                 ))             (COND                ((LISTP DASHING)                 (POSTSCRIPT.OUTSTR STREAM " [")                 (for D in DASHING do (POSTSCRIPT.PUTCOMMAND STREAM (TIMES D WIDTH)                                                         " ")                                                  (* ;;          "Since Interlisp DASHING are in terms of BRUSH units, we must multiply by the brush size."))                 (POSTSCRIPT.PUTCOMMAND STREAM "] 0 setdash" :EOL)))             (SETQ PSPLINE (PARAMETRICSPLINE KNOTS CLOSED NIL))             (SETQ N (pop PSPLINE))             (SETQ XA (pop PSPLINE))             (SETQ YA (pop PSPLINE))             (SETQ DXA (pop PSPLINE))             (SETQ DYA (pop PSPLINE))             (POSTSCRIPT.PUTCOMMAND STREAM (SELECTQ SHAPE                                                   (ROUND " 1 setlinecap 1 setlinejoin ")                                                   (SQUARE " 2 setlinecap 0 setlinejoin ")                                                   " 0 setlinecap 0 setlinejoin ")                    WIDTH " setlinewidth " (SETQ PREVX (ELT XA 1))                    " "                    (SETQ PREVY (ELT YA 1))                    " M" :EOL)             (SETQ PREV-DX3 (FQUOTIENT (ELT DXA 1)                                   3.0))             (SETQ PREV-DY3 (FQUOTIENT (ELT DYA 1)                                   3.0))             (for C from 2 to N do (POSTSCRIPT.PUTCOMMAND                                                    STREAM                                                    (FPLUS PREVX PREV-DX3)                                                    " "                                                    (FPLUS PREVY PREV-DY3)                                                    " "                                                    (FDIFFERENCE (SETQ PREVX (ELT XA C))                                                           (SETQ PREV-DX3 (FQUOTIENT (ELT DXA C)                                                                                 3.0)))                                                    " "                                                    (FDIFFERENCE (SETQ PREVY (ELT YA C))                                                           (SETQ PREV-DY3 (FQUOTIENT (ELT DYA C)                                                                                 3.0)))                                                    " " PREVX " " PREVY " curveto" :EOL))             (POSTSCRIPT.PUTCOMMAND STREAM "stroke" :EOL "grestore" :EOL)))         (\MOVETO.PSC STREAM PREVX PREVY))    NIL])(\DRAWELLIPSE.PSC  [LAMBDA (STREAM CENTERX CENTERY MINORRADIUS MAJORRADIUS ORIENTATION BRUSH DASHING)                                                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          WIDTH COLOR)         [COND            ((NUMBERP BRUSH)             (SETQ WIDTH BRUSH))            ((LISTP BRUSH)             (COND                ((NEQ (fetch BRUSHSHAPE of BRUSH)                      'ROUND)                 (printout T T                         "[In \DRAWELLIPSE.PSC: Non-ROUND BRUSH not supported.][Using ROUND BRUSH]" T)))             (SETQ WIDTH (fetch BRUSHSIZE of BRUSH))             (SETQ COLOR (fetch BRUSHCOLOR of BRUSH)))            (T                                               (* ;                                                            "If FUNCTIONAL BRUSH, big trouble!")               (printout T T                      "[In \DRAWELLIPSE.PSC: Functional BRUSH not supported.][Using (ROUND 1) BRUSH]" T)               (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA]         (COND            ((NOT (ZEROP WIDTH))             (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")             (COND                ((FLOATP COLOR)                 (POSTSCRIPT.PUTCOMMAND STREAM COLOR " setgray ")                                                             (* ;                                                "COLOR is specified in POSTSCRIPT setgray notation.")                 ))             (COND                ((LISTP DASHING)                 (POSTSCRIPT.OUTSTR STREAM " [")                 (for D in DASHING do (POSTSCRIPT.PUTCOMMAND STREAM (TIMES D WIDTH)                                                         " ")                                                  (* ;;          "Since Interlisp DASHING are in terms of BRUSH units, we must multiply by the brush size."))                 (POSTSCRIPT.PUTCOMMAND STREAM "] 0 setdash" :EOL)))             (POSTSCRIPT.PUTCOMMAND STREAM WIDTH " setlinewidth 1 setlinecap 1 setlinejoin "                     CENTERX " " CENTERY " " MAJORRADIUS " " MINORRADIUS " " ORIENTATION                     " 0 360 ellipse stroke" :EOL "grestore" :EOL)))         (\MOVETO.PSC STREAM CENTERX CENTERY])(\DRAWLINE.PSC  [LAMBDA (STREAM X1 Y1 X2 Y2 WIDTH OPERATION COLOR DASHING)                                                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (* ;; "DRAWLINE method for postscript streams.")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         [COND            ((NOT (NUMBERP WIDTH))             (* ;; "The WIDTH = NIL should have been handled before here, but just in case!")             (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA]         [COND            ((NOT (ZEROP WIDTH))             (COND                ((LESSP X2 X1)                 (* ;; "For Syntelligence, make all lines move from left to right, to defeat a bug in SPARCPrinter PS decoder.")                 (\DRAWLINE.PSC STREAM X2 Y2 X1 Y1 WIDTH OPERATION COLOR DASHING))                ((NOT (OR (FLOATP COLOR)                          (LISTP DASHING)))                  (* ; "Simple case, no dash or gray")                 (POSTSCRIPT.PUTCOMMAND STREAM X2 " " Y2 " " X1 " " Y1 " " WIDTH " L" :EOL))                (T                                           (* ;                                                            "COLOR is interpreted as gray factor")                   (POSTSCRIPT.PUTCOMMAND STREAM X2 " " Y2 " " X1 " " Y1 " " WIDTH " "                          (OR (FLOATP COLOR)                              "0")                          " [")                   (for D in (LISTP DASHING) do                                                            (* ;;                      "Interlisp DASHING is in terms of BRUSH units, so multiply by the brush size.")                                                           (POSTSCRIPT.PUTCOMMAND STREAM                                                                  (TIMES D WIDTH)                                                                  " "))                   (POSTSCRIPT.PUTCOMMAND STREAM "] L1" :EOL]         (replace (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA with X2)         (freplace (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA with Y2)         (freplace (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA with NIL])(\DRAWPOINT.PSC  [LAMBDA (STREAM X Y BRUSH OPERATION)            (* ; "Edited 30-Mar-90 17:53 by Matt Heffron")    (* ;; "draw a point on the stream ")    (if (BITMAPP BRUSH)        then (LET ((WIDTH (fetch BITMAPWIDTH of BRUSH))                       (HEIGHT (fetch BITMAPHEIGHT of BRUSH)))                      (BITBLT BRUSH 0 0 STREAM (- X (IQUOTIENT WIDTH 2))                             (- Y (IQUOTIENT HEIGHT 2))                             WIDTH HEIGHT OPERATION))      else (\DRAWLINE.PSC STREAM X Y X Y BRUSH OPERATION])(\DRAWPOLYGON.PSC  [LAMBDA (STREAM POINTS CLOSED BRUSH DASHING)(* ;                                                 "Edited 20-Nov-92 15:17 by sybalsky:mv:envos")    (LET ((LASTPOINT (CAR (LAST POINTS)))          (IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          WIDTH SHAPE COLOR)         [COND            ((NUMBERP BRUSH)             (SETQ WIDTH BRUSH)             (SETQ SHAPE 'ROUND))            ((LISTP BRUSH)             (SETQ WIDTH (fetch BRUSHSIZE of BRUSH))             (SETQ SHAPE (fetch BRUSHSHAPE of BRUSH))             (SETQ COLOR (fetch BRUSHCOLOR of BRUSH)))            (T                (* ;; "If FUNCTIONAL BRUSH then BIG trouble!")               (printout T T                      "[In \DRAWPOLYGON.PSC: Functional BRUSH not supported.][Using (ROUND 1) BRUSH]" T)               (SETQ WIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA))               (SETQ SHAPE 'ROUND]         (COND            ((NOT (ZEROP WIDTH))             (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")             (COND                ((FLOATP COLOR)                 (POSTSCRIPT.PUTCOMMAND STREAM COLOR " setgray ")                 (* ;; "COLOR is specified in POSTSCRIPT setgray notation.")                 ))             (COND                ((LISTP DASHING)                 (POSTSCRIPT.OUTSTR STREAM " [")                 (for D in DASHING do (POSTSCRIPT.PUTCOMMAND STREAM (TIMES D WIDTH)                                                         " ")                                                  (* ;;          "Since Interlisp DASHING are in terms of BRUSH units, we must multiply by the brush size."))                 (POSTSCRIPT.PUTCOMMAND STREAM "] 0 setdash" :EOL)))             (POSTSCRIPT.PUTCOMMAND STREAM (SELECTQ SHAPE                                                   (ROUND " 1 setlinecap 1 setlinejoin ")                                                   (SQUARE " 2 setlinecap 0 setlinejoin ")                                                   " 0 setlinecap 0 setlinejoin ")                    WIDTH " setlinewidth " (fetch (POSITION XCOORD) of (CAR POINTS))                    " "                    (fetch (POSITION YCOORD) of (CAR POINTS))                    " M" :EOL)             (for P in (CDR POINTS) do (POSTSCRIPT.PUTCOMMAND STREAM                                                          (fetch (POSITION XCOORD) of P)                                                          " "                                                          (fetch (POSITION YCOORD) of P)                                                          " lineto" :EOL))             (COND                (CLOSED (POSTSCRIPT.PUTCOMMAND STREAM " closepath")))             (POSTSCRIPT.PUTCOMMAND STREAM " stroke" :EOL "grestore" :EOL)))         (\MOVETO.PSC STREAM (fetch (POSITION XCOORD) of LASTPOINT)                (fetch (POSITION YCOORD) of LASTPOINT])(\DSPBOTTOMMARGIN.PSC  [LAMBDA (STREAM YPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of (fetch (STREAM IMAGEDATA)                                                                         of STREAM))        (COND           (YPOSITION (replace (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN)                         of (fetch (STREAM IMAGEDATA) of STREAM) with YPOSITION))))])(\DSPCLIPPINGREGION.PSC  [LAMBDA (STREAM REGION)                     (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OLDCLIP (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA)))          (COND             ([AND REGION (NOT (AND (EQP (fetch (REGION LEFT) of OLDCLIP)                                         (fetch (REGION LEFT) of REGION))                                    (EQP (fetch (REGION BOTTOM) of OLDCLIP)                                         (fetch (REGION BOTTOM) of REGION))                                    (EQP (fetch (REGION WIDTH) of OLDCLIP)                                         (fetch (REGION WIDTH) of REGION))                                    (EQP (fetch (REGION HEIGHT) of OLDCLIP)                                         (fetch (REGION HEIGHT) of REGION]              (POSTSCRIPT.SHOWACCUM STREAM)              (replace (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA with                                                                                       REGION)              (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with T)              (\FIXLINELENGTH.PSC STREAM IMAGEDATA)))          OLDCLIP])(\DSPCOLOR.PSC  [LAMBDA (STREAM COLOR)                                 (* ; "Edited 14-Jan-93 17:14 by jds")    (* ;;   "Postscript %"color%" setter -- really sets gray shade for now.  0.0 = black, 1.0 = white.")    (POSTSCRIPT.SHOWACCUM STREAM)    (PROG1 (FETCH (\POSTSCRIPTDATA POSTSCRIPTCOLOR) OF (FETCH (STREAM IMAGEDATA)                                                                  OF STREAM))        (COND           ((AND (NUMBERP COLOR)                 (<= 0 COLOR 1))            (REPLACE (\POSTSCRIPTDATA POSTSCRIPTCOLOR) OF (FETCH (STREAM IMAGEDATA)                                                                     OF STREAM) WITH COLOR)            (POSTSCRIPT.PUTCOMMAND STREAM :EOL COLOR " setgray "))           (COLOR (\ILLEGAL.ARG COLOR))))])(\DSPFONT.PSC  [LAMBDA (STREAM FONT)                                  (* ; "Edited 19-Jan-93 17:17 by jds")    (* ;; "Change fonts on the PostScript stream STREAM to be FONT.")    (* ;; "Doesn't actually write the font-change command to the stream (it saves doing that until the font is actually needed, so that multiple font changes don't yield larger PS files).")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OLDFONT (fetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA))           NEWFONT FONTID)          (COND             ((AND FONT (SETQ NEWFONT (OR (\COERCEFONTDESC FONT STREAM)                                          (FONTCOPY OLDFONT FONT)))                   (type? FONTDESCRIPTOR NEWFONT)                   (NEQ NEWFONT OLDFONT))              (* ;; "OK, it's a good font.")              (POSTSCRIPT.SHOWACCUM STREAM)              (* ;                                                            " Write out any accumulated characters.")              (* ;; "Change the font in the Lisp stream:")              (replace (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA with NEWFONT)              [SETQ FONTID (fetch (PSCFONT IL-FONTID) of (LISTGET (fetch (FONTDESCRIPTOR                                                                                                                                                                       OTHERDEVICEFONTPROPS                                                                                      ) of                                                                                               NEWFONT                                                                                 )                                                                        'PSCFONT]              (COND                 ((MEMB (fetch (FONTID FONTIDNAME) of FONTID)                        *POSTSCRIPT-UNACCENTED-FONTS*)                  (FREPLACE (\POSTSCRIPTDATA POSTSCRIPTACCENTED) OF IMAGEDATA WITH NIL))                 (T (freplace (\POSTSCRIPTDATA POSTSCRIPTACCENTED) of IMAGEDATA with                                                                                        T)))              (replace (\POSTSCRIPTDATA POSTSCRIPTWIDTHS) of IMAGEDATA                 with (fetch (CHARSETINFO WIDTHS) of (\GETBASEPTR (fetch                                                                                     FONTCHARSETVECTOR                                                                                 of NEWFONT)                                                                        0)))              [replace (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA                 with (FIXR (TIMES (fetch (\POSTSCRIPTDATA POSTSCRIPTSPACEFACTOR)                                          of IMAGEDATA)                                       (\FGETWIDTH (fetch (\POSTSCRIPTDATA POSTSCRIPTWIDTHS)                                                      of IMAGEDATA)                                              (CHARCODE SPACE]              (* ;; "Remember to actually write a change command")              (replace (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of IMAGEDATA with                                                                                       T)              (\DSPLINEFEED.PSC STREAM (IMINUS (fetch (FONTDESCRIPTOR \SFHeight) of                                                                                         NEWFONT)))              (\FIXLINELENGTH.PSC STREAM IMAGEDATA)))          OLDFONT])(\DSPLEFTMARGIN.PSC  [LAMBDA (STREAM XPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA)             (COND                (XPOSITION (replace (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA                              with XPOSITION)                       (\FIXLINELENGTH.PSC STREAM IMAGEDATA))))])(\DSPLINEFEED.PSC  [LAMBDA (STREAM LINELEADING)                (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTLINESPACING) of (fetch (STREAM IMAGEDATA)                                                                        of STREAM))        (COND           (LINELEADING (replace (\POSTSCRIPTDATA POSTSCRIPTLINESPACING)                           of (fetch (STREAM IMAGEDATA) of STREAM) with LINELEADING))           ))])(\DSPPUSHSTATE.PSC  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:12 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (push (fetch (\POSTSCRIPTDATA POSTSCRIPTXFORMSTACK) of IMAGEDATA)                (create POSTSCRIPTXFORM                       PSXCLIP _ (COPY (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION)                                          of IMAGEDATA))                       PSXPAGE _ (COPY (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION) of                                                                                         IMAGEDATA))                       PSXLEFT _ (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA)                       PSXRIGHT _ (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA                                         )                       PSXTOP _ (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA)                       PSXBOTTOM _ (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of                                                                                             IMAGEDATA                                          )                       PSXTRANX _ (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA)                       PSXTRANY _ (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA)                       PSXLAND _ (fetch (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA)                       PSXXFORMPEND _ (fetch (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM)                                         of IMAGEDATA])(\DSPPOPSTATE.PSC  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:15 by sybalsky:mv:envos")    (LET* [(IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (XFORM (pop (fetch (\POSTSCRIPTDATA POSTSCRIPTXFORMSTACK) of IMAGEDATA]          (replace (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXCLIP) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXPAGE) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXBOTTOM) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXTOP) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXLEFT) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXRIGHT) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTLANDSCAPE) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXLAND) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA             with (fetch (POSTSCRIPTXFORM PSXXFORMPEND) of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA with                                                                           (fetch (                                                                                      POSTSCRIPTXFORM                                                                                       PSXTRANX)                                                                              of XFORM))          (replace (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA with                                                                           (fetch (                                                                                      POSTSCRIPTXFORM                                                                                       PSXTRANY)                                                                              of XFORM])(\DSPRESET.PSC  [LAMBDA (STREAM)                            (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (replace (STREAM CHARPOSITION) of STREAM with 0)         (\MOVETO.PSC STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA)                (DIFFERENCE (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA)                       (FONTPROP (fetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA)                              'ASCENT])(\DSPRIGHTMARGIN.PSC  [LAMBDA (STREAM XPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM)))         (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA)             (COND                (XPOSITION (replace (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA                              with XPOSITION)                       (\FIXLINELENGTH.PSC STREAM IMAGEDATA))))])(\DSPROTATE.PSC  [LAMBDA (STREAM ROTATION)                   (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (* ;; "rotate the postscript  stream by ROTATION")    (* ;;   "we only know 90 degrees of rotation for now (0 means portrait, anything else is landscape).")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OROT (fetch (\POSTSCRIPTDATA POSTSCRIPTROTATION) of IMAGEDATA))           LAND C0 P0 C P ML MB MR MT)          (COND             ((AND ROTATION (NEQ ROTATION (fetch (\POSTSCRIPTDATA POSTSCRIPTROTATION)                                             of IMAGEDATA)))              (POSTSCRIPT.SHOWACCUM STREAM)              (replace (\POSTSCRIPTDATA POSTSCRIPTROTATION) of IMAGEDATA with ROTATION)              (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with T)              (\DSPRESET.PSC STREAM)))          OROT])(\DSPSCALE.PSC  [LAMBDA (STREAM SCALE)                      (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OSCALE (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA))           NSCALE)          (COND             ((AND NIL                    (* ;; "Changing SCALE is not implemented.  According to IRM.")                   (NUMBERP SCALE)                   (CL:PLUSP SCALE))              (SETQ NSCALE (QUOTIENT SCALE OSCALE))              (* ;;       "NSCALE is the adjustment for the fact that the scale operator takes RELATIVE scale changes.")              (POSTSCRIPT.PUTCOMMAND STREAM " " NSCALE " " NSCALE " scale" :EOL)              (replace (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA with SCALE)))          OSCALE])(\DSPSCALE2.PSC  [LAMBDA (STREAM X-SCALE Y-SCALE)            (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (* ;; "SETS X AND Y SCALE ")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OSCALE (fetch (\POSTSCRIPTDATA POSTSCRIPTSCALE) of IMAGEDATA))           NSCALE)          (COND             ((AND X-SCALE (NUMBERP X-SCALE)                   (CL:PLUSP X-SCALE))              (POSTSCRIPT.SHOWACCUM STREAM)              (\UPDATE.PSC STREAM IMAGEDATA)              (* ;;       "NSCALE is the adjustment for the fact that the scale operator takes RELATIVE scale changes.")              (POSTSCRIPT.PUTCOMMAND STREAM " " X-SCALE " " Y-SCALE " scale" :EOL)))          T])(\DSPSPACEFACTOR.PSC  [LAMBDA (STREAM FACTOR)                     (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (DECLARE (LOCALVARS . T))    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (OLDFACTOR (fetch (\POSTSCRIPTDATA POSTSCRIPTSPACEFACTOR) of IMAGEDATA)))          [COND             ((AND (NUMBERP FACTOR)                   (NOT (EQUAL FACTOR OLDFACTOR)))              (POSTSCRIPT.SHOWACCUM STREAM)              (replace (\POSTSCRIPTDATA POSTSCRIPTSPACEFACTOR) of IMAGEDATA with FACTOR)              (replace (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA                 with (FIXR (TIMES FACTOR (\FGETWIDTH (fetch (\POSTSCRIPTDATA                                                                             POSTSCRIPTWIDTHS)                                                             of IMAGEDATA)                                                     (CHARCODE SPACE]          OLDFACTOR])(\DSPTOPMARGIN.PSC  [LAMBDA (STREAM YPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (PROG1 (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of (fetch (STREAM IMAGEDATA)                                                                      of STREAM))        (COND           (YPOSITION (replace (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of (fetch                                                                                 (STREAM IMAGEDATA)                                                                                   of STREAM)                         with YPOSITION))))])(\DSPTRANSLATE.PSC  [LAMBDA (STREAM TX TY)                      (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))           (MDX (DIFFERENCE (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA)                       TX))           (MDY (DIFFERENCE (fetch (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA)                       TY)))          (COND             ((NOT (AND (ZEROP MDX)                        (ZEROP MDY)))              (POSTSCRIPT.SHOWACCUM STREAM)              (for REG in (LIST (fetch (\POSTSCRIPTDATA POSTSCRIPTCLIPPINGREGION)                                           of IMAGEDATA)                                        (fetch (\POSTSCRIPTDATA POSTSCRIPTPAGEREGION)                                           of IMAGEDATA)) do (CL:INCF (fetch (REGION                                                                                          LEFT)                                                                                 of REG)                                                                            MDX)                                                                    (CL:INCF (fetch (REGION                                                                                         BOTTOM)                                                                                of REG)                                                                           MDY))              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)                     MDX)              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA)                     MDY)              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTLEFTMARGIN) of IMAGEDATA)                     MDX)              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA)                     MDX)              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTBOTTOMMARGIN) of IMAGEDATA)                     MDY)              (CL:INCF (fetch (\POSTSCRIPTDATA POSTSCRIPTTOPMARGIN) of IMAGEDATA)                     MDY)              (replace (\POSTSCRIPTDATA POSTSCRIPTTRANSX) of IMAGEDATA with TX)              (replace (\POSTSCRIPTDATA POSTSCRIPTTRANSY) of IMAGEDATA with TY)              (replace (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA with T])(\DSPXPOSITION.PSC  [LAMBDA (STREAM XPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          OLDX)         (PROG1 (SETQ OLDX (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA))             [COND                ((AND XPOSITION (NOT (EQUAL XPOSITION OLDX)))                 (\MOVETO.PSC STREAM XPOSITION (fetch (\POSTSCRIPTDATA POSTSCRIPTY)                                                      of IMAGEDATA])])(\DSPYPOSITION.PSC  [LAMBDA (STREAM YPOSITION)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))          OLDY)         (PROG1 (SETQ OLDY (fetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA))             (COND                ((AND YPOSITION (NOT (EQUAL YPOSITION OLDY)))                 (\MOVETO.PSC STREAM (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)                        YPOSITION))))])(\FILLCIRCLE.PSC  [LAMBDA (STREAM CENTERX CENTERY RADIUS TEXTURE) (* ; "Edited 30-Mar-90 17:59 by Matt Heffron")    (LET (TEXTUREBM TEXTUREWIDTH)         (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")         (if (FIXP TEXTURE)             then (if (ZEROP TEXTURE)                          then (SETQ TEXTURE 1.0)        (* ; "The setgray version of white")                        elseif (OR (EQL TEXTURE 65535)                                       (EQL TEXTURE -1))                          then (SETQ TEXTURE 0.0)        (* ; "The setgray version of black")                             ))         (if (FLOATP TEXTURE)             then                    (* ;;                  "If TEXTURE is a FLOATP, then it is specified in PostScript setgray notation.")                   (POSTSCRIPT.PUTCOMMAND STREAM TEXTURE " setgray ")           elseif (OR (TEXTUREP TEXTURE)                          (NULL TEXTURE))             then (SETQ TEXTUREBM (BITMAPCREATE 16 16 1))                   (SETQ TEXTUREWIDTH 16)                   (BLTSHADE TEXTURE TEXTUREBM)           elseif (BITMAPP TEXTURE)             then (SETQ TEXTUREWIDTH (MIN (fetch BITMAPWIDTH of TEXTUREBM)                                              (fetch BITMAPHEIGHT of TEXTUREBM)))                   (SETQ TEXTUREBM (BITMAPCREATE TEXTUREWIDTH TEXTUREWIDTH 1))                   (BITBLT TEXTURE 0 0 TEXTUREBM 0 0 TEXTUREWIDTH TEXTUREWIDTH 'INPUT 'REPLACE))         (POSTSCRIPT.PUTCOMMAND STREAM " " CENTERX " " CENTERY " " RADIUS " 0 360 arc" :EOL)         (if TEXTUREBM             then (POSTSCRIPT.PUTCOMMAND STREAM "100 100 scale ")                   (POSTSCRIPT.PUTBITMAPBYTES STREAM TEXTUREBM T)                   (POSTSCRIPT.PUTCOMMAND STREAM TEXTUREWIDTH " " (LSH (fetch                                                                                   BITMAPRASTERWIDTH                                                                              of TEXTUREBM)                                                                           1)                          " 0 "                          (TIMES 72 (QUOTIENT (DSPSCALE NIL STREAM)                                           100.0))                          " findresolution " TEXTUREWIDTH " div div ceiling "                           POSTSCRIPT.TEXTURE.SCALE " mul setpattern eofill" :EOL "grestore" :EOL)           else (POSTSCRIPT.PUTCOMMAND STREAM " eofill" :EOL "grestore" :EOL))         (\MOVETO.PSC STREAM CENTERX CENTERY])(\FILLPOLYGON.PSC  [LAMBDA (STREAM KNOTS TEXTURE OPERATION WINDNUMBER)                                                  (* ;                                                 "Edited 20-Nov-92 15:17 by sybalsky:mv:envos")    (DECLARE (SPECVARS FILL.WRULE))    (* ;; "OPERATION is ignored here")    (LET ((LASTPOINT (CAR (LAST KNOTS)))          TEXTUREBM TEXTUREWIDTH)         (POSTSCRIPT.PUTCOMMAND STREAM :EOL "gsave newpath ")         (if (NOT (OR (ZEROP WINDNUMBER)                          (EQL WINDNUMBER 1)))             then (SETQ WINDNUMBER FILL.WRULE))         (if (FIXP TEXTURE)             then (if (ZEROP TEXTURE)                          then (SETQ TEXTURE 1.0)        (* ; "The setgray version of white")                        elseif (OR (EQL TEXTURE 65535)                                       (EQL TEXTURE -1))                          then (SETQ TEXTURE 0.0)        (* ; "The setgray version of black")                             ))         (if (FLOATP TEXTURE)             then                    (* ;;                  "If TEXTURE is a FLOATP, then it is specified in PostScript setgray notation.")                   (POSTSCRIPT.PUTCOMMAND STREAM TEXTURE " setgray ")           elseif (OR (TEXTUREP TEXTURE)                          (NULL TEXTURE))             then (SETQ TEXTUREBM (BITMAPCREATE 16 16 1))                   (SETQ TEXTUREWIDTH 16)                   (BLTSHADE TEXTURE TEXTUREBM)           elseif (BITMAPP TEXTURE)             then (SETQ TEXTUREWIDTH (MIN (fetch BITMAPWIDTH of TEXTUREBM)                                              (fetch BITMAPHEIGHT of TEXTUREBM)))                   (SETQ TEXTUREBM (BITMAPCREATE TEXTUREWIDTH TEXTUREWIDTH 1))                   (BITBLT TEXTURE 0 0 TEXTUREBM 0 0 TEXTUREWIDTH TEXTUREWIDTH 'INPUT 'REPLACE))         (POSTSCRIPT.PUTCOMMAND STREAM (fetch (POSITION XCOORD) of (CAR KNOTS))                " "                (fetch (POSITION YCOORD) of (CAR KNOTS))                " M" :EOL)         (for K in (CDR KNOTS) do (POSTSCRIPT.PUTCOMMAND STREAM (fetch                                                                                 (POSITION XCOORD)                                                                                   of K)                                                     " "                                                     (fetch (POSITION YCOORD) of K)                                                     " lineto" :EOL))         (POSTSCRIPT.PUTCOMMAND STREAM " closepath" :EOL)         (if TEXTUREBM             then (POSTSCRIPT.PUTCOMMAND STREAM "100 100 scale ")                   (POSTSCRIPT.PUTBITMAPBYTES STREAM TEXTUREBM T)                   (POSTSCRIPT.PUTCOMMAND STREAM TEXTUREWIDTH " " (LSH (fetch                                                                                   BITMAPRASTERWIDTH                                                                              of TEXTUREBM)                                                                           1)                          " 0 "                          (TIMES 72 (QUOTIENT (DSPSCALE NIL STREAM)                                           100.0))                          " findresolution " TEXTUREWIDTH " div div ceiling "                           POSTSCRIPT.TEXTURE.SCALE " mul setpattern"))         (POSTSCRIPT.PUTCOMMAND STREAM (if (ZEROP WINDNUMBER)                                               then " fill"                                             else " eofill")                :EOL "grestore" :EOL)         (\MOVETO.PSC STREAM (fetch (POSITION XCOORD) of LASTPOINT)                (fetch (POSITION YCOORD) of LASTPOINT])(\FIXLINELENGTH.PSC  [LAMBDA (STREAM IMAGEDATA)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (* ;; "Called by margin, font or rotation change to update the LINELENGTH field in the stream.")    (LET [(TMP (MIN MAX.SMALLP (FIX (QUOTIENT (DIFFERENCE (fetch (\POSTSCRIPTDATA                                                                             POSTSCRIPTRIGHTMARGIN)                                                             of IMAGEDATA)                                                     (ffetch (\POSTSCRIPTDATA                                                                         POSTSCRIPTLEFTMARGIN)                                                        of IMAGEDATA))                                           (fetch FONTAVGCHARWIDTH of (ffetch                                                                               (\POSTSCRIPTDATA                                                                                POSTSCRIPTFONT)                                                                                 of IMAGEDATA]         (replace (STREAM LINELENGTH) of STREAM with (COND                                                                    ((GREATERP TMP 1)                                                                     TMP)                                                                    (T 10])(\MOVETO.PSC  [LAMBDA (STREAM X Y)                        (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (LET ((IMAGEDATA (ffetch (STREAM IMAGEDATA) of STREAM)))         (COND            ([NOT (AND (EQP X (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA))                       (EQP Y (ffetch (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA]             (POSTSCRIPT.SHOWACCUM STREAM)             (freplace (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA with X)             (freplace (\POSTSCRIPTDATA POSTSCRIPTY) of IMAGEDATA with Y)             (freplace (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA with T])(\NEWPAGE.PSC  [LAMBDA (STREAM)                                       (* ; "Edited  5-Apr-89 17:31 by TAL")    (POSTSCRIPT.ENDPAGE STREAM)    (POSTSCRIPT.STARTPAGE STREAM]))(* ;; "Character-output, plus special-cases:")(DEFINEQ(\POSTSCRIPT.OUTCHARFN  [LAMBDA (STREAM CHAR)                                  (* ; "Edited 14-Jan-93 17:30 by jds")(* ;;; "Output a character to be printed.   NS chars are not handled yet.")(* ;;; "Change font if necessary, do newline if at right margin, check for special chars and do appropriate thing, quote char and/or start postscript string if necessary.")(* ;;; "This is called a lot, so the code is unrolled for efficiancy.")(* ;;;; "")(* ;;;; "Need to inc CHARPOSITION of STREAM")    (DECLARE (GLOBALVARS \POSTSCRIPT.CHARTYPE)           (LOCALVARS . T))    (PROG* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))            (XPOS (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA))            (FONT (ffetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA))            [CHARWID (SELCHARQ CHAR                          (SPACE (ffetch (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA))                          (\FGETWIDTH (ffetch (\POSTSCRIPTDATA POSTSCRIPTWIDTHS) of IMAGEDATA                                             )                                 (\CHAR8CODE CHAR]            NEWXPOS MAPPING)           [COND              ([OR (NOT (FFETCH (\POSTSCRIPTDATA POSTSCRIPTACCENTED) OF IMAGEDATA))                   (AND (ILEQ CHAR 254)                        (NOT (CL:AREF \POSTSCRIPT.CHARTYPE CHAR]                                                             (* ; "non-NIL if char is special in any way; ALWAYS NIL if this font isn't supposed to be treated as an NS font (e.g. ZapfDingbats, which uses all the legal char positions for its own)")               [COND                  ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                          (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA))                   (\TERPRI.PSC STREAM)                   (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)                                        CHARWID]               (COND                  ((NOT (ffetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA))                   (COND                      ((ffetch (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA)                       (\SETXFORM.PSC STREAM IMAGEDATA)))                   (COND                      ((ffetch (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of IMAGEDATA)                                                             (* ;                                                   "If font was changed then switch before printing")                       (\SWITCHFONTS.PSC STREAM IMAGEDATA)))                   (COND                      ((ffetch (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA)                                                             (* ; "likewise for position")                       (\SETPOS.PSC STREAM IMAGEDATA)))                   (BOUT STREAM (CHARCODE %())                   (freplace (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA                      with T)))               (BOUT STREAM CHAR)               (freplace (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA with NEWXPOS))              [(SETQ MAPPING (GETHASH CHAR *POSTSCRIPT-NS-HASH*))                                                             (* ;                                         "Special character that's taken care of by the NS mapping.")               (SELECTQ (CAR MAPPING)                   (NIL                                      (* ;                                                            "just a remap within the lower 256.")                        (\POSTSCRIPT.OUTCHARFN STREAM (CDR MAPPING)))                   (SYMBOL                                   (* ; "Its in the SYMBOL font")                           (\POSTSCRIPT.SYMBOLOUTCHAR STREAM (CDR MAPPING)))                   (ACCENT                                   (* ; "Special accent mapping we did")                           (\POSTSCRIPT.ACCENTFN STREAM (CDR MAPPING)))                   (DINGBAT                                  (* ; "A Zapf dingbat")                            (\POSTSCRIPT.DINGBATOUTCHAR STREAM (CDR MAPPING)))                   (FUNCTION                                 (* ; "Done as special PS code.")                             [COND                                ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                                        (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN)                                           of IMAGEDATA))                                 (\TERPRI.PSC STREAM)                                 (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTX)                                                         of IMAGEDATA)                                                      CHARWID]                             (POSTSCRIPT.SHOWACCUM STREAM)                             (\UPDATE.PSC STREAM IMAGEDATA)                             (POSTSCRIPT.OUTSTR STREAM (CDR MAPPING)))                   (\ILLEGAL.ARG (CAR MAPPING]              (T                                             (* ; "Special char")                 (SELCHARQ CHAR                      ((EOL LF)                            (\TERPRI.PSC STREAM))                      (FF (DSPNEWPAGE STREAM))                      (TAB (SETQ NEWXPOS (IPLUS XPOS (\POSTSCRIPTTAB IMAGEDATA)))                           [COND                              ((IGREATERP NEWXPOS (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN)                                                     of IMAGEDATA))                               (\TERPRI.PSC STREAM)                               (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTX)                                                       of IMAGEDATA)                                                    (\POSTSCRIPTTAB IMAGEDATA]                           (\MOVETO.PSC STREAM NEWXPOS (ffetch (\POSTSCRIPTDATA POSTSCRIPTY)                                                              of IMAGEDATA)))                      ("357,140"                             (* ; " Ballot box, checked")                                 (LET* ((OLDFONT (DSPFONT NIL STREAM))                                        (SIZE (fetch (FONTDESCRIPTOR FONTSIZE) of OLDFONT)))                                       [COND                                          ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                                                  (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN)                                                     of IMAGEDATA))                                           (\TERPRI.PSC STREAM)                                           (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA                                                                                    POSTSCRIPTX)                                                                   of IMAGEDATA)                                                                CHARWID]                                       (POSTSCRIPT.SHOWACCUM STREAM)                                       (DSPFONT (LIST 'ZAPFDINGBATS SIZE)                                              STREAM)                                       (\UPDATE.PSC STREAM IMAGEDATA)                                       (POSTSCRIPT.OUTSTR STREAM " bboxchk ")                                       (DSPFONT OLDFONT STREAM)))                      (PROGN (SETQ CHAR (\CHAR8CODE CHAR))                             [COND                                ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                                        (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN)                                           of IMAGEDATA))                                 (\TERPRI.PSC STREAM)                                 (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTX)                                                         of IMAGEDATA)                                                      CHARWID]                             (COND                                ((NOT (ffetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW)                                         of IMAGEDATA))                                 (\UPDATE.PSC STREAM IMAGEDATA)                                 (BOUT STREAM (CHARCODE %())                                 (freplace (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of                                                                                             IMAGEDATA                                    with T)))                             (BOUT STREAM (CHARCODE \))                             [SELCHARQ CHAR                                  ((%( %) \)                                        (BOUT STREAM CHAR))                                  (PROGN [BOUT STREAM (IPLUS (CHARCODE 0)                                                             (LOGAND 3 (LRSH CHAR 6]                                         [BOUT STREAM (IPLUS (CHARCODE 0)                                                             (LOGAND 7 (LRSH CHAR 3]                                         (BOUT STREAM (IPLUS (CHARCODE 0)                                                             (LOGAND 7 CHAR]                             (freplace (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA                                with NEWXPOS]           (RETURN CHAR])(\UPDATE.PSC  [LAMBDA (STREAM IMAGEDATA)                  (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")    (* ;; "Make any outstanding font, scale, location updates, prepatory to something that might depend heavily on it. (e.g. before starting to output characters, or making a scale change)")                                                             (* ;                  "This code was originally in \POSTSCRIPT.OUTCHAR &c, and is here for commonality.")    (COND       ((ffetch (\POSTSCRIPTDATA POSTSCRIPTPENDINGXFORM) of IMAGEDATA)        (\SETXFORM.PSC STREAM IMAGEDATA)))    (COND       ((ffetch (\POSTSCRIPTDATA POSTSCRIPTFONTCHANGEDFLG) of IMAGEDATA)                                                             (* ;                                                   "If font was changed then switch before printing")        (\SWITCHFONTS.PSC STREAM IMAGEDATA)))    (COND       ((ffetch (\POSTSCRIPTDATA POSTSCRIPTMOVEFLG) of IMAGEDATA)                                                             (* ; "likewise for position")        (\SETPOS.PSC STREAM IMAGEDATA])(\POSTSCRIPT.SYMBOLOUTCHAR  [LAMBDA (STREAM CHARCODE)                              (* ; "Edited 30-Apr-92 18:23 by jds")    (* ;; "Print a character that's really in the Symbol font:  Change to Symbol, print the char, then change back.  Specify the symbol as %"2,xxx%" rather than %"0,xxx%" to defeat translations to symbol that go to matching character codes.")    (LET* ((OLDFONT (DSPFONT NIL STREAM))           (SIZE (fetch (FONTDESCRIPTOR FONTSIZE) of OLDFONT)))          (DSPFONT (LIST 'SYMBOL SIZE)                 STREAM)          (\POSTSCRIPT.OUTCHARFN STREAM CHARCODE)          (DSPFONT OLDFONT STREAM])(\POSTSCRIPT.DINGBATOUTCHAR  [LAMBDA (STREAM CHARCODE)                              (* ; "Edited  4-Aug-92 11:47 by jds")    (* ;; "Print a character that's really in the Symbol font:  Change to Symbol, print the char, then change back.  Specify the symbol as %"2,xxx%" rather than %"0,xxx%" to defeat translations to symbol that go to matching character codes.")    (LET* ((OLDFONT (DSPFONT NIL STREAM))           (SIZE (fetch (FONTDESCRIPTOR FONTSIZE) of OLDFONT)))          (DSPFONT (LIST 'ZAPFDINGBATS SIZE)                 STREAM)          (\POSTSCRIPT.OUTCHARFN STREAM CHARCODE)          (DSPFONT OLDFONT STREAM])(\POSTSCRIPT.ACCENTFN  [LAMBDA (STREAM CHAR)                       (* ;                                                 "Edited 20-Nov-92 15:13 by sybalsky:mv:envos")(* ;;; "Output an accented character to be printed.  .")(* ;;;; "Prints the character as \xxx, with 3 octal digits, to avoid tripping up on EOLs and other postscript-special characters.")(* ;;;; "Need to inc CHARPOSITION of STREAM")    (DECLARE (GLOBALVARS \POSTSCRIPT.CHARTYPE)           (LOCALVARS . T))    (PROG* ((IMAGEDATA (fetch (STREAM IMAGEDATA) of STREAM))            (XPOS (fetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA))            (FONT (ffetch (\POSTSCRIPTDATA POSTSCRIPTFONT) of IMAGEDATA))            [CHARWID (SELCHARQ CHAR                          (SPACE (ffetch (\POSTSCRIPTDATA POSTSCRIPTSPACEWIDTH) of IMAGEDATA))                          (\FGETWIDTH (ffetch (\POSTSCRIPTDATA POSTSCRIPTWIDTHS) of IMAGEDATA                                             )                                 (\CHAR8CODE CHAR]            NEWXPOS)           [COND              ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                      (ffetch (\POSTSCRIPTDATA POSTSCRIPTRIGHTMARGIN) of IMAGEDATA))               (\TERPRI.PSC STREAM)               (SETQ NEWXPOS (IPLUS (ffetch (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA)                                    CHARWID]           (COND              ((NOT (ffetch (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA))               \UPDATE.PSC               (BOUT STREAM (CHARCODE %())               (freplace (\POSTSCRIPTDATA POSTSCRIPTCHARSTOSHOW) of IMAGEDATA with T)))           (BOUT STREAM (CHARCODE "\"))           (for CH instring (SUBSTRING (CONCAT "000" (OCTALSTRING CHAR))                                           -3) do (BOUT STREAM CH))           (freplace (\POSTSCRIPTDATA POSTSCRIPTX) of IMAGEDATA with NEWXPOS)           (RETURN CHAR]))(* ;; "The mapping of NS characters to Postscript renderings, both as an AList and as a hashtable")(DEFINEQ(\POSTSCRIPT.NSHASH  [LAMBDA (MAPPING-LIST)                      (* ;                                                 "Edited 17-Nov-92 17:47 by sybalsky:mv:envos")    (LET ((HASH (HARRAY 255)))         [for MAPPING in MAPPING-LIST            do (COND                      ((NOT (EQ (CAR MAPPING)                                '*))                         (* ;                                                            "Skip comments in the mapping list.")                       (PUTHASH (APPLY* 'CHARCODE (CAR MAPPING))                              [CONS (CADR MAPPING)                                    (SELECTQ (CADR MAPPING)                                        (FUNCTION (CADDR MAPPING))                                        (APPLY* 'CHARCODE (CADDR MAPPING]                              HASH]         HASH]))(RPAQQ *POSTSCRIPT-UNACCENTED-FONTS* (Dancer ZapfDingbats "Dancer" "ZapfDingbats"))(RPAQQ *POSTSCRIPT-NS-TRANSLATIONS* (("0,244" NIL "2,250")                                         ("0,254" SYMBOL "2,254")                                         ("0,255" SYMBOL "2,255")                                         ("0,256" SYMBOL "2,256")                                         ("0,257" SYMBOL "2,257")                                         ("0,260" SYMBOL "2,260")                                         ("0,261" SYMBOL "2,261")                                         ("0,264" SYMBOL "2,264")                                         ("0,270" SYMBOL "2,270")                                         ("0,274" FUNCTION " f14 ")                                         ("0,275" FUNCTION " f12 ")                                         ("0,276" FUNCTION " f34 ")                                         ("0,322" SYMBOL "2,342")                                         ("0,323" SYMBOL "2,343")                                         ("0,324" SYMBOL "2,344")                                         ("0,334" FUNCTION " f18 ")                                         ("0,335" FUNCTION " f38 ")                                         ("0,336" FUNCTION " f58 ")                                         ("0,337" FUNCTION " f78 ")                                         ("41,172" DINGBAT "0,110")                                         ("42,42" DINGBAT "0,161")                                                             (* ; "ballot-box")                                         ("357,44" NIL "2,261")                                         ("357,45" NIL "2,320")                                         ("357,60" NIL "2,262")                                         ("357,61" NIL "2,263")                                         ("357,70" SYMBOL "2,315")                                         ("357,101" NIL "2,275")                                         ("357,110" SYMBOL "2,312")                                         ("357,111" SYMBOL "2,315")                                         ("357,116" SYMBOL "2,333")                                         ("357,120" SYMBOL "2,253")                                         ("357,121" SYMBOL "2,333")                                         ("357,122" SYMBOL "2,333")                                         ("357,146" NIL "2,267")                                         ("357,264" SYMBOL "2,44")                                         ("357,265" SYMBOL "2,42")                                         ("357,317" DINGBAT "0,63")                                         ("357,375" FUNCTION " f13 ")                                         ("357,376" FUNCTION " f23 ")                                         ("361,042" ACCENT "0,1")                                         ("361,043" ACCENT "0,2")                                         ("361,047" ACCENT "0,3")                                         ("361,041" ACCENT "0,4")                                         ("361,044" ACCENT "0,6")                                         ("361,050" ACCENT "0,5")                                         ("361,055" ACCENT "0,7")                                         ("361,060" ACCENT "0,13")                                         ("361,061" ACCENT "0,10")                                         ("361,062" ACCENT "0,11")                                         ("361,065" ACCENT "0,12")                                         ("361,076" ACCENT "0,17")                                         ("361,077" ACCENT "0,14")                                         ("361,100" ACCENT "0,15")                                         ("361,104" ACCENT "0,16")                                         ("361,114" ACCENT "0,20")                                         ("361,117" ACCENT "0,24")                                         ("361,120" ACCENT "0,21")                                         ("361,121" ACCENT "0,22")                                         ("361,122" ACCENT "0,25")                                         ("361,124" ACCENT "0,23")                                         ("361,134" ACCENT "0,26")                                         ("361,137" ACCENT "0,32")                                         ("361,140" ACCENT "0,27")                                         ("361,141" ACCENT "0,30")                                         ("361,145" ACCENT "0,31")                                         ("361,155" ACCENT "0,33")                                         ("361,160" ACCENT "0,34")                                         ("361,241" ACCENT "0,204")                                         ("361,242" ACCENT "0,201")                                         ("361,243" ACCENT "0,202")                                         ("361,244" ACCENT "0,206")                                         ("361,247" ACCENT "0,203")                                         ("361,250" ACCENT "0,205")                                         ("361,255" ACCENT "0,207")                                         ("361,260" ACCENT "0,213")                                         ("361,261" ACCENT "0,210")                                         ("361,262" ACCENT "0,211")                                         ("361,265" ACCENT "0,212")                                         ("361,276" ACCENT "0,217")                                         ("361,277" ACCENT "0,214")                                         ("361,300" ACCENT "0,215")                                         ("361,304" ACCENT "0,216")                                         ("361,314" ACCENT "0,220")                                         ("361,317" ACCENT "0,224")                                         ("361,320" ACCENT "0,221")                                         ("361,321" ACCENT "0,222")                                         ("361,322" ACCENT "0,225")                                         ("361,324" ACCENT "0,223")                                         ("361,334" ACCENT "0,226")                                         ("361,337" ACCENT "0,232")                                         ("361,340" ACCENT "0,227")                                         ("361,341" ACCENT "0,230")                                         ("361,345" ACCENT "0,231")                                         ("361,355" ACCENT "0,233")                                         ("361,360" ACCENT "0,234")                                                                                  (* ;; "NS Greek characters")                                         ("46,101" SYMBOL "2,101")                                                             (* ; "Alpha")                                         ("46,102" SYMBOL "2,102")                                                             (* ; "Beta")                                         ("46,103" SYMBOL 0)                                                             (* ; "--empty--")                                         ("46,104" SYMBOL "2,107")                                                             (* ; "Gamma")                                         ("46,105" SYMBOL "2,104")                                                             (* ; "Delta")                                         ("46,106" SYMBOL "2,105")                                                             (* ; "Epsilon")                                         ("46,107" SYMBOL 0)                                                             (* ; "Stigma")                                         ("46,110" SYMBOL 0)                                                             (* ; "Digamma")                                         ("46,111" SYMBOL "2,132")                                                             (* ; "Zeta")                                         ("46,112" SYMBOL "2,110")                                                             (* ; "Eta")                                         ("46,113" SYMBOL "2,121")                                                             (* ; "Theta")                                         ("46,114" SYMBOL "2,111")                                                             (* ; "Iota")                                         ("46,115" SYMBOL "2,113")                                                             (* ; "Kappa")                                         ("46,116" SYMBOL "2,114")                                                             (* ; "Lambda")                                         ("46,117" SYMBOL "2,115")                                                             (* ; "Mu")                                         ("46,120" SYMBOL "2,116")                                                             (* ; "Nu")                                         ("46,121" SYMBOL "2,130")                                                             (* ; "Xi")                                         ("46,122" SYMBOL "2,117")                                                             (* ; "Omicron")                                         ("46,123" SYMBOL "2,120")                                                             (* ; "Pi")                                         ("46,124" SYMBOL 0)                                                             (* ; "Koppa")                                         ("46,125" SYMBOL "2,122")                                                             (* ; "Rho")                                         ("46,126" SYMBOL "2,123")                                                             (* ; "Sigma")                                         ("46,127" SYMBOL 0)                                                             (* ; "--empty--")                                         ("46,130" SYMBOL "2,124")                                                             (* ; "Tau")                                         ("46,131" SYMBOL "2,125")                                                             (* ; "Upsilon")                                         ("46,132" SYMBOL "2,106")                                                             (* ; "Phi")                                         ("46,133" SYMBOL "2,103")                                                             (* ; "Chi")                                         ("46,134" SYMBOL "2,131")                                                             (* ; "Psi")                                         ("46,135" SYMBOL "2,132")                                                             (* ; "Omega")                                         ("46,141" SYMBOL "2,141")                                                             (* ; "alpha")                                         ("46,142" SYMBOL "2,142")                                                             (* ; "beta")                                         ("46,143" SYMBOL 0)                                                             (* ; "(md beta)")                                         ("46,144" SYMBOL "2,147")                                                             (* ; "gamma")                                         ("46,145" SYMBOL "2,144")                                                             (* ; "delta")                                         ("46,146" SYMBOL "2,145")                                                             (* ; "epsilon")                                         ("46,147" SYMBOL "2,126")                                                             (* ; "stigma")                                         ("46,150" SYMBOL 0)                                                             (* ; "digamma")                                         ("46,151" SYMBOL "2,172")                                                             (* ; "zeta")                                         ("46,152" SYMBOL "2,150")                                                             (* ; "eta")                                         ("46,153" SYMBOL "2,161")                                                             (* ; "theta")                                         ("46,154" SYMBOL "2,151")                                                             (* ; "iota")                                         ("46,155" SYMBOL "2,153")                                                             (* ; "kappa")                                         ("46,156" SYMBOL "2,154")                                                             (* ; "lambda")                                         ("46,157" SYMBOL "2,155")                                                             (* ; "mu")                                         ("46,160" SYMBOL "2,156")                                                             (* ; "nu")                                         ("46,161" SYMBOL "2,170")                                                             (* ; "xi")                                         ("46,162" SYMBOL "2,157")                                                             (* ; "omicron")                                         ("46,163" SYMBOL "2,160")                                                             (* ; "pi")                                         ("46,164" SYMBOL 0)                                                             (* ; "(koppa)")                                         ("46,165" SYMBOL "2,162")                                                             (* ; "rho")                                         ("46,166" SYMBOL "2,163")                                                             (* ; "sigma")                                         ("46,167" SYMBOL "2,126")                                                             (* ; "(fl sigma)")                                         ("46,170" SYMBOL "2,164")                                                             (* ; "tau")                                         ("46,171" SYMBOL "2.165")                                                             (* ; "upsilon")                                         ("46,172" SYMBOL "2,146")                                                             (* ; "phi")                                         ("46,173" SYMBOL "2,143")                                                             (* ; "chi")                                         ("46,174" SYMBOL "2,171")                                                             (* ; "psi")                                         ("46,175" SYMBOL "2,167")                                                             (* ; "omega")))(RPAQ *POSTSCRIPT-NS-HASH* (\POSTSCRIPT.NSHASH *POSTSCRIPT-NS-TRANSLATIONS*))(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE (PUTPROPS \POSTSCRIPT.FRACTION MACRO ((STREAM STRING)                                 (* ;; "Handle printing of a fraction, given a string that's the name of the PS function (defined in \POSTSCRIPT.JOB.SETUP) that prints it.  You must put spaces around the name.")                                      (POSTSCRIPT.SHOWACCUM STREAM)                                      [COND                                         ((IGREATERP (SETQ NEWXPOS (IPLUS XPOS CHARWID))                                                 (ffetch POSTSCRIPTRIGHTMARGIN of IMAGEDATA))                                          (\TERPRI.PSC STREAM)                                          (SETQ NEWXPOS (IPLUS (ffetch POSTSCRIPTX of                                                                                             IMAGEDATA                                                                      )                                                               CHARWID]                                      [COND                                         ((NOT (ffetch POSTSCRIPTCHARSTOSHOW of IMAGEDATA))                                          (COND                                             ((ffetch POSTSCRIPTPENDINGXFORM of IMAGEDATA)                                              (\SETXFORM.PSC STREAM IMAGEDATA)))                                          (COND                                             ((ffetch POSTSCRIPTFONTCHANGEDFLG of IMAGEDATA)                                                             (* ;                                                   "If font was changed then switch before printing")                                              (\SWITCHFONTS.PSC STREAM IMAGEDATA)))                                          (COND                                             ((ffetch POSTSCRIPTMOVEFLG of IMAGEDATA)                                                             (* ; "likewise for position")                                              (\SETPOS.PSC STREAM IMAGEDATA]                                      (POSTSCRIPT.OUTSTR STREAM STRING)))))(RPAQ \POSTSCRIPT.ORIENTATION.MENU (create MENU ITEMS _ '(("Landscape" T                                             "Print this file/document/image in Landscape Orientation"                                                                     )                                                              ("Portrait" 'NIL                                              "Print this file/document/image in Portrait Orientation"                                                                     ))                                              TITLE _ "Orientation" CENTERFLG _ T MENUOFFSET _                                              (create POSITION XCOORD _ -1 YCOORD _ 0)                                              CHANGEOFFSETFLG _ 'Y))(RPAQ \POSTSCRIPT.ORIENTATION.OPTIONS.MENU (create MENU ITEMS _ '(("Ask" 'ASK                                    "Always ask whether to print in Landscape or Portrait Orientation"                                                                             )                                                                      ("Landscape" T                                                           "Default printing to Landscape Orientation"                                                                             )                                                                      ("Portrait" 'NIL                                                            "Default printing to Portrait Orientation"                                                                             ))                                                      TITLE _ "Default Orientation" CENTERFLG _ T))(RPAQ PS.BITMAPARRAY (READARRAY-FROM-LIST 16 (QUOTE BYTE) 0 (QUOTE (48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 NIL))))(RPAQQ \POSTSCRIPT.JOB.SETUP        ("/bdef {bind def} bind def" "/ldef {load def} bdef" "/S /show ldef" "/M /moveto ldef"               "/DR {transform round exch round exch itransform} bdef"               "/L {gsave newpath setlinewidth 0 setlinecap"               "  M lineto currentpoint stroke grestore M} bdef"               "/L1 {gsave newpath 0 setdash setgray setlinewidth 0 setlinecap"               "  M lineto currentpoint stroke grestore M} bdef"               "/F {findfont exch scalefont setfont} bdef"               "/CLP {newpath M dup 0 rlineto exch 0 exch rlineto"               "  neg 0 rlineto closepath clip newpath} bdef"               "/R {gsave setgray newpath M dup 0 rlineto exch 0 exch"               "  rlineto neg 0 rlineto closepath eofill grestore} bdef" "/ellipsedict 9 dict def"               "ellipsedict /mtrx matrix put" "/ellipse" " { ellipsedict begin" "  /endangle exch def"              "  /startangle exch def" "  /orientation exch def" "  /minorrad exch def"               "  /majorrad exch def" "  /y exch def" "  /x exch def"               "  /savematrix mtrx currentmatrix def" "  x y translate" "  orientation rotate"               "  majorrad minorrad scale" "  0 0 1 startangle endangle arc" "  savematrix setmatrix"              " end } bdef" "/concatprocs" " {/proc2 exch cvlit def" "  /proc1 exch cvlit def"               "  /newproc proc1 length proc2 length add array def" "  newproc 0 proc1 putinterval"               "  newproc proc1 length proc2 putinterval" "  newproc cvx" " } bdef"               "/resmatrix matrix def" "/findresolution" " {72 0 resmatrix defaultmatrix dtransform"               "  /yres exch def /xres exch def" "  xres dup mul yres dup mul add sqrt" " } bdef"               "/thebitimage" " {/maskp exch def" "  /bihgt exch def" "  /biwid exch def"               "  /byte 1 string def" "  /strbufl biwid 8 div ceiling cvi def"               "  /strbuf strbufl string def"               "  maskp not{{1 exch sub} currenttransfer concatprocs settransfer} if" "  biwid bihgt"              "  maskp { true } { 1 } ifelse" "  [biwid 0 0 bihgt 0 0]" "  {/col 0 def"               "   {currentfile byte readhexstring pop 0 get" "    dup 16#B2 eq {pop"               "    currentfile byte readhexstring pop 0 get 1 add"               "    currentfile byte readhexstring pop pop /nbyte byte 0 get def"               "    { strbuf col nbyte put /col col 1 add def} repeat}"               "   {dup 16#B3 eq {pop /col col" "    currentfile byte readhexstring pop"               "    0 get add 1 add def}" "    {16#B4 eq {currentfile byte readhexstring pop pop} if"              "     strbuf col byte 0 get put /col col 1 add def} ifelse" "   } ifelse"               "   col strbufl ge { exit } if } loop" "   strbuf }"               "  maskp { imagemask } { image } ifelse" " } bdef" "/setuserscreendict 22 dict def"               "setuserscreendict begin" " /tempctm matrix def" " /temprot matrix def"               " /tempscale matrix def" "end" "/setuserscreen" " {setuserscreendict begin"               "   /spotfunction exch def" "   /screenangle exch def" "   /cellsize exch def"               "   /m tempctm currentmatrix def" "   /rm screenangle temprot rotate def"               "   /sm cellsize dup tempscale scale def"               "   sm rm m m concatmatrix m concatmatrix pop"               "   1 0 m dtransform /y1 exch def /x1 exch def"               "   /veclength x1 dup mul y1 dup mul add sqrt def"               "   /frequency findresolution veclength div def" "   /newscreenangle y1 x1 atan def"               "   m 2 get m 1 get mul m 0 get m 3 get mul sub"               "   0 gt { { neg } /spotfunction load concatprocs"               "          /spotfunction exch def } if"               "   frequency newscreenangle /spotfunction load setscreen" "  end" " } bdef"               "/setpatterndict 18 dict def" "setpatterndict begin" " /bitison"               "  {/ybit exch def /xbit exch def"               "   /bytevalue bstring ybit bwidth mul xbit 8 idiv add get def"               "   /mask 1 7 xbit 8 mod sub bitshift def" "   bytevalue mask and 0 ne" "  } bdef"               "end" "/bitpatternspotfunction" " {setpatterndict begin" "   /y exch def /x exch def"               "   /xindex x 1 add 2 div bpside mul 1 sub cvi def"               "   /yindex y 1 add 2 div bpside mul 1 sub cvi def" "   xindex yindex bitison"               "    {/onbits onbits 1 add def 1}" "    {/offbits offbits 1 add def 0} ifelse" "  end"              " } bdef" "/setpattern" " {setpatterndict begin" "   /cellsz exch def"               "   /angle exch def" "   /bwidth exch def" "   /bpside exch def" "   /bstring exch def"              "   /onbits 0 def /offbits 0 def"               "   cellsz angle /bitpatternspotfunction load setuserscreen" "   {} settransfer"               "   offbits offbits onbits add div setgray" "  end" " } bdef"               "%% - - - - - Fraction-setting code, to support NS fonts better - - - - -"               "/fractiondict 20 dict def" "/fractionshow " "{ fractiondict begin" "/denom exch def "              "/num exch def " "/regfont currentfont def"               "/fractfont currentfont [.65 0 0 .6 0 0] makefont def " "gsave newpath 0 0 moveto "               "(1) true charpath flattenpath pathbbox " "/height exch def pop pop pop" " grestore"               "0 .4 height mul rmoveto" "fractfont setfont num show"               "0 .4 height mul neg rmoveto regfont setfont (\244) show"               "fractfont setfont denom show regfont setfont end } bdef"               "/f14 { (1) (4) fractionshow } bdef" "/f12 { (1) (2) fractionshow } bdef"               "/f34 { (3) (4) fractionshow } bdef" "/f18 { (1) (8) fractionshow } bdef"               "/f38 { (3) (8) fractionshow } bdef" "/f58 { (5) (8) fractionshow } bdef"               "/f78 { (7) (8) fractionshow } bdef" "/f13 { (1) (3) fractionshow } bdef"               "/f23 { (2) (3) fractionshow } bdef" "/bboxdict 20 dict def"               "/bboxchk { bboxdict begin" "/regfont currentfont def"               "/chkfont currentfont [1.25 0 0 1.25 0 0] makefont def " "gsave newpath 0 0 moveto "               "(\161) true charpath flattenpath pathbbox " "/height exch def pop pop pop "               " grestore " " currentpoint " " .2 height mul .3 height mul rmoveto"               "chkfont setfont (\063) show" " moveto" " regfont setfont" "(\161) show end } bdef"               "/rencdict 15 dict def" "/encodefont { rencdict begin" "/newname exch def"               "/oldfont exch def" "/newcodes [" "8#001 /Aacute" "8#002 /Acircumflex"               "8#003 /Adieresis" "8#004 /Agrave" "8#005 /Aring" "8#006 /Atilde" "8#007 /Ccedilla"               "8#010 /Eacute" "8#011 /Ecircumflex" "8#012 /Edieresis" "8#013 /Egrave" "8#014 /Iacute"              "8#015 /Icircumflex" "8#016 /Idieresis" "8#017 /Igrave" "8#020 /Ntilde" "8#021 /Oacute"              "8#022 /Ocircumflex" "8#023 /Odieresis" "8#024 /Ograve" "8#025 /Otilde" "8#026 /Scaron"              "8#027 /Uacute" "8#030 /Ucircumflex" "8#031 /Udieresis" "8#032 /Ugrave"               "8#033 /Ydieresis" "8#034 /Zcaron" "8#201 /aacute" "8#202 /acircumflex"               "8#203 /adieresis" "8#204 /agrave" "8#205 /aring" "8#206 /atilde" "8#207 /ccedilla"               "8#210 /eacute" "8#211 /ecircumflex" "8#212 /edieresis" "8#213 /egrave" "8#214 /iacute"              "8#215 /icircumflex" "8#216 /idieresis" "8#217 /igrave" "8#220 /ntilde" "8#221 /oacute"              "8#222 /ocircumflex" "8#223 /odieresis" "8#224 /ograve" "8#225 /otilde" "8#226 /scaron"              "8#227 /uacute" "8#230 /ucircumflex" "8#231 /udieresis" "8#232 /ugrave"               "8#233 /ydieresis" "8#234 /zcaron" " ] def"               "/olddict oldfont findfont def /newfont olddict maxlength dict def"               "olddict { exch dup /FID ne { dup /Encoding eq"               "{ exch dup length array copy newfont 3 1 roll put }"               "{ exch newfont 3 1 roll put } ifelse }" " { pop pop } ifelse } forall"               "newfont /FontName newname put" "newcodes aload pop"               "newcodes length 2 idiv { newfont /Encoding get 3 1 roll put } repeat "               "newname newfont definefont pop end } def" "%%%%EndProlog" "%%%%BeginSetup"))(RPAQQ SlopeMenuItems ((Italic 'ITALIC "This is an Italic Slope font")                           (Regular 'REGULAR "This is a Regular Slope font")))(RPAQQ WeightMenuItems ((Bold 'BOLD "This is a Bold Weight font")                            (Medium 'MEDIUM "This is a Medium Weight font")                            (Light 'LIGHT "This is a Light Weight font")))(ADDTOVAR BackgroundMenuCommands ("PS Orientation" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE                                                              (MENU                                                                  \POSTSCRIPT.ORIENTATION.OPTIONS.MENU                                                                    ))                                            "Select the default Orientation for PostScript output"                                            (SUBITEMS ("Ask" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE                                                                    'ASK)                                                                                                "Always ask whether to print in Landscape or Portrait Orientation"                                                             )                                                   ("Landscape" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE T)                                                          "Default printing to Landscape Orientation"                                                          )                                                   ("Portrait" '(SETQ POSTSCRIPT.PREFER.LANDSCAPE NIL                                                                      )                                                          "Default printing to Portrait Orientation")                                                   )))(RPAQQ BackgroundMenu NIL)(DECLARE%: EVAL@COMPILE (RPAQQ GOLDEN.RATIO 1.618034)(RPAQQ \PS.SCALE0 100)(RPAQQ \PS.TEMPARRAYLEN 20)(CONSTANTS (GOLDEN.RATIO 1.618034)       (\PS.SCALE0 100)       (\PS.TEMPARRAYLEN 20)))(RPAQ? POSTSCRIPT.BITMAP.SCALE 1)(RPAQ? POSTSCRIPT.EOL 'CR)(RPAQ? POSTSCRIPT.IMAGESIZEFACTOR 1)(RPAQ? POSTSCRIPT.PREFER.LANDSCAPE NIL)(RPAQ? POSTSCRIPT.TEXTFILE.LANDSCAPE NIL)(RPAQ? POSTSCRIPT.DEFAULT.PAGEREGION '(4800 4800 52800 70800))(RPAQ? POSTSCRIPT.TEXTURE.SCALE 4)(RPAQ? POSTSCRIPTFONTDIRECTORIES (LIST (COND ((EQ (MACHINETYPE)                                                      'MAIKO)                                                  "{dsk}/USR/LOCAL/LDE/FONTS/POSTSCRIPT/")                                                 (T "{DSK}<LISPFILES>POSTSCRIPT>"))))(RPAQ? \POSTSCRIPT.MAX.WILD.FONTSIZE 72)(ADDTOVAR POSTSCRIPT.FONT.ALIST (HELVETICA . HELVETICA)                                    (HELVETICAD . HELVETICA)                                    (TIMESROMAN . TIMES)                                    (TIMESROMAND . TIMES)                                    (COURIER . COURIER)                                    (GACHA . COURIER)                                    (CLASSIC . NEWCENTURYSCHLBK)                                    (MODERN . HELVETICA)                                    (CREAM . HELVETICA)                                    (TERMINAL . COURIER)                                    (LOGO . HELVETICA)                                    (TITAN . COURIER))(ADDTOVAR PRINTERTYPES ((POSTSCRIPT)                            (CANPRINT (POSTSCRIPT))                            (STATUS TRUE)                            (PROPERTIES NILL)                            (SEND UnixPrint)                            (BITMAPSCALE POSTSCRIPT.BITMAPSCALE)                            (BITMAPFILE (POSTSCRIPT.HARDCOPYW FILE BITMAP SCALEFACTOR REGION ROTATION                                               TITLE))))(ADDTOVAR PRINTFILETYPES (POSTSCRIPT (TEST POSTSCRIPTFILEP)                                    (EXTENSION (PS PSC))                                    (CONVERSION (TEXT POSTSCRIPT.TEXT TEDIT POSTSCRIPT.TEDIT))))(ADDTOVAR IMAGESTREAMTYPES (POSTSCRIPT (OPENSTREAM OPENPOSTSCRIPTSTREAM)                                      (FONTCREATE POSTSCRIPT.FONTCREATE)                                      (FONTSAVAILABLE POSTSCRIPT.FONTSAVAILABLE)                                      (CREATECHARSET NILL)))(RPAQ? POSTSCRIPT.PAGETYPE 'LETTER)(APPENDTOVAR POSTSCRIPT.PAGEREGIONS (LETTER (0 0 8.5 11)                                               (-0.1 -0.1 8.7 11.2))                                        (LEGAL (0 0 8.5 14)                                               (-0.1 -0.1 8.7 14.2))                                        (NOTE (0 0 8.5 11)                                              (-0.1 -0.1 8.7 11.2)))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS DEFAULTPRINTINGHOST POSTSCRIPT.BITMAP.SCALE POSTSCRIPT.EOL POSTSCRIPT.FONT.ALIST        POSTSCRIPT.PREFER.LANDSCAPE POSTSCRIPT.TEXTFILE.LANDSCAPE POSTSCRIPT.TEXTURE.SCALE        POSTSCRIPTFONTDIRECTORIES \POSTSCRIPT.JOB.SETUP \POSTSCRIPT.MAX.WILD.FONTSIZE        \POSTSCRIPT.ORIENTATION.MENU \POSTSCRIPTIMAGEOPS POSTSCRIPT.PAGETYPE POSTSCRIPT.PAGEREGIONS))(DECLARE%: DONTEVAL@LOAD DOCOPY (POSTSCRIPT.INIT))(PUTPROPS POSTSCRIPTSTREAM FILETYPE :TCOMPL)(PUTPROPS POSTSCRIPTSTREAM MAKEFILE-ENVIRONMENT (:PACKAGE "INTERLISP" :READTABLE "INTERLISP"))(DECLARE%: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDTOVAR NLAMA )(ADDTOVAR NLAML )(ADDTOVAR LAMA POSTSCRIPT.PUTCOMMAND))(PUTPROPS POSTSCRIPTSTREAM COPYRIGHT ("Venue  This program or documentation contains confidential information and trade secrets of Venue.  Reverse engineering, reverse compiling and disassembling of object code are prohibited.  Use of this program or documentation is governed by written agreement with Venue.  Use of copyright notice is precautionary and does not imply publication or disclosure of trade secrets" 1989 1990 1991 1992 1993))(DECLARE%: DONTCOPY  (FILEMAP (NIL (37036 42884 (POSTSCRIPT.INIT 37046 . 42882)) (42920 71724 (PSCFONT.READFONT 42930 . 44488) (PSCFONT.SPELLFILE 44490 . 44910) (PSCFONT.WRITEFONT 44912 . 45744) (READ-AFM-FILE 45746 . 49643) (POSTSCRIPT.GETFONTID 49645 . 51040) (POSTSCRIPT.FONTCREATE 51042 . 67954) (POSTSCRIPT.FONTSAVAILABLE 67956 . 71722)) (71725 77794 (OPENPOSTSCRIPTSTREAM 71735 . 77528) (CLOSEPOSTSCRIPTSTREAM 77530 . 77792)) (77795 82393 (POSTSCRIPT.HARDCOPYW 77805 . 81154) (POSTSCRIPT.TEDIT 81156 . 81636) (POSTSCRIPT.TEXT 81638 . 81929) (POSTSCRIPTFILEP 81931 . 82391)) (82394 127712 (POSTSCRIPT.BITMAPSCALE 82404 . 84740) (POSTSCRIPT.CLOSESTRING 84742 . 85276) (POSTSCRIPT.ENDPAGE 85278 . 86149) (POSTSCRIPT.OUTSTR 86151 . 87172) (POSTSCRIPT.PUTBITMAPBYTES 87174 . 95850) (POSTSCRIPT.PUTCOMMAND 95852 . 96976) (POSTSCRIPT.SET-FAKE-LANDSCAPE 96978 . 102426) (POSTSCRIPT.SHOWACCUM 102428 . 104796) (POSTSCRIPT.STARTPAGE 104798 . 107136) (\POSTSCRIPTTAB 107138 . 108009) (\PS.BOUTFIXP 108011 . 109361) (\PS.SCALEHACK 109363 . 112192) (\PS.SCALEREGION 112194 . 112754) (\SCALEDBITBLT.PSC 112756 . 116600) (\SETPOS.PSC 116602 . 117064) (\SETXFORM.PSC 117066 . 119828) (\STRINGWIDTH.PSC 119830 . 120284) (\SWITCHFONTS.PSC 120286 . 126339) (\TERPRI.PSC 126341 . 127710)) (127747 181200 (\BITBLT.PSC 127757 . 128310) (\BLTSHADE.PSC 128312 . 132594) (\CHARWIDTH.PSC 132596 . 133173) (\DRAWARC.PSC 133175 . 135655) (\DRAWCIRCLE.PSC 135657 . 138066) (\DRAWCURVE.PSC 138068 . 142089) (\DRAWELLIPSE.PSC 142091 . 144568) (\DRAWLINE.PSC 144570 . 146920) (\DRAWPOINT.PSC 146922 . 147510) (\DRAWPOLYGON.PSC 147512 . 150626) (\DSPBOTTOMMARGIN.PSC 150628 . 151193) (\DSPCLIPPINGREGION.PSC 151195 . 152638) (\DSPCOLOR.PSC 152640 . 153481) (\DSPFONT.PSC 153483 . 157223) (\DSPLEFTMARGIN.PSC 157225 . 157794) (\DSPLINEFEED.PSC 157796 . 158372) (\DSPPUSHSTATE.PSC 158374 . 160137) (\DSPPOPSTATE.PSC 160139 . 162648) (\DSPRESET.PSC 162650 . 163296) (\DSPRIGHTMARGIN.PSC 163298 . 163870) (\DSPROTATE.PSC 163872 . 164895) (\DSPSCALE.PSC 164897 . 165828) (\DSPSCALE2.PSC 165830 . 166649) (\DSPSPACEFACTOR.PSC 166651 . 167716) (\DSPTOPMARGIN.PSC 167718 . 168435) (\DSPTRANSLATE.PSC 168437 . 171011) (\DSPXPOSITION.PSC 171013 . 171612) (\DSPYPOSITION.PSC 171614 . 172186) (\FILLCIRCLE.PSC 172188 . 174834) (\FILLPOLYGON.PSC 174836 . 178752) (\FIXLINELENGTH.PSC 178754 . 180248) (\MOVETO.PSC 180250 . 181001) (\NEWPAGE.PSC 181003 . 181198)) (181256 195561 (\POSTSCRIPT.OUTCHARFN 181266 . 190978) (\UPDATE.PSC 190980 . 192203) (\POSTSCRIPT.SYMBOLOUTCHAR 192205 . 192855) (\POSTSCRIPT.DINGBATOUTCHAR 192857 . 193514) (\POSTSCRIPT.ACCENTFN 193516 . 195559)) (195670 196553 (\POSTSCRIPT.NSHASH 195680 . 196551)))))STOP