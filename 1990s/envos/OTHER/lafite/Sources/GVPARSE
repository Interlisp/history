(DEFINE-FILE-INFO PACKAGE "INTERLISP" READTABLE "INTERLISP" BASE 10)(FILECREATED " 8-Oct-87 15:46:53" {ERIS}<LAFITE>SOURCES>GVPARSE.;5 9567         changes to%:  (VARS GVPARSECOMS) (FNS PARSE-RECIPIENTS PARSE-SIMPLE-RECIPIENT REPACK-FIELDS FIRST-NON-SPACE \GV.HANDLE.DL PARSE-FIELD)      previous date%: " 6-Oct-87 18:13:47" {ERIS}<LAFITE>SOURCES>GVPARSE.;1)(* "Copyright (c) 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT GVPARSECOMS)(RPAQQ GVPARSECOMS ((FNS FIRST-NON-SPACE PARSE-RECIPIENTS PARSE-SIMPLE-RECIPIENT REPACK-FIELDS \GV.HANDLE.DL) (INITVARS (LAFITEDL.EXT "DL") (LAFITEDLDIRECTORIES NIL))))(DEFINEQ(FIRST-NON-SPACE(LAMBDA (STR START END) (* ; "Edited  8-Oct-87 15:02 by bvm:") (* ;; "returns the next non-white-space char in str from position start to end.") (bind CH do (if (>= START END) then (RETURN NIL) else (CASE (SETQ CH (CL:AREF STR START)) ((#\Space #\Tab #\Newline) (add START 1)) (T (RETURN CH)))))))(PARSE-RECIPIENTS(LAMBDA (LINE REGISTRY INTERNALFLG EDITWINDOW RECURSIVE-P) (* ; "Edited  8-Oct-87 15:25 by bvm:") (* ;;; "INTERNALFLG = T means produce addresses to give Grapevine;  NIL means give human-readable addresses") (PROG ((I 0) NC NOPEN CH ADDRESSES ADDR FAILURE OPEN CLOSE DOT ATSIGN START RAWPARSE COLON COMSTART COMMENTS PRETTY) (COND ((NULL LINE) (RETURN NIL))) (OR REGISTRY (SETQ REGISTRY DEFAULTREGISTRY)) (SETQ NC (NCHARS LINE)) NEXTADDR (if (>= I NC) then (* ; "done") (RETURN (REVERSE ADDRESSES))) (CASE (SETQ CH (CL:AREF LINE I)) ((#\Space #\Tab #\Newline) (* ; "Ignore leading whitespace") (add I 1) (GO NEXTADDR))) (SETQ START I) (SETQ OPEN (SETQ CLOSE (SETQ DOT (SETQ ATSIGN (SETQ COMMENTS NIL))))) THISCHAR (CASE CH (#\" (GO INQUOTE)) (#\( (GO INCOMMENT)) (#\[ (GO INDOMAIN)) ((#\) #\]) (* ; "Unbalanced stuff") (SETQ FAILURE CH) (GO FAIL)) (#\< (* ; "Start of address spec") (if OPEN then (SETQ FAILURE #\<) (GO FAIL) else (SETQ OPEN I))) (#\> (* ; "End of address spec") (if OPEN then (SETQ CLOSE I) else (SETQ FAILURE #\>) (GO FAIL))) (#\. (if (NOT CLOSE) then (* ; "Note placement of periods.  Ignore if outside <> address.") (SETQ DOT I))) (#\@ (if (NOT CLOSE) then (* ; "Note arpa address separator") (SETQ ATSIGN I) (SETQ DOT NIL))) (#\: (if (OR OPEN ATSIGN COLON) then (SETQ FAILURE "Invalid use of colon") (GO FAIL) else (if (EQ (FIRST-NON-SPACE LINE (+ I 1) NC) #\;) then (* ; "DL in the form %"dlname:;%" -- get recipients from file") (SETQ ADDR (\GV.HANDLE.DL (REPACK-FIELDS LINE START I) INTERNALFLG EDITWINDOW)) (if (EQ (CAR ADDR) :ERROR) then (SETQ FAILURE (CADR ADDR)) (GO FAIL) else (SETQ ADDRESSES (NCONC ADDR ADDRESSES))) else (* ; "Random phrase naming the group, followed by the addresses--just parse them as they come along, and note that we expect a semi-colon at some point.")) (SETQ COLON I) (add I 1) (GO NEXTADDR))) ((NIL #\, #\;) (* ; "end of address") (if (CASE CH (#\; (if (NOT COLON) then (SETQ FAILURE #\;) else (CASE (FIRST-NON-SPACE LINE (+ I 1) NC) ((NIL #\,) (* ; "good--semi is at end of address.  Consider it eaten") (SETQ COLON NIL)) (T (* ; "Stuff after the semicolon is bad syntax") (SETQ FAILURE "Semi-colon must be at end of group specification"))))) ((NIL) (* ; "end of everything, check that there's no outstanding colon") (if COLON then (SETQ FAILURE #\:)))) then (* ; "Problem with this semi-colon") (GO FAIL)) (if (NEQ START I) then (* ; "there is a name") (if (NOT OPEN) then (* ; "simple address") (SETQ ADDR (PARSE-SIMPLE-RECIPIENT LINE START I DOT ATSIGN COMMENTS REGISTRY INTERNALFLG EDITWINDOW)) elseif (NOT CLOSE) then (SETQ FAILURE #\<) (GO FAIL) else (* ; "real address is inside the <>") (SETQ ADDR (PARSE-SIMPLE-RECIPIENT LINE (+ OPEN 1) CLOSE DOT ATSIGN COMMENTS REGISTRY INTERNALFLG EDITWINDOW)) (CASE INTERNALFLG ((NIL :BOTH) (* ; "Want pretty address--stick the reparsed real address inside the template") (SETQ PRETTY (CL:FORMAT NIL "~@[~A ~]<~A>~@[ ~A~]" (REPACK-FIELDS LINE START OPEN) (if INTERNALFLG then (CAR ADDR) else ADDR) (REPACK-FIELDS LINE (+ CLOSE 1) I))) (SETQ ADDR (if INTERNALFLG then (* ; "Want (pretty . internal)") (CONS PRETTY (CDR ADDR)) else PRETTY))))) (push ADDRESSES ADDR)) (add I 1) (GO NEXTADDR))) NEXT-I (SETQ CH (AND (< (add I 1) NC) (CL:AREF LINE I))) (GO THISCHAR) INQUOTE (* ;; "Parse a quoted string--skip to next quote") (while (< (add I 1) NC) do (CASE (CL:AREF LINE I) (#\" (* ; "end of quoted text") (GO NEXT-I)) (#\\ (* ; "quotes next char") (add I 1)))) (* ;; "If we get here, we have an unbalanced quote") (SETQ FAILURE #\") (GO FAIL) INCOMMENT (* ;; "Parse a comment in parens. Parentheses may be nested.  Add to set of comments") (SETQ COMSTART I) (SETQ NOPEN 1) (while (< (add I 1) NC) do (CASE (CL:AREF LINE I) (#\) (if (EQ (SETQ NOPEN (- NOPEN 1)) 0) then (* ; "end of comment--parens are now matched") (if INTERNALFLG then (* ; "We will need to know how to strip comments") (push COMMENTS (LIST COMSTART (+ I 1)))) (GO NEXT-I))) (#\( (* ; "nested comment") (add NOPEN 1)) (#\\ (* ; "quotes next char") (add I 1)))) (* ;; "If we get here, we have an unbalanced paren") (SETQ FAILURE #\() (GO FAIL) INDOMAIN (* ;; "Parse a domain literal--string in square brackets.  These may not be nested.") (while (< (add I 1) NC) do (CASE (CL:AREF LINE I) (#\] (* ; "end of literal") (GO NEXT-I)) (#\[ (* ; "unmatched") (RETURN)) (#\\ (* ; "quotes next char") (add I 1)))) (* ;; "If we get here, we have an unbalanced bracket") (SETQ FAILURE #\[) (GO FAIL) FAIL (HELP FAILURE) (RETURN (COND (RECURSIVE-P FAILURE) ((NOT EDITWINDOW) (* ; "No interaction, just show failure by returning (NIL)") (LIST NIL)) ((CL:CHARACTERP FAILURE) (\SENDMESSAGEFAIL EDITWINDOW "Error: " (if (EQ FAILURE #\") then "Unmatched quotation mark" else (CL:FORMAT NIL "Unmatched %"~C%"" FAILURE)))) (T (\SENDMESSAGEFAIL EDITWINDOW FAILURE)))))))(PARSE-SIMPLE-RECIPIENT(LAMBDA (FIELD START END DOT ATSIGN COMMENTS REGISTRY INTERNALFLG EDITWINDOW) (* ; "Edited  8-Oct-87 15:32 by bvm:") (* ;;; "Parses a single ADDRESS, a list, and returns a proper address as a string, or if INTERNALFLG, in the form Grapevine likes") (COND ((EQ INTERNALFLG :BOTH) (LET ((INTERNAL (PARSE-SIMPLE-RECIPIENT FIELD START END DOT ATSIGN COMMENTS REGISTRY T EDITWINDOW))) (AND INTERNAL (CONS (PARSE-SIMPLE-RECIPIENT FIELD START END DOT ATSIGN COMMENTS REGISTRY NIL EDITWINDOW) INTERNAL)))) (INTERNALFLG (LET (TMP) (if (NULL DOT) then (SETQ TMP (REPACK-FIELDS FIELD START END COMMENTS)) (if (NULL ATSIGN) then (* ; "use default registry") (CONS TMP REGISTRY) elseif (EQ (CL:AREF TMP (- (NCHARS TMP) 1)) #\@) then (* ; "@ but no domain?") (\GV.PARSE.FAILED EDITWINDOW TMP) else (* ; "Assume name is otherwise good, use default arpa registry") (CONS TMP ARPANETGATEWAY.REGISTRY)) else (* ; "Take the domain/registry that's there") (SETQ TMP (CONS (REPACK-FIELDS FIELD START DOT COMMENTS) (REPACK-FIELDS FIELD (+ DOT 1) END COMMENTS))) (if (NULL (CDR TMP)) then (* ; "no domain?") (\GV.PARSE.FAILED EDITWINDOW (CONCAT (CAR TMP) ".")) else TMP)))) ((OR ATSIGN DOT) (* ; "have an ARPA Internet address, or Grapevine address with registry--nothing to add to make user-sensible address") (if (NULL (FIRST-NON-SPACE FIELD (OR ATSIGN DOT) END)) then (* ; "no domain") (\GV.PARSE.FAILED EDITWINDOW (REPACK-FIELDS FIELD START END)) else (REPACK-FIELDS FIELD START END))) (T (* ; "Address without registry, supply default") (CONCAT (REPACK-FIELDS FIELD START END) "." REGISTRY)))))(REPACK-FIELDS(LAMBDA (STR START END COMMENTS) (* ; "Edited  8-Oct-87 15:39 by bvm:") (if COMMENTS then (LET (TMP PIECES) (SETQ PIECES (for PAIR in (if (CDR COMMENTS) then (REVERSE COMMENTS) else COMMENTS) when (AND (<= START (CAR PAIR)) (< (CAR PAIR) END) (PROG1 (SETQ TMP (REPACK-FIELDS STR START (CAR PAIR))) (SETQ START (CADR PAIR)))) join (LIST " " TMP))) (if (SETQ TMP (REPACK-FIELDS STR START END)) then (SETQ PIECES (NCONC PIECES (LIST " " TMP)))) (CONCATLIST (CDR PIECES))) else (* ; "trim white space from edges") (while (AND (< START END) (CASE (CL:AREF STR START) ((#\Space #\Tab #\Newline) T))) do (add START 1)) (while (AND (< START END) (CASE (CL:AREF STR (- END 1)) ((#\Space #\Tab #\Newline) T))) do (add END -1)) (AND (< START END) (CL:SUBSEQ STR START END)))))(\GV.HANDLE.DL(LAMBDA (DL INTERNALFLG EDITWINDOW) (* ; "Edited  8-Oct-87 14:36 by bvm:") (if (NULL INTERNALFLG) then (* ; "Don't want the actual addresses, just something to stick in a header") (LIST (CONCAT DL ":;")) else (LET ((FILENAME (FINDFILE (PACKFILENAME.STRING (QUOTE BODY) (if (EQL (CL:AREF DL 0) #\") then (* ; "quoted file name, take off the quotes first") (CL:SUBSEQ DL 1 (- (CL:LENGTH DL) 1)) else DL) (QUOTE EXTENSION) LAFITEDL.EXT) T (CONS LAFITEDEFAULTHOST&DIR LAFITEDLDIRECTORIES))) STREAM) (if (NULL FILENAME) then (LIST :ERROR (CONCAT "Can't find dl " DL)) elseif (NULL (SETQ STREAM (CAR (NLSETQ (OPENTEXTSTREAM (MKATOM FILENAME)))))) then (LIST :ERROR (CONCAT "Can't open " DL)) else (RESETLST (RESETSAVE NIL (LIST (QUOTE CLOSEF) STREAM)) (* ; "I hope this closes the file.  We used OPENTEXTSTREAM instead of OPEN so that file can contain tedit formatting.") (bind LINE SOME RESULT while (SETQ LINE (CL:READ-LINE STREAM NIL NIL)) when (SETQ SOME (PARSE-RECIPIENTS LINE NIL INTERNALFLG EDITWINDOW T)) do (if (EQ (CAR SOME) :ERROR) then (RETURN SOME) else (SETQ RESULT (NCONC SOME RESULT))) finally (* ; "Whole file parsed ok, so return the result") (RETURN RESULT)))))))))(RPAQ? LAFITEDL.EXT "DL")(RPAQ? LAFITEDLDIRECTORIES NIL)(PUTPROPS GVPARSE COPYRIGHT ("Xerox Corporation" 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (651 9420 (FIRST-NON-SPACE 661 . 980) (PARSE-RECIPIENTS 982 . 5825) (PARSE-SIMPLE-RECIPIENT 5827 . 7432) (REPACK-FIELDS 7434 . 8219) (\GV.HANDLE.DL 8221 . 9418)))))STOP