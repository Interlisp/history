(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE (DEFPACKAGE "NFS" (USE "LISP" "XCL")))(IL:FILECREATED "17-Jul-90 16:24:36" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>NFS.\;2 15471        IL:|changes| IL:|to:|  (IL:VARS IL:NFSCOMS)                             (IL:PROPS (IL:NFS IL:MAKEFILE-ENVIRONMENT))                             (IL:FILES IL:YP IL:NFSDEVICE)      IL:|previous| IL:|date:| " 3-Apr-89 14:55:43" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>NFS.\;1); Copyright (c) 1988, 1989, 1990 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:NFSCOMS)(IL:RPAQQ IL:NFSCOMS (                          (IL:* IL:|;;| "Network File Service Based on Sun NFS Protocol")                          (EVAL-WHEN (EVAL COMPILE)                                 (IL:PROP (IL:MAKEFILE-ENVIRONMENT IL:FILETYPE)                                        IL:NFS)                                 (IL:FILES IL:NFSDECLS))                          (IL:FILES IL:RPC)                          (IL:COMS                           (IL:* IL:\; "Mount Protocol")                                 (IL:STRUCTURES MOUNT)                                 (IL:FUNCTIONS MOUNT-PROTOCOL-DEF)                                 (EVAL-WHEN (LOAD)                                        (IL:P (MOUNT-PROTOCOL-DEF))))                          (IL:COMS                           (IL:* IL:\; "Network File Service")                                 (IL:STRUCTURES UNIXTIME FATTR SATTR DIROPARGS DIROPRES)                                 (EVAL-WHEN (EVAL COMPILE)                                                             (IL:* IL:\;                                      "Need RPCDECLS to compile READ-RFD-LIST and READ-INPUT-BUFFER")                                        (IL:FILES IL:RPCDECLS))                                 (IL:FUNCTIONS READ-RFD-LIST READ-INPUT-BUFFER NFSDEF)                                 (EVAL-WHEN (LOAD)                                        (IL:P (NFSDEF))))                          (EVAL-WHEN (LOAD)                                                             (IL:* IL:\;                                 "Have to load YP first, since NFSDEVICE calls things in the YP pkg")                                 (IL:FILES IL:YP IL:NFSDEVICE)                                 (IL:P (LET ((IL:ADVISEDFNS IL:ADVISEDFNS))                                                             (IL:* IL:\;                 "Fix bug in Floppy handling of EOL so that copying files from nfs to floppy works.")                                            (IL:ADVISE '(IL:\\PFLOPPY.SETFILEINFO IL:IN                                                                IL:\\PFLOPPY.OPENFILE)                                                   'IL:BEFORE                                                   '(AND (EQ IL:ATTRIBUTE 'IL:EOL)                                                         (RETURN))))))))(IL:* IL:|;;| "Network File Service Based on Sun NFS Protocol")(EVAL-WHEN (EVAL COMPILE)(IL:PUTPROPS IL:NFS IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE (DEFPACKAGE "NFS"                                                                                  (:USE "LISP" "XCL")                                                                                  )))(IL:PUTPROPS IL:NFS IL:FILETYPE :COMPILE-FILE)(IL:FILESLOAD IL:NFSDECLS))(IL:FILESLOAD IL:RPC)(IL:* IL:\; "Mount Protocol")(DEFSTRUCT MOUNT   HOSTNAME   DIRECTORY)(DEFUN MOUNT-PROTOCOL-DEF ()   'DUMMY                                                    (IL:* IL:\;                                                            "avoid having defun expand this")         (RPC2:DEFINE-REMOTE-PROGRAM 'MOUNT-PROTOCOL 100005 1 'RPC2:UDP :CONSTANTS                '((FHSIZE 32))                :TYPES                '((FHANDLE (:OPAQUE FHSIZE :UNBOXED))                  (FHSTATUS (:UNION :UNSIGNED (0 FHANDLE)                                   (DEFAULT :VOID)))                  (DIRPATH :STRING)                  (NAME :STRING))                :PROCEDURES                '((NULL 0 NIL NIL)                  (ADD-MOUNT-ENTRY 1 (DIRPATH)                         (FHSTATUS))                  (RETURN-MOUNT-ENTRIES 2 NIL ((:SEQUENCE (:STRUCT MOUNT (HOSTNAME NAME)                                                                 (DIRECTORY DIRPATH)))))                  (REMOVE-MOUNT-ENTRY 3 (DIRPATH)                         NIL)                  (REMOVE-ALL-MOUNT-ENTRIES 4 NIL NIL)                  (RETURN-EXPORT-LIST 5 NIL ((:SEQUENCE (:LIST DIRPATH (:SEQUENCE NAME)))))))         (SETQ *MOUNT-PROGRAM* (RPC2:FIND-RPC-PROGRAM :NAME 'MOUNT-PROTOCOL))                                                             (IL:* IL:\;                                  "Stash away some info to reduce run-time lookup during rpc calls.")         (MAKE-PROC-VECTOR *MOUNT-PROGRAM* *MOUNT-PROC-VECTOR* *MOUNT-PROC-INDICES*))(EVAL-WHEN (LOAD)(MOUNT-PROTOCOL-DEF))(IL:* IL:\; "Network File Service")(DEFSTRUCT UNIXTIME   SECONDS   USECONDS)(DEFSTRUCT FATTR   TYPE   MODE   NLINK   UID   GID   SIZE   BLOCKSIZE   RDEV   BLOCKS   FSID   FILEID   ATIME   MTIME   CTIME)(DEFSTRUCT SATTR   MODE   UID   GID   SIZE   ATIME   MTIME)(DEFSTRUCT DIROPARGS   DIR   NAME)(DEFSTRUCT DIROPRES   FILE   ATTRIBUTES)(EVAL-WHEN (EVAL COMPILE)(IL:* IL:\; "Need RPCDECLS to compile READ-RFD-LIST and READ-INPUT-BUFFER")(IL:FILESLOAD IL:RPCDECLS))(DEFUN READ-RFD-LIST (XDRSTREAM)   (IL:* IL:|;;| "Optimization for nfs Read From Directory.  An \"rfd list\" is a sequence of (:struct rfd (fileid :unsigned) (name filename) (cookie cookie)).  Since the intermediate cookies are redundant, we return (lastcookie eofp . pairs), where each pair is (filename fileid) for convenience of encache-directory.")   (LET (COOKIE PAIRS)        (SETQ PAIRS (IL:WHILE (RPC2:XDR-READ-BOOLEAN XDRSTREAM)                       IL:COLLECT                        (IL:* IL:\; "fileid, filename, cookie")                             (LET ((FID (RPC2:XDR-READ-UNSIGNED XDRSTREAM))                                   (NAME (RPC2:XDR-READ-STRING XDRSTREAM)))                                  (UNLESS COOKIE             (IL:* IL:\; "Initialize cookie.  Didn't do this above because usually the last call returns NO files (instead of server setting eof bit")                                      (SETQ COOKIE (RPC2:XDR-MAKE-OPAQUE *COOKIE-SIZE* :UNBOXED)))                                  (RPC2::GETRAWBYTES XDRSTREAM COOKIE 0 *COOKIE-SIZE*)                                                             (IL:* IL:\;                                                            "Read cookie, smashing old cookie")                                  (LIST NAME FID))))        (LIST* COOKIE (RPC2:XDR-READ-BOOLEAN XDRSTREAM)               PAIRS)))(DEFUN READ-INPUT-BUFFER (XDRSTREAM)   (IL:* IL:|;;| "Read the results of ReadFromFile, which are a fattr and a string.  We toss out the fattr, and copy the \"string\" into the pmap buffer (specially bound), returning just the byte count.")   (IL:* IL:|;;| "We used to do this with the kludgy STRING-POINTER type, but (a) that conses a little more and more importantly (b) copies the buffer OUTSIDE of the RPC locked context, so had a slight danger of data lossage in it.")   (RPC2::SKIPBYTES XDRSTREAM *FATTR-SIZE*)   (LET ((NBYTES (RPC2:XDR-READ-UNSIGNED XDRSTREAM)))        (COND           ((> NBYTES BYTESPERPAGE)                          (IL:* IL:\;                                                            "Some bogosity-let readpage loop")            )           ((> NBYTES 0)                                     (IL:* IL:\; "Read the string")            (RPC2::GETRAWBYTES XDRSTREAM *READ-BUFFER* 0 NBYTES)                                                             (IL:* IL:\;         "There may be padding here of up to 3 bytes, but we don't care--it's the end of the packet")            ))        NBYTES))(DEFUN NFSDEF ()   (IL:* IL:|;;| "NFS protocol definition")   'DUMMY                                                    (IL:* IL:\;                                                   "keep defun from expanding this macro needlessly")         (RPC2:DEFINE-REMOTE-PROGRAM 'NFS 100003 2 'RPC2:UDP :CONSTANTS '((COOKIESIZE 4)                                                                          (FATTRSIZE 68)                                                                          (FHSIZE 32))                :TYPES                `((STAT :UNSIGNED)                           (IL:* IL:\;                                          "Actually, an enumeration of values in *NFS-STATUS-CODES*")                  (FTYPE :UNSIGNED)                          (IL:* IL:\;                                            "Actually, an enumeration of values in *NFS-FILE-TYPES*")                  (FHANDLE (:OPAQUE FHSIZE :UNBOXED))                  (TIMEVAL                                   (IL:* IL:\;                                                         "Number of secs & usecs since 1-Jan-70 GMT")                         (:STRUCT UNIXTIME (SECONDS :UNSIGNED)                                (USECONDS :UNSIGNED)))                  (FATTR                                     (IL:* IL:\;                                                            "Attributes of a single file")                         (:STRUCT FATTR (TYPE FTYPE)                                (MODE :UNSIGNED)                                (NLINK :UNSIGNED)                                (UID :UNSIGNED)                                (GID :UNSIGNED)                                (SIZE :UNSIGNED)                                (BLOCKSIZE :UNSIGNED)                                (RDEV :UNSIGNED)                                (BLOCKS :UNSIGNED)                                (FSID :UNSIGNED)                                (FILEID :UNSIGNED)                                (ATIME TIMEVAL)                                (MTIME TIMEVAL)                                (CTIME TIMEVAL)))                  (SATTR                                     (IL:* IL:\;                                         "Settable file attributes. -1 means ignore (what a kludge)")                         (:STRUCT SATTR (MODE :UNSIGNED)                                (UID :UNSIGNED)                                (GID :UNSIGNED)                                (SIZE :UNSIGNED)                                (ATIME TIMEVAL)                                (MTIME TIMEVAL)))                  (FILENAME :STRING)                  (PATH :STRING)                  (ATTRSTAT                                  (IL:* IL:\;                       "A procedure result that yields a status and if ok, a set of file attributes")                         (:UNION STAT (,NFS-OK FATTR)                                (DEFAULT :VOID)))                  (DIROPARGS (:STRUCT DIROPARGS (DIR FHANDLE)                                    (NAME FILENAME)))                  (DIROPRES (:UNION STAT (,NFS-OK (:STRUCT DIROPRES (FILE FHANDLE)                                                         (ATTRIBUTES FATTR)))                                   (DEFAULT :VOID)))                  (GFARES                                    (IL:* IL:\;             "Results of a Get Filesystem Attributes call.  4 values are: tsize bsize blocks bavail")                         (:UNION STAT (,NFS-OK (:LIST :UNSIGNED :UNSIGNED :UNSIGNED :UNSIGNED))                                (DEFAULT :VOID)))                  (COOKIE (:OPAQUE COOKIESIZE :UNBOXED)))                :PROCEDURES                `((NULL 0 NIL NIL)                  (GET-FILE-ATTRIBUTES 1 (FHANDLE)                         (ATTRSTAT))                  (SET-FILE-ATTRIBUTES 2 (FHANDLE SATTR)                         (ATTRSTAT))                  (GET-FILESYSTEM-ROOT 3 NIL NIL)                  (LOOKUP-FILE-NAME 4 (DIROPARGS)                         (DIROPRES))                  (READ-FROM-SYMBOLIC-LINK 5 (FHANDLE)                         ((:UNION STAT (,NFS-OK PATH)                                 (DEFAULT :VOID))))                  (READ-FROM-FILE 6 (FHANDLE :UNSIGNED :UNSIGNED :UNSIGNED)                         ((:UNION STAT (,NFS-OK (:LIST FATTR :STRING))                                 (DEFAULT :VOID))))                  (FAST-READ-FROM-FILE 6                     (IL:* IL:\;                                                            "The one that NFS-READPAGE uses")                         (FHANDLE :UNSIGNED :UNSIGNED :UNSIGNED)                         ((:UNION STAT (,NFS-OK INPUT-BUFFER)                                 (DEFAULT :VOID))))                  (NULL-READ-FROM-FILE 6                     (IL:* IL:\;                                         "For testing a null read--only interested in status return")                         (FHANDLE :UNSIGNED :UNSIGNED :UNSIGNED)                         (STAT))                  (WRITE-TO-CACHE 7 NIL NIL)                  (WRITE-TO-FILE 8 (FHANDLE :UNSIGNED :UNSIGNED :UNSIGNED :STRING)                         (ATTRSTAT))                  (FAST-WRITE-TO-FILE 8 (FHANDLE :UNSIGNED :UNSIGNED :UNSIGNED :STRING-POINTER)                         ((:UNION STAT (,NFS-OK (:SKIP FATTRSIZE))                                 (DEFAULT :VOID))))                  (CREATE-FILE 9 (DIROPARGS SATTR)                         (DIROPRES))                  (REMOVE-FILE 10 (DIROPARGS)                         (STAT))                  (RENAME-FILE 11 (DIROPARGS DIROPARGS)                         (STAT))                  (CREATE-LINK-TO-FILE 12 (FHANDLE DIROPARGS)                         (STAT))                  (CREATE-SYMBOLIC-LINK 13 (DIROPARGS PATH SATTR)                         (STAT))                  (CREATE-DIRECTORY 14 (DIROPARGS SATTR)                         (DIROPRES))                  (REMOVE-DIRECTORY 15 (DIROPARGS)                         (STAT))                  (READ-FROM-DIRECTORY 16 (FHANDLE COOKIE :UNSIGNED)                         ((:UNION STAT (,NFS-OK RFD-LIST)                                 (DEFAULT :VOID))))                  (GET-FILESYSTEM-ATTRIBUTES 17 (FHANDLE)                         (GFARES))))         (SETQ *NFS-PROGRAM* (RPC2:FIND-RPC-PROGRAM :NAME 'NFS))                                                             (IL:* IL:\;                                  "Stash away some info to reduce run-time lookup during rpc calls.")         (MAKE-PROC-VECTOR *NFS-PROGRAM* *NFS-PROC-VECTOR* *NFS-PROC-INDICES*))(EVAL-WHEN (LOAD)(NFSDEF))(EVAL-WHEN (LOAD)(IL:* IL:\; "Have to load YP first, since NFSDEVICE calls things in the YP pkg")(IL:FILESLOAD IL:YP IL:NFSDEVICE)(LET ((IL:ADVISEDFNS IL:ADVISEDFNS))                         (IL:* IL:\;                 "Fix bug in Floppy handling of EOL so that copying files from nfs to floppy works.")     (IL:ADVISE '(IL:\\PFLOPPY.SETFILEINFO IL:IN IL:\\PFLOPPY.OPENFILE)            'IL:BEFORE            '(AND (EQ IL:ATTRIBUTE 'IL:EOL)                  (RETURN)))))(IL:PUTPROPS IL:NFS IL:COPYRIGHT ("Xerox Corporation" 1988 1989 1990))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP