(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "RPC2")(IL:FILECREATED " 7-Nov-90 12:09:24" IL:|{DSK}<users>gadener>medley>RPCUDP.;1| 34006        IL:|changes| IL:|to:|  (IL:VARS IL:RPCUDPCOMS)                             (IL:PROPS (IL:RPCUDP IL:MAKEFILE-ENVIRONMENT))                             (IL:VARIABLES *UDP-FIXED-OVERHEAD-BYTES*)                             (IL:FUNCTIONS UDP-OUTPUT-BASE)      IL:|previous| IL:|date:| "17-Jul-90 20:53:17" IL:|{DSK}<users>gadener>medley>work>nfs>rpcudp.;1|); Copyright (c) 1988, 1989, 1990 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:RPCUDPCOMS)(IL:RPAQQ IL:RPCUDPCOMS          (           (IL:* IL:|;;| "Definitions for UDP transport of RPC")           (IL:PROPS (IL:RPCUDP IL:MAKEFILE-ENVIRONMENT IL:FILETYPE))           (EVAL-WHEN (EVAL COMPILE)                  (IL:FILES IL:RPCDECLS)                  (IL:P (LOAD-TCP-EXPORTS)))           (IL:COMS                                          (IL:* IL:\; "I'd like these to be inside the eval-when, too, but then they don't get eval'ed when I load the file prop!")                  (IL:VARIABLES *UDP-FIXED-OVERHEAD-BYTES*)                  (IL:FUNCTIONS UDP-OUTPUT-BASE))           (IL:VARIABLES *UDP-RPC-METHODS*)           (IL:FUNCTIONS RPC-CREATE-UDP-STREAM UDP-INITIALIZE UDP-CLOSE EXCHANGE-UDP-PACKETS                   PROGRAM-UNAVAILABLE-REPLY-P UDP-HANDLE-ICMP UDP-RECOVER-SOCKET UDP-GETBYTE                   UDP-PUTBYTE UDP-GETCELL UDP-GETUNSIGNED UDP-PUTCELL UDP-GETOFFSET UDP-GETRAWBYTES                   UDP-PUTRAWBYTES UDP-SKIPBYTES UDP-ZEROBYTES)           (IL:FNS IL:UDP.GET.BYTES IL:\\UDP.SET.CHECKSUM.ZERO)           (IL:COMS                                          (IL:* IL:\; "Prettier printing")                  (IL:FNS IL:PRINTUDP IL:RPC.GRAPHIC.CHARP IL:PRINTRPC.ANYTHING IL:PRINTRPC.AUTH                          IL:PRINTRPCDATA)                  (IL:ADDVARS (IL:UDPIGNOREPORTS 520))                  (IL:GLOBALVARS IL:UDPIGNOREPORTS))           (EVAL-WHEN (LOAD)                  (IL:P (UNLESS (FBOUNDP 'IL:\\UDP.HANDLE.ICMP)                            (IL:FILESLOAD (IL:SYSLOAD)                                   IL:IPRPCPATCH))                        (IL:CHANGENAME 'IL:UDP.SEND 'IL:\\UDP.SET.CHECKSUM                                'IL:\\UDP.SET.CHECKSUM.ZERO)))))(IL:* IL:|;;| "Definitions for UDP transport of RPC")(IL:PUTPROPS IL:RPCUDP IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE "RPC2"))(IL:PUTPROPS IL:RPCUDP IL:FILETYPE :COMPILE-FILE)(EVAL-WHEN (EVAL COMPILE)(IL:FILESLOAD IL:RPCDECLS)(LOAD-TCP-EXPORTS))(IL:* IL:\; "I'd like these to be inside the eval-when, too, but then they don't get eval'ed when I load the file prop!")(DEFCONSTANT *UDP-FIXED-OVERHEAD-BYTES* (+ IL:\\UDPOVLEN (UNFOLD (IL:INDEXF (IL:|fetch|                                                                                 (IL:ETHERPACKET                                                                                  IL:EPBODY)                                                                                   IL:|of|                                                                                          INPACKET))                                                                    *BYTES-PER-WORD*))                                            "Number of bytes of fixed overhead in a UDP packet before you get to data.  Have to add variable IP header length to this.")(DEFMACRO UDP-OUTPUT-BASE (PACKET)   "Pointer to start of IP image in packet.  Output byte pointers are relative to this."   `(IL:|fetch| (IL:IP IL:IPBASE) IL:|of| ,PACKET))(DEFGLOBALPARAMETER *UDP-RPC-METHODS*   (IL:* IL:|;;| "These quotes should really be #', but in Xerox Lisp the former is significantly nicer on some machines, and the result is the same.")   (MAKE-RPC-METHODS :PROTOCOL 'UDP :GETBYTE 'UDP-GETBYTE :PUTBYTE 'UDP-PUTBYTE :GETCELL           'UDP-GETCELL :GETUNSIGNED 'UDP-GETUNSIGNED :GETOFFSET 'UDP-GETOFFSET :PUTCELL 'UDP-PUTCELL          :SKIPBYTES 'UDP-SKIPBYTES :ZEROBYTES 'UDP-ZEROBYTES :GETRAWBYTES 'UDP-GETRAWBYTES           :PUTRAWBYTES 'UDP-PUTRAWBYTES :CLOSE 'UDP-CLOSE :INITIALIZE 'UDP-INITIALIZE :EXCHANGE          'EXCHANGE-UDP-PACKETS)   "Op vector for UDP version of RPC")(DEFUN RPC-CREATE-UDP-STREAM (&OPTIONAL DESTADDR DESTSOCKET)   "Create a new RPC Stream with the vector of functions set up to for UDP Protocol Datagrams."   (MAKE-RPC-STREAM :METHODS *UDP-RPC-METHODS* :IPSOCKET (IL:UDP.OPEN.SOCKET NIL NIL                                                                 'UDP-HANDLE-ICMP)          :INBYTEPTR 0 :OUTSTREAM NIL :DESTADDR (AND DESTADDR (IF (INTEGERP DESTADDR)                                                                  DESTADDR                                                                  (RPC-RESOLVE-HOST DESTADDR)))          :DESTSOCKET          (AND DESTSOCKET (IF (INTEGERP DESTSOCKET)                              DESTSOCKET                              (RPC-RESOLVE-PROG DESTSOCKET NIL 'UDP)))))(DEFUN UDP-INITIALIZE (STREAM DESTADDR DESTSOCKET)   (WHEN (TYPEP (RPC-STREAM-INSTREAM STREAM)                'IL:ETHERPACKET)       (IL:* IL:|;;| "Release  Etherpacket used for previous input from remote host. This could be done earlier, when PARSE-RPC-STREAM finishes with the packet, but since *RPCSTREAM* still points at the stream for debugging, it is better to wait until now..")       (IL:\\RELEASE.ETHERPACKET (RPC-STREAM-INSTREAM STREAM))       (SETF (RPC-STREAM-INSTREAM STREAM)             NIL))   (LET ((PACKET (RPC-STREAM-OUTSTREAM STREAM)))        (IL:* IL:|;;| "Construct an empty UDP packet.  Our INBYTEPTR is meaningless until a packet arrives.  OUTBYTEPTR is relative to IPBASE.")        (WHEN DESTADDR            (UNLESS (INTEGERP DESTADDR)                (SETQ DESTADDR (RPC-RESOLVE-HOST DESTADDR)))            (SETF (RPC-STREAM-DESTADDR STREAM)                  DESTADDR))        (COND           (NIL (WHEN (NULL PACKET)                    (SETF (RPC-STREAM-OUTSTREAM STREAM)                          (SETQ PACKET (IL:\\ALLOCATE.ETHERPACKET))))                (IL:UDP.SETUP PACKET (OR DESTADDR (RPC-STREAM-DESTADDR STREAM))                       NIL 0 (RPC-STREAM-IPSOCKET STREAM)))           ((NULL PACKET)                                    (IL:* IL:\;                                                            "First time thru, give us a packet")            (SETQ PACKET (IL:\\ALLOCATE.ETHERPACKET))            (IL:UDP.SETUP PACKET (OR DESTADDR (RPC-STREAM-DESTADDR STREAM))                   NIL 0 (RPC-STREAM-IPSOCKET STREAM))            (SETF (RPC-STREAM-OUTSTREAM STREAM)                  PACKET))           (DESTADDR                                         (IL:* IL:\;                                                            "May have wanted to change address")                  (SETF (IL:|fetch| (IL:IP IL:IPDESTINATIONADDRESS) IL:|of| PACKET)                        DESTADDR)))        (WHEN DESTSOCKET                                     (IL:* IL:\;                                                            "We'll deal with the socket later")            (SETF (RPC-STREAM-DESTSOCKET STREAM)                  (IF (INTEGERP DESTSOCKET)                      DESTSOCKET                      (RPC-RESOLVE-PROG DESTSOCKET NIL 'UDP))))        (LET ((EMPTYUDPLEN (+ IL:\\IPOVLEN IL:\\UDPOVLEN)))             (SETF (RPC-STREAM-INBYTEPTR STREAM)                   -1                   (IL:|fetch| (IL:UDP IL:UDPLENGTH) IL:|of| PACKET)                   IL:\\UDPOVLEN                   (IL:|fetch| (IL:IP IL:IPTOTALLENGTH) IL:|of| PACKET)                   EMPTYUDPLEN                   (RPC-STREAM-OUTBYTEPTR STREAM)                   EMPTYUDPLEN))        T))(DEFUN UDP-CLOSE (RPCSTREAM)   "Deallocate an RPC Stream. Tries to cleanup after itself."   (IL:UDP.CLOSE.SOCKET (RPC-STREAM-IPSOCKET RPCSTREAM)))(DEFUN EXCHANGE-UDP-PACKETS (RPCSTREAM ERRORFLG XID)   "Given the specified timeout and time between tries, this routine continues to send out UDP packets until it either gets a reply or times out."   (LET ((TIMER (AND *MSEC-UNTIL-TIMEOUT* (IL:SETUPTIMER *MSEC-UNTIL-TIMEOUT*)))         (TIMEOUT *MSEC-BETWEEN-TRIES*)         (OUTPACKET (RPC-STREAM-OUTSTREAM RPCSTREAM))         (SOCKET (RPC-STREAM-IPSOCKET RPCSTREAM))         (LENGTH (RPC-STREAM-OUTBYTEPTR RPCSTREAM))         (TIMEOUT-COUNT 0)         (DESTSOCKET (RPC-STREAM-DESTSOCKET RPCSTREAM))         INPACKET TRIED-NEW-SOCKET)        (INCF (IL:|fetch| (IL:UDP IL:UDPLENGTH) IL:|of| OUTPACKET)              (- LENGTH (IL:|fetch| (IL:IP IL:IPTOTALLENGTH) IL:|of| OUTPACKET)))        (IL:|replace| (IL:IP IL:IPTOTALLENGTH) IL:|of| OUTPACKET IL:|with| LENGTH)                                                             (IL:* IL:\;                                    "Adjust the lengths in the packet to reflect what we've written")        (WHEN (AND (NUMBERP *DEBUG*)                   (> *DEBUG* 5))              (BREAK "About to send packet (rpc-stream-outstream *rpc-stream*)"))        (LOOP               (IL:* IL:|;;| "This loop keeps sending a packet and waiting for replies until someone explicitly returns something")              (WHEN (OR (NULL DESTSOCKET)                        (LET ((SOC DESTSOCKET))                             (IL:* IL:|;;| "Need to fill in the destination socket.  We didn't do this in initialize, because we could get timeouts on this as well, in which case we want to be here to do the error handling.")                             (COND                                ((AND (NOT (CONSP SOC))                                      (OR (INTEGERP SOC)                                          (INTEGERP (SETQ SOC (RPC-FIND-SOCKET (RPC-STREAM-DESTADDR                                                                                RPCSTREAM)                                                                     DESTSOCKET                                                                     'UDP :RETURNERRORS)))))                                 (SETF (IL:|fetch| (IL:UDP IL:UDPDESTPORT) IL:|of| OUTPACKET)                                       SOC)                                 (SETQ DESTSOCKET NIL)                                 T)                                (T                           (IL:* IL:\;     "Got an error back, either from RPC-FIND-SOCKET or UDP-RECOVER-SOCKET on a previous iteration.")                                   (COND                                      ((AND (EQ (CADR SOC)                                                'RPC-TIMEOUT)                                            TIMER)           (IL:* IL:\;                                                            "Drop thru to timeout handling code")                                       (IL:SETUPTIMER 0 TIMER)                                       (SETQ DESTSOCKET NIL))                                      (T (RETURN-FROM EXCHANGE-UDP-PACKETS (RPC-SIGNAL-ERROR                                                                            ERRORFLG                                                                            (CDR SOC)))))))))                  (IL:\\UDP.FLUSH.SOCKET.QUEUE SOCKET)                  (IL:UDP.SEND SOCKET OUTPACKET)                  (IL:BLOCK)                  (LOOP                         (IL:* IL:|;;|                       "This loop tries to get a packet in reply to what we just sent out")                        (COND                           ((NOT (SETQ INPACKET (IL:UDP.GET SOCKET TIMEOUT)))                                                             (IL:* IL:\;                                   "Nothing came in timeout, so try again.  Back off a little, too.")                            (SETQ TIMEOUT (MIN (ASH TIMEOUT 1)                                               10000))                            (RETURN))                           ((NOT (EQ (IL:|fetch| (IL:IP IL:IPPROTOCOL) IL:|of| INPACKET)                                     IL:\\UDP.PROTOCOL))     (IL:* IL:\;                                 "ICMP packet saying port unreachable.  Go fix up the socket cache.")                            (COND                               ((IL:\\IP.BROADCAST.ADDRESS (IL:|fetch| (IL:IP                                                                               IL:IPDESTINATIONADDRESS                                                                                  ) IL:|of|                                                                                    OUTPACKET))                                                             (IL:* IL:\;                                          "This was a broadcast rpc, so ignore this stupid response")                                )                               ((SETQ DESTSOCKET (UDP-RECOVER-SOCKET OUTPACKET RPCSTREAM))                                                             (IL:* IL:\;                                                            "Got a new socket, so try again")                                (SETQ TRIED-NEW-SOCKET T)                                (WHEN (AND (INTEGERP DESTSOCKET)                                           TIMER)                                 (IL:* IL:|;;| "Actually got a new socket # back, so reset timer as if we only now just started.  Alternative is we got a program back, which really means that portmapper timed out, but we want to do the looping here.")                                    (IL:SETUPTIMER *MSEC-UNTIL-TIMEOUT* TIMER))                                (RETURN))                               (T                            (IL:* IL:\;                         "Failed--give up.  This looks a lot like the RPC reply \"no such program\"")                                  (RETURN-FROM EXCHANGE-UDP-PACKETS (RPC-SIGNAL-ERROR                                                                     ERRORFLG                                                                     `(PROGRAM-UNAVAILABLE                                                                       ,*PROGRAM*                                                                        "No process at destination")))                                  )))                           (T (SETF (RPC-STREAM-INSTREAM RPCSTREAM)                                    INPACKET)                              (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                                    (+ *UDP-FIXED-OVERHEAD-BYTES* (UNFOLD (IL:|fetch|                                                                           (IL:IP IL:IPHEADERLENGTH)                                                                             IL:|of| INPACKET)                                                                         *BYTES-PER-CELL*)))                                                             (IL:* IL:\;                                                            "Byte offset of start of udp data")                              (WHEN (AND (NUMBERP *DEBUG*)                                         (> *DEBUG* 5))                                    (BREAK "A reply is in (rpc-stream-instream *rpc-stream*)"))                              (COND                                 ((= (GETUNSIGNED RPCSTREAM)                                     XID)                    (IL:* IL:\; "ID's match, so it's ok")                                  (WHEN (AND (NOT TRIED-NEW-SOCKET)                                             (PROGRAM-UNAVAILABLE-REPLY-P RPCSTREAM)                                             (SETQ DESTSOCKET (UDP-RECOVER-SOCKET OUTPACKET                                                                      RPCSTREAM)))                                                             (IL:* IL:\; "Moby Kludge!!!  Sometimes when servers crash and return, old socket has a different program on it, which returns this \"program unavailable\" error.  Ought to catch this in Parse-rpc-reply, but the recovery is much more awkward there.")                                      (SETQ TRIED-NEW-SOCKET T)                                      (WHEN (AND (INTEGERP DESTSOCKET)                                                 TIMER)                                 (IL:* IL:|;;| "Actually got a new socket # back, so reset timer as if we only now just started.  Alternative is we got a program back, which really means that portmapper timed out, but we want to do the looping here.")                                          (IL:SETUPTIMER *MSEC-UNTIL-TIMEOUT* TIMER))                                      (RETURN))                                  (RETURN-FROM EXCHANGE-UDP-PACKETS T))                                 ((AND (NUMBERP *DEBUG*)                                       (> *DEBUG* 1))                                  (FORMAT-T " (discarded packet with wrong ID)")))                                                             (IL:* IL:\;                                                            "So go around the loop again")                              ))))              (WHEN (AND TIMER (IL:TIMEREXPIRED? TIMER))     (IL:* IL:\; "Timed out")                  (UNLESS (AND (NOT TRIED-NEW-SOCKET)                               (PROGN                        (IL:* IL:\; "Time out could be because server crashed, is using new socket, and process on old socket doesn't return error packets.  If UDP-RECOVER-SOCKET returns other than integer, we did not succeed in getting a new socket")                                      (SETQ TRIED-NEW-SOCKET T)                                      (INTEGERP (SETQ DESTSOCKET (UDP-RECOVER-SOCKET OUTPACKET                                                                         RPCSTREAM)))))                      (LET ((RESULT (RPC-HANDLE-TIMEOUT RPCSTREAM (INCF TIMEOUT-COUNT)                                           ERRORFLG)))                           (UNLESS (EQ RESULT :CONTINUE)                                  (RETURN-FROM EXCHANGE-UDP-PACKETS RESULT))))                  (IL:SETUPTIMER *MSEC-UNTIL-TIMEOUT* TIMER) (IL:* IL:\;                                                            "Reset the timer and keep going")                  (SETQ TIMEOUT *MSEC-BETWEEN-TRIES*)))))(DEFUN PROGRAM-UNAVAILABLE-REPLY-P (RPCSTREAM)   (IL:* IL:|;;|  "True if the reply waiting in RPCSTREAM is \"Program Unavailable\".  What a kludge.")   (IL:* IL:|;;| "Code here is heavily optimized.")   (MACROLET ((EQL-GETBASECELL               (BASE CELLOFFSET EXPECTED)               (IL:* IL:|;;| "True if the 32-bit number at CELLOFFSET from BASE is EXPECTED")               (LET ((OFFSET (IF (INTEGERP CELLOFFSET)                                 (IL:LLSH CELLOFFSET 1)                                 0)))                    `(LET ((BASE ,(IF (INTEGERP CELLOFFSET)                                      BASE                                      `(IL:\\ADDBASE ,BASE (IL:LLSH ,CELLOFFSET 1)))))                          (AND (EQ (IL:\\GETBASE BASE (+ ,OFFSET 1))                                   (LOGAND ,EXPECTED 65535))                               (EQ (IL:\\GETBASE BASE ,OFFSET)                                   (ASH ,EXPECTED -16)))))))          (LET ((REPLYBASE (IL:\\ADDBASE (RPC-STREAM-INSTREAM RPCSTREAM)                                  (IL:LRSH (RPC-STREAM-INBYTEPTR RPCSTREAM)                                         1))))               (IL:* IL:|;;|              "REPLYBASE=> [reply] [accepted] [authtype] [authstring] [accept-stat] data")               (AND (EQL-GETBASECELL REPLYBASE 1 *RPC-REPLY-ACCEPTED*)                    (EQL-GETBASECELL REPLYBASE (+ (GETBASE-UNSIGNED REPLYBASE (* *BYTES-PER-CELL* 3))                                                             (IL:* IL:\;                                                            "Length of authentication string")                                                  4)                           *RPC-ACCEPT-PROGRAM-UNAVAILABLE*)                    (EQL-GETBASECELL REPLYBASE 0 *RPC-MSG-REPLY*)))))(DEFUN UDP-HANDLE-ICMP (ICMP SENTIP SOCKET)   (IL:* IL:|;;|  "Handle an ICMP destination unreachable packet sent in response to SENTIP on this SOCKET.")   (WHEN (EQL (IL:|fetch| (IL:ICMP IL:ICMPCODE) IL:|of| ICMP)              IL:\\ICMP.PORT.UNREACHABLE)                    (IL:* IL:\; "Need to know about Port unreachable so we can recache the socket.  Queue this up so it will be read by EXCHANGE-UDP-PACKETS")       (IL:\\IP.DEFAULT.INPUTFN ICMP SOCKET)))(DEFUN UDP-RECOVER-SOCKET (OUTPACKET RPCSTREAM)   (IL:* IL:|;;| "Called when we get a port unreachable when trying to send OUTPACKET.  This typically happens if server boots and assigns the service a different socket.  Returns a new port, or NIL to fail.")   (LET ((PROGRAM (RPC-STREAM-DESTSOCKET RPCSTREAM)))        (AND (TYPEP PROGRAM 'RPC-PROGRAM)             (LET* ((DESTADDR (RPC-STREAM-DESTADDR RPCSTREAM))                    (PROGNUM (RPC-PROGRAM-NUMBER PROGRAM))                    (VERSION (RPC-PROGRAM-VERSION PROGRAM))                    (OLDENTRY (FIND-IF #'(LAMBDA (ENTRY)                                                (AND (EQL (CAR ENTRY)                                                          DESTADDR)                                                     (EQL (CAR (SETQ ENTRY (CDR ENTRY)))                                                          PROGNUM)                                                     (EQL (CAR (SETQ ENTRY (CDR ENTRY)))                                                          VERSION)                                                     (EQ (CAR (SETQ ENTRY (CDR ENTRY)))                                                         'UDP)))                                     *RPC-SOCKET-CACHE*))                    (OLDSOCKET (IL:|fetch| (IL:UDP IL:UDPDESTPORT) IL:|of| OUTPACKET))                    NEWSOCKET CACHEDSOCKET)                   (COND                      ((AND OLDENTRY (NOT (EQL (SETQ CACHEDSOCKET (FIFTH OLDENTRY))                                               OLDSOCKET)))  (IL:* IL:\; "There's a different socket in cache, maybe someone looked it up already, or called us with out of date info")                       CACHEDSOCKET)                      ((NOT (INTEGERP (SETQ NEWSOCKET (LET ((*RPC-OK-TO-CACHE* NIL))                                                             (IL:* IL:\;                                                            "Don't let it find the old socket")                                                           (RPC-FIND-SOCKET DESTADDR PROGRAM                                                                  'UDP :RETURNERRORS)))))                                                             (IL:* IL:\; "Portmapper failed.  We'll just send back the error (or program object if timeout) and let exchange-udp-packets handle it")                       (OR NEWSOCKET PROGRAM))                      ((EQL NEWSOCKET OLDSOCKET)             (IL:* IL:\;                                   "Server still thinks it's on this socket, so no use trying again")                       NIL)                      (T                                     (IL:* IL:\;                     "good, service moved to a different socket, so use that, and record the change")                         (IF OLDENTRY                             (SETF (FIFTH OLDENTRY)                                   NEWSOCKET)                             (CACHE-SOCKET PROGRAM DESTADDR NEWSOCKET))                         NEWSOCKET))))))(DEFUN UDP-GETBYTE (RPCSTREAM)   (LET ((OFFSET (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (PROG1 (IL:\\GETBASEBYTE (RPC-STREAM-INSTREAM RPCSTREAM)                      OFFSET)            (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                  (1+ OFFSET)))))(DEFUN UDP-PUTBYTE (RPCSTREAM BYTE)   (LET ((OFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (IL:\\PUTBASEBYTE (UDP-OUTPUT-BASE (RPC-STREAM-OUTSTREAM RPCSTREAM))               OFFSET BYTE)        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              (1+ OFFSET))))(DEFUN UDP-GETCELL (RPCSTREAM)   (LET ((BYTEOFFSET (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (PROG1 (GETBASE-INTEGER (RPC-STREAM-INSTREAM RPCSTREAM)                      BYTEOFFSET)            (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                  (+ BYTEOFFSET *BYTES-PER-CELL*)))))(DEFUN UDP-GETUNSIGNED (RPCSTREAM)   (LET ((BYTEOFFSET (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (PROG1 (GETBASE-UNSIGNED (RPC-STREAM-INSTREAM RPCSTREAM)                      BYTEOFFSET)            (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                  (+ BYTEOFFSET *BYTES-PER-CELL*)))))(DEFUN UDP-PUTCELL (RPCSTREAM VALUE)   "Write a 32-bit value to udp stream."   (LET ((OFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (PUTBASE-INTEGER (UDP-OUTPUT-BASE (RPC-STREAM-OUTSTREAM RPCSTREAM))               OFFSET VALUE)        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              (+ OFFSET *BYTES-PER-CELL*))))(DEFUN UDP-GETOFFSET (RPCSTREAM)   (CONS (RPC-STREAM-INSTREAM RPCSTREAM)         (RPC-STREAM-INBYTEPTR RPCSTREAM)))(DEFUN UDP-GETRAWBYTES (RPCSTREAM BASE OFFSET NBYTES)   "Get NBYTES bytes from rpc stream, store them at base,offset."   (LET ((SOFFSET (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (IL:\\MOVEBYTES (RPC-STREAM-INSTREAM RPCSTREAM)               SOFFSET BASE OFFSET NBYTES)        (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)              (+ SOFFSET NBYTES))        BASE))(DEFUN UDP-PUTRAWBYTES (RPCSTREAM BASE OFFSET NBYTES)   "Put NBYTES bytes to rpc stream from base,offset."   (LET ((PKTOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (IL:\\MOVEBYTES BASE OFFSET (UDP-OUTPUT-BASE (RPC-STREAM-OUTSTREAM RPCSTREAM))               PKTOFFSET NBYTES)        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              (+ PKTOFFSET NBYTES))))(DEFUN UDP-SKIPBYTES (RPCSTREAM NBYTES)   (INCF (RPC-STREAM-INBYTEPTR RPCSTREAM)         NBYTES))(DEFUN UDP-ZEROBYTES (RPCSTREAM NBYTES)   (LET ((BASE (UDP-OUTPUT-BASE (RPC-STREAM-OUTSTREAM RPCSTREAM)))         (OFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (DOTIMES (I NBYTES)            (IL:\\PUTBASEBYTE BASE OFFSET 0)            (INCF OFFSET))        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              OFFSET)))(IL:DEFINEQ(il:udp.get.bytes(il:lambda (il:udp il:soffset il:dest il:doffset il:nbytes) (il:* il:\; "Edited 24-Aug-88 12:05 by bvm") (il:* il:|;;;| "Move bytes out of UDP Packet to another buffer without string creation.  Used to fetch off UDPCONTENTS, but we've adjusted pointers.  This relic is solely for benefit of nfs-readpage.") (il:\\movebytes il:udp il:soffset il:dest il:doffset il:nbytes) il:dest))(il:\\udp.set.checksum.zero(il:lambda (il:udp) (il:* il:\; "Edited 27-Apr-88 21:52 by drc:") (il:* il:|;;;| "Avoid doing a UDP checksum. Packet already gets IP Checksum.") (il:|replace| (il:udp il:udpchecksum) il:|of| il:udp il:|with| 0))))(IL:* IL:\; "Prettier printing")(IL:DEFINEQ(il:printudp(il:lambda (il:udp il:file) (il:* il:\; "Edited 23-Feb-89 19:20 by bvm") (let ((il:source (il:|fetch| (il:udp il:udpsourceport) il:|of| il:udp)) (il:dest (il:|fetch| (il:udp il:udpdestport) il:|of| il:udp))) (il:|printout| il:file "UDP Source: " il:source " Dest: " il:dest " Len: " (il:|fetch| (il:udp il:udplength) il:|of| il:udp) " Chksm: " (il:|fetch| (il:udp il:udpchecksum) il:|of| il:udp) t) (cond ((and il:udpignoreports (or (il:fmemb il:source il:udpignoreports) (il:fmemb il:dest il:udpignoreports)))) ((or (eq il:dest il:\\tftp.socket) (eq il:source il:\\tftp.socket)) (il:printtftp il:udp il:file)) (t (il:printrpcdata (il:|fetch| (il:udp il:udpcontents) il:|of| il:udp) (- (il:|fetch| (il:udp il:udplength) il:|of| il:udp) il:\\udpovlen) il:file))))))(il:rpc.graphic.charp(il:lambda (il:code) (il:* il:\; "Edited 28-Apr-88 12:45 by bvm") (and (>= il:code (il:charcode il:space)) (< il:code (il:charcode il:del)))))(il:printrpc.anything(il:lambda (il:base il:nwords il:file) (il:* il:\; "Edited 24-Aug-88 15:02 by bvm") (il:|while| (> il:nwords 0) il:|bind| il:hiword il:hibyte il:i il:|do| (il:setq il:hiword (il:\\getbase il:base 0)) (il:|if| (or (eq (il:setq il:hibyte (il:lrsh il:hiword 8)) 0) (eq il:hiword il:max.smallp)) il:|then| (il:* il:\; "Looks like some sort of integer in [0, 2^24] or some sort of small negative.") (format il:file "{~D}" (il:\\makenumber il:hiword (il:\\getbase il:base 1))) il:|elseif| (and (il:rpc.graphic.charp il:hibyte) (il:|for| il:|old| il:i il:|from| 1 il:|to| 3 il:|always| (or (il:rpc.graphic.charp (il:\\getbasebyte il:base il:i)) (and (il:|for| il:j il:|from| il:i il:|to| 3 il:|always| (eq (il:\\getbasebyte il:base il:j) 0)) (return t))))) il:|then| (il:* il:\; "Probably a string, possibly with trailing padding") (il:|for| il:j il:|from| 0 il:|to| (il:sub1 il:i) il:|do| (il:\\outchar il:file (il:\\getbasebyte il:base il:j))) (il:|if| (< il:i 4) il:|then| (il:* il:\; "Indicate padding") (il:\\outchar il:file (il:charcode "[")) (il:rptq (- 4 il:i) (il:\\outchar il:file (il:charcode "0"))) (il:\\outchar il:file (il:charcode "]"))) il:|else| (il:* il:\; "Random bytes") (format il:file "{~D,~D,~D,~D}" il:hibyte (il:\\getbasebyte il:base 1) (il:\\getbasebyte il:base 2) (il:\\getbasebyte il:base 3))) (il:setq il:base (il:\\addbase il:base il:wordspercell)) (il:setq il:nwords (- il:nwords il:wordspercell)))))(il:printrpc.auth(il:lambda (il:base il:maxwords il:file) (il:* il:\; "Edited 31-Aug-88 18:48 by bvm") (il:* il:|;;| "Print an authentication object.  Return number of words printed") (let* ((il:strlen (il:\\getbasefixp il:base il:wordspercell)) (il:strwords (il:unfold (il:foldhi il:strlen il:bytespercell) il:wordspercell))) (il:prin1 "[Auth" il:file) (il:|if| (< il:maxwords (+ 4 il:strwords)) il:|then| (il:prin1 " too short]" il:file) (il:printrpc.anything il:base il:maxwords il:file) il:maxwords il:|else| (il:prin1 (il:selectq (il:\\getbasefixp il:base 0) (0 "Null") (1 "Unix") (2 "Short") "Unknown") il:file) (il:|if| (il:neq 0 il:strlen) il:|then| (format il:file ": {~D}" il:strlen) (il:printrpc.anything (il:\\addbase il:base (il:times 2 il:wordspercell)) il:strwords il:file)) (il:prin1 "]" il:file) (+ 4 il:strwords)))))(il:printrpcdata(il:lambda (il:base il:nbytes il:file) (il:* il:\; "Edited 19-Sep-88 17:44 by bvm") (il:* il:|;;| "Interpret BASE for NBYTES as RPC contents") (let (il:op il:nwords il:i) (or il:file (il:setq il:file *standard-output*)) (il:|if| (not (evenp il:nbytes il:bytespercell)) il:|then| (il:prin1 "Length not a multiple of 4! " il:file) (il:printpacketdata il:base 0 (quote (il:bytes)) il:nbytes) il:|else| (format il:file "~A ID = ~D" (il:selectq (il:setq il:op (il:\\getbasefixp il:base il:wordspercell)) (0 "Call") (1 "Rply") "unknown") (il:\\getbasefixp il:base 0)) (il:setq il:nwords (il:foldhi il:nbytes il:bytesperword)) (il:selectq il:op (0 (il:* il:\; "Call") (il:prin1 "; " il:file) (il:|if| (il:neq (il:\\getbasefixp il:base (il:times 2 il:wordspercell)) *rpc-version*) il:|then| (format il:file "RPC version ~D " (il:\\getbasefixp il:base (il:times 2 il:wordspercell)))) (let ((il:pgm (il:\\getbasefixp il:base (il:times 3 il:wordspercell))) (il:version (il:\\getbasefixp il:base (il:times 4 il:wordspercell))) (il:proc (il:\\getbasefixp il:base (il:times 5 il:wordspercell))) (il:def)) (format il:file "Program ~D[~D] Proc ~D" il:pgm il:version il:proc) (il:|if| (il:setq il:def (find-rpc-program :number il:pgm :version il:version :protocol (quote udp))) il:|then| (format il:file " (~:(~A.~A~))" (rpc-program-name il:def) (il:|for| il:p il:|in| (rpc-program-procedures il:def) il:|when| (eq (rpc-procedure-procnum il:p) il:proc) il:|do| (return (rpc-procedure-name il:p)) il:|finally| (return "unknown")))) (il:terpri)) (il:setq il:i (il:times 6 il:wordspercell)) (il:|add| il:i (il:printrpc.auth (il:\\addbase il:base il:i) (- il:nwords il:i) il:file)) (il:|add| il:i (il:printrpc.auth (il:\\addbase il:base il:i) (- il:nwords il:i) il:file))) (1 (il:terpri il:file) (il:* il:\; "Reply") (il:|if| (not (eq (il:\\getbasefixp il:base (il:times 2 il:wordspercell)) 0)) il:|then| (format il:file "Reject ~A " (il:selectq (il:\\getbasefixp il:base (il:times 3 il:wordspercell)) (0 "RPC mismatch") (1 "Authentication error") "unknown")) (il:setq il:i (il:times 4 il:wordspercell)) il:|else| (il:setq il:i (il:times 3 il:wordspercell)) (il:|add| il:i (il:printrpc.auth (il:\\addbase il:base il:i) (- il:nwords il:i) il:file)) (il:|if| (il:neq (il:setq il:op (il:\\getbasefixp il:base il:i)) 0) il:|then| (il:* il:\; "Failure") (il:prin1 " Failed: " il:file) (il:prin1 (il:selectq il:op (1 "Program unavailable") (2 "Program mismatch") (3 "Procedure unavailable") (4 "Garbage args") "Unknown") il:file)) (il:|add| il:i il:wordspercell))) (progn (il:terpri il:file) (il:* il:\; "Unknown case") (il:setq il:i (il:times 2 il:wordspercell)))) (il:printrpc.anything (il:\\addbase il:base il:i) (- il:nwords il:i) il:file) (il:terpri))))))(IL:ADDTOVAR IL:UDPIGNOREPORTS 520)(IL:DECLARE\: IL:DOEVAL@COMPILE IL:DONTCOPY(IL:GLOBALVARS IL:UDPIGNOREPORTS))(EVAL-WHEN (LOAD)(UNLESS (FBOUNDP 'IL:\\UDP.HANDLE.ICMP)    (IL:FILESLOAD (IL:SYSLOAD)           IL:IPRPCPATCH))(IL:CHANGENAME 'IL:UDP.SEND 'IL:\\UDP.SET.CHECKSUM 'IL:\\UDP.SET.CHECKSUM.ZERO))(IL:PUTPROPS IL:RPCUDP IL:COPYRIGHT ("Xerox Corporation" 1988 1989 1990))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL (26855 27520 (IL:UDP.GET.BYTES 26868 . 27271) (IL:\\UDP.SET.CHECKSUM.ZERO 27273 . 27518)) (27562 33581 (IL:PRINTUDP 27575 . 28357) (IL:RPC.GRAPHIC.CHARP 28359 . 28528) (IL:PRINTRPC.ANYTHING 28530 . 29981) (IL:PRINTRPC.AUTH 29983 . 30823) (IL:PRINTRPCDATA 30825 . 33579)))))IL:STOP