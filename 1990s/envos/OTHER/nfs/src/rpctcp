(DEFINE-FILE-INFO READTABLE "XCL" PACKAGE "RPC2")(IL:FILECREATED "17-Jul-90 20:49:56" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>RPCTCP.\;2 15397        IL:|previous| IL:|date:| "19-Oct-88 18:15:20" IL:{DSK}<LISPFILES>ETHERNET>TCP>NFS>RPCTCP.\;1); Copyright (c) 1988, 1990 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:RPCTCPCOMS)(IL:RPAQQ IL:RPCTCPCOMS           (           (IL:* IL:|;;| "Definitions for TCP transport of RPC")           (IL:PROPS (IL:RPCTCP IL:MAKEFILE-ENVIRONMENT IL:FILETYPE))           (EVAL-WHEN (EVAL COMPILE)                  (IL:FILES IL:RPCDECLS)                  (IL:P (LOAD-TCP-EXPORTS)))           (IL:P (EXPORT '*BYTES-PER-RM-OUTREC*))           (IL:VARIABLES *BYTES-PER-RM-OUTREC* *TCP-RPC-METHODS*)           (IL:FUNCTIONS RPC-CREATE-TCP-STREAM TCP-INITIALIZE TCP-CLOSE EXCHANGE-TCP-PACKETS                   RM-NEW-INPUT-RECORD TCP-GETBYTE TCP-GETCELL TCP-GETUNSIGNED TCP-GETRAWBYTES                   TCP-SKIPBYTES TCP-PUTBYTE TCP-PUTCELL TCP-PUTRAWBYTES TCP-ZEROBYTES RM-FORCEOUTPUT)           (IL:COMS                                          (IL:* IL:\; "Low-level")                  (IL:FNS IL:TCP.STREAM.SOCKET IL:TCP.SOCKET.EVENT))))(IL:* IL:|;;| "Definitions for TCP transport of RPC")(IL:PUTPROPS IL:RPCTCP IL:MAKEFILE-ENVIRONMENT (:READTABLE "XCL" :PACKAGE "RPC2"))(IL:PUTPROPS IL:RPCTCP IL:FILETYPE :COMPILE-FILE)(EVAL-WHEN (EVAL COMPILE)(IL:FILESLOAD IL:RPCDECLS)(LOAD-TCP-EXPORTS))(EXPORT '*BYTES-PER-RM-OUTREC*)(DEFCONSTANT *BYTES-PER-RM-OUTREC* 8192   "Size of string in which to store outgoing RPC/RM/TCP/IP messages fragments.")(DEFGLOBALPARAMETER *TCP-RPC-METHODS*   (MAKE-RPC-METHODS :PROTOCOL 'TCP :GETBYTE 'TCP-GETBYTE :GETCELL 'TCP-GETCELL :GETUNSIGNED          'TCP-GETUNSIGNED :PUTBYTE 'TCP-PUTBYTE :PUTCELL 'TCP-PUTCELL :SKIPBYTES 'TCP-SKIPBYTES           :ZEROBYTES 'TCP-ZEROBYTES :GETRAWBYTES 'TCP-GETRAWBYTES :PUTRAWBYTES 'TCP-PUTRAWBYTES           :CLOSE 'TCP-CLOSE :INITIALIZE 'TCP-INITIALIZE :EXCHANGE 'EXCHANGE-TCP-PACKETS))(DEFUN RPC-CREATE-TCP-STREAM (DESTADDR DESTSOCKET)   "Create a new RPC Stream with the vector of functions handling a bi-directional TCP stream between the devices."   (LET* ((OSTR (IL:TCP.OPEN (IF (INTEGERP DESTADDR)                                 DESTADDR                                 (SETQ DESTADDR (RPC-RESOLVE-HOST DESTADDR)))                       (IF (INTEGERP DESTSOCKET)                           DESTSOCKET                           (SETQ DESTSOCKET (RPC-FIND-SOCKET DESTADDR (RPC-RESOLVE-PROG DESTSOCKET                                                                              NIL 'TCP)                                                   'TCP)))                       NIL                       'IL:ACTIVE                       'IL:OUTPUT))          (RPCSTREAM (MAKE-RPC-STREAM :METHODS *TCP-RPC-METHODS* :OUTSTREAM OSTR :INSTREAM                            (IL:TCP.OTHER.STREAM OSTR)                            :OUTSTRING                            (IL:\\ALLOCBLOCK (FOLDLO *BYTES-PER-RM-OUTREC* *BYTES-PER-CELL*))                            :DESTADDR DESTADDR :DESTSOCKET DESTSOCKET)))         (TCP-INITIALIZE RPCSTREAM DESTADDR DESTSOCKET)         RPCSTREAM))(DEFUN TCP-INITIALIZE (RPCSTREAM DESTADDR DESTSOCKET)   (DECLARE (IGNORE DESTADDR DESTSOCKET))   (IL:* IL:|;;| "Prepare RPCSTREAM for new output.  All we need to do is leave OUTBYTEPTR pointing after the 4 bytes we're saving for the header.  Scratch buffer is in the field OUTSTRING, put there when the stream was created.")   (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)         4))(DEFUN TCP-CLOSE (RPCSTREAM)   "Deallocate an RPC Stream. Tries to cleanup after itself."   (CLOSE (RPC-STREAM-OUTSTREAM RPCSTREAM))   (CLOSE (RPC-STREAM-INSTREAM RPCSTREAM)))(DEFUN EXCHANGE-TCP-PACKETS (RPCSTREAM ERRORFLG XID)   "Given the specified timeout, this routine writes onto the TCP stream and waits until it either gets a reply or times out."   (IL:* IL:|;;|  "Yes, I know EXCHANGE-TCP-PACKETS is a misnomer, but I wanted it to parallel Exchange-UDP-Packets")   (LET* ((OUTSTREAM (RPC-STREAM-OUTSTREAM RPCSTREAM))          (INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM))          (TIMEOUT *MSEC-UNTIL-TIMEOUT*)          (TIMER (IL:SETUPTIMER (OR TIMEOUT 60000)))          (EVENT (IL:TCP.SOCKET.EVENT (IL:TCP.STREAM.SOCKET OUTSTREAM)))          (DEBUGME (AND (NUMBERP *DEBUG*)                        (> *DEBUG* 4)))          (TIMEOUT-COUNT 0))         (WHEN DEBUGME (BREAK "Ready to write to tcp stream"))         (RM-FORCEOUTPUT RPCSTREAM T)                        (IL:* IL:\;                                                            "Finish whatever fragment we have")         (IL:FORCEOUTPUT OUTSTREAM)         (WHEN DEBUGME (FORMAT-T "Output forced out. Will wait ~a msec for reply~%" TIMEOUT))         (LOOP (IL:AWAIT.EVENT EVENT TIMER T)               (COND                  ((LISTEN INSTREAM)                   (RM-NEW-INPUT-RECORD RPCSTREAM)                   (UNLESS (= (GETUNSIGNED RPCSTREAM)                              XID)                          (ERROR "RPC Reply ID does not match sent ID."))                   (RETURN T))                  (T (WHEN (AND TIMEOUT (IL:TIMEREXPIRED? TIMER))                                                             (IL:* IL:\; "Timed out")                         (LET ((RESULT (RPC-HANDLE-TIMEOUT RPCSTREAM (INCF TIMEOUT-COUNT)                                              ERRORFLG)))                              (UNLESS (EQ RESULT :CONTINUE)                                     (RETURN RESULT))))                     (IL:SETUPTIMER (OR TIMEOUT 60000)                            TIMER)                           (IL:* IL:\;                                                            "Reset the timer and keep going")                     )))))(DEFUN RM-NEW-INPUT-RECORD (RPCSTREAM)   "Call at start of new rm record.  Consumes the record length and stores it in INBYTEPTR."   (IL:* IL:|;;| "TCP XDR streams consist of a sequence of \"records\", one per transaction.  Each record contains one or more fragments.  The first bit of each fragment is the \"last fragment\" flag; the next 31 bits give the length in bytes of the rest of the fragment.")   (IL:* IL:|;;| "In our management of TCP streams, we use the INBYTEPTR field to hold the number of bytes remaining in the fragment on input, or the current length of the fragment (including the 4 byte length) on output.")   (LET* ((INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM))          (NBYTES (INTEGER-FROM-BYTES (LOGAND (IL:BIN INSTREAM)                                             127)            (IL:* IL:\;                                                            "Kill last fragment bit, if any.")                         (IL:BIN INSTREAM)                         (IL:BIN INSTREAM)                         (IL:BIN INSTREAM))))         (WHEN *DEBUG* (FORMAT-T "RM Record is to be ~d bytes.~%" NBYTES))         (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)               NBYTES)))(DEFUN TCP-GETBYTE (RPCSTREAM)   "Read in one byte from an RM Record"   (LET ((BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (WHEN (EQL BYTESLEFT 0)            (RM-NEW-INPUT-RECORD RPCSTREAM)            (SETQ BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)              (1- BYTESLEFT))        (IL:BIN (RPC-STREAM-INSTREAM RPCSTREAM))))(DEFUN TCP-GETCELL (RPCSTREAM)   "Read in a 4 byte signed integer."   (LET ((BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (IF (< BYTESLEFT 4)            (IL:* IL:|;;| "Not enough bytes left in the record, so do it the slow way.")            (INTEGER-FROM-BYTES (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM))            (LET ((STREAM (RPC-STREAM-INSTREAM RPCSTREAM)))                 (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                       (- BYTESLEFT 4))                 (INTEGER-FROM-BYTES (IL:BIN STREAM)                        (IL:BIN STREAM)                        (IL:BIN STREAM)                        (IL:BIN STREAM))))))(DEFUN TCP-GETUNSIGNED (RPCSTREAM)   "Read in a 4 byte unsigned integer."   (LET ((BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM)))        (IF (< BYTESLEFT 4)            (IL:* IL:|;;| "Not enough bytes left in the record, so do it the slow way.")            (UNSIGNED-FROM-BYTES (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM)                   (TCP-GETBYTE RPCSTREAM))            (LET ((STREAM (RPC-STREAM-INSTREAM RPCSTREAM)))                 (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                       (- BYTESLEFT 4))                 (UNSIGNED-FROM-BYTES (IL:BIN STREAM)                        (IL:BIN STREAM)                        (IL:BIN STREAM)                        (IL:BIN STREAM))))))(DEFUN TCP-GETRAWBYTES (RPCSTREAM BASE OFFSET NBYTES)   "Read NBYTES bytes into a new string from as many RM records as needed."   (LET ((INSTREAM (RPC-STREAM-INSTREAM RPCSTREAM))         (FIRST OFFSET)         BYTESLEFT)        (IL:* IL:|;;| "FIRST is the index at which to place the next byte.")        (IL:* IL:|;;| "NBYTES is the number of bytes remaining to be read.")        (IL:* IL:|;;| "BYTESLEFT is the number of  bytes remaining in the current RM Record.")        (LOOP (WHEN (<= NBYTES (SETQ BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM)))                  (IL:* IL:|;;|                 "Here is the normal case --- the string all comes from the same RM record.")                  (OR (ZEROP NBYTES)                      (IL:\\BINS INSTREAM BASE FIRST NBYTES))                  (DECF (RPC-STREAM-INBYTEPTR RPCSTREAM)                        NBYTES)                  (RETURN BASE))              (IL:\\BINS INSTREAM BASE FIRST BYTESLEFT)              (RM-NEW-INPUT-RECORD RPCSTREAM)              (INCF FIRST BYTESLEFT)              (DECF NBYTES BYTESLEFT))))(DEFUN TCP-SKIPBYTES (RPCSTREAM NBYTES)   (LET ((BYTESLEFT (RPC-STREAM-INBYTEPTR RPCSTREAM))         (S (RPC-STREAM-INSTREAM RPCSTREAM)))        (COND           ((< BYTESLEFT NBYTES)                             (IL:* IL:\;                                                          "Crossing an RM boundary, so do it slowly")            (DOTIMES (I NBYTES)                (TCP-GETBYTE RPCSTREAM)))           (T (SETF (RPC-STREAM-INBYTEPTR RPCSTREAM)                    (- BYTESLEFT NBYTES))              (DOTIMES (I NBYTES)                  (IL:BIN S))))))(DEFUN TCP-PUTBYTE (RPCSTREAM BYTE)   (LET ((RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (UNLESS (< RMOFFSET *BYTES-PER-RM-OUTREC*)            (RM-FORCEOUTPUT RPCSTREAM NIL)            (SETQ RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (IL:\\PUTBASEBYTE (RPC-STREAM-OUTSTRING RPCSTREAM)               RMOFFSET BYTE)        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              (1+ RMOFFSET))))(DEFUN TCP-PUTCELL (RPCSTREAM VALUE)   (LET ((RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (WHEN (> RMOFFSET (- *BYTES-PER-RM-OUTREC* 4))       (IL:* IL:\;                                                            "Don't have room for 4 more bytes")            (RM-FORCEOUTPUT RPCSTREAM)            (SETQ RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (PUTBASE-INTEGER (RPC-STREAM-OUTSTRING RPCSTREAM)               RMOFFSET VALUE)        (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)              (+ RMOFFSET 4))))(DEFUN TCP-PUTRAWBYTES (RPCSTREAM BASE OFFSET NBYTES)   (IL:* IL:|;;| "Write a sequence of NBYTES bytes to the output stream.")   (LET ((FIRST OFFSET)         (SCRATCH (RPC-STREAM-OUTSTRING RPCSTREAM)))        (IL:* IL:|;;| "FIRST is the index of the next byte to be written.")        (IL:* IL:|;;| "NBYTES is the number of bytes remaining to be written out.")        (LOOP (LET* ((RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM))                     (CHUNKSIZE (MIN NBYTES (- *BYTES-PER-RM-OUTREC* RMOFFSET))))                                                             (IL:* IL:\;                                                 "CHUNKSIZE is how much we can write in this record")                    (IL:\\MOVEBYTES BASE FIRST SCRATCH RMOFFSET CHUNKSIZE)                    (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)                          (+ RMOFFSET CHUNKSIZE))                    (WHEN (EQL 0 (DECF NBYTES CHUNKSIZE))    (IL:* IL:\; "We've written it all")                        (RETURN))                    (IL:* IL:|;;| "Have to flush this record and start a new one for the rest")                    (RM-FORCEOUTPUT RPCSTREAM NIL)                    (INCF FIRST CHUNKSIZE)))))(DEFUN TCP-ZEROBYTES (RPCSTREAM NBYTES)   (LET ((RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (WHEN (> RMOFFSET (- *BYTES-PER-RM-OUTREC* NBYTES))  (IL:* IL:\;                                                            "Don't have room for this many bytes")            (RM-FORCEOUTPUT RPCSTREAM)            (SETQ RMOFFSET (RPC-STREAM-OUTBYTEPTR RPCSTREAM)))        (LET ((BUF (RPC-STREAM-OUTSTRING RPCSTREAM)))             (DOTIMES (I NBYTES)                 (IL:\\PUTBASEBYTE BUF RMOFFSET 0)                 (INCF RMOFFSET))             (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)                   RMOFFSET))))(DEFUN RM-FORCEOUTPUT (RPCSTREAM &OPTIONAL FINAL-FRAGMENT-FLAG)   (IL:* IL:|;;|  "Send the current record.  If FINAL-FRAGMENT-FLAG is true, set the \"final fragment\" bit.")   (LET* ((BUFFER (RPC-STREAM-OUTSTRING RPCSTREAM))          (TOTAL-LENGTH (RPC-STREAM-OUTBYTEPTR RPCSTREAM))          (NET-LENGTH (- TOTAL-LENGTH 4)))         (PUTBASE-INTEGER BUFFER 0 NET-LENGTH)               (IL:* IL:\;                                                            "Fill in the 4 bytes of header")         (WHEN FINAL-FRAGMENT-FLAG             (IL:* IL:|;;|       "If this is the final fragment of the RM record, OR in a one to high order bit of RM header.")             (IL:\\PUTBASE BUFFER 0 (LOGIOR 32768 (IL:\\GETBASE BUFFER 0))))         (IL:\\BOUTS (RPC-STREAM-OUTSTREAM RPCSTREAM)                BUFFER 0 TOTAL-LENGTH)                       (IL:* IL:\;                                                            "Now reinitialize the buffer")         (SETF (RPC-STREAM-OUTBYTEPTR RPCSTREAM)               4)))(IL:* IL:\; "Low-level")(IL:DEFINEQ(il:tcp.stream.socket(il:lambda (stream) (il:* il:\; "Edited 27-Apr-88 21:51 by drc:") (il:* il:|;;;| "Return IPSOCKET of a TCP Stream") (il:|fetch| il:tcb.ipsocket il:|of| (il:|fetch| il:f1 il:|of| stream))))(il:tcp.socket.event(il:lambda (il:ipsocket) (il* il:\; "Edited 27-Apr-88 21:51 by drc:") (il:* il:|;;;| "For some reason Eric did not include this function, but it is identical to UDP.SOCKET.NUMBER, anyway.") (il:|fetch| (il:ipsocket il:ipsevent) il:|of| il:ipsocket))))(IL:PUTPROPS IL:RPCTCP IL:COPYRIGHT ("Xerox Corporation" 1988 1990))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL (14791 15299 (IL:TCP.STREAM.SOCKET 14804 . 15019) (IL:TCP.SOCKET.EVENT 15021 . 15297)))))IL:STOP